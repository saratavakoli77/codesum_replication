System . Web . Script . Serialization . JavaScriptSerializer oSerializer = new System . Web . Script . Serialization . JavaScriptSerializer ( ) ; string sJSON = oSerializer . Serialize ( YOUR CLASS HERE ) ; <EOF>
private void CopyWithProgress ( string [ ] filenames ) { pBar1 . Visible = true ; pBar1 . Minimum = CODE_INTEGER ; pBar1 . Maximum = filenames . Length ; pBar1 . Value = CODE_INTEGER ; pBar1 . Step = CODE_INTEGER ; for ( int x = CODE_INTEGER ; x <= filenames . Length ; x ++ ) { if ( CopyFile ( filenames [ x - CODE_INTEGER ] ) == true ) { pBar1 . PerformStep ( ) ; } } } <EOF>
var dictionary = instructors . Elements ( CODE_STRING ) . Select ( ( element , index ) = > new { element , index } ) . ToDictionary ( x = > x . index + CODE_INTEGER , x = > x . element . Value ) ; <EOF>
var p = Process . Start ( . . . ) ; if ( ! p . WaitForExit ( CODE_INTEGER ) ) { p . Kill ( ) ; } <EOF>
string allValues = string . Join ( System . Environment . NewLine , valueCollection . AllKeys . Select ( key = > valueCollection [ key ] ) ) ; <EOF>
string sInvite = CODE_STRING + sGuest + CODE_STRING + sBride + CODE_STRING + sGroom + CODE_STRING ; Console . WriteLine ( sInvite ) ; <EOF>
var lines = str . Split ( ' ' ) . Where ( s = > ! string . IsNullOrWhiteSpace ( s ) ) ; str = string . Join ( " " , lines ) ; <EOF>
protected void Application_Start ( ) { HttpConfiguration config = GlobalConfiguration . Configuration ; config . Formatters . JsonFormatter . SerializerSettings . ContractResolver = new CamelCasePropertyNamesContractResolver ( ) config . Formatters . JsonFormatter . UseDataContractJsonSerializer = false ; } <EOF>
gridView1 . OptionsBehavior . AllowAddRows = DevExpress . Utils . DefaultBoolean . True ; gridView1 . OptionsBehavior . AllowDeleteRows = DevExpress . Utils . DefaultBoolean . True ; gridView1 . OptionsView . NewItemRowPosition = NewItemRowPosition . Bottom ; var bindingList = new BindingList < IPerson > ( ) { new Person ( ) { Name = CODE_STRING , Age = CODE_INTEGER } , new Person ( ) { Name = CODE_STRING , Age = CODE_INTEGER } , } ; bindingList . AddingNew += bindingList_AddingNew ; bindingList . AllowNew = true ; gridControl1 . DataSource = bindingList ; } void bindingList_AddingNew ( object sender , AddingNewEventArgs e ) { e . NewObject = new Person ( ) ; } public interface IPerson { string Name { get ; set ; } int Age { get ; set ; } } class Person : IPerson { public string Name { get ; set ; } public int Age { get ; set ; } } <EOF>
WriteableBitmap wb = new WriteableBitmap ( CODE_INTEGER , CODE_INTEGER ) ; await wb . SetSourceAsync ( str ) ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { SqlConnection con = new SqlConnection ( CODE_STRING ) ; SqlCommand Command = con . CreateCommand ( ) ; SqlDataAdapter dp = new SqlDataAdapter ( CODE_STRING , con ) ; dp . SelectCommand . Parameters . AddWithValue ( CODE_STRING , dateTimePicker1 . Value ) ; DataSet ds = new DataSet ( ) ; dp . Fill ( ds ) ; DataGridView d1 = new DataGridView ( ) ; d1 . DataSource = ds ; d1 . DataMember = ds . Tables [ CODE_INTEGER ] . TableName ; this . Controls . Add ( d1 ) ; } <EOF>
pnlSettings . Location = new Point ( CODE_INTEGER , CODE_INTEGER ) ; pnlSettings . Size = this . ClientSize ; this . Controls . Add ( pnlSettings ) ; <EOF>
var currentProcess = System . Diagnostics . Process . GetCurrentProcess ( ) ; var matchingProcesses = System . Diagnostics . Process . GetProcesses ( ) . Where ( x = > x . Id != currentProcess . Id && x . ProcessName == currentProcess . ProcessName ) ; foreach ( var process in matchingProcesses ) { process . Kill ( ) ; } <EOF>
var source = " sometext \ t \ t \ t \ t00 : CODE_INTEGER \ t \ t \ t \ t05 : CODE_INTEGER \ t \ t \ t \ t . . . . " var result = source . Split ( new [ ] { " \ t \ t \ t \ t " } , StringSplitOptions . None ) ; <EOF>
var result = employees . SelectMany ( x = > x . WorkDays , ( employeeObj , workDays ) = > new { employeeObj , workDays } ) . GroupBy ( x = > x . workDays . Date ) . Select ( x = > new { Date = x . Key , NameAndHours = x . Select ( z = > new { Name = z . employeeObj . Name , Hours = z . workDays . Hours } ) } ) . ToList ( ) ; <EOF>
DateTime . FromOADate ( [ double ] ) <EOF>
HtmlDocument doc = new HtmlDocument ( ) ; doc . Load ( CODE_STRING ) ; List < string > mp3Links = new List < string ( ) ; foreach ( HtmlNode link in doc . DocumentElement . SelectNodes ( CODE_STRING ] ) { if ( link != null ) { if ( link [ CODE_STRING ] . EndsWith ( CODE_STRING ) ) { mp3Links . Add ( link [ CODE_STRING ] . Value ) ; } } } <EOF>
Application . Run ( ) <EOF>
var context = new DbContext ( ) ; var entityToUpdate = context . Set < Type > ( ) . FirstOrDefault ( x = > x . Id == idToUpdate ) ; if ( entityToUpdate != null ) { entityToUpdate . Value1 = newValue1 ; entityToUpdate . Value2 = newValue2 ; context . SaveChanges ( ) ; } <EOF>
var charSet = new HashSet < char > ( CODE_STRING + Regex . Unescape ( CODE_STRING ) ) ; string input = CODE_STRING ; var words = input . Split ( ) . Where ( s = > ! String . IsNullOrWhiteSpace ( s ) ) . Where ( s = > s . All ( c = > charSet . Contains ( c ) ) ) . ToList ( ) ; <EOF>
textbox . text = string . Empty ; <EOF>
modify = Regex . Replace ( modify , CODE_STRING , CODE_STRING ) ; <EOF>
PrinterSettings settings = new PrinterSettings ( ) ; PrintDocument printDoc = new PrintDocument ( ) ; settings . Copies = Copiesnumber ; printDoc . PrinterSettings = settings ; PageSettings MyPage = new PageSettings ( settings ) ; printDoc . DefaultPageSettings = MyPage ; <EOF>
CREATE PROCEDURE [ dbo ] . [ usp_ExecuteBulkInsertTask ] ( @dataFile VARCHAR ( CODE_INTEGER ) , @bulkInsertFormatFile VARCHAR ( CODE_INTEGER ) , @tableName VARCHAR ( CODE_INTEGER ) ) AS BEGIN BEGIN TRY DECLARE @SQL Varchar ( CODE_INTEGER ) SET @SQL = ' BULK INSERT ' + @tableName + ' FROM ' ' ' + @dataFile + ' ' ' WITH ( formatfile = ' ' ' + @bulkInsertFormatFile + ' ' ' , FIRSTROW = CODE_INTEGER ) ' EXEC sp_sqlexec @SQL END TRY BEGIN CATCH -- error handling END CATCH END <EOF>
System . Net . Mail <EOF>
Where = CODE_STRING <EOF>
NpgsqlDataAdapter da = new NpgsqlDataAdapter ( CODE_STRING + cbMarca . Text . ToUpper ( ) + CODE_STRING , conn ) ; <EOF>
string date = string . Format ( CODE_STRING , DateTime . Now ) ; <EOF>
var dropDown = GridView1 . Rows [ GridView1 . EditIndex ] . FindControl ( CODE_STRING ) as DropDownList ; <EOF>
long num = CODE_INTEGER ; System . Diagnostics . Debug . WriteLine ( CODE_STRING + num . ToString ( CODE_STRING ) ) ; <EOF>
public void Save ( Article article ) { ArticleDAL art = new ArticleDAL ( ) ; art . Save ( article ) ; } <EOF>
var result = from ap in AvailablePacks join rp in RecommendedPacks on ap . PackID equals rp . PackID select new { PackQuantity = ap . Quantity } ; <EOF>
var t = str . split ( CODE_CHAR ) ; var result = ' < Entry Name = CODE_STRING Code = CODE_STRING / > ' ; <EOF>
/// <summary> /// Writes a string followed by a newline to the console /// </summary> /// <param name="s">The value to write</param> public void WriteLine ( string s ) { } /// <summary> /// Writes the string representation of an object followed by a newline to the console /// </summary> /// <param name="o">The value to write</param> public void WriteLine ( object o ) { } <EOF>
private void richTextBox1_SelectionChanged ( object sender , EventArgs e ) { int index = richTextBox1 . SelectionStart ; int line = richTextBox1 . GetLineFromCharIndex ( index ) ; label1 . Text = CODE_STRING + line . ToString ( ) ; } <EOF>
private void update_sql ( object sender , KeyPressEventArgs e ) { if ( e . KeyChar == ( char ) CODE_INTEGER ) { fletera_facturasTableAdapter . Update ( indarDataSet2 . fletera_facturas ) ; * * indarDataSet2 . fletera_facturas . AcceptChanges ( ) ; * * } } <EOF>
var filtered = dt . AsEnumerable ( ) . Where ( r = > r . Field < int > ( CODE_STRING ) < CODE_INTEGER ) ; DataView dv1 = filtered . AsDataView ( ) ; DataView dv2 = filtered . Where ( r = > r . Field < string > ( CODE_STRING ) > CODE_INTEGER ) . AsDataView ( ) ; <EOF>
String source = this . ServiceName ; <EOF>
DataRow [ ] foundRows = rightFileDT . Select ( expression ) ; if ( foundRows . Length == CODE_INTEGER ) { matchedFileDataRow [ CODE_STRING ] = CODE_STRING ; } else { matchedFileDataRow [ CODE_STRING ] = CODE_STRING ; } matchedFileDataRow [ CODE_STRING ] = leftFileMatch ; matchedFileDT . Rows . Add ( matchedFileDataRow ) ; <EOF>
style . ParagraphFormat . OutlineLevel = OutlineLevel . BodyText ; <EOF>
public void jsonHome_GetDataCompleted ( object snder , DownloadStringCompletedEventArgs e ) { NewReleasesCharts homeData = JsonConvert . DeserializeObject < NewReleasesCharts > ( e . Result ) ; const int limit = CODE_INTEGER ; this . listRelease . ItemsSource = homeData . results . featuredReleases . Take ( limit ) ; } <EOF>
foreach ( Form form in pnlMain . Controls . OfType < Form > ( ) . ToArray ( ) ) <EOF>
String . Format ( CODE_STRING , dataTable . Rows [ CODE_INTEGER ] [ CODE_STRING ] ) ; String . Format ( CODE_STRING , dataTable . Rows [ CODE_INTEGER ] [ CODE_STRING ] ) ; <EOF>
var innerInnerQuery = from g in GROUPS where NPI == CODE_STRING && TAXID == CODE_STRING && ADDRESSTYPE_RTK == CODE_STRING select g . GROUP_K ; var innerQuery = from ga in GROUPADDRESS where innerInnerQuery . Contains ( ga . GROUP_K ) select ga . ADDRESS_K ; var query = from a in ADDRESSES where ZIPCODE == CODE_STRING && innerQuery . Contains ( a . ADDRESS_K ) select a ; <EOF>
var route = listOfRouteObj . SingleOrDefault ( route = > route . RouteID . Equals ( CODE_STRING ) ) ; if ( route != null ) route . Priority = CODE_INTEGER ; <EOF>
private void userTextBox_TextChanged ( object sender , EventArgs e ) { string userInput = userTextBox . Text ; userInput = userInput . Trim ( ) ; string [ ] wordCount = userInput . Split ( null ) ; int charCount = CODE_INTEGER ; foreach ( var word in wordCount ) charCount += word . Length ; wordCountOutput . Text = wordCount . Length . ToString ( ) ; charCountOutput . Text = charCount . ToString ( ) ; } <EOF>
var dateTimesDescending = myDic . Values . OrderByDescending ( d = > d ) ; <EOF>
int firstDayOfWeek = ( int ) DayOfWeek . Monday ; var q = from u in TblUsers let date = u . CreateDate . Value let num = date . DayOfYear - CODE_INTEGER let num2 = ( ( int ) date . DayOfWeek ) - ( num % CODE_INTEGER ) let num3 = ( ( num2 - firstDayOfWeek ) + CODE_INTEGER ) % CODE_INTEGER let week = ( ( ( num + num3 ) / CODE_INTEGER ) + CODE_INTEGER ) group u by week into g select new { Week = g . Key , Count = g . Count ( ) } ; <EOF>
string s = Regex . Replace ( CODE_STRING , CODE_STRING , m = > CODE_STRING ) ; <EOF>
string arguments = string . Format ( CODE_STRING , intputFileName , outputFileName " ) ; var startInfo = new ProcessStartInfo { Arguments = arguments , Filename = CODE_STRING } ; Process . Start ( startInfo ) . WaitForExit ( ) ; <EOF>
public class MainWindowViewModel : ViewModelBase { public ViewModel1 ViewModel1 { get ; set ; } public ViewModel2 ViewModel2 { get ; set ; } public ViewModel3 Model3 { get ; set ; } public MainWindowViewModel ( ) { ViewModel1 = new ViewModel1 ( ) ; ViewModel2 = new ViewModel2 ( ) ; ViewModel3 = new ViewModel3 ( ) ; ViewModel1 . PropertyChanged += ( s , e ) = > { if ( e . PropertyName == CODE_STRING ) { IsBusy = ViewModel1 . IsBusy ; } } } } <EOF>
Random rnd = new Random ( ) ; JArray obj = ( JArray ) JsonConvert . DeserializeObject ( json ) ; dynamic item = obj [ rnd . Next ( CODE_INTEGER , obj . Count ) ] ; Console . WriteLine ( item . title ) ; <EOF>
ServiceConfiguration . ServiceName <EOF>
<EOF>
[ HKEY_CURRENT_USER \ Software \ Microsoft \ Internet Explorer \ Zoom ] CODE_STRING = dword : CODE_INTEGER CODE_STRING = dword : CODE_INTEGER <EOF>
Dim soapHeader As XmlElement = _xmlRequest . CreateElement ( CODE_STRING , CODE_STRING , CODE_STRING ) Dim soapBody As XmlElement = _xmlRequest . CreateElement ( CODE_STRING , CODE_STRING , CODE_STRING ) <EOF>
Window window = new Window { Title = CODE_STRING , Content = new UserDataControl2 ( CODE_STRING ) ; } ; string _info ; public UserDataControl2 ( string info ) { _info = info . } ; <EOF>
contactAddress = new [ ] { CODE_STRING , CODE_STRING } ; <EOF>
File . Replace <EOF>
object GetSomething ( ) { var x = new { a = CODE_STRING , i = CODE_INTEGER } ; return x ; } <EOF>
AutoScroll = true <EOF>
Dim tasks = { Task . Delay ( CODE_INTEGER ) . ContinueWith ( Function ( _ ) CODE_INTEGER ) , Task . Delay ( CODE_INTEGER ) . ContinueWith ( Function ( _ ) CODE_INTEGER ) , Task . Delay ( CODE_INTEGER ) . ContinueWith ( Function ( _ ) CODE_INTEGER ) , Task . Delay ( CODE_INTEGER ) . ContinueWith ( Function ( _ ) CODE_INTEGER ) , Task . Delay ( CODE_INTEGER ) . ContinueWith ( Function ( _ ) CODE_INTEGER ) , } <EOF>
public bool BatchInsert ( string table , IEnumerable < string > values ) { var sql = new StringBuilder ( ) ; sql . Append ( CODE_STRING + table + CODE_STRING ) ; var newValues = values . Where ( x = > ! x . StartsWith ( CODE_STRING ) ) . Select ( x = > string . Format ( CODE_STRING , x . Replace ( CODE_STRING , CODE_STRING ) ) ) ; sql . Append ( string . Join ( CODE_STRING , CODE_STRING , newValues . ToArray ( ) ) ) ; sql . Append ( CODE_STRING ) ; using ( var comm = new SqlCommand ( statement , connectionPCICUSTOM ) ) { try { comm . Connection . Open ( ) ; comm . ExecuteNonQuery ( ) ; } catch ( Exception e ) { KaplanFTP . errorMsg = CODE_STRING + e . Message ; } finally { comm . Connection . Close ( ) ; } } return true ; } <EOF>
Persons = new ObservableCollection < Person > ( from i in Persons orderby i . Age select i ) ; <EOF>
System . Drawing . Printing . PageSettings pg = new System . Drawing . Printing . PageSettings ( ) ; pg . Margins . Top = CODE_INTEGER ; pg . Margins . Bottom = CODE_INTEGER ; pg . Margins . Left = CODE_INTEGER ; pg . Margins . Right = CODE_INTEGER ; System . Drawing . Printing . PaperSize size = new PaperSize ( ) ; size . RawKind = ( int ) PaperKind . A5 ; pg . PaperSize = size ; reportViewer1 . SetPageSettings ( pg ) ; this . reportViewer1 . RefreshReport ( ) ; <EOF>
void listBox1_DragDrop ( object sender , DragEventArgs e ) { e . Effect = DragDropEffects . Copy ; } void listBox1_DragEnter ( object sender , DragEventArgs e ) { e . Effect = DragDropEffects . Copy ; } <EOF>
ManagementObjectSearcher intquery1 = new ManagementObjectSearcher ( CODE_STRING + comboBox1 . Items [ comboBox1 . SelectedIndex ] . ToString ( ) + CODE_STRING ) ; ManagementObjectCollection queryCollection1 = intquery1 . Get ( ) ; queryCollection1 = intquery1 . Get ( ) ; foreach ( ManagementObject mo1 in queryCollection1 ) { string [ ] addresses = ( string [ ] ) mo1 [ CODE_STRING ] ; string [ ] gateways = ( string [ ] ) mo1 [ CODE_STRING ] ; string [ ] subnets = ( string [ ] ) mo1 [ CODE_STRING ] ; if ( addresses != null ) { listBox1 . Items . Clear ( ) ; foreach ( string ip in addresses ) { listBox1 . Items . Add ( ip ) ; } } if ( gateways != null ) { foreach ( string gateway in gateways ) { TxtGateway . Text = ( gateway ) ; } } if ( subnets != null ) { foreach ( string subnet in subnets ) { richTextBox1 . Text = ( subnet ) ; } } } <EOF>
string text = CODE_STRING ; HtmlDocument doc = new HtmlDocument ( ) ; doc . LoadHtml ( text ) ; var nodes = doc . DocumentNode . SelectNodes ( CODE_STRING ) ; foreach ( HtmlNode node in nodes ) { node . Remove ( ) ; } String result = doc . DocumentNode . InnerHtml ; <EOF>
if ( FormsAuthentication . Authenticate ( username , password ) ) { FormsAuthentication . SetAuthCookie ( username , false ) ; FormsAuthentication . RedirectFromLoginPage ( username , false ) ; } else { } <EOF>
string json = CODE_STRING ; var list = JsonConvert . DeserializeObject < List < KeyValuePair < string , List < KeyValuePair < string , string > > > > > ( json ) ; var dict = list . ToDictionary ( x = > x . Key , x = > x . Value . ToDictionary ( y = > y . Key , y = > y . Value ) ) ; <EOF>
TextBox2 . Text = System . Text . RegularExpressions . Regex . Replace ( TextBox1 . Text , CODE_STRING , CODE_STRING , RegexOptions . Multiline ) ; <EOF>
[ StructLayout ( LayoutKind . Explicit , Pack = CODE_INTEGER ) ] public unsafe struct PNIO_ADDR { [ FieldOffset ( CODE_INTEGER ) ] public PNIO_IO_TYPE AddrType ; [ FieldOffset ( CODE_INTEGER ) ] public PNIO_IO_TYPE IODataType ; [ FieldOffset ( CODE_INTEGER ) ] public fixed uint Reserved [ CODE_INTEGER ] ; [ FieldOffset ( CODE_INTEGER ) ] [ MarshalAs ( UnmanagedType . U4 ) ] public uint Addr ; } <EOF>
string entryid = . . . var outlookApp = new Outlook . Application ( ) ; var outlookNS = outlookApp . Session ; var fldContacts = outlookNS . GetDefaultFolder ( Outlook . OlDefaultFolders . olFolderContacts ) ; var contact = outlookNS . GetItemFromID ( entryid , fldContacts . StoreID ) ; <EOF>
Enum . GetValues ( typeof ( View ) ) . Cast < View > ( ) . Take ( CODE_INTEGER ) ; <EOF>
var temp = CODE_STRING ; var regInput = new Regex ( CODE_STRING ) ; var result = regInput . Replace ( temp , CODE_STRING ) ; <EOF>
. OrderBy ( z = > z . AnswerId ) <EOF>
List < T > . BinarySearch <EOF>
SnapIn . Console . ShowDialog <EOF>
using System ; namespace ConsoleApplication1 { class Program { static void Main ( string [ ] args ) { Console . Title = CODE_STRING ; Console . Write ( CODE_STRING ) ; DateTime time1 = DateTime . Parse ( Console . ReadLine ( ) ) ; Console . WriteLine ( ) ; Console . Write ( CODE_STRING ) ; TimeSpan time2 = TimeSpan . Parse ( Console . ReadLine ( ) ) ; DateTime launch = time1 . Subtract ( time2 ) ; Console . WriteLine ( CODE_STRING , launch . ToString ( ) ) ; Console . ReadLine ( ) ; } } } <EOF>
class MathCalculations { private Func < double , double , double > min = Math . Min ; private Func < double , double , double > max = Math . Max ; private Func < double , double > sin = Math . Sin ; private Func < double , double > tanh = Math . Tanh ; void DoCalculations ( ) { var r = min ( max ( sin ( CODE_INTEGER ) , sin ( CODE_INTEGER ) ) , tanh ( CODE_INTEGER ) ) ; } } <EOF>
enum Colors { Red , Green , Blue } Colors color = ( Colors ) System . Enum . Parse ( typeof ( Colors ) , CODE_STRING ) ; <EOF>
bool bCreated ; var ev = new EventWaitHandle ( true , EventResetMode . AutoReset , CODE_STRING , out bCreated ) ; <EOF>
for ( numberOfBills [ CODE_INTEGER ] = CODE_INTEGER ; totalAmount >= CODE_INTEGER ; numberOfBills [ CODE_INTEGER ] ++ ) { totalAmount = totalAmount - CODE_INTEGER ; } for ( numberOfBills [ CODE_INTEGER ] = CODE_INTEGER ; totalAmount >= CODE_INTEGER ; numberOfBills [ CODE_INTEGER ] ++ ) { totalAmount = totalAmount - CODE_INTEGER ; } for ( numberOfBills [ CODE_INTEGER ] = CODE_INTEGER ; totalAmount >= CODE_INTEGER ; numberOfBills [ CODE_INTEGER ] ++ ) { totalAmount = totalAmount - CODE_INTEGER ; } for ( numberOfBills [ CODE_INTEGER ] = CODE_INTEGER ; totalAmount > CODE_INTEGER ; numberOfBills [ CODE_INTEGER ] ++ ) { totalAmount = totalAmount - CODE_INTEGER ; } <EOF>
FileStream readStream = new FileStream ( FILE_NAME , FileMode . Open , FileAccess . Read ) ; BinaryReader read = new BinaryReader ( readStream ) ; while ( read . PeekChar ( ) != - CODE_INTEGER ) { book . readDataFrom ( read ) ; book . display ( ) ; } <EOF>
if ( item . PropertyType . IsGenericType ) { if ( item . PropertyType . GetGenericType ( ) == typeof ( Nullable < > ) ) { var valueType = item . PropertyType . GetGenericArguments ( ) [ CODE_INTEGER ] ; } } <EOF>
Type type2 = Type . GetType ( type . AssemblyQualifiedName ) ; <EOF>
var xDoc = XDocument . Load ( fname ) ; XNamespace ns = CODE_STRING ; var folder = xDoc . Root . Element ( ns + CODE_STRING ) . Value ; <EOF>
public static String getJsonData ( String webServiceName , String parameter ) { try { String urlFinal = SERVICE_URI + CODE_STRING + webServiceName + CODE_STRING ; HttpPost postMethod = new HttpPost ( urlFinal . trim ( ) + CODE_STRING + URLEncoder . encode ( parameter , CODE_STRING ) ) ; postMethod . setHeader ( CODE_STRING , CODE_STRING ) ; postMethod . setHeader ( CODE_STRING , CODE_STRING ) ; HttpClient hc = new DefaultHttpClient ( ) ; HttpResponse response = hc . execute ( postMethod ) ; Log . i ( CODE_STRING , CODE_STRING + response . toString ( ) ) ; HttpEntity entity = response . getEntity ( ) ; String responseText = EntityUtils . toString ( entity ) ; string = responseText ; Log . i ( CODE_STRING , CODE_STRING + responseText ) ; } catch ( Exception e ) { } return string ; } <EOF>
protected void Page_PreRender ( object sender , EventArgs e ) { foreach ( ListItem item in ckl_EditRole . Items ) { item . Attributes [ CODE_STRING ] = GetRoleTooltip ( item . Value ) ; } } private static string GetRoleTooltip ( string p ) { } <EOF>
var parentRow = ( GridViewRow ) sender . NamingContainer . NamingContainer . NamingContainer ; var index = parentRow . RowIndex ; <EOF>
XmlDocument doc = new XmlDocument ( ) ; XmlDeclaration declaration = doc . CreateXmlDeclaration ( CODE_STRING , CODE_STRING , null ) ; doc . AppendChild ( declaration ) ; XmlProcessingInstruction pi = doc . CreateProcessingInstruction ( CODE_STRING , CODE_STRING ) ; doc . AppendChild ( pi ) ; <EOF>
protected void DropDownList1_SelectedIndexChanged ( object sender , EventArgs e ) { DropDownList ddl = ( DropDownList ) sender ; GridViewRow row = ( GridViewRow ) ddl . NamingContainer ; int rowIndex = row . RowIndex ; } <EOF>
var propertyInfo = typeof ( Foo ) . GetProperty ( CODE_STRING ) ; object convertedValue = null ; try { convertedValue = System . Convert . ChangeType ( CODE_STRING , Nullable . GetUnderlyingType ( propertyInfo . PropertyType ) ) ; } catch ( InvalidCastException ) { return ; } propertyInfo . SetValue ( fooInstance , convertedValue , null ) ; <EOF>
var item = new IPMAC ( ) ; foreach ( Match match in matches ) { Console . WriteLine ( CODE_STRING , match . Groups [ CODE_INTEGER ] . Value ) ; item . mac = match . Groups [ CODE_INTEGER ] . Value ; } foreach ( Match match in matchesIP ) { Console . WriteLine ( CODE_STRING , match . Groups [ CODE_INTEGER ] . Value ) ; item . ip = match . Groups [ CODE_INTEGER ] . Value ; } ipmac . Add ( item ) ; <EOF>
{ Binding } <EOF>
public MyClass { private readonly IAuthorizationService _authorizationService ; public MyClass ( IAuthorizationService authorizationService ) { _authorizationService = authorizationService ; } void MyMethod ( ) { if ( _authorizationService . HasCurrentUserCompletedSecurity ( ) ) . . . . } } <EOF>
SHDocVw . ShellWindows shellWindows = new SHDocVw . ShellWindows ( ) ; string filename ; ArrayList windows = new ArrayList ( ) ; foreach ( SHDocVw . InternetExplorer ie in shellWindows ) { filename = Path . GetFileNameWithoutExtension ( ie . FullName ) . ToLower ( ) ; if ( filename . Equals ( CODE_STRING ) ) { MessageBox . Show ( ie . HWND . ToString ( ) ) ; } } <EOF>
[ HttpPost ] public ActionResult YourActionMethod ( FormCollection Collection ) { string Country = string . Empty ; if ( Collection [ CODE_STRING ] != null ) Country = Collection [ CODE_STRING ] . ToString ( ) ; return View ( ) ; } <EOF>
p . StartInfo . RedirectStandardInput = true ; <EOF>
FxCopCmd . exe / file : MyAssembly . dll / out : AnalysisResults . xml / ignoregeneratedcode <EOF>
[ WebMethod ] public String GetPONumber ( string Database ) { object po = CODE_STRING ; SqlConnection Connection = new SqlConnection ( GetConnString ( Database ) ) ; Connection . Open ( ) ; string Query = CODE_STRING ; SqlCommand Command = new SqlCommand ( Query , Connection ) ; try { po = Command . ExecuteScalar ( ) ; } catch { } Command . Dispose ( ) ; Command = null ; Connection . Close ( ) ; Connection . Dispose ( ) ; Connection = null ; return po . ToString ( ) ; } <EOF>
SpriteSortMode . BackToFront <EOF>
FileStream s2 = new FileStream ( name , FileMode . Open , FileAccess . Read , FileShare . None ) ; <EOF>
protected override void WndProc ( ref Message m ) { if ( m . Msg == CODE_INTEGER ) m . WParam = ( IntPtr ) CODE_INTEGER ; base . WndProc ( ref m ) ; } <EOF>
HasManyToMany ( x = > x . RelatedTo ) . Table ( CODE_STRING ) . ParentKeyColumn ( CODE_STRING ) . ChildKeyColumn ( CODE_STRING ) ; HasManyToMany ( x = > x . RelatedToMe ) . Table ( CODE_STRING ) . ChildKeyColumn ( CODE_STRING ) . ParentKeyColumn ( CODE_STRING ) ; <EOF>
someObject . GetType ( ) . GetProperties ( BindingFlags . Instance | BindingFlags . Public ) . ToDictionary ( prop = > prop . Name , prop = > prop . GetValue ( someObject , null ) ) <EOF>
AsEnumerable ( ) <EOF>
SessionId EventType . . . . your session data here . . . SessionCount CODE_INTEGER . CODE_INTEGER Login . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Login . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Login . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Logout . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Login . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Logout . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Logout . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Logout . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Login . . . . . . . . . . . . . . . . CODE_INTEGER CODE_INTEGER . CODE_INTEGER Login . . . . . . . . . . . . . . . . CODE_INTEGER <EOF>
IHTMLDocument2 doc = ( IHTMLDocument2 ) webBrowser1 . Document . DomDocument ; IHTMLControlRange imgRange = ( IHTMLControlRange ) ( ( HTMLBody ) doc . body ) . createControlRange ( ) ; foreach ( IHTMLImgElement img in doc . images ) { imgRange . add ( ( IHTMLControlElement ) img ) ; imgRange . execCommand ( CODE_STRING , false , null ) ; using ( Bitmap bmp = ( Bitmap ) Clipboard . GetDataObject ( ) . GetData ( DataFormats . Bitmap ) ) { bmp . Save ( CODE_STRING + img . nameProp ) ; } } <EOF>
using System ; [ Serializable ] public class RegisterFormData { public string username { get ; set ; } public string pass1 { get ; set ; } public string pass2 { get ; set ; } public string email { get ; set ; } public string firstname { get ; set ; } public string lastname { get ; set ; } } <EOF>
string input = CODE_STRING ; var list = Regex . Matches ( input , CODE_STRING ) . Cast < Match > ( ) . Select ( m = > m . Value ) . ToList ( ) ; <EOF>
public int Foo { [ SecurityPermission ( . . . ) ] get { return GetFoo ( ) ; } [ SecurityPermission ( . . . ) ] set { SetFoo ( value ) ; } } <EOF>
StringBuilder _header = new StringBuilder ( ) ; _header . Append ( string . Format ( CODE_STRING , CODE_STRING ) ) ; _header . Append ( string . Format ( CODE_STRING , name ) ) ; <EOF>
string testCase = CODE_STRING ; string urlBase = CODE_STRING ; if ( ! testCase . StartsWith ( urlBase ) ) { throw new Exception ( CODE_STRING ) ; } Uri uriTestCase = new Uri ( testCase ) ; Uri uriBase = new Uri ( urlBase ) ; if ( uriTestCase . Segments . Length > uriBase . Segments . Length ) { System . Console . Out . WriteLine ( uriTestCase . Segments [ uriBase . Segments . Length ] ) ; } else { Console . Out . WriteLine ( CODE_STRING ) ; } <EOF>
var jo = JObject . Parse ( json ) ; var data = ( JObject ) jo [ CODE_STRING ] ; foreach ( var item in data ) { JToken token = JToken . Parse ( item . Value . ToString ( ) ) ; Console . WriteLine ( token . Value < String > ( CODE_STRING ) ) ; } <EOF>
DateTime . ParseExact ( CODE_STRING , CODE_STRING , CultureInfo . InvariantCulture ) ; <EOF>
static private List < T > AmplifyPCM < T > ( ICollection < T > samples , ushort bitDepth , float volumePercent ) { var highestSample = CODE_INTEGER ; var temp = new List < T > ( ) ; foreach ( var sample in samples ) { if ( ( dynamic ) sample < CODE_INTEGER ) { temp . Add ( - ( dynamic ) sample ) ; } else { temp . Add ( sample ) ; } } foreach ( var sample in temp ) { if ( ( dynamic ) sample > highestSample ) { highestSample = ( dynamic ) sample ; } } temp = null ; var ratio = ( volumePercent * ( Math . Pow ( CODE_INTEGER , bitDepth ) / CODE_INTEGER ) ) / highestSample ; var newSamples = new List < T > ( ) ; foreach ( var sample in samples ) { newSamples . Add ( ( dynamic ) ( T ) sample * ratio ) ; } return newSamples ; } <EOF>
using ( var dataContext = new ContextEntities ( ) ) { dataContext . Connection . Open ( ) ; var trx = dataContext . Connection . BeginTransaction ( ) ; var sql = CODE_STRING ; dataContext . ExecuteStoreCommand ( sql ) ; var list = CreateMyListOfObjects ( ) ; foreach ( var obj in list ) dataContext . TestTable . AddObject ( obj ) ; dataContext . SaveChanges ( ) ; trx . Commit ( ) ; } <EOF>
TextReader . ReadLine <EOF>
[ Test ] public void CustomMapping ( ) { Mapper . CreateMap < Source , Destination > ( ) . ForMember ( d = > d . Value , opt = > opt . ResolveUsing ( ResolveValue ) ) ; Mapper . CreateMap < SourceDataType , DestinationDataType > ( ) ; var source = new Source { Value = new SourceDataType ( ) } ; var destination = Mapper . Map < Source , Destination > ( source ) ; destination . Value . Should ( ) . Be . OfType < DestinationDataType > ( ) ; } private object ResolveValue ( ResolutionResult result ) { var source = result . Context . SourceValue as Source ; if ( result . Context . IsSourceValueNull || source == null || ! ( source . Value is SourceDataType ) ) { return null ; } var sourceValue = source . Value as SourceDataType ; return result . Context . Engine . Map < DestinationDataType > ( sourceValue ) ; } <EOF>
var product = products . FirstOrDefault ( p = > p . Id == menuItem . ProductId ) ; var orderItem = new OrderItem { ProductId = product . Id , Quantity = CODE_INTEGER , UnitPrice = product . Price , ListValue = CODE_INTEGER * product . Price , } ; <EOF>
Match sendMessage = Regex . Match ( message , CODE_STRING ) ; string pin = sendMessage . Groups [ CODE_STRING ] . Value ; string message = sendMessage . Groups [ CODE_STRING ] . Value ; <EOF>
public void Exec ( string commandName , vsCommandExecOption executeOption , ref object varIn , ref object varOut , ref bool handled ) { handled = false ; if ( executeOption == vsCommandExecOption . vsCommandExecOptionDoDefault ) { if ( commandName == CODE_STRING ) { Window outputWindow = _applicationObject . Windows . Item ( Constants . vsWindowKindOutput ) ; outputWindow . Visible = true ; handled = true ; return ; } } } <EOF>
protected void btn1_Click ( object sender , EventArgs e ) { foreach ( Control cont in tag1 . Controls ) { lbl1 . Text += cont . ClientID + CODE_STRING ; } foreach ( Control cont in tag2 . Controls ) { lbl2 . Text += cont . ClientID + CODE_STRING ; } } <EOF>
ScriptManager . RegisterStartupScript ( this , this . GetType ( ) , CODE_STRING , String . Format ( CODE_STRING , rada_attach . ClientID ) , true ) ; <EOF>
[ XmlText ] public string PriceValueString { get ; set ; } <EOF>
string attachment = CODE_STRING ; Response . ClearContent ( ) ; Response . AddHeader ( CODE_STRING , attachment ) ; Response . ContentType = CODE_STRING ; StringWriter sw = new StringWriter ( ) ; HtmlTextWriter htw = new HtmlTextWriter ( sw ) ; HtmlForm frm = new HtmlForm ( ) ; gv . Parent . Controls . Add ( frm ) ; frm . Attributes [ CODE_STRING ] = CODE_STRING ; frm . Controls . Add ( gv ) ; frm . RenderControl ( htw ) ; Response . Write ( sw . ToString ( ) ) ; Response . End ( ) ; <EOF>
public class Program { static void Main ( string [ ] args ) { Console . WriteLine ( Counter . SerialString ) ; Counter . Serial ++ ; Console . WriteLine ( Counter . SerialString ) ; Console . ReadKey ( ) ; } public class Counter { public static int Serial ; public static string SerialString { get { return Serial . ToString ( CODE_STRING ) ; } } } } <EOF>
public interface ISerialPortWatcher { event EventHandler < ReceivedDataEventArgs > ReceivedData ; event EventHandler StartedListening ; event EventHandler StoppedListening ; SerialPortSettings PortOptions { set ; } bool Listening { get ; set ; } void Stop ( ) ; void Start ( ) ; } public class ReceivedDataEventArgs : EventArgs { public ReceivedDataEventArgs ( string data ) { Data = data ; } public string Data { get ; private set ; } } <EOF>
var list = new List < ProductLine > ( CODE_INTEGER ) ; list . Add ( new ProductLine { Amount = list . Count } ) ; list . Add ( new ProductLine { Amount = list . Count } ) ; list . Add ( new ProductLine { Amount = list . Count } ) ; list . Add ( new ProductLine { Amount = list . Count } ) ; list . Add ( new ProductLine { Amount = list . Count } ) ; var bs = new BindingSource { DataSource = list } ; dataGridView1 . DataSource = bs ; <EOF>
int numberOfColumns = dt . Columns . Count ; foreach ( DataRow dr in dt . Rows ) { for ( int i = CODE_INTEGER ; i < numberOfColumns ; i ++ ) { } } <EOF>
ThreadPool . QueueUserWorkItem ( FtpUpload , CODE_STRING ) ; ThreadPool . QueueUserWorkItem ( FtpUpload , CODE_STRING ) ; ThreadPool . QueueUserWorkItem ( FtpUpload , CODE_STRING ) ; . . . private static void FtpUpload ( object state ) { var filePath = ( string ) state ; . . . upload here . . . } <EOF>
foreach ( String Row in File . ReadLines ( CODE_STRING ) ) { if ( Row . IndexOf ( CODE_STRING , StringComparison . InvariantCultureIgnoreCase ) != - CODE_INTEGER ) { } } <EOF>
double F = CODE_REAL * Math . Pow ( CODE_REAL , ( n - CODE_REAL ) / CODE_REAL ) ; <EOF>
private string getAccount ( string dummyAccount ) { string Account = string . Empty ; if ( ( new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ) . Any ( a = > dummyAccount . IndexOf ( a , StringComparison . InvariantCultureIgnoreCase ) >= CODE_INTEGER ) ) { Account = CODE_STRING ; } else if ( ( new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ) . Any ( a = > dummyAccount . IndexOf ( a , StringComparison . InvariantCultureIgnoreCase ) >= CODE_INTEGER ) ) { Account = CODE_STRING ; } else if ( ( new string [ ] { CODE_STRING , CODE_STRING } ) . Any ( a = > dummyAccount . IndexOf ( a , StringComparison . InvariantCultureIgnoreCase ) >= CODE_INTEGER ) ) { Account = CODE_STRING ; } return dummyAccount ; } <EOF>
keywordSearch . Value = keywords ; <EOF>
public IEnumerable < Post > GetPosts ( object threadID , int pageSize , int index , out totalPosts ) { var results = session . CreateMultiCriteria ( ) . Add ( GetCriteria ( threadID ) . SetFirstResult ( ( index - CODE_INTEGER ) * pageSize ) . SetMaxResults ( pageSize ) ) . Add ( GetCriteria ( threadID ) . SetProjection ( Projections . RowCount ( ) ) ) . List ( ) ; var counts = ( IList ) results [ CODE_INTEGER ] ; totalPosts = ( int ) counts [ CODE_INTEGER ] ; return ( ( IList ) results [ CODE_INTEGER ] ) . Cast < Post > ( ) ; } private DetachedCriteria GetCriteria ( object threadID ) { return DetachedCriteria . For < Post > ( ) . Add ( Expression . Eq ( CODE_STRING , threadID ) ) ; } <EOF>
int valueType ; object valueTypeLock = new object ( ) ; void Foo ( ) { lock ( valueTypeLock ) { valueType = CODE_INTEGER ; } } <EOF>
public static string RenderPartialToString ( string controlName , object viewData ) { ViewPage viewPage = new ViewPage ( ) { ViewContext = new ViewContext ( ) } ; viewPage . ViewData = new ViewDataDictionary ( viewData ) ; viewPage . Controls . Add ( viewPage . LoadControl ( controlName ) ) ; StringBuilder sb = new StringBuilder ( ) ; using ( StringWriter sw = new StringWriter ( sb ) ) { using ( HtmlTextWriter tw = new HtmlTextWriter ( sw ) ) { viewPage . RenderControl ( tw ) ; } } return sb . ToString ( ) ; } string content = RenderPartialToString ( CODE_STRING , myModel ) ; <EOF>
public IApplicationEvents { void OnClose ( ) ; } <EOF>
using System ; class Base { public Base ( ) { Console . WriteLine ( ToString ( ) ) ; } } class Derived : Base { private int x = CODE_INTEGER ; private int y ; public Derived ( ) { y = CODE_INTEGER ; } public override string ToString ( ) { return string . Format ( CODE_STRING , x , y ) ; } } class Test { static void Main ( ) { new Derived ( ) ; } } <EOF>
string input = CODE_STRING ; var output = Regex . Replace ( input , CODE_STRING , CODE_STRING ) ; <EOF>
private List < DateTime > GetDayofWeekDateOcurrences ( DateTime start , DateTime end , int everyNthWeek , List < DayOfWeek > dw ) { int numberOfDays = end . Subtract ( start ) . Days + CODE_INTEGER ; var dates = Enumerable . Range ( CODE_INTEGER , numberOfDays ) . GroupBy ( i = > i / CODE_INTEGER % everyNthWeek ) . Where ( g = > g . Key == CODE_INTEGER ) . SelectMany ( g = > g . Select ( i = > start . AddDays ( i ) ) . Where ( d = > dw . Contains ( d . DayOfWeek ) ) ) . ToList ( ) ; return dates ; } <EOF>
System . IO . File . Copy ( oldPathAndName , newPathAndName ) ; <EOF>
Console . WriteLine ( model . GetValue ( iter , CODE_INTEGER ) ; <EOF>
DataClasses1DataContext dc = new DataClasses1Datacontext ( ) ; var q = from table in dc . SomeTable select table ; <EOF>
on delete cascade <EOF>
CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER R G B CODE_INTEGER CODE_INTEGER <EOF>
Dictionary < string , string > myDict = new Dictionary < string , string > ( ) ; myDict . Add ( CODE_STRING , CODE_STRING ) ; myDict . Add ( CODE_STRING , CODE_STRING ) ; <EOF>
List < string > results = input . Except ( compareTo ) . ToList ( ) ; <EOF>
mount - o offset = CODE_INTEGER / dev / sda / mnt / my_hd <EOF>
var rand = new Random ( ) ; DataContext = new { PsychrometricLogs = from i in Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) select new { Logs = from j in Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) select new { TimeStamp = rand . Next ( CODE_INTEGER ) , Temparature = ( decimal ) rand . Next ( CODE_INTEGER ) , RelativeHumidity = ( decimal ) rand . Next ( CODE_INTEGER ) , GrainsPerPound = ( decimal ) rand . Next ( CODE_INTEGER ) , GrainsDepression = ( decimal ) rand . Next ( CODE_INTEGER ) , } } } ; <EOF>
public override void InputBuffer_ProcessInputRow ( InputBufferBuffer Row ) { byte [ ] hashedData = CreateSha256Hash ( Row . HashString ) ; Row . HashValue = Convert . ToBase64String ( hashedData , CODE_INTEGER , CODE_INTEGER ) ; } <EOF>
string fileFormat = string . Empty ; XmlDocument xDoc = new XmlDocument ( ) ; xDoc . Load ( fileName ) ; XmlNodeList auxFilesList = xDoc . GetElementsByTagName ( CODE_STRING ) ; for ( int i = CODE_INTEGER ; i < auxFilesList . Count ; i ++ ) { XmlNode item = classList . Item ( i ) ; if ( item . Attributes [ CODE_STRING ] . Value == CODE_STRING ) { fileFormat = item . Attributes [ CODE_STRING ] . Value ; } } <EOF>
var result = Path . GetFullPath ( CODE_STRING ) ; <EOF>
public List < string > Permission { get { return lstGivenPermissions . Items . Cast < string > ( ) . ToList ( ) ; } set { lstGivenPermissions . DataSource = value ; } } <EOF>
using System . Web ; var encoded = HttpUtility . HtmlEncode ( unencoded ) ; <EOF>
var v = new byte [ CODE_INTEGER ] ; v [ CODE_INTEGER ] = CODE_INTEGER ; v [ CODE_INTEGER ] = CODE_INTEGER ; v [ CODE_INTEGER ] = CODE_INTEGER ; double total = BitConverter . ToDouble ( v , CODE_INTEGER ) ; Console . WriteLine ( total . ToString ( CODE_STRING ) ) ; <EOF>
UserTablesDataAdapter . FillSchema ( UserTablesDataSet , SchemaType . Mapped ) ; <EOF>
| N | | | | | | | | X | N | | | | | | | X | X | N | | | | | | | X | N | | | | | | | X | X | N | | | | . . . <EOF>
Shell parentShell = Window . GetWindow ( this ) as Shell ; <EOF>
private void PhoneApplicationPage_Loaded_1 ( object sender , RoutedEventArgs e ) { if ( IsolatedStorageSettings . ApplicationSettings . Contains ( CODE_STRING ) ) { Player player = ( Player ) IsolatedStorageSettings . ApplicationSettings [ CODE_STRING ] ; HelloName . Text = CODE_STRING + player . FirstName ; } } <EOF>
SystemA : Writes file theRealFile . txt SystemA : Writes file theRealFile . rdy ( CODE_INTEGER byte ) SystemB : Watches for . rdy files and then reads theRealFile . txt <EOF>
class myClass { public readonly int Value1 ; public readonly string Value2 ; public myClass ( int value1 , string value2 ) { Value1 = value1 ; Value2 = value2 ; } } <EOF>
doorFI . get_Parameter ( BuiltInParameter . HOST_ID_PARAM ) . AsElementId ( ) ; <EOF>
SuspendLayout ( ) ; Width = someFixedWidth ; Height = someFixedHeight ; panel . Size = new Size ( panelWidth , panelHeight ) ; panel . Location = new Point ( ClientSize . Width / CODE_INTEGER - panelWidth / CODE_INTEGER , ClientSize . Height / CODE_INTEGER - panelHeight / CODE_INTEGER ) ; panel . Anchor = AnchorStyles . None ; panel . Dock = DockStyle . None ; ResumeLayout ( ) ; <EOF>
public List < List < string > > retListTable ( ) { DataTable dt = new DataTable ( ) ; adap . Fill ( dt ) ; List < List < string > > lstTable = new List < List < string > > ( ) ; foreach ( DataRow row in dt . Rows ) { List < string > lstRow = new List < string > ( ) ; foreach ( var item in row . ItemArray ) { lstRow . Add ( item . ToString ( ) . Replace ( " \ r " , string . Empty ) ) ; } lstTable . Add ( lstRow ) ; } return lstTable ; } <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( Page . IsPostBack ) { currentTab = Int32 . Parse ( HiddenTabValue . Value ) ; } } <EOF>
List < T > <EOF>
Properties . Settings . Default . Save ( ) ; <EOF>
public class Example { private BlockingQueue < Task > m_Queue = new BlockingQueue < Task > ( ) ; public void StartExample ( ) { Thread producer = new Thread ( ( ) = > Producer ( ) ) ; Thread consumer = new Thread ( ( ) = > Consumer ( ) ) ; producer . Start ( ) ; consumer . Start ( ) ; producer . Join ( ) ; consumer . Join ( ) ; } private void Producer ( ) { for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { m_Queue . Enqueue ( new Task ( ) ) ; } } private void Consumer ( ) { while ( true ) { Task task = m_Queue . Dequeue ( ) ; } } } <EOF>
foreach ( object item in ItemsSource ) { var property = item . GetType ( ) . GetProperty ( DisplayMemberPath ) ; var value = property . GetValue ( item , null ) ; } <EOF>
XDocument document = XDocument . Parse ( xml ) ; var query = from file in document . Descendants ( CODE_STRING ) select new { Monitored = ( int ) file . Element ( CODE_STRING ) , Name = ( string ) file . Element ( CODE_STRING ) , Size = ( int ) file . Element ( CODE_STRING ) } ; foreach ( var file in query ) { Console . WriteLine ( CODE_STRING , file . Name , file . Size ) ; } <EOF>
attachment . Dispose ( ) <EOF>
var result = numbers . Where ( ( v , i ) = > i != MasterIndex ) . ToList ( ) ; <EOF>
public class TestBase { public TestBase ( ) { } } public class MyTest : TestBase { } <EOF>
Dim D = DateTime . Now . ToString ( System . Globalization . CultureInfo . InvariantCulture ) ' - or - Dim D = DateTime . Now . ToString ( New System . Globalization . CultureInfo ( CODE_STRING ) ) <EOF>
SQL > CREATE TABLE EMP_50 CODE_INTEGER ORGANIZATION EXTERNAL CODE_INTEGER ( TYPE oracle_datapump CODE_INTEGER DEFAULT DIRECTORY dmp_dir CODE_INTEGER LOCATION ( ?? ? emp_50 . dmp ' ) ) CODE_INTEGER ) CODE_INTEGER AS SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = CODE_INTEGER CODE_INTEGER ; <EOF>
class ConnectivityTests { String serverName = CODE_STRING ; String databaseName = CODE_STRING ; String dataSourceName = CODE_STRING ; [ Test ] public void TestDataSourceConnection ( ) { try { Server server = new Server ( ) ; server . Connect ( serverName ) ; Database database = server . Databases [ databaseName ] ; DataSource dataSource = database . DataSources . FindByName ( dataSourceName ) ; OleDbConnection connection = new OleDbConnection ( dataSource . ConnectionString ) ; connection . Open ( ) ; } catch ( Exception e ) { Assert . Fail ( e . ToString ( ) ) ; } finally { connection . Close ( ) ; } } } <EOF>
asyncCall . Subscribe ( result = > DoSomething ( result ) , ex = > Oops ( ex ) ) ; <EOF>
webBrowser . Document . GetElementById ( CODE_STRING ) . Enabled = False ' < -- - for disable the control webBrowser . Document . GetElementById ( CODE_STRING ) . Enabled = True ' < -- - for enable the control <EOF>
var x = from list in optionLists from option in list where optionLists . All ( l = > l . Any ( o = > o . Value == option . Value ) ) orderby option . Value select option ; <EOF>
var users = Sitecore . Security . Accounts . UserManager . GetUsers ( ) ; foreach ( Sitecore . Security . Accounts . User user in users ) { var membershipUser = System . Web . Security . Membership . GetUser ( user . Name , false ) ; if ( membershipUser != null ) { var date = membershipUser . CreationDate ; } } <EOF>
string [ ] stringParts = columns [ CODE_INTEGER ] . Split ( CODE_CHAR ) ; int valueOfConcern = Convert . ToInt32 ( stringParts [ CODE_INTEGER ] ) ; if ( valueOfConcern >= CODE_INTEGER && valueOfConcern <= CODE_INTEGER ) { } <EOF>
public List < string > vyhledavaniOS ( ) { List < string > listToReturn = new List < string > ( ) ; foreach ( Vozidlo voz in nab ? dka ) { if ( voz is Osobn ? Vuz ) listToReturn . Add ( ( voz . TypVozidla ( ) + CODE_STRING + voz . JakaSPZ + CODE_STRING + voz . JakaZnacka + CODE_STRING + voz . JakaBarva ) ) ; } return listToReturn ; } <EOF>
static string Search ( string expression ) { int run = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < expression . Length ; i ++ ) { char c = expression [ i ] ; if ( Char . IsDigit ( c ) ) run ++ ; else if ( run == CODE_INTEGER ) return expression . Substring ( i - run , run ) ; else run = CODE_INTEGER ; } return null ; } const string pattern = CODE_STRING ; static string NotCached ( string expression ) { return Regex . Match ( expression , pattern , RegexOptions . Compiled ) . Value ; } static Regex regex = new Regex ( pattern , RegexOptions . Compiled ) ; static string Cached ( string expression ) { return regex . Match ( expression ) . Value ; } <EOF>
[ Register ( CODE_STRING ) ] private class MySourceList : NSOutlineView { public MySourceList ( IntPtr handle ) : base ( handle ) { } <EOF>
if ( article . IndexOf ( value , StringComparison . OrdinalIgnoreCase ) >= CODE_INTEGER ) { } else { } <EOF>
List < PerformanceCounter > instancesList = new List < PerformanceCounter > ( ) ; private void InitializeCounter ( string [ ] instances ) { foreach ( string name in instances ) { instancesList . Add ( new PerformanceCounter ( CODE_STRING , CODE_STRING , name ) ) ; } } private void updateCounter ( ) { foreach ( PerformanceCounter counter in instancesList ) { bytes += Math . Round ( counter . NextValue ( ) / CODE_INTEGER , CODE_INTEGER ) ; textBox1 . Text = bytes . ToString ( ) ; } } <EOF>
string pathToSomeMsi = Path . GetTempFileName ( ) ; using ( var resStream = Assembly . GetExecutingAssembly ( ) . GetManifestResourceStream ( CODE_STRING ) ) using ( var fileStream = File . OpenWrite ( pathToSomeMsi ) ) { resStream . CopyTo ( fileStream ) ; } installMsi ( pathToSomeMsi ) ; <EOF>
OnTopReplica / WindowSeekers / TaskWindowSeeker . cs <EOF>
private void Form1_Load ( object sender , EventArgs e ) { DataTable dt = new DataTable ( ) ; dt . Columns . Add ( CODE_STRING , typeof ( int ) ) ; dt . Columns . Add ( CODE_STRING ) ; for ( int j = CODE_INTEGER ; j < CODE_INTEGER ; j ++ ) { dt . Rows . Add ( j , CODE_STRING + j . ToString ( ) ) ; } this . dataGridView1 . DataSource = dt ; this . dataGridView1 . EditingControlShowing += new DataGridViewEditingControlShowingEventHandler ( dataGridView1_EditingControlShowing ) ; } private bool IsHandleAdded ; void dataGridView1_EditingControlShowing ( object sender , DataGridViewEditingControlShowingEventArgs e ) { if ( ! IsHandleAdded && this . dataGridView1 . CurrentCell . ColumnIndex == CODE_INTEGER ) { TextBox tx = e . Control as TextBox ; if ( tx != null ) { tx . KeyPress += new KeyPressEventHandler ( tx_KeyPress ) ; this . IsHandleAdded = true ; } } } void tx_KeyPress ( object sender , KeyPressEventArgs e ) { if ( ! ( char . IsNumber ( e . KeyChar ) || e . KeyChar == CODE_CHAR ) ) { e . Handled = true ; } } <EOF>
public class KeyListItem { public int Id { get ; set ; } public string Name { get ; set ; } public string Algorithm { get ; set ; } public int Bits { get ; set ; } } <EOF>
if ( bookCountDataTable . Rows . Count > CODE_INTEGER ) { totalNumberOfBooks = Convert . ToInt32 ( bookCountDataTable . Rows [ CODE_INTEGER ] [ CODE_STRING ] ) ; } <EOF>
string [ ] rand_word = { apple , bannnana , cat , dog , eatttt } string likelihood = CODE_INTEGER ; List < Thread > threads = new List < Thread > ( ) ; foreach ( string line in rand_word ) { Thread thread1 = new Thread ( new ThreadStart ( ( ) = > dictionary_match ( line , ref likelihood ) ) ) ; thread1 . Start ( ) ; threads . Add ( thread1 ) ; Console . WriteLine ( CODE_STRING + likelihood ) ; } Console . WriteLine ( CODE_STRING + likelihood ) ; foreach ( var thread in threads ) { thread . Join ( ) ; } Console . WriteLine ( CODE_STRING + likelihood ) ; <EOF>
insert_new ( Node * node , value ) { if ( value > node -> value ) { if ( node -> right != null ) { insert_new ( node -> right , value ) ; } else { node -> right = new Node ( value ) ; return ; } } else { if ( node -> left != null ) { insert_new ( node -> left , value ) } else { node -> left = new Node ( value ) ; return ; } } } <EOF>
protected void Button1_Click ( object sender , EventArgs e ) { DataTable dt = new DataTable ( ) ; DataColumn dc = new DataColumn ( ) ; if ( dt . Columns . Count == CODE_INTEGER ) { dt . Columns . Add ( CODE_STRING , typeof ( string ) ) ; dt . Columns . Add ( CODE_STRING , typeof ( string ) ) ; dt . Columns . Add ( CODE_STRING , typeof ( string ) ) ; } DataRow NewRow = dt . NewRow ( ) ; NewRow [ CODE_INTEGER ] = TextBox1 . Text ; NewRow [ CODE_INTEGER ] = TextBox2 . Text ; dt . Rows . Add ( NewRow ) ; GridView1 . DataSource = dt ; GridViewl . DataBind ( ) ; } <EOF>
System . IO . Path . GetFileName ( CODE_STRING ) <EOF>
public ActionResult Index ( string @event , string email , . . . ) { <EOF>
AssemblyBuilder assemblyBuilder = Thread . GetDomain ( ) . DefineDynamicAssembly ( assemblyName , AssemblyBuilderAccess . Run , assemblyAttributes ) ; ModuleBuilder moduleBuilder = assemblyBuilder . DefineDynamicModule ( CODE_STRING ) ; TypeBuilder typeBuilder = moduleBuilder . DefineType ( CODE_STRING , TypeAttributes . Public ) ; typeBuilder . DefineDefaultConstructor ( MethodAttributes . Public ) ; newMethod = typeBuilder . DefineMethod ( CODE_STRING , MethodAttributes . Public ) ; ILGenerator ilGen = newMethod . GetILGenerator ( ) ; ilGen . Emit ( . . . ) ; Type newType = typeBuilder . CreateType ( ) ; <EOF>
string line ; StreamReader sr = new StreamReader ( CODE_STRING ) ; StreamReader sr2 = new StreamReader ( CODE_STRING ) ; List < String > fileOne = new List < string > ( ) ; List < String > fileTwo = new List < string > ( ) ; while ( sr . Peek ( ) >= CODE_INTEGER ) { line = sr . ReadLine ( ) ; if ( line != CODE_STRING ) { fileOne . Add ( line ) ; } } sr . Close ( ) ; while ( sr2 . Peek ( ) >= CODE_INTEGER ) { line = sr2 . ReadLine ( ) ; if ( line != CODE_STRING ) { fileTwo . Add ( line ) ; } } sr2 . Close ( ) ; var t = fileOne . Except ( fileTwo ) ; StreamWriter sw = new StreamWriter ( CODE_STRING ) ; foreach ( var z in t ) { sw . WriteLine ( z ) ; } sw . Flush ( ) ; <EOF>
string longString = CODE_STRING + CODE_STRING + CODE_STRING ; <EOF>
public static string [ ] GetSplitStrings ( string input ) { IList < string > splitStrings = new List < string > ( ) ; var counter = CODE_INTEGER ; var sb = new StringBuilder ( ) ; var inLessGreater = false ; foreach ( var character in input ) { if ( character . Equals ( CODE_CHAR ) ) { inLessGreater = true ; counter ++ ; } if ( character . Equals ( CODE_CHAR ) ) { inLessGreater = false ; counter ++ ; } if ( character . Equals ( CODE_CHAR ) && ! inLessGreater ) { counter ++ ; } if ( ( character . Equals ( CODE_CHAR ) && counter == CODE_INTEGER ) || ( counter == CODE_INTEGER ) ) { if ( sb . ToString ( ) . Equals ( CODE_STRING ) == false ) { if ( character . Equals ( CODE_CHAR ) || character . Equals ( CODE_CHAR ) ) { sb . Append ( character ) ; } splitStrings . Add ( sb . ToString ( ) ) ; } sb . Clear ( ) ; counter = CODE_INTEGER ; } else { sb . Append ( character ) ; } } return splitStrings . ToArray ( ) ; } <EOF>
using System . ComponentModel ; [ Category ( CODE_STRING ) , Description ( CODE_STRING ) , DefaultValue ( true ) ] bool yourPropertyName { . . . . . } <EOF>
protected override void ProcessRecord ( ) { Process [ ] processes = Process . GetProcesses ( ) ; WriteObject ( processes , true ) ; } <EOF>
protected override void OnCustomCommand ( int command ) <EOF>
GeoPoint point = new GeoPoint ( ( int ) ( Latitude * CODE_REAL ) , ( int ) ( Longitude * CODE_REAL ) ) ; <EOF>
Directory . Delete ( CODE_STRING , true ) ; <EOF>
using System ; using System . Text . RegularExpressions ; public class Program { public static void Main ( ) { Regex rgx = new Regex ( CODE_STRING ) ; Console . WriteLine ( rgx . Replace ( CODE_STRING , string . Empty ) ) ; Console . WriteLine ( rgx . Replace ( CODE_STRING , string . Empty ) ) ; Console . WriteLine ( rgx . Replace ( CODE_STRING , string . Empty ) ) ; } } <EOF>
wsType . GetMethod ( function , BindingFlags . Static | BindingFlags . Public | BindingFlags . Instance ) ; <EOF>
public int Compare ( Person p1 , Person p2 ) { int primary = p1 . Name . CompareTo ( p2 . Name ) ; if ( primary != CODE_INTEGER ) { return primary ; } return p2 . Age . CompareTo ( p1 . Age ) ; } <EOF>
string x = string . Empty ; int index = sdr . GetOrdinal ( CODE_STRING ) ; if ( ! sdr . IsDBNull ( index ) ) x = sdr . GetString ( index ) ; long ? y ; index = sdr . GetOrdinal ( CODE_STRING ) ; if ( ! sdr . IsDBNull ( index ) ) y = sdr . GetInt64 ( index ) ; <EOF>
foreach ( BloodBank b in stockDetails ) { FieldInfo f = typeof ( BloodBank ) . GetField ( CODE_STRING ) ; if ( f != null ) { f . SetValue ( b , TextBox1 . Text ) ; } } <EOF>
[ Serializable ] public class SettingItem { public string Name { get ; set ; } public string Value { get ; set ; } } private List < SettingItem > ProjSettings = new List < SettingItem > ( ) ; ProjSettings . Add ( new SettingItem { Name = CODE_STRING , CODE_STRING } ) ; <EOF>
foreach ( AssemblyName assemName in assemComponents ) { foreach ( var type in Assembly . Load ( assem ) . GetTypes ( ) ) { if ( type . Name == CODE_STRING && typeof ( SettingsBase ) . IsAssignableFrom ( type ) ) { var defaults = ( SettingsBase ) type . GetProperty ( CODE_STRING ) . GetValue ( null , null ) ; foreach ( SettingsProperty prop in defaults . Properties ) { Debug . WriteLine ( string . Format ( CODE_STRING , prop . Name , defaults [ prop . Name ] ) ) ; } } } } <EOF>
string s = line . Substring ( line . IndexOf ( CODE_STRING ) ) ; <EOF>
private void listView1_ItemCheck ( object sender , ItemCheckEventArgs e ) { if ( e . Index % CODE_INTEGER == CODE_INTEGER ) e . NewValue = e . CurrentValue ; } <EOF>
private void button_Click ( object sender , RoutedEventArgs e ) { ThicknessAnimation animate = new ThicknessAnimation ( new Thickness ( CODE_INTEGER , - CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) , TimeSpan . FromSeconds ( CODE_INTEGER ) ) ; animate . Completed += new EventHandler ( animate_Completed ) ; testCanvas . BeginAnimation ( Canvas . MarginProperty , animate ) ; } private void animate_Completed ( object sender , EventArgs e ) { testLabel . Content = CODE_STRING ; testCanvas . BeginAnimation ( Canvas . MarginProperty , new ThicknessAnimation ( new Thickness ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) , TimeSpan . FromSeconds ( CODE_INTEGER ) ) ) ; } <EOF>
Dictionary < int , QualificationLevel > unitsWithLevels = filteredCollection . Where ( x = > x . QualificationLevel != null && SearchCriterionQualificationUnitLevels . Any ( unitLevel = > unitLevel . Equals ( x . QualificationLevel . Value ) ) ) ; <EOF>
CruiseControl . Net Command - Line Utility Provides command - line access to a CruiseControl . Net server CCCmd < command > [ options ] command : one of the following actions help : display this help screen retrieve : retrieve details on a project or server forcebuild : forces a build on a project abortbuild : aborts a build on a project startproject : starts a project integrator stopproject : stops a project integrator <EOF>
XmlNode requestNode = bigDoc . FirstChild ; requestNode . AppendChild ( requestNode . OwnerDocument . ImportNode ( anotherXMLDocument . DocumentElement , true ) ) ; <EOF>
var merged = this . DB . Links . Where ( l = > l . INSTANCE_ID == CODE_INTEGER && l . CONTACT_ID . HasValue && l . ORGANISATION_ID . HasValue ) . GroupBy ( l = > l . CONTACT_ID ) . SelectMany ( s = > s . Where ( x = > s . Count ( ) == CODE_INTEGER || x . DEFAULT_LINKED_ORGANISATION ) . Select ( link = > link . LINK_ID ) ) ; <EOF>
float x = Screen . width / CODE_REAL ; float y = Screen . height / CODE_REAL ; var ray = Camera . main . ScreenPointToRay ( new Vector3 ( x , y , CODE_INTEGER ) ) ; clone . velocity = ray . direction * laserSpeed ; <EOF>
using ( SqlConnection con = new SqlConnection ( . . . . . ) ) { . . . do your work with the database here . . . . } <EOF>
var xml = XDoxument . Load ( CODE_STRING ) ; <EOF>
var groups = items . GroupBy ( item = > item . ListId ) ; foreach ( var group in groups ) { Console . WriteLine ( CODE_STRING , group . Key ) ; foreach ( var item in group ) Console . WriteLine ( CODE_STRING , item . ItemName ) ; } <EOF>
. . . group s by new { s . StudentID , s . StudentName } into g . . . <EOF>
SubTopicDropDownList . Items . Clear ( ) ; foreach ( string item in chosenItem ) { SubTopicDropDownList . Items . Add ( item ) ; } <EOF>
private string _name ; public string Name { get { return _name ; } set { SomeHandler ( CODE_STRING , value ) ; _name = value ; } } <EOF>
var userDetail = context . Orders . GroupBy ( i = > i . UserId_Fk ) . Select ( i = > new { UserId_Fk = i . Key , OrderCount = i . Count ( ) , ProductQuantity = i . Sum ( j = > context . OrderDetails . Where ( k = > k . OrderId_Fk == j . OrderId ) . Sum ( k = > k . Quantity ) ) } ) ; <EOF>
[ TARGETDIR ] <EOF>
IEnumerable < WriteConcernResult > results = collection . InsertBatch ( records ) <EOF>
public class Member { [ Key ] public int Id { get ; set ; } public virtual Address Address { get ; set ; } } public class Address { [ Key ] public int MemberId { get ; set ; } } protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { modelBuilder . Entity < Address > ( ) . HasKey ( t = > t . MemberID ) ; modelBuilder . Entity < Member > ( ) . HasRequired ( t = > t . Address ) . WithRequiredPrincipal ( ) ; } <EOF>
Func < SomeClass > c1 = ( ) = > Program . someClass ; <EOF>
private IEnumerable < int > GetAgesBetween ( string agesText ) { var parts = agesText . Split ( CODE_CHAR ) ; var start = int . Parse ( parts [ CODE_INTEGER ] . Trim ( ) ) ; var end = int . Parse ( parts [ CODE_INTEGER ] . Trim ( ) ) ; return Enumerable . Range ( start , CODE_INTEGER + end - start ) ; } <EOF>
int i = CODE_INTEGER ; if ( ! int . TryParse ( textbox1 . Text , out i ) || i < CODE_INTEGER || i > CODE_INTEGER ) { MessageBox . Show ( CODE_STRING ) ; } else { subform mysub = new subform ( i ) ; subform . ShowDialog ( ) ; } int timebeforeclose = CODE_INTEGER ; public subform ( int count ) { timebeforeclose = count ; } private void btnSave_Click ( object sender , EventArgs e ) { timebeforeclose -- ; if ( timebeforeclose == CODE_INTEGER ) { this . Close ( ) ; } } <EOF>
distributed mode <EOF>
ImportAddressTable . cs <EOF>
Hosting a Windows Forms Control in WPF <EOF>
x : TypeArguments <EOF>
XNamespace xn = CODE_STRING ; doc . Descendants ( xn + CODE_STRING ) <EOF>
string pathToRemove = CODE_STRING ; Regex sourceRegex = new Regex ( pathToRemove , RegexOptions . IgnoreCase ) ; string sanity = sourceRegex . Replace ( input , string . Empty ) ; <EOF>
public class CameraWindow : PictureBox { [ Browsable ( true ) ] public int MyProperty { get ; set ; } } <EOF>
int sum = CODE_INTEGER ; foreach ( DataGridViewRow row in dataGridView . Rows ) { sum += ( int ) row . Cells [ CODE_INTEGER ] . Value ; } MessageBox . Show ( CODE_STRING , sum . ToString ( ) ) ; <EOF>
gvProjectList . DataBind ( ) ; <EOF>
public class User { public int Id { get ; set ; } public string Name { get ; set ; } public string Surname { get ; set ; } public int CountryId { get ; set ; } [ ForeignKey ( CODE_STRING ) ] public virtual Country Country { get ; set ; } } public class Country { public int Id { get ; set ; } public string CountryName { get ; set ; } public virtual ICollection < User > Users { get ; set ; } } User user = new User ( ) { Name = model . Name , Surname = model . Surname , CountryId = CODE_INTEGER ; } ; <EOF>
String version = CODE_STRING ; String [ ] versionArray = version . Split ( CODE_STRING ) ; var newVersion = string . Join ( CODE_STRING , versionArray . Take ( CODE_INTEGER ) ) ; <EOF>
class Program { static void Main ( ) { ConsoleKeyInfo cki ; do { Console . Write ( CODE_STRING ) ; cki = Console . ReadKey ( true ) ; Console . WriteLine ( ) ; if ( cki . Key == ConsoleKey . D1 ) { Console . Write ( CODE_STRING ) ; } } while ( cki . Key != ConsoleKey . D2 ) ; } } <EOF>
IEnumerable < byte > udpDnsPacket = /*...*/ ; byte [ ] result = udpDnsPacket . ToArray ( ) ; <EOF>
string path = Environment . GetFolderPath ( Environment . SpecialFolder . Desktop ) ; <EOF>
System . Diagnostics . PerformanceCounter <EOF>
if ( configuration . Elements ( CODE_STRING ) . Any ( ) ) { . . . } <EOF>
messageQueue . Formatter = new System . Messaging . XmlMessageFormatter ( new Type [ ] { typeof ( System . String ) } ) ; <EOF>
bool ok = false ; while ( ! ok ) { try { TryWritingToFile ( ) ; ok = true ; } catch ( Exception ) { CreateFile ( ) ; } } <EOF>
Dictionary < string , int > dicSum = new Dictionary < string , int > ( ) ; foreach ( DataRow row in dt . Rows ) { string group = row [ CODE_STRING ] . ToString ( ) ; int rate = Convert . ToInt32 ( row [ CODE_STRING ] ) ; if ( dicSum . ContainsKey ( group ) ) dicSum [ group ] += rate ; else dicSum . Add ( group , rate ) ; } foreach ( string g in dicSum . Keys ) Console . WriteLine ( CODE_STRING , g , dicSum [ g ] ) ; <EOF>
private void SaveThumbnail ( ) { Deployment . Current . Dispatcher . BeginInvoke ( ( ) = > { var w = ( int ) _videoCaptureDevice . PreviewResolution . Width ; var h = ( int ) _videoCaptureDevice . PreviewResolution . Height ; var argbPx = new Int32 [ w * h ] ; _videoCaptureDevice . GetPreviewBufferArgb ( argbPx ) ; var wb = new WriteableBitmap ( w , h ) ; argbPx . CopyTo ( wb . Pixels , CODE_INTEGER ) ; wb . Invalidate ( ) ; using ( var isoStore = IsolatedStorageFile . GetUserStoreForApplication ( ) ) { var fileName = _isoVideoFileName + CODE_STRING ; if ( isoStore . FileExists ( fileName ) ) isoStore . DeleteFile ( fileName ) ; var file = isoStore . CreateFile ( fileName ) ; wb . SaveJpeg ( file , w , h , CODE_INTEGER , CODE_INTEGER ) ; file . Close ( ) ; } } ) ; } <EOF>
label1 . AutoSize = false <EOF>
DGrid . ItemsSource = dt . AsDataView ( ) ; <EOF>
List < List < string > > rows = ( from myRow in data . AsEnumerable ( ) select new List < string > { myRow [ CODE_STRING ] . ToString ( ) , myRow [ CODE_STRING ] . ToString ( ) , myRow [ CODE_STRING ] . ToString ( ) , myRow [ CODE_STRING ] . ToString ( ) , myRow [ CODE_STRING ] . ToString ( ) } ) . ToList ( ) ; <EOF>
var searchTerms = CODE_STRING . Split ( new [ ] { CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; var query = session . Advanced . LuceneQuery < Person , PersonIndex > ( ) ; query = query . OpenSubclause ( ) ; foreach ( var term in terms ) { query = query . WhereStartsWith ( CODE_STRING ) , term ) . OrElse ( ) ; query = query . WhereStartsWith ( CODE_STRING ) , term ) . OrElse ( ) ; } query = query . WhereEquals ( CODE_STRING , null ) ; query = query . CloseSubclause ( ) ; <EOF>
MyClient client = new MyService . MyClient ( ) ; client . Endpoint . Address = new EndpointAddress ( new Uri ( CODE_STRING ) ) ; client . Open ( ) ; <EOF>
public bool IsValidEmailAddress ( string emailAddress ) { try { MailAddress m = new MailAddress ( emailAddress ) ; return true ; } catch ( FormatException ) { return false ; } } <EOF>
Vector2 IntermediatePoint ( Vector2 p0 , Vector2 p1 , float t ) { Vector2 delta = p1 - p0 ; float distance = delta . Length ( ) ; if ( distance == CODE_REAL ) { return p0 ; } else { Vector2 direction = delta / distance ; return p0 + direction * ( distance * t ) ; } } <EOF>
context . tagService . GetTagList ( ) . Where ( x = > x . tag . name . Length < CODE_INTEGER && x . tag . name . Length > CODE_INTEGER ) . Take ( CODE_INTEGER ) . ToList ( ) ; <EOF>
class Program { static void Main ( string [ ] args ) { Process p = new Process { StartInfo = { FileName = CODE_STRING } } ; p . Start ( ) ; p . Dispose ( ) ; GC . Collect ( ) ; Console . ReadKey ( ) ; } } <EOF>
using System . Drawing ; protected void RadGrid1_ItemDataBound ( object sender , Telerik . Web . UI . GridItemEventArgs e ) { if ( e . Item is GridDataItem ) { TableCell celltoVerify1 = dataBoundItem [ CODE_STRING ] ; if ( celltoVerify1 . Text == CODE_STRING ) { celltoVerify1 . ForeColor = Color . Red ; } } } <EOF>
protected static List < TSub > MyStaticList = BaseUtil . MyStaticList <EOF>
string uri = CODE_STRING string odataQuery = CODE_STRING var request = WebRequest . Create ( uri + CODE_STRING + odataQuery ) ; request . Method = CODE_STRING ; var reader = new StreamReader ( stream : request . GetResponse ( ) . GetResponseStream ( ) ) ; string neededData = reader . ReadToEnd ( ) ; <EOF>
int n = CODE_INTEGER ; int mask = CODE_INTEGER ; byte result = ( byte ) ( mask > > n ) ; <EOF>
Image1 . ImageUrl = CODE_STRING + base6 ; <EOF>
document . getElementById ( ' < %= hidHTML . ClientID % > ' ) . value = encodeURI ( document . body . innerHTML ) ; <EOF>
public class GameResultModel { public int WinnerUserId { get ; set ; } public int LoserUserId { get ; set ; } } <EOF>
String css = CODE_STRING ; String xpath = css2xpath . Transform ( css ) ; <EOF>
you need to have solid Unit Tests <EOF>
. HeaderBarThreshold : hover a { color : Red ! important ; } <EOF>
string szMgwGCCPath = CODE_STRING ; string szArguments = CODE_STRING ; ProcessStartInfo gccStartInfo = new ProcessStartInfo ( szMgwGCCPath , szArguments ) ; gccStartInfo . WindowStyle = ProcessWindowStyle . Hidden ; Process . Start ( gccStartInfo ) ; <EOF>
cmd . Parameters . AddWithValue ( CODE_STRING , genderCombo . SelectedValue ) ; <EOF>
string urlpath = CODE_STRING HttpWebRequest request = ( HttpWebRequest ) WebRequest . Create ( urlpath ) ; using ( HttpWebResponse response = ( HttpWebResponse ) request . GetResponse ( ) ) { using ( StreamReader reader = new StreamReader ( response . GetResponseStream ( ) ) ) { string html = reader . ReadToEnd ( ) ; Regex regEx = new Regex ( CODE_STRING ) ; MatchCollection matches = regEx . Matches ( html ) ; if ( matches . Count > CODE_INTEGER ) { foreach ( Match match in matches ) { if ( match . Success ) { Console . WriteLine ( match . Groups [ CODE_STRING ] . Value ) ; } } } } <EOF>
string path ; path = System . IO . Path . GetDirectoryName ( System . Reflection . Assembly . GetExecutingAssembly ( ) . GetName ( ) . CodeBase ) ; <EOF>
var nodes = doc . DocumentNode . SelectNodes ( CODE_STRING ) ; var nodes2 = nodes . Select ( c1 = > c1 . SelectNodes ( CODE_STRING ) ) ; <EOF>
var tasks = users . Select ( async user = > { var products = await this . repository . GetProducts ( user . UserName ) ; return new { user , products } ; } ) ; var results = await Task . WhenAll ( tasks ) ; var resultsAsDictionary = results ( x = > x . user , x = > x . products ) ; <EOF>
foreach ( Item MarketItem in MarketSet . OrderBy ( x = > x . Fields [ CODE_STRING ] . Value ) ) MarketLinks . Text += string . Format ( CODE_STRING , ScHelper . GetRegionPath ( MarketItem ) , MarketItem . Fields [ CODE_STRING ] . Value ) ; <EOF>
[ TestMethod ] public void HomeControllerReturnsIndexViewWhenUserIsAdmin ( ) { var homeController = new HomeController ( ) ; var userMock = new Mock < IPrincipal > ( ) ; userMock . Expect ( p = > p . IsInRole ( CODE_STRING ) ) . Returns ( true ) ; var contextMock = new Mock < HttpContextBase > ( ) ; contextMock . ExpectGet ( ctx = > ctx . User ) . Returns ( userMock . Object ) ; var controllerContextMock = new Mock < ControllerContext > ( ) ; controllerContextMock . ExpectGet ( con = > con . HttpContext ) . Returns ( contextMock . Object ) ; homeController . ControllerContext = controllerContextMock . Object ; var result = homeController . Index ( ) ; userMock . Verify ( p = > p . IsInRole ( CODE_STRING ) ) ; Assert . AreEqual ( ( ( ViewResult ) result ) . ViewName , CODE_STRING ) ; } <EOF>
Workbook book = * * * * xyz * * * * ; if ( book . HasPassword ) { book . Password = Properties . Settings . Default . ExcelFilePW ; MessageBox . Show ( CODE_STRING ) ; } <EOF>
private void button2_Click ( object sender , EventArgs e ) { if ( iCount == CODE_INTEGER ) { iTemp = CODE_INTEGER ; iCount ++ ; } iTemp = iTemp - CODE_INTEGER ; MessageBox . Show ( iTemp . ToString ( ) ) ; } } <EOF>
private bool _isFirstKeyPressedW = false ; private void Form1_KeyDown ( object sender , KeyEventArgs e ) { if ( e . Control & e . KeyCode == Keys . W ) { _isFirstKeyPressedW = true ; } if ( _isFirstKeyPressedW ) { if ( e . Control & e . KeyCode == Keys . S ) { } else { _isFirstKeyPressedW = e . KeyCode == Keys . W ; } } } <EOF>
_wbs . OpenText ( Path : = pathTemp , Datatype : = xlDelimited , Other : = True , Otherchar : = CODE_STRING ) ; <EOF>
Process regeditProcess = Process . Start ( CODE_STRING , CODE_STRING ) ; <EOF>
Call service first then assign result . var benefits = customerBenefits . Select ( n = > { var user = serService . GetByUserID ( n . AddedByUserID . Value ) ; return new CustomerBenefit ( n . BenefitID , n . AddedByUserID . HasValue ? ( user == null ? String . Empty : ) . DisplayName ) : n . AddedByAgentID , n . Reason } ) ; <EOF>
int id = ( int ) ( TempData [ CODE_STRING ] ) ; <EOF>
Element . setAttribute ( CODE_STRING , Element . offsetWidth , CODE_INTEGER ) ; Element . setAttribute ( CODE_STRING , Element . offsetHeight , CODE_INTEGER ) ; Element . setAttribute ( CODE_STRING , CODE_STRING , CODE_INTEGER ) ; <EOF>
. NET Base Class Libraries : Long Path <EOF>
var query = source . GroupBy ( x = > new { x . Column1 , x . Column2 } ) ; <EOF>
static string LittleEndian ( string num ) { int number = Convert . ToInt32 ( num , CODE_INTEGER ) ; byte [ ] bytes = BitConverter . GetBytes ( number ) ; string retval = CODE_STRING ; foreach ( byte b in bytes ) retval += b . ToString ( CODE_STRING ) ; return retval ; } <EOF>
public static AceDataObjectCollection < T > ToAceDataObjectCollection < T > ( this IEnumerable < T > col ) where T : IAceDataObject { AceDataObjectCollection < T > objects = new AceDataObjectCollection < T > ( ) ; foreach ( T item in col ) objects . Add ( item ) ; return objects ; } <EOF>
using System . Deployment . Application ; . . . private void DisplayChangeLog ( ) { if ( ! ApplicationDeployment . IsNetworkDeployed ) return ; if ( ! ApplicationDeployment . CurrentDeployment . IsFirstRun ) return ; ThreadPool . QueueUserWorkItem ( state = > Execute . OnUIThread ( ( ) = > < Pop up window with latest changes > ) ) ; } <EOF>
private static int MyComp ( DataRow left , DataRow right ) { if ( left [ CODE_STRING ] == right [ CODE_STRING ] ) { return CODE_INTEGER ; } else { return CODE_INTEGER ; } } lst . Sort ( MyComp ) <EOF>
Dispatcher . BeginInvoke ( new Action ( delegate ( ) { contentBox . Focus ( ) ; System . Windows . Input . Keyboard . Focus ( contentBox ) ; } ) ) ; <EOF>
public override void DataBind ( ) { foreach ( var item in ( IEnumerable < LifestreamItem > ) this . DataSource ) { if ( item is LifestreamTwitterItem ) { TwitterTemplate . InstantiateIn ( item ) ; } else { ItemTemplate . InstantiateIn ( item ) ; } item . DataBind ( ) ; Controls . Add ( item ) ; } } <EOF>
int sum = CODE_INTEGER ; foreach ( int scores in bowlerScores ) { sum += scores ; } double average = ( double ) sum / ( double ) SCORE_COUNT ; <EOF>
var nonIntersecting = a . Union ( b ) . Except ( a . Intersect ( b ) ) ; <EOF>
string s = Encoding . UTF8 . GetString ( fileBytes ) ; <EOF>
void dataGridView_CellMouseClick ( object sender , DataGridViewCellMouseEventArgs e ) { if ( e . Button == MouseButtons . Left ) { if ( e . ColumnIndex >= CODE_INTEGER && e . RowIndex >= CODE_INTEGER ) { if ( e . ColumnIndex == CODE_INTEGER || e . ColumnIndex == CODE_INTEGER ) { setSelectedRow ( e . RowIndex ) ; } else { } } } } <EOF>
WebClient webClient = new WebClient ( ) ; webClient . DownloadFile ( remoteFileUrl , localFileName ) ; <EOF>
MyList . Select ( x = > new { x . Id , x . Name } ) . ToList ( ) ; <EOF>
SqlByte x = CODE_INTEGER ; int y ; y = ( int ) x ; <EOF>
wkSheet . Range [ CODE_STRING , _ ] . Value2 = CODE_STRING ; wkSheet . Range [ CODE_STRING , _ ] . Value2 = CODE_STRING ; wkSheet . Range [ CODE_STRING , _ ] . Value2 = CODE_STRING ; <EOF>
string oneWay = CODE_STRING ; string anotherWay = CODE_STRING ; <EOF>
ulong value1 = CODE_INTEGER ; long value2 = ( long ) value1 ; ulong value3 = ( ulong ) value2 ; <EOF>
var copyFrom = agendaTable . Rows [ i ] . Cells [ CODE_INTEGER ] . Range ; var copyTo = otherTablesRow . Cells [ CODE_INTEGER ] . Range ; copyFrom . MoveEnd ( WdUnits . wdCharacter , - CODE_INTEGER ) ; copyTo . FormattedText = copyFrom . FormattedText ; <EOF>
List < string > duplicateLabelsList = allResourcesLookup . SelectMany ( x = > x ) . Select ( x = > x . LoaderOptions . Label ) . Duplicates < string , string > ( ) . ToList ( ) ; ; if ( duplicateLabelsList . Any ( ) ) throw new DuplicateResourceLoaderLabelsException ( duplicateLabelsList ) ; <EOF>
foreach ( GridViewRow row in gvUsers . Rows ) { TextBox txtFirstName = row . FindControl ( CODE_STRING ) as TextBox ; TextBox txtLastName = row . FindControl ( CODE_STRING ) as TextBox ; if ( txtFirstName . Text != CODE_STRING && txtLastName . Text != CODE_STRING ) { } } <EOF>
var persons = person . Select ( c = > new { name = c . firstname } ) ; <EOF>
List < string > test1 = txtDir . Text . Split ( CODE_CHAR ) . ToList ( ) ; <EOF>
If DataGridViewCell . Value . ToString ( ) = CODE_STRING Then <EOF>
public class CustomDateTimeTypeConverter : TypeConverter { public override object ConvertFrom ( ITypeDescriptorContext context , CultureInfo culture , object value ) { return DateTime . ParseExact ( value . ToString ( ) , CODE_STRING , culture ) ; } } [ TypeConverter ( typeof ( CustomDateTimeTypeConverter ) ) ] struct AdvancedDateTime { } [ TestFixture ] public class DateTime { [ Test ] public void TypeConvert_StrangeFormat_ConvertsWithoutProblem ( ) { string datetime = CODE_STRING ; TypeConverter converter = TypeDescriptor . GetConverter ( typeof ( AdvancedDateTime ) ) ; var convertedFromString = converter . ConvertFromString ( datetime ) ; Assert . AreEqual ( new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) , convertedFromString ) ; } } <EOF>
var str = CODE_STRING ; Console . WriteLine ( str . Substring ( CODE_INTEGER , str . IndexOf ( CODE_CHAR ) ) + str . Substring ( str . LastIndexOf ( CODE_CHAR ) ) ) ; <EOF>
using System . Drawing . Drawing2D ; . . . public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; panelPath = new GraphicsPath ( ) ; panelPath . AddCurve ( new Point [ ] { new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) , } ) ; panelPath . AddCurve ( new Point [ ] { new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) , } ) ; panel1 . Paint += new PaintEventHandler ( panel1_Paint ) ; } void panel1_Paint ( object sender , PaintEventArgs e ) { e . Graphics . TranslateTransform ( - CODE_INTEGER , - CODE_INTEGER ) ; e . Graphics . FillPath ( Brushes . Green , panelPath ) ; e . Graphics . DrawPath ( Pens . Red , panelPath ) ; } GraphicsPath panelPath ; } <EOF>
string sampletext = CODE_STRING ; System . Security . Cryptography . SHA1 hash = System . Security . Cryptography . SHA1CryptoServiceProvider . Create ( ) ; byte [ ] plainTextBytes = Encoding . UTF8 . GetBytes ( sampletext ) ; byte [ ] hashBytes = hash . ComputeHash ( plainTextBytes ) ; foreach ( byte b in hashBytes ) { Console . Write ( string . Format ( CODE_STRING , b ) ) ; } <EOF>
using System ; using System . Net ; public class Test { static void Main ( string [ ] args ) { Check ( new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; Check ( new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; Check ( new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; Check ( new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; Check ( new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; } static void Check ( DateTime date ) { DateTime ? next = OneMonthAfter ( date ) ; Console . WriteLine ( CODE_STRING , date , next == null ? ( object ) CODE_STRING : next ) ; } static DateTime ? OneMonthAfter ( DateTime date ) { DateTime ret = date . AddMonths ( CODE_INTEGER ) ; if ( ret . Day != date . Day ) { return null ; } return ret ; } } <EOF>
{ CODE_STRING : true , CODE_STRING : CODE_STRING } <EOF>
var container = new UnityContainer ( ) ; var manager = container . Resolve < EventManager > ( ) ; container . RegisterInstance < IEventManager > ( manager , new ContainerControlledLifetimeManager ( ) ) ; container . RegisterInstance < IEventSource > ( CODE_STRING , manager , new ContainerControlledLifetimeManager ( ) ) ; container . RegisterType < IEventSource , EventSourceA > ( CODE_STRING ) ; container . RegisterType < IEventSource , EventSourceB > ( CODE_STRING ) ; container . RegisterType ( typeof ( Component ) ) ; container . Resolve < Component > ( ) ; <EOF>
public getBackground ( HttpSessionState session ) { String bg = ( string ) session [ CODE_STRING ] ; if ( bg == null ) { bg = CODE_STRING ; session [ CODE_STRING ] = bg ; } return bg ; } <EOF>
public List < UserPrincipal > FindAllUsers ( List < Guid > allGuids ) { List < UserPrincipal > result = new List < UserPrincipal > ( ) ; using ( PrincipalContext ctx = new PrincipalContext ( ContextType . Domain ) ) { foreach ( Guid userGuid in allGuids ) { UserPrincipal user = UserPrincipal . FindByIdentity ( ctx , userGuid ) ; if ( user != null ) { result . Add ( user ) ; } } } return result ; } <EOF>
protected void DataList1_ItemCommand ( object source , DataListCommandEventArgs e ) { if ( e . CommandName == CODE_STRING ) { ( ( TextBox ) e . Item . FindControl ( CODE_STRING ) ) . Text = ( ( Label ) e . Item . FindControl ( CODE_STRING ) ) . Text ; } } <EOF>
Missing missing = Missing . Value ; Application excel = new Application ( ) ; Workbook workbook = excel . Workbooks . Open ( sourceFilePath , missing , missing , missing , missing , missing , missing , missing , missing , missing , missing , missing , missing , missing , XlCorruptLoad . xlRepairFile ) ; workbook . SaveAs ( savedFile , XlFileFormat . xlWorkbookDefault , missing , missing , missing , missing , XlSaveAsAccessMode . xlExclusive , missing , missing , missing , missing , missing ) ; workbook . Close ( true , missing , missing ) ; <EOF>
SolidColorBrush brush = LayoutRoot . Background as SolidColorBrush ; if ( brush != null ) { if ( brush . Color == Colors . White ) { } } <EOF>
public partial class LinqGrid < T > : UserControl where T : class , new ( ) { System . Data . Linq . Table < T > tmpDataTable ; public LinqGrid ( ) { InitializeComponent ( ) ; } public void Bind ( System . Data . Linq . Table < T > listSource ) { Project . dbClassesDataContext dbc = new Project . dbClassesDataContext ( ) ; tmpDataTable = listSource ; var query = ( from c in listSource select c ) ; dgvRecords . DataSource = query . Take ( CODE_INTEGER ) . ToList ( ) ; } private void btnNext_Click ( object sender , EventArgs e ) { tmpDataTable . Skip ( CODE_INTEGER ) . Take ( CODE_INTEGER ) ; . . . . } } <EOF>
Guid userGuid = ( Guid ) Membership . GetUser ( User . Identity . Name ) . ProviderUserKey ; UserIdLabel . Text = userGuid . ToString ( ) ; <EOF>
var Result = setA . Union ( setB ) <EOF>
Match match = Regex . Match ( input , CODE_STRING , RegexOptions . Multiline ) ; if ( match . Success ) { Console . WriteLine ( match . Groups [ CODE_INTEGER ] . Value ) ; } <EOF>
Panel panel = new Panel ( ) ; panel . Size = new Size ( CODE_INTEGER , CODE_INTEGER ) ; panel . Dock = DockStyle . Bottom ; Button button = new Button ( ) ; button . Size = new Size ( CODE_INTEGER , CODE_INTEGER ) ; button . Location = new Point ( ( panel . Width - button . Width ) / CODE_INTEGER , ( panel . Height - button . Height ) / CODE_INTEGER ) ; button . Anchor = AnchorStyles . None ; panel . Controls . Add ( button ) ; this . Controls . Add ( panel ) ; <EOF>
using System . Linq ; . . . foreach ( ClsPC pc in iclsobj . GetPC ( ) ) { if ( listBox1 . Items . Count == CODE_INTEGER ) { listBox1 . Items . Add ( pc . IPAddress ) ; } else { if ( ! listBox1 . Items . Any ( i = > String . Compare ( i . ToString ( ) , pc . IPAddress , true ) == CODE_INTEGER ) ) { listBox1 . Items . Add ( pc . IPAddress ) ; } } } <EOF>
var dbUsernames = context . Database . SqlQuery < string > ( CODE_STRING ) ; foreach ( string dbUsername in dbUsernames ) { string [ ] userRoles = Roles . GetRolesForUser ( dbUsername ) ; if ( userRoles != null && userRoles . Length > CODE_INTEGER ) { Roles . RemoveUserFromRoles ( dbUsername , userRoles ) ; } int userId = context . Database . SqlQuery < int > ( CODE_STRING , dbUsername ) . First ( ) ; Membership . DeleteUser ( dbUsername , true ) ; context . Database . ExecuteSqlCommand ( CODE_STRING , userId ) ; } <EOF>
Queries . List = new ObservableCollection < Query > ( Queries . List . Where ( x = > x . Name . Equals ( value ) ) ) ; <EOF>
protected void MyControlId_EventName ( object sender , EventArgs e ) ; <EOF>
public DbReturn spExample_upd ( int id1 ) { return ( DbReturn ) spExample_upd_internal ( id1 ) ; } [ Function ( Name = CODE_STRING ) ] private int spExample_upd_internal ( [ Parameter ( Name = CODE_STRING , DbType = CODE_STRING ) ] int id1 ) { var result = ExecuteMethodCall ( this , ( MethodInfo ) MethodInfo . GetCurrentMethod ( ) , id1 ) ; return ( int ) result . ReturnValue ; } <EOF>
using System . Windows . Forms ; using System . Windows . Forms . Design ; public override void Initialize ( IComponent component ) { base . Initialize ( component ) ; if ( this . Control is MyUserControl ) { var i = this . Control as MyUserControl ; this . EnableDesignMode ( i . label1 , CODE_STRING ) ; this . EnableDesignMode ( i . pictureBox1 , CODE_STRING ) ; } } <EOF>
protected void Buton_Click ( object sender , EventArgs e ) { SqlDataSource1 . UpdateParameters [ CODE_STRING ] . DefaultValue = CODE_STRING ; SqlDataSource1 . Update ( ) ; } <EOF>
static object s_lock = new object ( ) ; static IDictionary < Type , Func < BinaryReader , dynamic > > s_readers = null ; static T ReadData < T > ( string fileName ) { lock ( s_lock ) { if ( s_readers == null ) { s_readers = new Dictionary < Type , Func < BinaryReader , dynamic > > ( ) ; s_readers . Add ( typeof ( int ) , r = > r . ReadInt32 ( ) ) ; s_readers . Add ( typeof ( string ) , r = > r . ReadString ( ) ) ; } } if ( ! s_readers . ContainsKey ( typeof ( T ) ) ) throw new ArgumentException ( CODE_STRING ) ; using ( var fs = new FileStream ( fileName , FileMode . Open , FileAccess . Read , FileShare . Read ) ) using ( var reader = new BinaryReader ( fs ) ) { return s_readers [ typeof ( T ) ] ( reader ) ; } } <EOF>
using System ; using Microsoft . Office . Interop . Excel using VBA = Microsoft . Vbe . Interop ; . . . VBA . Forms . UserForm form ; VBA . Forms . Control c ; foreach ( VBA . VBComponent mod in wb . VBProject . VBComponents ) { if ( ! ( mod . Designer is VBA . Forms . UserForm ) ) continue ; form = ( VBA . Forms . UserForm ) mod . Designer ; for ( int i = CODE_INTEGER ; i < form . Controls . Count ; i ++ ) { c = ( VBA . Forms . Control ) form . Controls . Item ( i ) ; . . . } } <EOF>
void Main ( ) { const long PageSizeLimit = CODE_INTEGER ; var url = CODE_STRING ; HttpWebRequest request = ( HttpWebRequest ) WebRequest . Create ( url ) ; request . Method = CODE_STRING ; long pageSize ; string page ; using ( HttpWebResponse response = ( HttpWebResponse ) request . GetResponse ( ) ) { pageSize = response . ContentLength ; } if ( pageSize > CODE_INTEGER && pageSize < PageSizeLimit ) { page = DownloadPage ( url ) ; ProcessPage ( page ) ; } else { page = DownloadPage ( url ) ; if ( page . Length < PageSizeLimit ) { ProcessPage ( page ) ; } } } public string DownloadPage ( string url ) { using ( var webClient = new WebClient ( ) ) { return webClient . DownloadString ( url ) ; } } public void ProcessPage ( string page ) { } <EOF>
var q = Persons . Where ( p = > Countries . Any ( c = > p . Id == c . PersonId ) ) <EOF>
class SiteMap : ClassMap < Site > { public SiteMap ( ) { Join ( CODE_STRING , join = > { join . KeyColumn ( CODE_STRING ) ; join . Component ( x = > x . Options , c = > c . Map ( x = > x . Prop1 ) ) ; } ) ; } } <EOF>
^ ( ? : ( ? ! ABC ) . ) * XYZ <EOF>
var parts = s . Split ( new [ ] { CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; foreach ( string word in parts ) { Console . WriteLine ( word ) ; } <EOF>
public class person { public string firstname { get ; set ; } public string lastname { get ; set ; } public person ( string fname , string lname ) { firstname = fname ; lastname = lname ; } public string GetEmailRespPattern ( ) { } } <EOF>
class LengthComparer : IComparer < String > { public int Compare ( string x , string y ) { int lengthComparison = x . Length . CompareTo ( y . Length ) if ( lengthComparison == CODE_INTEGER ) { return x . CompareTo ( y ) ; } else { return lengthComparison ; } } } <EOF>
var ips = new List < string > ( ) ; var domains = new List < string > ( ) ; foreach ( var elements in txt . Text . Split ( new [ ] { Environment . NewLine } , StringSplitOptions . RemoveEmptyEntries ) . Skip ( CODE_INTEGER ) . Select ( line = > line . Split ( new [ ] { CODE_STRING } , StringSplitOptions . RemoveEmptyEntries ) ) ) { ips . Add ( elements [ CODE_INTEGER ] ) ; domains . Add ( elements [ CODE_INTEGER ] ) ; } ipsArray = ips . ToArray ( ) ; domainsArray = domains . ToArray ( ) ; <EOF>
public void AddToGoogle ( ) { var client = new DatabaseClient ( Settings . Default . GmailAccount , Settings . Default . GmailPassword ) ; string dbName = Settings . Default . WorkBook ; var db = client . GetDatabase ( dbName ) ?? client . CreateDatabase ( dbName ) ; string tableName = Settings . Default . WorkSheet ; var t = db . GetTable < ActivityLog > ( tableName ) ?? db . CreateTable < ActivityLog > ( tableName ) ; var all = t . FindAll ( ) ; t . Add ( this ) ; } <EOF>
PdfReader pdfReader = new PdfReader ( filename ) ; IList < Dictionary < string , object > > bookmarks = SimpleBookmark . GetBookmark ( pdfReader ) ; for ( int i = CODE_INTEGER ; i < bookmarks . Count ; i ++ ) { MessageBox . Show ( bookmarks [ i ] . Values . ToArray ( ) . GetValue ( CODE_INTEGER ) . ToString ( ) ) ; if ( bookmarks [ i ] . Count > CODE_INTEGER ) { MessageBox . Show ( bookmarks [ i ] . ToList ( ) . Count . ToString ( ) ) ; } } <EOF>
if ( formSubmitted ) { acceptButton . Enabled = false ; declineButton . Enabled = false ; } <EOF>
public static class StaticRandom { static int seed = Environment . TickCount ; static readonly ThreadLocal < Random > random = new ThreadLocal < Random > ( ( ) = > new Random ( Interlocked . Increment ( ref seed ) ) ) ; public static int Rand ( ) { return random . Value . Next ( ) ; } } <EOF>
private void yourTextBox_TextInput ( object sender , TextCompositionEventArgs e ) { if ( e . Text == CODE_STRING ) { } } <EOF>
private void dgv_DataBindingComplete ( object sender , DataGridViewBindingCompleteEventArgs e ) { dgv . Rows [ CODE_INTEGER ] . Cells [ CODE_INTEGER ] . Style . BackColor = Color . Red ; } <EOF>
using ( StreamWriter sw = File . CreateText ( CODE_STRING ) ) { var excelApp = new Excel . Application ( ) ; var workBook = excelApp . Workbooks . Open ( thisFile ) ; foreach ( var sheet in workBook . Worksheets ) { foreach ( var row in sheet . UsedRange . Rows ) { foreach ( var cell in row . Columns ) { sw . Write ( cell . Value + CODE_STRING ) ; } sw . WriteLine ( ) ; } } } <EOF>
protected void Login1_LoggedIn ( object sender , EventArgs e ) { if ( Login1 . UserName == CODE_STRING ) Login1 . DestinationPageUrl = CODE_STRING ; } <EOF>
XmlDocument doc = new XmlDocument ( ) ; doc . Load ( fileName ) ; XmlNodeList nodes = doc . SelectNodes ( CODE_STRING ) ; <EOF>
public Vector2 ScreenToWorld ( Vector2 onScreen ) { var matrix = Matrix . Invert ( World . Camera . CurrentTransformation ) ; return Vector2 . Transform ( onScreen , matrix ) ; } <EOF>
public class LibraryRequestViewModel { private LibraryRequest request ; public LibraryRequestViewModel ( LibraryRequest request ) { this . request = request ; } [ Required ] public string Password { get { return this . request . Password ; } set { this . request . Password = value ; } } } <EOF>
MyObj o = null ; Assembly a = Assembly . LoadFrom ( CODE_STRING ) ; Type t = a . GetType ( CODE_STRING ) ; ConstructorInfo ctor = t . GetConstructor ( new Type [ ] { typeof ( string ) } ) ; if ( ctor != null ) o = ctor . Invoke ( new object [ ] { s } ) ; <EOF>
string root_str = ( ( ConverterCollections . AbstractConverterCacheEntry ) ( cacheItem ) ) . Key . ToString ( ) ; string parent_str = ( ( DictionaryEntry ) ( a ) ) . Key . ToString ( ) ; string child_str = ( ( object [ ] ) ( ( ( DictionaryEntry ) ( a ) ) . Value ) ) [ CODE_INTEGER ] . ToString ( ) ; <EOF>
public static TransactionOptions GetTransactionOptions ( ) { TransactionOptions tranOpt = new TransactionOptions ( ) ; tranOpt . IsolationLevel = IsolationLevel . Serializable ; return tranOpt ; } <EOF>
public override object EditValue ( ITypeDescriptorContext context , System . IServiceProvider provider , object value ) { IWindowsFormsEditorService service = provider . GetService ( typeof ( IWindowsFormsEditorService ) ) as IWindowsFormsEditorService ; OptoSigmaLinearSettings opto = value as OptoSigmaLinearSettings ; opto = ( OptoSigmaLinearSettings ) value ; if ( opto == null ) { opto = new OptoSigmaLinearSettings ( ) ; } if ( service != null ) { using ( OptoSigmaLinearSetup form = new OptoSigmaLinearSetup ( opto ) ) { DialogResult result ; result = service . ShowDialog ( form ) ; if ( result == DialogResult . OK ) { opto = form . GeneralSettings ; } } } return opto ; } <EOF>
arrayOfStrings = arrayOfStrings . Select ( s = > s . Replace ( CODE_STRING , CODE_STRING ) ) . ToArray ( ) ; <EOF>
Series . IsXValueIndexed = true ; <EOF>
Visibility = CODE_STRING <EOF>
private void dataGridView1_RowsAdded ( object sender , DataGridViewRowsAddedEventArgs e ) { if ( dataGridView1 . Rows [ e . RowIndex ] . IsNewRow ) { return ; } dataGridView1 [ CODE_INTEGER , e . RowIndex ] . Value = ( dataGridView1 . Rows [ e . RowIndex ] . DataBoundItem as DomainModel ) . Name ; } <EOF>
bool designMode = ( LicenseManager . UsageMode == LicenseUsageMode . Designtime ) ; <EOF>
interface WCFDataContract { public int id ; public int version ; public DateTime writeDateTime ; public string xmlBlob ; public int anotherBitOfInformation ; public string andSoemMoreInfo ; public book andABooleanJustInCase ; } <EOF>
bytenumber = port . Read ( data , CODE_INTEGER , CODE_INTEGER ) ; if ( data [ CODE_INTEGER ] == CODE_INTEGER ) { } } <EOF>
HtmlDocument doc = new HtmlWeb ( ) . Load ( String . Format ( CODE_STRING ) ) ; var value = doc . DocumentNode . SelectSingleNode ( CODE_STRING ) . InnerText ; <EOF>
string propertyName = CODE_STRING ; FieldInfo fieldInfo = typeof ( foo ) . GetField ( propertyName , BindingFlags . NonPublic | BindingFlags . Static ) ; object fieldValue = fieldInfo . GetValue ( null ) ; <EOF>
byte [ ] octets = System . Text . Encoding . ASCII . GetBytes ( CODE_STRING ) ; <EOF>
var CommonNumbers = from a in A . AsEnumerable < double > ( ) join b in B . AsEnumerable < double > ( ) on a equals b select a ; double JaccardIndex = ( ( ( double ) CommonNumbers . Count ( ) ) / ( ( double ) ( A . Count ( ) + B . Count ( ) ) ) ) ; <EOF>
System . DirectoryServices . DirectoryEntry entry = new System . DirectoryServices . DirectoryEntry ( ) ; entry . RefreshCache ( new string [ ] { CODE_STRING , CODE_STRING } ) ; <EOF>
var psi = new ProcessStartInfo ( CODE_STRING ) ; psi . Arguments = CODE_STRING ; psi . WindowStyle = ProcessWindowStyle . Hidden ; psi . UseShellExecute = false ; psi . RedirectStandardOutput = true ; string val = String . Empty ; var p = Process . Start ( psi ) ; p . BeginOutputReadLine ( ) ; p . OutputDataReceived += delegate ( object sender , DataReceivedEventArgs eventArgs ) { val += eventArgs . Data + " \ r " ; } ; p . WaitForExit ( ) ; MessageBox . Show ( val ) ; <EOF>
var types = assembly . GetTypes ( ) . Where ( type = > type . Name == CODE_STRING ) ; var firstType = types . FirstOrDefault ( ) ; <EOF>
CREATE TABLE dbo . Orders ( OrderID into IDENTITY ( CODE_INTEGER , CODE_INTEGER ) , -- other columns ) <EOF>
var activity = bindingListActivty . SingleOrDefault ( k = > k . _dataGridViewId == CODE_INTEGER ) ; if ( activity != null ) activity . addBuyOrders ( new BuyOrders ( ) ) ; <EOF>
void RemoveGroup ( string groupName ) { string path = string . Format ( CODE_STRING , groupName ) ; using ( DirectoryEntry entry = new DirectoryEntry ( path , CODE_STRING , CODE_STRING ) ) { using ( DirectoryEntry parent = rootEntry . Parent ) { parent . Children . Remove ( entry ) ; } } } <EOF>
Student objWorkingObject = new Student ( ) ; XmlDocument _Doc = new XmlDocument ( ) ; _Doc . LoadXml ( strOrigObject ) ; var ser = new System . Xml . Serialization . XmlSerializer ( typeof ( Student ) ) ; objWorkingObject = ( Student ) ser . Deserialize ( new XmlNodeReader ( _Doc . DocumentElement ) ) ; <EOF>
string str = string . Join ( string . Empty , File . ReadAllLines ( FileName ) ) ; <EOF>
Account Accounttype = new Account ( ) ; StorageKind strgKind = StorageKind . Phone ; Accounttype . Kind = strgKind ; <EOF>
object [ ] x = new object [ CODE_INTEGER ] ; x [ CODE_INTEGER ] = new { firstName = CODE_STRING , lastName = CODE_STRING } ; x [ CODE_INTEGER ] = new { brand = CODE_STRING } ; <EOF>
foreach ( HtmlElement i in webBrowser1 . Document . All ) { if ( i . OuterText == CODE_STRING && i . GetAttribute ( CODE_STRING ) != CODE_STRING ) { webBrowser1 . Navigate ( i . GetAttribute ( CODE_STRING ) ) ; } } <EOF>
string targetUrl = CODE_STRING ; var postBytes = Encoding . Default . GetBytes ( CODE_STRING ) ; var httpRequest = ( HttpWebRequest ) WebRequest . Create ( targetUrl ) ; httpRequest . ContentLength = postBytes . Length ; httpRequest . Method = CODE_STRING ; using ( var requestStream = httpRequest . GetRequestStream ( ) ) requestStream . Write ( postBytes , CODE_INTEGER , postBytes . Length ) ; var httpResponse = httpRequest . GetResponse ( ) ; using ( var responseStream = httpResponse . GetResponseStream ( ) ) if ( responseStream != null ) using ( var responseStreamReader = new StreamReader ( responseStream ) ) { var serverResponse = responseStreamReader . ReadToEnd ( ) ; } <EOF>
ReportDataSource rds = new ReportDataSource ( CODE_STRING , ObjectDataSource1 ) ; ReportDataSource rds2 = new ReportDataSource ( CODE_STRING , ObjectDataSource2 ) ; rptViewer . LocalReport . DataSources . Clear ( ) ; rptViewer . LocalReport . DataSources . Add ( rds ) ; rptViewer . LocalReport . DataSources . Add ( rds2 ) ; <EOF>
var rigaStagioneSerie = document . DocumentNode . SelectNodes ( CODE_STRING ) ; List < string > pageTitles = new List < string > ( ) ; foreach ( var title in rigaStagioneSerie ) { if ( title . ChildNodes . Count == CODE_INTEGER ) { pageTitles . Add ( title . InnerText . Replace ( " CODE_STRING \ t " , string . Empty ) ) ; } } var titoloSerie = document . DocumentNode . SelectNodes ( CODE_STRING ) ; foreach ( var title in titoloSerie ) { pageTitles . Add ( title . InnerText ) ; } <EOF>
private void AddItemsToCollectionAndInvokePropertyChanged < T , U > ( Expression < Func < U > > propertyNameExpression , IList < T > addItems ) { var p = ( PropertyInfo ) ( ( MemberExpression ) propertyNameExpression . Body ) . Member ; var c = ( ExtendedObservableCollection < T > ) p . GetValue ( this , null ) ; c . AddItems ( addItems ) ; OnPropertyChanged ( propertyNameExpression ) ; } <EOF>
DateTimePicker dateTimePicker1 = new DateTimePicker ( ) ; dateTimePicker1 . ShowCheckBox = true ; dateTimePicker1 . Checked = false ; <EOF>
Insert ( String query ) { Execute the Sql Query : query result = Execute the Sql Query : CODE_STRING return the first element of result } <EOF>
List < MyOrder > sortedList = myOrders . OrderBy ( myOrder = > myOrder . OrderItems . Min ( myItem = > myItem . ItemCreateDate ) ) . ToList ( ) ; <EOF>
this . Close ( ) ; var mw = new MainWindow ( ) ; mw . Show ( ) ; mw . Close ( ) ; <EOF>
json . SerializerSettings . PreserveReferencesHandling = PreserveReferencesHandling . Objects ; <EOF>
deleteAppointmennt . Delete ( DeleteMode . SoftDelete , SendCancellationsMode . SendToNone ) ; <EOF>
SelectedItem = " { Binding ElementName = this , Path = ProductID , Mode = TwoWay , UpdateSourceTrigger = LostFocus } " <EOF>
int index = sourceString . IndexOf ( removeString ) ; string cleanPath = ( index < CODE_INTEGER ) ? sourceString : sourceString . Remove ( index , removeString . Length ) ; <EOF>
Microsoft . Office . Interop . Word . Paragraph oPara2 ; object oRng = oDoc . Bookmarks . get_Item ( ref oEndOfDoc ) . Range ; oPara2 = oDoc . Content . Paragraphs . Add ( ref oRng ) ; oPara2 . Range . Text = CODE_STRING ; oPara2 . Format . SpaceAfter = CODE_INTEGER ; oPara2 . Range . InsertParagraphAfter ( ) ; oDoc . Bookmarks . Add ( CODE_STRING , oRng ) ; object oAddress = CODE_STRING ; wrdRng = oDoc . Bookmarks . get_Item ( ref oEndOfDoc ) . Range ; wrdRng . InsertParagraphAfter ( ) ; wrdRng . InsertAfter ( CODE_STRING ) ; wrdRng . Hyperlinks . Add ( wrdRng , ref oAddress ) ; <EOF>
using Microsoft . Office . Interop . Excel ; using Application = Microsoft . Office . Interop . Excel . Application ; using Excel = Microsoft . Office . Interop . Excel ; Application excelApplication = new Excel . Application { Visible = true , ScreenUpdating = true } ; _Workbook workbook = excelApplication . Workbooks . Open ( CODE_STRING ) ; _Worksheet sheet = workbook . Worksheets [ CODE_INTEGER ] ; Range range = sheet . Range [ CODE_STRING ] ; range . Formula = CODE_STRING ; excelApplication . Quit ( ) ; <EOF>
Stream stream = TitleContainer . OpenStream ( CODE_STRING + fileName + CODE_STRING ) ; XDocument doc = XDocument . Load ( stream ) ; <EOF>
using ( Cairo . Context g = CairoHelper . Create ( myWindow . GdkWindow ) ) { g . MoveTo ( CODE_INTEGER , CODE_INTEGER ) ; g . LineTo ( CODE_INTEGER , CODE_INTEGER ) ; g . Color = new Color ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; g . Stroke ( ) ; } <EOF>
Type gt = typeof ( ManagedThread < > ) . MakeGenericType ( ThreadType ) ; object t = Activator . CreateInstance ( gt , this , this . GetConfiguration ( ThreadType ) ) ; <EOF>
var settings = new JsonSerializerSettings ( ) { TypeNameHandling = TypeNameHandling . All } ; var json = JsonConvert . SerializeObject ( obj , settings ) ; var newObj = JsonConvert . DeserializeObject < SomeType > ( json , settings ) ; <EOF>
var result = query . TrimEnd ( CODE_CHAR , CODE_CHAR , ' ' ) ; <EOF>
extension / mime - type <EOF>
[ DataObjectMethod ( DataObjectMethodType . Update ) ] public static void UpdateAnimeList ( string name , string * * animeImage * * , string synopsis , string type , short episodes , string genres , decimal rating , int original_animeID , int animeID ) { . . . } <EOF>
[ HttpPost ] public ActionResult Index ( HttpPostedFileBase fil ) { if ( fil != null && fil . ContentLength > CODE_INTEGER ) { BinaryReader b = new BinaryReader ( file . InputStream ) ; byte [ ] binData = b . ReadBytes ( file . InputStream . Length ) ; string result = System . Text . Encoding . UTF8 . GetString ( binData ) ; Session [ CODE_STRING ] = result ; } return RedirectToAction ( CODE_STRING ) ; } [ HttpGet ] public ActionResult Xmlview ( ) { Value model2 = new Value ( ) ; string strall = CODE_STRING ; string content = Session [ CODE_STRING ] . ToString ( ) ; if ( ! String . IsNullOrEmpty ( content ) ) { XDocument xml = XDocument . Parse ( content ) ; var allElements = xml . Elements ( ) ; } } <EOF>
stringBuilderObject . Remove ( CODE_INTEGER , stringBuilderObject . Length ) <EOF>
void ShowMessage ( Window parent , string title , string message ) { Dialog dialog = null ; try { dialog = new Dialog ( title , parent , DialogFlags . DestroyWithParent | DialogFlags . Modal , ResponseType . Ok ) ; dialog . VBox . Add ( new Label ( message ) ) ; dialog . ShowAll ( ) ; dialog . Run ( ) ; } finally { if ( dialog != null ) dialog . Destroy ( ) ; } } <EOF>
XmlDocument xDoc = new XmlDocument ( ) ; xDoc . Load ( CODE_STRING ~ / XMLFile . xml CODE_STRING ) ; XmlNodeList nodeList ; nodeList = xDoc . DocumentElement . SelectNodes ( CODE_STRING ) ; foreach ( XmlNode emp in nodeList ) { foreach ( XmlNode child in emp . ChildNodes ) { Response . Write ( child . LocalName ) ; Response . Write ( CODE_STRING ) ; Response . Write ( child . InnerText ) ; Response . Write ( " " ) ; } } <EOF>
void Main ( ) { var queryInfo = new DomainQuery ( ) ; var ContentList = new List < Content > ( ) ; var query = ContentList . Where ( q = > queryInfo . PhrasesIncludeAny . Any ( item = > q . Summary . Any ( subitem = > subitem == item ) ) ) . Where ( q = > queryInfo . PhrasesIncludeAll . All ( item = > q . Summary . All ( subitem = > subitem == item ) ) ) . Where ( q = > ! queryInfo . PhrasesIncludeAll . All ( item = > q . Summary . All ( subitem = > subitem == item ) ) ) . Where ( q = > q . CreatedDate < queryInfo . CreatedBefore ) . Where ( q = > q . CreatedDate > queryInfo . CreatedAfter ) ; } <EOF>
this . Load += ( sender , args ) = > { /*do all your work here*/ string extractededVal = Iengn . ExtractPageValue ( Iengn . itrfWebEng ) ; string flnm = CODE_STRING ; File . WriteAllText ( fn , extractededVal ) ; Application . Exit ( ) ; } ; <EOF>
Canvas . SetLeft ( Rendershape , e . GetPosition ( canvasArea ) . X - ( Rendershape . Width / CODE_REAL ) ) ; Canvas . SetTop ( Rendershape , e . GetPosition ( canvasArea ) . Y - ( Rendershape . Height / CODE_REAL ) ) ; <EOF>
static byte [ ] DoubleToReal48 ( double d ) { byte [ ] r = new byte [ CODE_INTEGER ] ; long bits = BitConverter . DoubleToInt64Bits ( d ) ; bool negative = ( ( bits > > CODE_INTEGER ) & CODE_INTEGER ) != CODE_INTEGER ; long exponent = ( ( bits > > CODE_INTEGER ) & CODE_INTEGER ) - CODE_INTEGER ; long mantissa = bits & CODE_INTEGER ; long raw = ( negative ? CODE_INTEGER : CODE_INTEGER ) ; raw = ( raw << CODE_INTEGER ) | ( mantissa > > CODE_INTEGER ) ; raw = ( raw << CODE_INTEGER ) | ( ( exponent + CODE_INTEGER ) & CODE_INTEGER ) ; for ( int k = CODE_INTEGER ; k < CODE_INTEGER ; k ++ ) { r [ k ] = ( byte ) ( raw & CODE_INTEGER ) ; raw > >= CODE_INTEGER ; } return r ; } static double Real48ToDouble ( byte [ ] r ) { long raw = CODE_INTEGER ; for ( int k = CODE_INTEGER ; k >= CODE_INTEGER ; k -- ) { raw = ( raw << CODE_INTEGER ) | r [ k ] ; } long mantissa = ( raw << CODE_INTEGER ) & CODE_INTEGER ; long exponent = ( ( ( raw & CODE_INTEGER ) - CODE_INTEGER + CODE_INTEGER ) & CODE_INTEGER ) << CODE_INTEGER ; long sign = ( ( ( raw & ~ CODE_INTEGER ) != CODE_INTEGER ) ? CODE_INTEGER : CODE_INTEGER ) << CODE_INTEGER ; return BitConverter . Int64BitsToDouble ( sign | exponent | mantissa ) ; } <EOF>
machine . config <EOF>
{ Binding RelativeSource = { RelativeSource Mode = FindAncestor , AncestorType = ListView } , Path = DataContext . HasPermissions } <EOF>
string userAgent = CODE_STRING ; client . Headers [ HttpRequestHeader . UserAgent ] = userAgent ; <EOF>
[ Required ] public bool Saturday { get ; set ; } [ Required ] public bool Sunday { get ; set ; } [ NotMapped ] public bool SatSun { get { return ( ! this . Saturday && ! this . Sunday ) ; } } [ RequiredIf ( CODE_STRING , true ) ] public string Holiday { get ; set ; } <EOF>
byte [ ] data = . . . int len = data . Length ; byte [ ] prefix = Bitconverter . GetBytes ( len ) ; stream . Write ( prefix , CODE_INTEGER , prefix . Length ) ; stream . Write ( data , CODE_INTEGER , data . Length ) ; <EOF>
NavigateUrl = ' < % # CODE_STRING + Eval ( CODE_STRING ) % > ' <EOF>
[ DllImport ( CODE_STRING , CharSet = CharSet . Ansi ) ] public static extern IntPtr TheFunction ( ref UserRec userRec ) ; <EOF>
private void ToggleStateButton_Click ( object sender , EventArgs e ) { if ( this . FormBorderStyle == FormBorderStyle . None ) { this . FormBorderStyle = FormBorderStyle . Sizable ; this . WindowState = FormWindowState . Normal ; } else { this . FormBorderStyle = FormBorderStyle . None ; if ( this . WindowState == FormWindowState . Maximized ) this . WindowState = FormWindowState . Normal ; this . WindowState = FormWindowState . Maximized ; } } <EOF>
new Thread ( ( ) = > BattleArena . ArenaGame ( CODE_INTEGER ) ) . Start ( ) ; <EOF>
RegistryKey newKey = Registry . CurrentUser . CreateSubKey ( CODE_STRING ) ; newKey . SetValue ( CODE_STRING , CODE_STRING ) ; newKey . SetValue ( CODE_STRING , CODE_STRING ) ; if ( SubKeyExist ( CODE_STRING ) ) { RegistryKey myKey = Registry . CurrentUser . OpenSubKey ( CODE_STRING ) ; string firstApp = ( string ) myKey . GetValue ( CODE_STRING ) ; string secondApp = ( string ) myKey . GetValue ( CODE_STRING ) ; } <EOF>
var message = new MailMessage ( CODE_STRING , CODE_STRING ) ; message . Subject = CODE_STRING ; message . IsBodyHtml = true ; message . Body = CODE_STRING ; <EOF>
x . ToString ( CODE_STRING ) <EOF>
IL_000a : ldc . r4 CODE_INTEGER . <EOF>
Workbook workBook = new Workbook ( ) ; Worksheet workSheetIntroduction = workBook . Worksheets [ CODE_INTEGER ] ; Style boldStyle = workBook . CreateStyle ( ) ; boldStyle . ForegroundColor = Color . Red ; boldStyle . Pattern = BackgroundType . Solid ; boldStyle . Font . IsBold = true ; StyleFlag boldStyleFlag = new StyleFlag ( ) ; boldStyleFlag . HorizontalAlignment = true ; boldStyleFlag . FontBold = true ; Row row1 = workBook . Worksheets [ CODE_INTEGER ] . Cells . Rows [ CODE_INTEGER ] ; row1 . ApplyStyle ( boldStyle , boldStyleFlag ) ; Cell c = workSheetIntroduction . Cells [ CODE_STRING ] ; Style s = c . GetStyle ( ) ; s . ForegroundColor = Color . Red ; s . Pattern = BackgroundType . Solid ; s . Font . IsBold = true ; c . SetStyle ( s ) ; workBook . Save ( CODE_STRING ) ; <EOF>
ExcelWorksheet worksheet = xlPackage . Workbook . Worksheets . Add ( CODE_STRING ) ; <EOF>
string fileName = CODE_STRING ; string path = Path . Combine ( AppDomain . CurrentDomain . BaseDirectory , fileName ) ; <EOF>
public static void AddClass ( this WebControl control , string newClass ) { if ( ! string . IsNullOrEmpty ( control . CssClass ) ) { control . CssClass += CODE_STRING + newClass ; } else { control . CssClass = newClass ; } } <EOF>
private void btnCancel_Click ( object sender , System . Windows . RoutedEventArgs e ) { Dispatcher . Invoke ( new Action ( ( ) = > btnCancel . Command . Execute ( null ) ) , DispatcherPriority . Send ) ; } <EOF>
int samplesCount = samples . Count ; for ( int j = numLowestSamples ; j < samplesCount ; j ++ ) { double sample = samples [ j ] ; if ( sample > CODE_INTEGER && sample < currentMax ) { int k ; for ( k = CODE_INTEGER ; k < numLowestSamples ; k ++ ) { if ( sample < lowestSamples [ k ] ) { Array . Copy ( lowestSamples , k , lowestSamples , k + CODE_INTEGER , numLowestSamples - k - CODE_INTEGER ) ; lowestSamples [ k ] = sample ; break ; } } if ( k == numLowestSamples ) { lowestSamples [ numLowestSamples - CODE_INTEGER ] = sample ; } currentMax = lowestSamples [ numLowestSamples - CODE_INTEGER ] ; } } <EOF>
var orders = orderResponse . Select ( order = > order . SomeProperty && . . ) orders . ToCsv ( ) . Print ( ) ; <EOF>
WebServicesSection wss = WebServicesSection . Current ; SoapExtensionTypeElement e = new SoapExtensionTypeElement ( typeof ( TraceExtension ) , CODE_INTEGER , PriorityGroup . High ) ; FieldInfo readOnlyField = typeof ( System . Configuration . ConfigurationElementCollection ) . GetField ( CODE_STRING , BindingFlags . NonPublic | BindingFlags . Instance ) ; readOnlyField . SetValue ( wss . SoapExtensionTypes , false ) ; wss . SoapExtensionTypes . Add ( e ) ; MethodInfo resetMethod = typeof ( System . Configuration . ConfigurationElementCollection ) . GetMethod ( CODE_STRING , BindingFlags . NonPublic | BindingFlags . Instance ) ; resetMethod . Invoke ( wss . SoapExtensionTypes , null ) ; MethodInfo setReadOnlyMethod = typeof ( System . Configuration . ConfigurationElementCollection ) . GetMethod ( CODE_STRING , BindingFlags . NonPublic | BindingFlags . Instance ) ; setReadOnlyMethod . Invoke ( wss . SoapExtensionTypes , null ) ; <EOF>
System . Deployment <EOF>
using UnityEngine ; using System . Collections ; public class ExampleClass : MonoBehaviour { private bool newTouchesInThisScene = false ; void Update ( ) { for ( int i = CODE_INTEGER ; i < Input . touchCount ; ++ i ) { if ( Input . GetTouch ( i ) . phase == TouchPhase . Began ) { newTouchesInThisScene = true ; } } } } <EOF>
TreeListNode parentNode = treeList1 . AppendNode ( . . . , null ) ; TreeListNode childNode = treeList1 . AppendNode ( . . . , parentNode ) ; <EOF>
var sortedWords = words . Where ( x = > x . Contains ( CODE_STRING ) ) . OrderByDescending ( x = > x ) ; <EOF>
Panel panel = new Panel ( ) ; panel . Controls . Add ( new Button ( ) { Text = CODE_STRING } ) ; panel . Controls . Add ( new Button ( ) { Text = CODE_STRING } ) ; UltraPopupControlContainer container = new UltraPopupControlContainer ( ) ; container . PopupControl = panel ; ultraDropDownButton1 . PopupItem = container ; <EOF>
myGraph . AxisChange ( ) <EOF>
client . AddParameter ( CODE_STRING , data1 ) ; client . AddParameter ( CODE_STRING , data2 ) ; <EOF>
using ( var ctx = new DataClassesCallCenterDataContext ( ) ) using ( var scope = new TransactionScope ( ) ) { var test = from c in ctx . sp_CallCenterAnketEntity ( ) select c ; int ? ID = test . First ( ) . ID ; var question = new QuestionsYesNo { Question = CODE_STRING , Date = DateTime . Now } ; ctx . QuestionsYesNos . InsertOnSubmit ( question ) ; ctx . SubmitChanges ( ) ; Rehber rehber = ( from r in ctx . Rehbers where r . ID == ID select r ) . First ( ) ; rehber . Name = CODE_STRING ; ctx . SubmitChanges ( ) ; scope . Complete ( ) ; } <EOF>
foreach ( var item in data ) { QuestionMaster temp = new QuestionMaster ( ) ; } <EOF>
public static int ExecuteNonQuery ( ref DbCommand command , out string ErrorMessage ) <EOF>
public partial class Form1 : Form { BackgroundWorker _worker ; public Form1 ( ) { InitializeComponent ( ) ; _worker = new BackgroundWorker ( ) ; _worker . WorkerReportsProgress = true ; _worker . DoWork += _worker_DoWork ; _worker . ProgressChanged += _worker_ProgressChanged ; } private void _worker_ProgressChanged ( object sender , ProgressChangedEventArgs e ) { label1 . Text = e . UserState . ToString ( ) ; } private void _worker_DoWork ( object sender , DoWorkEventArgs e ) { for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; ++ i ) { _worker . ReportProgress ( i , i ) ; System . Threading . Thread . Sleep ( CODE_INTEGER ) ; } } private void button1_Click ( object sender , EventArgs e ) { _worker . RunWorkerAsync ( ) ; } } <EOF>
var mock = new Mock < IRepository > ( ) ; var mockStore = new Mock < Store > ( ) ; mock . Setup ( x = > x . GetById < Store > ( It . IsAny < int > ( ) ) ) . Returns ( mockStore . Object ) ; mockStore . SetupGet ( s = > s . Id ) . Returns ( CODE_INTEGER ) ; mockStore . SetupGet ( s = > s . Value ) . Returns ( CODE_STRING ) ; var store = Repository . GetById < Store > ( CODE_INTEGER ) ; Assert . That ( store . Id == CODE_INTEGER ) ; <EOF>
for ( int i = topLevelForm . OwnedForms . Length - CODE_INTEGER ; i >= CODE_INTEGER ; -- i ) { topLevelForm . OwnedForms [ i ] . Dispose ( ) ; } <EOF>
var methodParameterTypes = classMethod . GetParameters ( ) . Select ( p = > p . ParameterType ) . ToArray ( ) ; MethodInfo interfaceMethodInfo = interfaceType . GetMethod ( classMethod . Name , methodParameterTypes ) ; <EOF>
public partial class L2SEntity { public void Scale ( double d ) { if ( this . Amount . HasValue ) { this . Amount *= d ; } } } <EOF>
if ( test == null ) { throw new HttpResponseException ( Request . CreateErrorResponse ( HttpStatusCode . NotFound , CODE_STRING ) ; } <EOF>
int IndexOfLongestRun ( string input ) { int bestIndex = CODE_INTEGER , bestScore = CODE_INTEGER , currIndex = CODE_INTEGER ; for ( var i = CODE_INTEGER ; i < input . Length ; ++ i ) { if ( input [ i ] == input [ currIndex ] ) { if ( bestScore < i - currIndex ) { bestIndex = currIndex ; bestScore = i - currIndex ; } } else { currIndex = i ; } } return bestIndex ; } <EOF>
var scripts = TableCreationScript . Trim ( ) . Replace ( CODE_STRING , CODE_STRING ) . Split ( new [ ] { CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; for each ( var script in scripts ) { SqlCeCommand cmd = new SqlCeCommand ( script ) ; cmd . Connection = connection ; cmd . ExecuteNonQuery ( ) ; } <EOF>
lblAnswer3 . Text = string . Join ( CODE_STRING , number ) ; <EOF>
var orgFileName = CODE_STRING ; var newFileName = orgFileName . Substring ( CODE_INTEGER ) ; File . Copy ( orgFileName , newFileName , true ) ; zip . AddFile ( newFileName ) ; <EOF>
List < Point > dots = new List < Point > ( ) ; int totalX = CODE_INTEGER , totalY = CODE_INTEGER ; foreach ( Point p in dots ) { totalX += p . X ; totalY += p . Y ; } int centerX = totalX / dots . Count ; int centerY = totalY / dots . Count ; <EOF>
private bool mblnFlag ; public String Flag { get { return mblnFlag ; } set { mblnFlag = ( value == CODE_STRING ) } } <EOF>
var impl = session . CreateCriteria < User > ( ) . AddOrder ( Order . Asc ( CODE_STRING ) ) as CriteriaImpl ; foreach ( CriteriaImpl . OrderEntry entry in impl . IterateOrderings ( ) ) { Order order = entry . Order ; or CODE_STRING } <EOF>
using System . Globalization ; static void Main ( string [ ] args ) { Console . Write ( CODE_STRING ) ; int userInput = Convert . ToInt16 ( Console . ReadLine ( ) ) ; if ( userInput > CODE_INTEGER && userInput < CODE_INTEGER ) { string monthName = CultureInfo . CurrentCulture . DayTimeFormat . MonthNames [ userInput - CODE_INTEGER ] ; int daysInMonth = DateTime . DaysInMonth ( CODE_INTEGER , userInput ) ; . . . . . . } } <EOF>
protected void Application_BeginRequest ( ) { var ci = CultureInfo . GetCultureInfo ( CODE_STRING ) ; if ( Thread . CurrentThread . CurrentCulture . DisplayName == ci . DisplayName ) { ci = CultureInfo . CreateSpecificCulture ( CODE_STRING ) ; ci . NumberFormat . CurrencyNegativePattern = CODE_INTEGER ; Thread . CurrentThread . CurrentCulture = ci ; Thread . CurrentThread . CurrentUICulture = ci ; } } <EOF>
private string GetDecimalDigits ( double d , int digitsCount ) { double substracted = d - Math . Floor ( d ) ; return Math . Round ( substracted * Math . Pow ( CODE_INTEGER , digitsCount ) ) . ToString ( ) ; } string result = GetDecimalDigits ( CODE_REAL , CODE_INTEGER ) ; <EOF>
var editableTextBox = cmbExpressions . Template . FindName ( CODE_STRING , cmbExpressions ) as TextBox ; if ( editableTextBox != null ) { var text = editableTextBox . SelectedText ; } <EOF>
using System . Net ; using Microsoft . SharePoint . Client ; using ( ClientContext context = new ClientContext ( CODE_STRING ) ) { context . Credentials = new NetworkCredential ( CODE_STRING , CODE_STRING , CODE_STRING ) ; List list = context . Web . Lists . GetByTitle ( CODE_STRING ) ; context . ExecuteQuery ( ) ; } <EOF>
string filename = CODE_STRING ; DicomFile theFile = new DicomFile ( filename ) ; theFile . Load ( DicomReadOptions . Default ) ; foreach ( DicomAttribute attribute in theFile . DataSet ) { Console . WriteLine ( CODE_STRING , attribute . Tag . Name , attribute . ToString ( ) ) ; } <EOF>
DateTime startDate = DateTime . Today ; DateTime endDate = startDate . AddDays ( CODE_INTEGER ) . AddSeconds ( - CODE_INTEGER ) ; <EOF>
int tabCount = CODE_INTEGER ; foreach ( TabPage tp in customTabControl1 . TabPages ) { tp . Tag = tabCount ; foreach ( Control ctrl in tp . Controls ) { if ( ctl is YourUserControlTypeHere ) { YourUserControlTypeHere uc = ( YourUserControlTypeHere ) ctl ; uc . BrowserCount = TabCount ; } } } <EOF>
DateTime value = new DateTime ( DateTime . Now . Year , DateTime . Now . Month , CODE_INTEGER ) . AddDays ( - CODE_INTEGER ) ; <EOF>
FrameworkElement fe = sender as FrameworkElement ; while ( ( fe . GetType ( ) != typeof ( DataGrid ) ) && ( fe != null ) ) { fe = VisualTreeHelper . GetParent ( fe ) as FrameworkElement ; } <EOF>
private void Button_Click ( object sender , RoutedEventArgs e ) { lista . Add ( new Lista ( ) { Hexnumber_op_Code = CODE_STRING , Background_OP_Code = CODE_STRING , OP_Code = CODE_STRING } ) ; lista . Add ( new Lista ( ) { Hexnumber_op_Code = CODE_STRING , Background_OP_Code = CODE_STRING , OP_Code = CODE_STRING } ) ; } <EOF>
public string SQL_CONNECTION_STRING get { return get ( CODE_STRING ) ; } <EOF>
public RecordConfiguration < TStage , TKey > EnsureUnique > ( params Expression < Func < TStage , object > > [ ] propertyAccessors ) { properyAccessors . Select ( ( val , index ) = > new { val , index } ) . ForEach ( i = > columnSet . AddAt ( i . index , i . val ) ) ; } <EOF>
var result = users . GroupBy ( u = > u . UserId ) . Where ( g = > g . Select ( u = > u . City ) . Distinct ( ) . Count ( ) > CODE_INTEGER ) . Select ( g = > g . Key ) . ToList ( ) ; <EOF>
double cost = CODE_REAL ; Console . WriteLine ( cost . ToString ( CODE_STRING , new System . Globalization . CultureInfo ( CODE_STRING ) ) ) ; <EOF>
Dim row As GridViewRow = DirectCast ( DirectCast ( e . CommandSource , Control ) . NamingContainer , GridViewRow ) CType ( row . FindControl ( CODE_STRING ) , LinkButton ) . Text = CODE_STRING <EOF>
var fileTarget = ( FileTarget ) LogManager . Configuration . FindTargetByName ( CODE_STRING ) ; var logEventInfo = new LogEventInfo { TimeStamp = DateTime . Now } ; string fileName = fileTarget . FileName . Render ( logEventInfo ) ; if ( ! File . Exists ( fileName ) ) throw new Exception ( CODE_STRING ) ; <EOF>
[ CODE_INTEGER - CODE_INTEGER ] { CODE_INTEGER , } bool includesPhone = Regex . IsMatch ( CODE_STRING , CODE_STRING ) ; <EOF>
Private Function _find_item_in_rev ( itemCode As String ) As xStockitem Dim myTempItem As New xStockitem Debug . Print ( currentRevItems . Count . ToString ) For Each thisItem As xStockitem In currentRevItems If thisItem . stockCode = itemCode Then ' found item myTempItem . stockCode = itemCode myTempItem . price = thisItem . price myTempItem . quantity = thisItem . quantity currentRevItems . Remove ( thisItem ) Return myTempItem End If Next Return Nothing ' nothing found End Function <EOF>
string body = CODE_STRING ; <EOF>
public string NonStaticMethod ( ) { var instance = new MyNewClass ( ) ; return instance . MyStringMethod ( ) ; } <EOF>
List < Control > controlsToBeRemoved = new List < Control > ( ) ; foreach ( Control item in this . Controls . OfType < PictureBox > ( ) ) { controlsToBeRemoved . Add ( item ) ; } foreach ( Control item in controlsToBeRemoved ) { this . Controls . Remove ( item ) ; } <EOF>
while ( iterator . MoveNext ( ) ) { } <EOF>
byte [ ] bytesToBeEncrypted = File . ReadAllBytes ( files [ i ] ) ; byte [ ] passwordBytes = Encoding . UTF8 . GetBytes ( passWord ) ; passwordBytes = SHA256 . Create ( ) . ComputeHash ( passwordBytes ) ; byte [ ] bytesCyrpt = new byte [ CODE_INTEGER ] ; if ( Mode == CODE_STRING ) { bytesCyrpt = AES_Encrypt ( bytesToBeEncrypted , passwordBytes ) ; File . WriteAllBytes ( encryptedFileName ( files [ i ] ) , bytesCyrpt ) ; File . Delete ( files [ i ] ) ; } else { bytesCyrpt = AES_Decrypt ( bytesToBeEncrypted , passwordBytes ) ; File . WriteAllBytes ( decryptFileName ( files [ i ] ) , bytesCyrpt ) ; } <EOF>
using System ; using System . Threading ; namespace Input { class MainClass { public static void Main ( string [ ] args ) { var workerShouldStop = false ; var worker = new Thread ( ( ) = > { while ( ! workerShouldStop ) { Thread . Sleep ( CODE_INTEGER ) ; Console . WriteLine ( CODE_STRING ) ; } ; } ) ; worker . Start ( ) ; string input ; do { Console . Write ( CODE_STRING ) ; input = Console . ReadLine ( ) ; Console . WriteLine ( CODE_STRING + input ) ; } while ( ! String . IsNullOrWhiteSpace ( input ) ) ; workerShouldStop = true ; } } } <EOF>
public static IEnumerable < XElement > Parents ( this XObject obj ) { XElement e = obj . Parent ; while ( e != null ) { yield return e ; e = e . Parent ; } } <EOF>
var parsed = DateTime . ParseExact ( CODE_STRING , CODE_STRING , null ) ; <EOF>
resp . Headers <EOF>
nupdwn . Minimum = - CODE_INTEGER ; nupdwn . Maximum = CODE_INTEGER ; nupdwn . Increment = CODE_REAL ; nupdwn . DecimalPlaces = CODE_INTEGER ; <EOF>
class Program { static void Main ( string [ ] args ) { List < A > lst = new List < A > ( ) ; for ( int j = CODE_INTEGER ; j < CODE_INTEGER ; j ++ ) { var tmp = new A ( ) { Value = j * CODE_INTEGER } ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { tmp . SubItems . Add ( new B { Value = i + CODE_INTEGER , Parent = tmp } ) ; } lst . Add ( tmp ) ; } List < B > result = lst . SelectMany ( x = > x . SubItems . Take ( CODE_INTEGER ) ) . ToList ( ) ; } } public class A { public A ( ) { SubItems = new List < B > ( ) ; } public int Value { get ; set ; } public List < B > SubItems { get ; set ; } } public class B { public int Value { get ; set ; } public A Parent { get ; set ; } } <EOF>
if ( ! postback ) { else { Control cont = this . Page . FindControl ( Request . Form [ CODE_STRING ] ) ; if ( cont != null ) cont . Focus ( ) ; } <EOF>
var startTime = DateTime . Parse ( CODE_STRING ) ; var endTime = startTime . AddHours ( CODE_INTEGER ) ; while ( startTime <= endTime ) { System . Console . WriteLine ( startTime . ToShortTimeString ( ) ) ; startTime = startTime . AddMinutes ( CODE_INTEGER ) ; } <EOF>
public interface IValidationCRUD { ICRUDValidation IsValid ( object obj ) ; } public abstract class ValidationCRUDBase : IValidationCRUD { public abstract ICRUDValidation IsValid ( object obj ) ; protected abstract void AddError ( ICRUDError error ) ; } <EOF>
public void ReloadPage ( ) { UrlBuilder url = new UrlBuilder ( Context , Request . Path ) ; foreach ( string queryParam in Request . QueryString . AllKeys ) { string queryParamValue = Request . QueryString [ queryParam ] ; url . AddQueryItem ( queryParam , queryParamValue ) ; } Response . Redirect ( url . ToString ( ) , true ) ; } <EOF>
public class NumberRank { public int Number { get ; set ; } public int Rank { get ; set ; } public NumberRank ( int number , int rank ) { Number = number ; Rank = rank ; } } class Test { static void Main ( ) { List < int > numbers = new List < int > ( ) ; numbers . Add ( CODE_INTEGER ) ; numbers . Add ( CODE_INTEGER ) ; numbers . Add ( CODE_INTEGER ) ; numbers . Add ( CODE_INTEGER ) ; List < NumberRank > numberRanks = numbers . OrderByDescending ( n = > n ) . Select ( ( n , i ) = > new NumberRank ( n , i + CODE_INTEGER ) ) . ToList ( ) ; foreach ( NumberRank nr in numberRanks ) Console . WriteLine ( CODE_STRING , nr . Rank , nr . Number ) ; Console . ReadKey ( ) ; } } <EOF>
private void Button1_Click ( Object sender , EventArgs e ) { var myForm = new Form1 ( ) ; myForm . Show ( ) ; } <EOF>
public interface IHomeUpContext { DbSet < channel > channel { get ; set ; } int SaveChanges ( ) ; } <EOF>
string csv = CODE_STRING ; string [ ] split = csv . Split ( CODE_CHAR ) ; DataGridViewTextBoxColumn subject = new DataGridViewTextBoxColumn ( ) ; subject . HeaderText = CODE_STRING ; subject . Name = CODE_STRING ; dataGridView1 . Columns . Add ( subject ) ; foreach ( string item in split ) { dataGridView1 . Rows . Add ( item ) ; } <EOF>
public T GetCache < T > ( string key , Func < T > valueFactory . . . ) { var mut = new Mutex ( true , key ) ; try { mut . WaitOne ( ) ; } finally { mut . ReleaseMutex ( ) ; } } <EOF>
Interlocked . Add ( ref long , long ) <EOF>
com . ExecuteNonQuery ( ) ; <EOF>
XmlDocument doc = new XmlDocument ( ) ; doc . Load ( Path . GetDirectoryName ( System . Reflection . Assembly . GetEntryAssembly ( ) . Location ) + CODE_STRING ) ; <EOF>
lblOUT . Text += Convert . ToString ( num2 ) + Environment . NewLine ; <EOF>
myTreeView . SetValue ( VirtualizingPanel . IsVirtualizingProperty , true ) ; myTreeView . SetValue ( VirtualizingPanel . VirtualizationModeProperty , VirtualizationMode . Recycling ) ; <EOF>
public void Init ( HttpApplication context ) { context . PostMapRequestHandler += OnPostMapRequestHandler ; } void OnPostMapRequestHandler ( object sender , EventArgs e ) { HttpContext context = ( ( HttpApplication ) sender ) . Context ; Page page = HttpContext . Current . CurrentHandler as Page ; if ( page != null ) { page . PreRenderComplete += OnPreRenderComplete ; } } void OnPreRenderComplete ( object sender , EventArgs e ) { Page page = ( Page ) sender ; } <EOF>
private byte _myByte ; public byte LowerHalf { get { return ( byte ) ( _myByte & CODE_INTEGER ) ; } set { _myByte = ( byte ) ( value | UpperHalf * CODE_INTEGER ) ; } } public byte UpperHalf { get { return ( byte ) ( _myByte / CODE_INTEGER ) ; } set { _myByte = ( byte ) ( LowerHalf | value * CODE_INTEGER ) ; } } <EOF>
animals . Friends = new List < Animal > { new Kangaroo ( ) , new Bird ( ) } ; foreach ( var kangaroo in animals . Friends . OfType < Kangaroo > ( ) ) { kangaroo . Hop ( ) ; } <EOF>
foreach ( Control c in this . Controls ) { if ( c is TextBox ) Console . WriteLine ( c . Text ) ; } <EOF>
foreach ( MailItem oItem in theMailFolder . Items . OfType < MailItem > ( ) ) { . . } <EOF>
public TDestination Map < TDestination > ( object source , Action < IMappingOperationOptions > opts ) { var mappedObject = default ( TDestination ) ; if ( source != null ) { var sourceType = source . GetType ( ) ; var destinationType = typeof ( TDestination ) ; mappedObject = ( TDestination ) Map ( source , sourceType , destinationType , opts ) ; } return mappedObject ; } <EOF>
Form . Show ( ownerForm ) <EOF>
DirectorySearcher search = new DirectorySearcher ( CODE_STRING ) ; search . Filter = String . Format ( CODE_STRING , UserName ) ; SearchResult result = search . FindOne ( ) ; DirectoryEntry entry = result . GetDirectoryEntry ( ) ; _UPN = entry . Properties [ CODE_STRING ] . Value . ToString ( ) ; <EOF>
new SchemaExport ( config ) . Execute ( ddlScript = > { using ( var writer = new StreamWriter ( fileName , true ) ) { writer . Write ( ddlScript ) ; writer . Flush ( ) ; } } , false , false ) ; <EOF>
[ DllImport ( CODE_STRING ) ] private static extern void methodToCall ( [ MarshalAs ( UnmanagedType . BStr ) ] string aFirstParameter , [ MarshalAs ( UnmanagedType . BStr ) ] ref string aSecondParameter ) ; <EOF>
[ Obsolete ( CODE_STRING , true ) ] public Foo ( ) { } <EOF>
++ count % CODE_INTEGER == CODE_INTEGER <EOF>
public Date deserialize ( JsonElement json , Type typeOfT , JsonDeserializationContext context ) throws JsonParseException { String s = json . getAsString ( ) . replace ( CODE_STRING , CODE_STRING ) . replace ( CODE_STRING , CODE_STRING ) ; if ( s . equals ( CODE_STRING ) ) return null ; long offset = CODE_INTEGER ; if ( s . length ( ) > CODE_INTEGER && ( s . indexOf ( CODE_STRING ) == s . length ( ) - CODE_INTEGER || s . indexOf ( CODE_STRING ) == s . length ( ) - CODE_INTEGER ) ) { offset = Long . valueOf ( s . substring ( s . length ( ) - CODE_INTEGER , s . length ( ) - CODE_INTEGER ) ) * CODE_INTEGER + Long . valueOf ( s . substring ( s . length ( ) - CODE_INTEGER , s . length ( ) ) ) ; if ( s . indexOf ( CODE_STRING ) == s . length ( ) - CODE_INTEGER ) offset = - offset ; s = s . substring ( CODE_INTEGER , s . length ( ) - CODE_INTEGER ) ; } return new Date ( Long . valueOf ( s ) + offset * CODE_INTEGER * CODE_INTEGER ) ; } <EOF>
public class ColoredButton : Control { protected override void OnPaint ( PaintEventArgs e ) { Graphics graphics = e . Graphics ; Pen pen = new Pen ( Color . Black , CODE_REAL ) ; SolidBrush brush = new SolidBrush ( Color . Red ) ; graphics . FillRectangle ( brush , CODE_INTEGER , CODE_INTEGER , Width , Height ) ; graphics . DrawRectangle ( pen , CODE_INTEGER , CODE_INTEGER , Width - CODE_INTEGER , Height - CODE_INTEGER ) ; } } <EOF>
[ DataContract ] class Foo { [ DataMember ] public string Name { get ; set ; } } <EOF>
public string [ ] MyProperty ? ? ? ? { ? ? ? ? ? ? get ? ? ? ? ? ? { ? ? ? ? ? ? ? ? List < string > list = new List < string > ( ) ; ? ? ? ? ? ? ? ? foreach ( MyObject obj in ListMyObjects ) ? ? ? ? ? ? ? ? ? ? list . Add ( obj . Name ) ; ? ? ? ? ? ? ? ? return list . ToArray ( ) ; ? ? ? ? ? ? } ? ? ? ? ? ? set ? ? ? ? ? ? { ? ? ? ? ? ? ? ? foreach ( string name in value ) ? ? ? ? ? ? ? ? ? ? ListMyObjects . Add ( new MyObject ( name ) ) ; ? ? ? ? ? ? } ? ? ? ? } <EOF>
Form3 getup = new Form3 ( ) ; getup . ShowDialog ( ) ; example = getup . example ; <EOF>
private void button1click ( object sender , EventArgs e ) { Foo ( ) ; } void EnterPressed ( object sender , KeyEventArgs e ) { if ( e . KeyCode == Keys . Enter ) { Foo ( ) ; } } void Foo ( ) { } <EOF>
static MyClass ( ) { Initialized = false ; } <EOF>
private UsersRepository _usersRepository ; private UsersRepository UsersRepository { get { if ( _usersRepository == null ) { _usersRepository = new UsersRepository ( ) ; } return _usersRepository ; } } <EOF>
string data = CODE_STRING ; XDocument doc = XDocument . Parse ( data ) ; Dictionary < string , string > dataDictionary = new Dictionary < string , string > ( ) ; foreach ( XElement element in doc . Descendants ( ) . Where ( p = > p . HasElements == false ) ) { int keyInt = CODE_INTEGER ; string keyName = element . Name . LocalName ; while ( dataDictionary . ContainsKey ( keyName ) ) { keyName = element . Name . LocalName + CODE_STRING + keyInt ++ ; } dataDictionary . Add ( keyName , element . Value ) ; } <EOF>
var userAddress = HttpContext . Current . Request . UserHostAddress ; <EOF>
[ JsonProperty ( CODE_STRING ) ] public string CostCenter { get ; set ; } <EOF>
div # ContentWrapper { display : table ; } div # LeftSidebar { display : table - cell ; } div # MainContent { display : table - cell ; } <EOF>
Regex . Escape ( pattern ) == pattern <EOF>
public string PersistanceKey { get { if ( ViewState [ CODE_STRING ] == null ) ViewState [ CODE_STRING ] = CODE_STRING + Guid . NewGuid ( ) . ToString ( ) ; return ( string ) ViewState [ CODE_STRING ] ; } } public PersistanceObject Persistance { get { if ( Session [ this . PersistanceKey ] == null ) Session [ this . PersistanceKey ] = new PersistanceObject ( ) ; return ( PersistanceObject ) Session [ this . PersistanceKey ] ; } <EOF>
private void Panel_MouseIn ( object sender , EventArgs e ) { Panel pan = sender as Panel ; pan . BackColor = Color . Red ; } <EOF>
int number = items . Count ; int number2 = number / CODE_INTEGER ; List < TableItem > firstList = items . GetRange ( CODE_INTEGER , number2 ) ; List < TableItem > secondList = items . GetRange ( number2 , number % CODE_INTEGER == CODE_INTEGER ? number2 : number2 + CODE_INTEGER ) ; listView1 . Adapter = new HomeScreenAdapter ( this , firstList ) ; listView2 . Adapter = new HomeScreenAdapter ( this , secondList ) ; <EOF>
Model . TicketNotes . Reverse ( ) . Where ( i = > i . PublicFlag == false ) <EOF>
typeof ( EntryService ) . Assembly <EOF>
foreach ( WizardStep step in Wizard1 . WizardSteps ) { foreach ( Control c1 in step . Controls ) { if ( c1 is Label ) { Label1 . Text += ( ( Label ) c1 ) . Text + CODE_STRING ; } if ( c1 is RadioButtonList ) { foreach ( ListItem li in ( ( RadioButtonList ) c1 ) . Items ) { Label1 . Text += li . Text + CODE_STRING ; } } } } <EOF>
const double aspect = windowWidth / windowHeight ; if ( aspect > CODE_REAL ) { GL . Ortho ( - CODE_INTEGER * aspect , CODE_INTEGER * aspect , - CODE_INTEGER , CODE_INTEGER , - CODE_REAL , CODE_REAL ) ; } else { GL . Ortho ( - CODE_INTEGER , CODE_INTEGER , - CODE_INTEGER / aspect , CODE_INTEGER / aspect , - CODE_REAL , CODE_REAL ) ; } <EOF>
XDocument classes = new XDocument ( new XElement ( CODE_STRING , String . IsNullOrEmpty ( classInput ) ? null : new XElement ( CODE_STRING , new XElement ( CODE_STRING , classInput ) ) ) ) ; <EOF>
( Linq - To - Sql - Expression ) . Distinct ( ) . OrderByDescending ( x = > x . TIMECARDDATE ) . ToList ( ) <EOF>
# ifdef CLIEXPORT #define value #endif CLIEXPORT struct MyCStruct { unsigned long A ; unsigned long B ; unsigned long C ; } ; <EOF>
fakeCompanyRepository . Setup ( u = > u . Find ( It . IsAny < Expression < Func < Company , bool > > > ( ) ) ) . Returns ( ( Expression < Func < Company , bool > > expression ) = > companies . AsQueryable ( ) . Where ( expression ) ) ; <EOF>
private void serialPort1_DataReceived ( object sender , System . IO . Ports . SerialDataReceivedEventArgs e ) { SetStatusLabel ( CODE_STRING , lbStatus ) ; SetPicVisibility ( Form1 . frm . ledNotReceiving , true ) ; SetPicVisibility ( Form1 . frm . ledReceiving , false ) ; String st = serialPort1 . ReadLine ( ) ; if ( st != null ) { lines . Enqueue ( st ) ; Task . Factory . StartNew ( ( ) = > StartDataProcessing ( lines ) ) ; SetStatusLabel ( CODE_STRING , lbStatus ) ; SetPicVisibility ( Form1 . frm . ledNotReceiving , false ) ; SetPicVisibility ( Form1 . frm . ledReceiving , true ) ; } } <EOF>
if ( nic . Supports ( NetworkInterfaceComponent . IPv4 ) ) <EOF>
ProcessStartInfo . Verb = CODE_STRING <EOF>
[ System . Web . Script . Services . ScriptService ] [ System . Web . Script . Services . GenerateScriptType ( typeof ( searchResult ) ) ] public class SearchService : WebService { [ WebMethod ] public searchResult [ ] Search ( string txtSearch ) { } } <EOF>
protected void GridViewSelections_RowDataBound ( object sender , GridViewRowEventArgs e ) { if ( ( e . Row . RowType == DataControlRowType . DataRow ) && ( e . Row . RowState . HasFlag ( DataControlRowState . Edit ) && ( e . Row . DataItem != null ) ) ) { DropDownList ddlOptions = e . Row . FindControl ( CODE_STRING ) as DropDownList ; ddlOptions . Items . Add ( new ListItem ( CODE_STRING , CODE_STRING ) ) ; ddlOptions . Items . Add ( new ListItem ( CODE_STRING , CODE_STRING ) ) ; ddlOptions . Items . Add ( new ListItem ( CODE_STRING , CODE_STRING ) ) ; <EOF>
var allNodes = xmlDoc . SelectNodes ( CODE_STRING ) ; var found = new Dictionary < String , bool > ( ) ; foreach ( XmlNode n in allNodes ) { found [ n . NamespaceURI ] = true ; } var allNamespaces = found . Keys . OrderBy ( s = > s ) ; <EOF>
using Newtonsoft . Json ; public class item { public int id { get ; set ; } public int aantal { get ; set ; } } item [ ] myItems = JsonConvert . Deserialize < item [ ] > ( jsonString ) ; <EOF>
string messageToCallInPatient = CODE_STRING + roomName ; string url = CODE_STRING + phoneNumber + CODE_STRING + messageToCallInPatient ; HttpWebRequest webReq = ( HttpWebRequest ) WebRequest . Create ( string . Format ( url ) ) ; webReq . Method = CODE_STRING ; HttpWebResponse webResponse = ( HttpWebResponse ) webReq . GetResponse ( ) ; Stream answer = webResponse . GetResponseStream ( ) ; StreamReader _recivedAnswer = new StreamReader ( answer ) ; <EOF>
string search = textbox1 . text ; protected void grd_RowDataBound ( Object sender , GridViewRowEventArgs e ) { if ( e . Row . RowType == DataControlRowType . DataRow ) { foreach ( TableCell tc in e . Row . Cells ) { if ( tc . Controls . Count == CODE_INTEGER ) { tc . Text = tc . Text . Replace ( search , CODE_STRING + search + CODE_STRING ) ; } } } } <EOF>
new System . Net . NetworkCredential <EOF>
else if ( fieldType . IsArray ) { string [ ] values = ReadUntil ( CODE_CHAR ) ; var elementType = fieldType . GetElementType ( ) ; if ( elementType == typeof ( string ) ) thisField . SetValue ( newObj , values ) ; else { var actualValues = Array . CreateInstance ( elementType , values . Length ) ; for ( int i = CODE_INTEGER ; i < values . Length ; i ++ ) actualValues . SetValue ( Convert . ChangeType ( values [ i ] , elementType ) , i ) ; thisField . SetValue ( newObj , actualValues ) ; } } <EOF>
class Foo { . . . public static void Save ( ref Foo obj ) { var newObj = obj . _save ( ) obj = newObj ; } } <EOF>
PictureBox tmp = new PictureBox ( ) ; tmp . Bounds = pbxDators . Bounds ; tmp . SetBounds ( tmp . Location . X , tmp . Location . Y , CODE_INTEGER , CODE_INTEGER ) ; for ( var i = CODE_INTEGER ; i >= - CODE_INTEGER ; i -- ) { if ( dt . Bounds . IntersectsWith ( tmp . Bounds ) ) { atskanotAudio ( CODE_INTEGER ) ; bumbasStiprums = i ; return true ; } tmp . SetBounds ( tmp . Location . X , tmp . Location . Y + CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; } return false ; <EOF>
formula = worksheet . Cells ( CODE_INTEGER , CODE_INTEGER ) . Formula <EOF>
string html = File . ReadAllText ( CODE_STRING ) ; File . WriteAllText ( CODE_STRING , html ) ; <EOF>
using System . Linq . Dynamic <EOF>
[ Required , StringLength ( CODE_INTEGER ) , Display ( Name = CODE_STRING ) ] public string ProductName { get ; set ; } <EOF>
column [ CODE_INTEGER ] <EOF>
private void AcceptCallback ( IAsyncResult AR ) { try { sckc = sck . EndAccept ( AR ) ; buffer = new byte [ sckc . ReceiveBufferSize ] ; sckc . BeginReceive ( buffer , CODE_INTEGER , buffer . Length , SocketFlags . None , new AsyncCallback ( ReceiveCallback ) , null ) ; } catch { } } private void ReceiveCallback ( IAsyncResult AR ) { try { string text = Encoding . ASCII . GetString ( buffer ) ; MessageBox . Show ( text ) ; sckc . BeginReceive ( buffer , CODE_INTEGER , buffer . Length , SocketFlags . None , new AsyncCallback ( ReceiveCallback ) , null ) ; } catch { } } <EOF>
public ActionResult Method ( ) { foreach ( string key in Request . QueryString ) { var value = Request . QueryString [ key ] ; } } <EOF>
Assembly . GetExecutingAssembly ( ) . Location <EOF>
if ( ( latch_state & CODE_INTEGER ) != CODE_INTEGER ) <EOF>
public static List < List < string > > ListToSublists ( List < string > lsSource ) { List < List < string > > lsTarget = new List < List < string > > ( ) ; List < string > ls = null ; for ( int i = CODE_INTEGER ; i < lsSource . Count ; ++ i ) { if ( i % CODE_INTEGER == CODE_INTEGER ) { if ( ls != null ) lsTarget . Add ( ls ) ; ls = new List < string > ( ) ; } ls . Add ( lsSource [ i ] ) ; } if ( ls != null ) lsTarget . Add ( ls ) ; return lsTarget ; } public static void main ( ) { var yourlist = new List < string > ( ) ; yourlist . AddRange ( /* Whatever */ ) ; List < List < string > > ls = ListToSublists ( yourlist ) ; foreach ( List < string > result in ls ) { if ( result . Count > CODE_INTEGER ) { handler . send ( result . ToArray ( ) , smscontext ) ; } } } <EOF>
( ? : = match but don ' t capture \ s * ? = any number of whitespace ( not greedy ) < / img > = close image tag ) ? = zero or one times <EOF>
foreach ( object item in myComboBox . Items ) { DataRowView row = item as DataRowView ; if ( row != null ) { string displayValue = row [ CODE_STRING ] . ToString ( ) ; } else } <EOF>
var typeargs = CreateArgs ( method . GetParameters ( ) ) ; return Expression . Lambda ( type , Expression . Call ( _delegate . Method , Expression . NewArrayInit ( typeof ( object ) , typeargs . Select ( arg = > Expression . Convert ( arg , typeof ( object ) ) ) ) ) , typeargs ) . Compile ( ) ; <EOF>
Using reader = file . OpenText ( ) Dim line As String While True line = reader . ReadLine ( ) If ReferenceEquals ( Line , Nothing ) Then Exit While ' Parse the line and figure out what to do with it End While End Using <EOF>
var year = CODE_INTEGER ; var firstDayOfMonth = new DateTime ( year , CODE_INTEGER , CODE_INTEGER ) ; var daysUntilNextWednesday = DayOfWeek . Wednesday - firstDayOfMonth . DayOfWeek ; if ( daysUntilNextWednesday < CODE_INTEGER ) daysUntilNextWednesday += CODE_INTEGER ; var firstWednesdayOfMonth = firstDayOfMonth . AddDays ( daysUntilNextWednesday ) ; var secondWednesdayOfMonth = firstWednesdayOfMonth . AddDays ( CODE_INTEGER ) ; <EOF>
IMongoQuery mongoQuery = query . Or ( ids ) ; if ( queryattributes . Count > CODE_INTEGER ) { mongoQuery = query . And ( queryattributes ) ; } var result = collection . FindAs < Datapoint > ( mongoQuery ) ; <EOF>
var thread = new Thread ( ( ) = > Method ( Parameters ) ) ; thread . Start ( ) ; <EOF>
Math . Round ( pay , CODE_INTEGER ) ; <EOF>
bool valid ; do { valid = true ; userChoice1 = Console . ReadLine ( ) ; switch ( userChoice1 ) { case CODE_STRING : msg = " You have chosen the House Salad with Ranch Dressing . Press enter to continue . " ; saladChoice = CODE_STRING ; break ; case CODE_STRING : msg = " You have chosen the Caesar Salad . Press enter to continue . " ; saladChoice = CODE_STRING ; break ; default : msg = " You have chosen an invalid option . You should have selected CODE_INTEGER for the House Salad or CODE_INTEGER for the Caesar Salad . " ; valid = false ; Console . Beep ( ) ; break ; } } while ( ! valid ) ; <EOF>
public static void RegisterRoutes ( RouteCollection routes ) { routes . IgnoreRoute ( CODE_STRING ) ; routes . MapRoute ( CODE_STRING , CODE_STRING , new { controller = CODE_STRING , action = CODE_STRING , id = UrlParameter . Optional , id1 = UrlParameter . Optional } ) ; routes . MapRoute ( CODE_STRING , CODE_STRING , new { controller = CODE_STRING , action = CODE_STRING } ) ; } <EOF>
byte [ ] foo = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; <EOF>
routes . MapPageRoute ( CODE_STRING , CODE_STRING , CODE_STRING ) ; routes . IgnoreRoute ( CODE_STRING ) ; <EOF>
PdfReader reader = new PdfReader ( CODE_STRING ) ; int intPageNum = reader . NumberOfPages ; string [ ] words ; string line ; for ( int i = CODE_INTEGER ; i <= intPageNum ; i ++ ) { text = PdfTextExtractor . GetTextFromPage ( reader , i , new LocationTextExtractionStrategy ( ) ) ; words = text . Split ( ' ' ) ; for ( int j = CODE_INTEGER , len = words . Length ; j < len ; j ++ ) { line = Encoding . UTF8 . GetString ( Encoding . UTF8 . GetBytes ( words [ j ] ) ) ; <EOF>
public static void DoGetHostEntry ( string hostname ) { IPHostEntry host ; host = Dns . GetHostEntry ( hostname ) ; Console . WriteLine ( CODE_STRING , hostname ) ; foreach ( IPAddress ip in host . AddressList ) { Console . WriteLine ( CODE_STRING , ip ) ; } } <EOF>
public static class StringBuilderExtensions { public static String Extract ( this StringBuilder source , int length ) { if ( Object . ReferenceEquals ( null , source ) ) throw new ArgumentNullException ( CODE_STRING ) ; else if ( ( length < CODE_INTEGER ) || ( length > source . Length ) ) throw new ArgumentOutOfRangeException ( CODE_STRING ) ; String result = source . ToString ( CODE_INTEGER , length ) ; source . Remove ( CODE_INTEGER , length ) ; return result ; } } . . . StringBuilder data = . . . String s = data . Extract ( len ) ; <EOF>
Please you done like that ex : SqlConnection sqlConnection1 = new SqlConnection ( CODE_STRING ) ; SqlCommand cmd = new SqlCommand ( ) ; cmd . CommandText = CODE_STRING ; cmd . CommandType = CommandType . Text ; cmd . Connection = sqlConnection1 ; sqlConnection1 . Open ( ) ; cmd . ExecuteNonQuey ( ) ; sqlConnection1 . Close ( ) ; <EOF>
GeneralTransform transform = sendingObj . TransformToVisual ( Application . Current . RootVisual ) ; Point pnt = transform . Transform ( e . GetPosition ( sendingObj ) ) ; var elements = VisualTreeHelper . FindElementsInHostCoordinates ( pnt , Application . Current . RootVisual ) ; <EOF>
public static DateTime calcMondayDate ( DateTime input ) { int delta = ( DayOfWeek . Monday - input . DayOfWeek - CODE_INTEGER ) % CODE_INTEGER ; DateTime monday = input . AddDays ( delta ) ; return monday ; } <EOF>
TreeNode node = tvwACH . SelectedNode ; node . Nodes . Add ( filename ) ; node . Nodes . Add ( CODE_STRING ) ; <EOF>
var rowsPerEmployee = ( from DataRow row in dt . Rows let emp = row [ CODE_STRING ] . ToString ( ) . Trim ( ) group row by emp into g select g ) . ToDictionary ( g = > g . Key , g = > g . ToArray ( ) ) ; foreach ( var current in rowsPerEmployee . Keys ) { var empRows = rowsPerEmployee [ current ] ; . . . rest of your code here , note that empRows is not all the rows for a single employee . . . and not just the lastname or similar } <EOF>
Parallel . ForEach ( Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) . Select ( i = > i * CODE_INTEGER ) , i = > { Console . WriteLine ( i ) ; } ) ; <EOF>
var typed = invalidDataList . GroupBy ( d = > d . Type ) . Select ( g = > new { Type = g . Key , Data = g . Select ( d = > d . Data ) . ToList ( ) } ) . ToList ( ) ; var table = new DataTable ( ) ; foreach ( var type In typed ) { table . Columns . Add ( type . Type ) ; } var maxCount = typed . Max ( t = > t . Data . Count ) ; for ( var i = CODE_INTEGER ; i < maxCount ; i ++ ) { var row = table . NewRow ( ) ; foreach ( var type in typed ) { if ( type . Data . Count > i ) { row [ type . Type ] = type . Data [ i ] } } table . Rows . Add ( row ) ; } <EOF>
using System . Xml . Linq ; \\ . . . XDocument xmlDoc = XDocument . Load ( CODE_STRING ) ; var maximums = from tempvalue in xmlDoc . Descendants ( CODE_STRING ) . Elements ( CODE_STRING ) where tempvalue . Parent . Attribute ( CODE_STRING ) . Value == CODE_STRING select ( string ) tempvalue ; List < string > returnme = maximums . ToList < string > ( ) ; return returnme ; <EOF>
result = ( T ) ( object ) GetStringInput ( ) ; <EOF>
( ( Manager ) emp1 ) . BonusEarned = Convert . ToDecimal ( txtBonus . Text ) ; ( ( Manager ) emp1 ) . Department = comboDepartment . SelectedText ; ( ( Manager ) emp1 ) . OfficeLocation = txtOffice . Text ; <EOF>
zip . AddFile ( pathTempFiles + csvFileName , directoryPathInArchive : CODE_STRING ) ; <EOF>
var result = dbContext . VisitDates . GroupBy ( x = > x . VisitMeDate . Date ) . Where ( g = > g . Count ( ) == CODE_INTEGER ) . Select ( g = > g . ToList ( ) ) . ToList ( ) ; <EOF>
Process appB = Process . Start ( CODE_STRING ) ; appB . WaitForExit ( ) ; int exitCode = appB . ExitCode ; <EOF>
CausesValidation = CODE_STRING <EOF>
GroupCollection groups = regex . Match ( line ) . Groups ; foreach ( string groupName in regex . GetGroupNames ( ) ) { Console . WriteLine ( CODE_STRING , groupName , groups [ groupName ] . Value ) ; } <EOF>
if ( ( oS . hostname == sSecureEndpointHostname ) && ( oS . port == CODE_INTEGER ) && ! oS . HTTPMethodIs ( CODE_STRING ) ) { <EOF>
public class GetDemData { List < string > addresses = new List < string > ( ) ; public void AddDataToBeCollected ( string address ) { adresses . Add ( address ) ; } public Task CollectData ( ) { var webclient = new WebClient ( ) ; var tasks = from address in addresses select webclient . DownloadStringTaskAsync ( address ) ; return Task . WhenAll ( tasks . Select ( async ( downloadTask ) = > { var result = await downloadTask ; } ) ) ; } } public async Task < ActionResult > GetData ( ) { var data = new GetDemData ( ) ; await data . CollectData ( ) ; return View ( ) ; } <EOF>
DR [ CODE_STRING ] = string . IsNullOrWhiteSpace ( text ) ? DBNull . Value : ( object ) Convert . ToInt32 ( text ) ; <EOF>
[ SuppressMessage ( CODE_STRING , CODE_STRING , Justification = CODE_STRING ) ] public YourClass ( IDisposable obj ) : base ( obj ) { } <EOF>
while ( ( encodedMsg . Length * CODE_INTEGER ) % CODE_INTEGER != CODE_INTEGER ) encodedMsg += CODE_STRING ; <EOF>
var input = CODE_INTEGER ; var bytes = new byte [ CODE_INTEGER ] ; bytes [ CODE_INTEGER ] = ( byte ) ( input > > CODE_INTEGER ) ; bytes [ CODE_INTEGER ] = ( byte ) input ; var result = ( bytes [ CODE_INTEGER ] << CODE_INTEGER ) | bytes [ CODE_INTEGER ] ; <EOF>
protected override void OnFormClosing ( FormClosingEventArgs e ) { DialogResult dgResult = MessageBox . Show ( this , CODE_STRING , CODE_STRING , MessageBoxButtons . YesNo ) ; if ( dgResult == DialogResult . No ) e . Cancel = true ; else Environment . Exit ( CODE_INTEGER ) ; } <EOF>
public class Context { public Point BeginPoint ; public Point EndPoint ; public List Points ; whatever else } public class ShapeFactory { List < FactoryWorker > workers ; public Shape CreateShape ( string ShapeName , Context context ) { foreach ( FactoryWorker worker in workers ) if ( worker . Accepts ( ShapeName ) ) return worker . CreateShape ( context ) ; } public void AddWorker ( FactoryWorker worker ) { workers . Add ( worker ) ; } } public abstract class FactortWorker { public abstract bool Accepts ( string ShapeName ) ; puboic Shape CreateShape ( Context context ) ; } public class PolyLineFactoryWorker : FactoryWorker { public override bool Accepts ( string ShapeName ) { return ShapeName == CODE_STRING ; } public Shape CreateShape ( Context context ) { . . . } } <EOF>
Process pr <EOF>
myGridView . Columns . Add ( new BoundField { DataField = CODE_STRING , DataFormatString = CODE_STRING } ) ; myGridView . DataSource = myDataSource ; myGridView . DataBind ( ) ; <EOF>
Partial Public Class CustomerController Implements ICustomerController Public Function GetCustomerSelectionViewData ( ByVal stateFilter As String ) As CustomerSelectionViewData Implements ICustomerController . GetCustomerSelectionViewData Return Nothing End Function Public Sub UpdateCustomer ( ByVal data As CustomerEditViewData ) Implements ICustomerController . UpdateCustomer End Sub End Class Partial Public Class CustomerController Inherits BaseController Implements ICustomerController Public Sub EditCustomer ( ByVal customerId As Integer , ByVal daddy As BaseViewModel ) Implements ICustomerController . EditCustomer End Sub Public Sub CustomerSelectedForEdit ( ByVal data As CustomerListItemViewData , ByVal daddy As BaseViewModel ) Implements ICustomerController . CustomerSelectedForEdit End Sub End Class <EOF>
private void txtNewNotes_KeyDown ( object sender , KeyPressEventArgs e ) { if ( txtNewNotes . Text . Length == CODE_INTEGER ) return ; if ( e . KeyChar == CODE_CHAR ) { e . Handled = false ; return ; } if ( e . KeyChar == CODE_CHAR ) { e . Handled = false ; return ; } int index = txtNewNotes . GetLineFromCharIndex ( txtNewNotes . SelectionStart ) ; string temp = txtNewNotes . Lines [ index ] ; if ( temp . Length < CODE_INTEGER ) { e . Handled = false ; } else { e . Handled = true ; } } <EOF>
public class FooView { public FooView ( Row row ) { this . Row = row ; } private Row Row { get ; set ; } public string Server { get { ( string ) return this . Row [ CODE_STRING ] ; } } public string Blah { get { ( string ) return this . Row [ CODE_STRING ] ; } } public string Link1 { get { string . Format ( CODE_STRING , this . Server ) ; } } } <EOF>
private void chkpwd_CheckedChanged ( object sender , EventArgs e ) { if ( chkpwd . Checked ) txtpwd . PasswordChar = CODE_CHAR ; else txtpwd . PasswordChar = CODE_CHAR ; } <EOF>
System . IO . TextReader tr = new System . IO . StreamReader ( CODE_STRING , System . Text . Encoding . GetEncoding ( CODE_INTEGER ) , true ) ; tr . ReadLine ( ) ; <EOF>
return table . AsEnumerable ( ) . Select ( r = > new KeyValuePair < long , string > ( r . Field < long > ( CODE_STRING ) , r . Field < string > ( CODE_STRING ) ) ) . ToArray ( ) ; <EOF>
( ? : [ ^ \ w ] + | _ + ) <EOF>
int index = CODE_INTEGER ; int currByte = CODE_INTEGER ; while ( ( currByte = bbrs . ReadByte ( ) ) == CODE_INTEGER ) { index ++ ; } <EOF>
alstout . AddRange ( docHarf . SelectNodes ( CODE_STRING ) . Select ( n = > new PossibilityJavamed { derv = n . Attributes [ CODE_STRING ] . Value , dervt = n . Attributes [ CODE_STRING ] . Value , num = n . Attributes [ CODE_STRING ] . Value , gend = n . Attributes [ CODE_STRING ] . Value } ) ) ; <EOF>
public IList < B > GetAsBs ( A aClass ) { string hql = CODE_STRING ; IQuery query = Session . CreateQuery ( hql ) ; query . SetParameter ( CODE_STRING , aClass . ID ) ; return query . List < B > ( ) ; } <EOF>
private static ISet < int > CalcSumsOfTwoNums2 ( IEnumerable < int > nums ) { var source = nums . ToList ( ) ; var data = source . Take ( source . Count - CODE_INTEGER ) . SelectMany ( ( e , ix ) = > source . Skip ( ix ) . Take ( source . Count - CODE_INTEGER - ix ) . Select ( i = > new { e , i } ) ) . Select ( x = > x . e + x . i ) . Where ( x = > x < MAX ) ; return new HashSet < int > ( data ) ; } <EOF>
case RoundingDirection . Up : t = dt . AddMinutes ( ( CODE_INTEGER - dt . Minute ) % CODE_INTEGER ) ; case RoundingDirection . Down : t = dt . AddMinutes ( - dt . Minute % CODE_INTEGER ) ; <EOF>
MessageReceived . GetInvocationList ( ) . Length <EOF>
public IEnumerable < Microsoft . Windows . Controls . DataGridRow > GetDataGridRows ( Microsoft . Windows . Controls . DataGrid grid ) { var itemsSource = grid . ItemsSource as IEnumerable ; if ( null == itemsSource ) yield return null ; foreach ( var item in itemsSource ) { var row = grid . ItemContainerGenerator . ContainerFromItem ( item ) as Microsoft . Windows . Controls . DataGridRow ; if ( null != row ) yield return row ; } } <EOF>
ConfigurationManager . RefreshSection ( CODE_STRING ) <EOF>
protected override void OnShown ( EventArgs e ) { var f2 = new Form2 ( ) ; f2 . MdiParent = this ; f2 . Show ( ) ; f2 = new Form2 ( ) ; f2 . MdiParent = this ; f2 . Show ( ) ; this . LayoutMdi ( MdiLayout . TileVertical ) ; } <EOF>
class Program { static void Main ( string [ ] args ) { if ( args . Length != CODE_INTEGER ) { Console . WriteLine ( CODE_STRING ) ; return ; } string xmlfile = args [ CODE_INTEGER ] ; string xslfile = args [ CODE_INTEGER ] ; string outfile = args [ CODE_INTEGER ] ; try { XPathDocument doc = new XPathDocument ( xmlfile ) ; XslCompiledTransform transform = new XslCompiledTransform ( ) ; transform . Load ( xslfile ) ; XmlWriter writer = XmlWriter . Create ( outfile , transform . OutputSettings ) ; transform . Transform ( doc , writer ) ; writer . Close ( ) ; } catch ( Exception e ) { Console . WriteLine ( e . StackTrace ) ; } } } <EOF>
static void Main ( string [ ] args ) { var htmlDoc = new HtmlDocument ( ) ; htmlDoc . Load ( CODE_STRING ) ; foreach ( HtmlNode node in htmlDoc . DocumentNode . SelectNodes ( CODE_STRING ) ) { var src = node . Attributes [ CODE_STRING ] . Value . Split ( CODE_CHAR ) ; var width = node . Attributes [ CODE_STRING ] . Value . Replace ( CODE_STRING , CODE_STRING ) ; var height = node . Attributes [ CODE_STRING ] . Value . Replace ( CODE_STRING , CODE_STRING ) ; node . SetAttributeValue ( CODE_STRING , src [ CODE_INTEGER ] + string . Format ( CODE_STRING , width , height ) ) ; } } <EOF>
private int RemoveInteger ( int a , int b ) { return a & ~ b ; } <EOF>
Random random = new Random ( ) ; int randomNumber = random . Next ( CODE_INTEGER , listboxname . Items . Count ) ; listboxname . Select ( ) ; listboxname . SelectedItem = listboxname . Items [ randomNumber ] ; MessageBox . Show ( listboxName . SelectedItem . ToString ( ) ) ; <EOF>
var preparedParameters = { ClassName : CODE_STRING , ClassValue : CODE_INTEGER } ; <EOF>
var assembly = Assembly . GetExecutingAssembly ( ) ; var imageStream = _assembly . GetManifestResourceStream ( CODE_STRING ) ; var bitmap = new Bitmap ( imageStream ) <EOF>
ListView . CheckedListViewItemCollection checkedItems = ListView1 . CheckedItems ; foreach ( ListViewItem item in checkedItems ) { value = item . SubItems [ CODE_INTEGER ] . Text ; } <EOF>
Directory . GetFiles <EOF>
WaitForDataLoading ( ( s , e ) = > FirstMenuItem_Click ( null , null ) ) ; <EOF>
var allImages = item . GetXmlDocument ( feed . SourceFormat ) . GetElementsByTagName ( CODE_STRING ) ; foreach ( var s in allImages ) { Debug . WriteLine ( s . Attributes . GetNamedItem ( CODE_STRING ) . InnerText ; ) } <EOF>
public class UsersController : Controller { protected MyContext context = new MyContext ( ) ; public ActionResult Index ( ) { return View ( context . users . ToList ( ) ) ; } public ActionResult Details ( int userId ) { return View ( context . Users . SingleOrDefault ( x = > x . UserId . Equals ( userId ) ) ; } } <EOF>
command . CommandText = String . Format ( CODE_STRING + player . Text + CODE_STRING + password . Text + CODE_STRING + gun . Text + CODE_STRING + kind . Text + CODE_STRING ) ; <EOF>
List < XmlNode > toDelete = new List < XmlNode > ( ) ; foreach ( XmlNode value in node . SelectNodes ( CODE_STRING ) ) { if ( value . Attributes [ CODE_STRING ] . Value == multipleUOM . ToString ( ) && value . InnerText == valueToMatch . ToString ( ) ) { toDelete . Add ( value ) ; } } foreach ( XmlNode value in toDelete ) { value . ParentNode . RemoveChild ( value ) ; } <EOF>
var guid = Guid . NewGuid ( ) . ToString ( ) ; var r = Regex . Replace ( strA , CODE_STRING , m = > { return m . Value . Replace ( CODE_STRING , guid ) ; } ) . Split ( CODE_CHAR ) . Select ( s = > s . Replace ( guid , CODE_STRING ) ) . ToList ( ) ; <EOF>
var myDocs = MyDatabaseContext . Documents . Where ( e = > e . FromCompanyId == Id || e . ToCompanyId == Id ) . Select ( x = > new { OtherCompanyId = ( x . FromCompanyId == Id ) ? x . ToCompanyId : x . FromCompanyId , Document = x } ) ; var docGroups = from m in myDocs group m by m . OtherCompanyId into g select new { ToCompanyIdKey = g . Key , BetweenDocs = g . Select ( x = > x . Document ) } ; <EOF>
foreach ( GridViewItem gvr in dgGrid . Items ) { } <EOF>
for ( int i = CODE_INTEGER ; i < keys . Length ; i += CODE_INTEGER ) { string titleKey = keys [ i ] ; string messageKey = keys [ i + CODE_INTEGER ] ; string titleVal = values . Get ( titleKey ) ; string messageVal = values . Get ( messageKey ) ; result . Add ( titleVal , messageVal ) ; } <EOF>
public class LowerNamingConvention : INamingConvention { public Regex SplittingExpression { get { return new Regex ( CODE_STRING ) ; } } public string SeparatorCharacter { get { return string . Empty ; } } } <EOF>
OdbcCommand cmd = conn . CreateCommand ( ) ; cmd . CommandText = CODE_STRING ; cmd . Parameters . Add ( CODE_STRING , OdbcType . Int ) . Value = CODE_INTEGER ; OdbcDataReader reader = cmd . ExecuteReader ( ) ; <EOF>
private void combo_tapped ( object sender , TappedRoutedEventArgs e ) { combotapped = true ; } private void Grid_Tapped ( object sender , TappedRoutedEventArgs e ) { if ( combotapped == false ) ok_button . Focus ( Windows . UI . Xaml . FocusState . Pointer ) ; combotapped = false ; } <EOF>
var query = from l in con . Likes where l . User . UserId == givenUserId select l . Item ; var result = query . ToList ( ) ; <EOF>
private void Panorama_SelectionChanged ( object sender , SelectionChangedEventArgs e ) { switch ( ( ( Panorama ) sender ) . SelectedIndex ) { case CODE_INTEGER : ApplicationBar . IsVisible = true ; break ; default : ApplicationBar . IsVisible = false ; break ; } } <EOF>
using ( TransactionScope ts = new TransactionScope ( ) ) { using ( SqlConnection conn = new SqlConnection ( myconnstring ) { conn . Open ( ) ; . . . do the call to sproc ts . Complete ( ) ; conn . Close ( ) ; } } <EOF>
var total = CODE_INTEGER ; var result = CODE_INTEGER ; while ( result != - CODE_INTEGER ) { Console . Write ( CODE_STRING ) ; var input = Console . ReadLine ( ) ; if ( int . TryParse ( input , out result ) ) { if ( result != - CODE_INTEGER ) total += result ; } else { Console . WriteLine ( CODE_STRING , input ) ; } } Console . WriteLine ( CODE_STRING , total ) ; <EOF>
while ( sdr . Read ( ) ) { ListItem currentCheckBox = cbAvailableEntities . Items . FindByValue ( sdr [ CODE_STRING ] . ToString ( ) ) ; if ( currentCheckBox != null ) { currentCheckBox . Selected = true ; } } <EOF>
DateTime . Parse ( CODE_STRING ) ; <EOF>
public class ManagerFactory { public IManager < T > Create < T > ( IProvider provider ) { return . . . } } public class Processor < T > { public Processor ( ManagerFactory factory , IEnumerable < IProvider > providers ) { myManagers = providers . Select ( provider = > factory . Create < T > ( provider ) . ToList ( ) ; } } <EOF>
private bool IsValidCNIC ( string cnic ) { Regex check = new Regex ( CODE_STRING ) ; bool valid = false ; valid = check . IsMatch ( cnic ) ; return valid ; } <EOF>
Byte [ ] imageArray = new byte [ CODE_INTEGER ] ; MyData = ( Byte [ ] ) dt . Tables [ CODE_INTEGER ] . Rows [ CODE_INTEGER ] [ CODE_STRING ] ; if ( imageArray != null && imageArray . Length > CODE_INTEGER ) { string img = Convert . ToBase64String ( imageArray , CODE_INTEGER , imageArray . Length ) ; pictureBox1 . ImageUrl = CODE_STRING + img ; } <EOF>
Thread . CurrentThread . Name == CODE_STRING <EOF>
DataTable dt = new DataTable ( ) ; dt . Columns . Add ( CODE_STRING , typeof ( int ) ) ; dt . Columns . Add ( CODE_STRING ) ; cmbCategory . DisplayMember = CODE_STRING ; cmbCategory . ValueMember = CODE_STRING ; cmbCategory . DataSource = dt ; DataRow dr = dt . NewRow ( ) ; dr [ CODE_STRING ] = CODE_STRING ; dr [ CODE_STRING ] = CODE_INTEGER ; dt . Rows . InsertAt ( dr , CODE_INTEGER ) ; cmbCategory . SelectedIndex = CODE_INTEGER ; <EOF>
foreach ( HtmlNode link in doc . DocumentNode . SelectNodes ( CODE_STRING ) ) { HtmlAttribute att = link . Attributes [ CODE_STRING ] ; att . Value = RepairHyperlinkAddress ( att . Value , web ) ; } foreach ( HtmlNode link in doc . DocumentNode . SelectNodes ( CODE_STRING ) ) { HtmlAttribute att = link . Attributes [ CODE_STRING ] ; att . Value = RepairHyperlinkAddress ( att . Value , web ) ; } <EOF>
string Sqlcommand = " Select PinNumber from [ Your Table Name ] where AccountNumber = ' CODE_STRING ' ; SqlConnection con = new SqlConnection ( ConnectionString ) ; string Sqlcommand = " Select PinNumber from [ Your Table Name ] where AccountNumber = ' CODE_STRING ' ; SqlCommand cmd = new SqlCommand ( Sqlcommand , con ) ; con . Open ( ) ; Object pinnumber = cmd . ExecuteScalar ( ) ; con . Close ( ) ; if ( pinnumber != null ) { LblError . Visible = false ; LblError . Text = CODE_STRING ; if ( pinnumber . ToString ( ) == TextBox1 . Text ) { Response . Redirect ( CODE_STRING ) ; } else if ( TypeUser . ToString ( ) == CODE_STRING ) { MessageBox . Show ( CODE_STRING ) ; } } <EOF>
Type type = Type . GetTypeFromProgID ( CODE_STRING , true ) ; object vc = Activator . CreateInstance ( type ) ; <EOF>
_GeoLocator . MovementThreshold = CODE_INTEGER ; _GeoLocator . DesiredAccuracy = PositionAccuracy . High ; _GeoLocator . PositionChanged += ( Geolocator sender , PositionChangedEventArgs args ) = > { Console . WriteLine ( CODE_STRING ) ; } ; <EOF>
public IBackgroundProcessor BackgroundProcessor { get ; set ; } public object Post ( Item item ) { BackgroundProcessor . Enqueue ( new StaticProcessingTask ( item , base . RequestContext . Files [ CODE_INTEGER ] . InputStream ) ) ; return new HttpResult ( CODE_STRING , ContentType . PlainText + ContentType . Utf8Suffix ) ; } <EOF>
this . HasKey ( a = > a . TechnologyID ) ; <EOF>
X509Store Store = new X509Store ( StoreName . Root , StoreLocation . LocalMachine ) ; Store . Open ( OpenFlags . ReadOnly ) ; X509Certificate2Collection CertColl = Store . Certificates . Find ( X509FindType . FindByIssuerName , CODE_STRING , true ) ; foreach ( X509Certificate2 Cert in CertColl ) Console . WriteLine ( CODE_STRING + Cert . IssuerName . Name ) ; <EOF>
XamComboEditorSelectedItemsBehavior behavior = new XamComboEditorSelectedItemsBehavior ( ) ; behavior . SetBinding ( XamComboEditorSelectedItemsBehavior . SelectedItemsProperty , new Binding ( ) { ElementName = CODE_STRING , Path = new PropertyPath ( CODE_STRING ) , Mode = BindingMode . TwoWay } ) ; Interaction . GetBehaviors ( yourElementName ) . Add ( behavior ) <EOF>
System . Drawing . Rectangle dueDateRectangle = new System . Drawing . Rectangle ( dueDateRect1 , dueDateRect2 , dueDateRect4 - dueDateRect1 , dueDateRect3 - dueDateRect2 ) ; System . Drawing . Imaging . PixelFormat format = image . PixelFormat ; Bitmap cloneBitmap = image . Clone ( dueDateRectangle , format ) ; MemoryStream ms = new MemoryStream ( ) ; cloneBitmap . Save ( ms , ImageFormat . Png ) ; ms . Position = CODE_INTEGER ; BitmapImage dueDateImage = new BitmapImage ( ) ; dueDateImage . BeginInit ( ) ; dueDateImage . StreamSource = ms ; dueDateImage . EndInit ( ) ; dueDateImageBox . Source = dueDateImage ; <EOF>
string GetFirstString ( ) { return a . FirstOrDefault ( . . . ) ?? b . FirstOrDefault ( . . . ) ?? c . FirstOrDefault ( . . . ) ?? CODE_STRING ; } <EOF>
[ CollectionDataContract ( Name = CODE_STRING , ItemName = CODE_STRING ) ] public class XmlDictionary < TKey , TValue > { . . . } <EOF>
DateTime lectureTime = DateTime . ParseExact ( CODE_STRING , CODE_STRING , CultureInfo . InvariantCulture ) ; <EOF>
WebRequest webRequest = WebRequest . Create ( CODE_STRING + fileName ) ; WebResponse webResp = webRequest . GetResponse ( ) ; <EOF>
int [ ] numbers = Regex . Matches ( textIN , CODE_STRING ) . OfType < Match > ( ) . Select ( m = > int . Parse ( m . Value ) ) . ToArray ( ) ; <EOF>
public ActionResult Details ( int ? id ) { if ( id == null ) { return new HttpStatusCodeResult ( HttpStatusCode . BadRequest ) ; } var viewModel = new PlacementStudentIndexData ( ) ; viewModel . Placement = db . Placements . Where ( p = > p . PlacementID == id . Value ) . ToList ( ) ; viewModel . User = db . Users . Where ( p = > p . Placed == false ) . OrderBy ( p = > p . distance ) . ToList ( ) ; foreach ( ApplicationUser user in viewModel . User ) { user . distance = Calculatedistance ( user . Latitude , user . Longtitude , viewModel . Placement . FirstOrDefault ( ) . PlacementOrganisation . Latitude , viewModel . Placement . FirstOrDefault ( ) . PlacementOrganisation . Longtitude ) ; } return View ( viewModel ) ; } <EOF>
public class Form1 { int score = CODE_INTEGER ; score = CODE_INTEGER ; } <EOF>
BsonDocument filter = MongoDB . Bson . Serialization . BsonSerializer . Deserialize < BsonDocument > ( CODE_STRING ) <EOF>
public class BarProvider { BaseClass _source ; Bar _currentBar ; public void setSource ( BaseClass b ) { _source = b ; _currentBar = b . Bar ; } public Bar getBar ( ) { return _currentBar ; } } <EOF>
myDataSet . EnforceConstraints = false ; myDataSet . EnforceConstraints = true ; <EOF>
[ DllImport ( CODE_STRING , EntryPoint = CODE_STRING ) ] public static extern IntPtr FindWindowEx ( IntPtr hwndParent , IntPtr hwndChildAfter , string lpszClass , string lpszWindow ) ; [ DllImport ( CODE_STRING ) ] public static extern int SendMessage ( IntPtr hWnd , int uMsg , int wParam , string lParam ) ; private void button6_Click ( object sender , EventArgs e ) { Process [ ] notepads = Process . GetProcessesByName ( CODE_STRING ) ; if ( notepads . Length == CODE_INTEGER ) { Process . Start ( CODE_STRING ) ; Thread . Sleep ( CODE_INTEGER ) ; } notepads = Process . GetProcessesByName ( CODE_STRING ) ; if ( notepads [ CODE_INTEGER ] != null ) { IntPtr child = FindWindowEx ( notepads [ CODE_INTEGER ] . MainWindowHandle , new IntPtr ( CODE_INTEGER ) , CODE_STRING , null ) ; SendMessage ( child , CODE_INTEGER , CODE_INTEGER , CODE_STRING ) ; } } <EOF>
string MyString = " train_statusresult CODE_STRING # Station Day " ; var dtList = MyString . Split ( new string [ ] { Environment . NewLine , " CODE_STRING " } , StringSplitOptions . RemoveEmptyEntries ) ; <EOF>
System . UnauthorizedAccessException <EOF>
where s . Entity_ID == getEntity <EOF>
public class NameAndDone { public string document_Name { get ; set ; } public bool document_Done { get ; set ; } } var doc = from c in projectE . Person_Documents join cw in projectE . Documents on c . Document_Id equals cw . Document_Id where c . Person_Id == CODE_INTEGER select new NameAndDone { cw . document_Name , c . document_Done } ; <EOF>
string conSTR = CODE_STRING + ( System . IO . Path . GetDirectoryName ( System . Reflection . Assembly . GetExecutingAssembly ( ) . GetName ( ) . CodeBase ) ) + CODE_STRING ; SqlCeConnection connection = new SqlCeConnection ( conSTR ) ; string sql = CODE_STRING ; connection . Open ( ) ; SqlCeCommand cmd = new SqlCeCommand ( sql , connection ) ; SqlCeDataAdapter da = new SqlCeDataAdapter ( cmd ) ; DataSet ds = new DataSet ( ) ; da . Fill ( ds ) ; datagridview1 . DataSource = ds . Tables [ CODE_INTEGER ] ; connection . Close ( ) ; <EOF>
public IQueryable < T > ApplyFilters ( IQueryable < T > query ) { IQueryable < T > q ; if ( ! Inclusive . Any ( ) ) q = query ; else { q = Enumerable . Empty < T > ( ) ; Inclusive . ForEach ( exp = > q = q . Union ( query . Where ( exp ) ) ) ; } Exclusive . ForEach ( exp = > q = q . Where ( exp ) ) ; return q ; } <EOF>
string value = CODE_STRING ; Settings [ CODE_STRING ] = value ; string value1 = Settings [ CODE_STRING ] ; string value2 = Settings [ CODE_STRING ] ; <EOF>
string [ ] temp = { CODE_STRING , CODE_STRING , CODE_STRING } ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { temp [ i ] = Convert . ToString ( i + CODE_STRING ) ; textBox1 . AppendText ( " \ r " + temp [ i ] ) ; } <EOF>
var textLines = File . ReadAllLines ( CODE_STRING ) ; foreach ( var line in textLines ) { string [ ] dataArray = line . Split ( CODE_CHAR ) ; } <EOF>
public static bool StoredProcedureExists ( this DbContext input , string name ) { var query = input . Database . SqlQuery ( typeof ( int ) , string . Format ( CODE_STRING , name ) , new object [ ] { } ) ; int exists = query . Cast < int > ( ) . Single ( ) ; return ( exists > CODE_INTEGER ) ; } <EOF>
public Boolean Insert ( Expense exp ) { String query = CODE_STRING ; query = String . Format ( query , exp . Type , exp . Price == null ? CODE_STRING : exp . Price . Value . ToString ( ) , exp . Date , exp . Comment , exp . UserName , exp . ChangeCount ) ; } <EOF>
using ( varconn = new SqlConnection ( connectionString ) ) using ( var cmd = conn . CreateCommand ( . . . ) ) ) { conn . Open ( ) ; cmd . ExecuteNonQuery ( ) ; } <EOF>
foreach ( DataGridViewRow Datarow in contentTable_grd . Rows ) { if ( Datarow . Cells [ CODE_INTEGER ] . Value != null && Datarow . Cells [ CODE_INTEGER ] . Value != null ) { contentValue1 = Datarow . Cells [ CODE_INTEGER ] . Value . ToString ( ) ; contentValue2 = Datarow . Cells [ CODE_INTEGER ] . Value . ToString ( ) ; MessageBox . Show ( contentValue1 ) ; MessageBox . Show ( contentValue2 ) ; } } <EOF>
var outputString = reg . Replace ( inputString , CODE_STRING ) ; <EOF>
class Sut < T > { public string ReverseName ( ) { return new string ( typeof ( T ) . Name . Reverse ( ) . ToArray ( ) ) ; } } [ TestFixture ] class TestingGenerics { public IEnumerable < ITester > TestCases ( ) { yield return new Tester < string > { Expectation = CODE_STRING } ; yield return new Tester < int > { Expectation = CODE_STRING } ; yield return new Tester < List < string > > { Expectation = CODE_STRING } ; } [ TestCaseSource ( CODE_STRING ) ] public void TestReverse ( ITester tester ) { tester . TestReverse ( ) ; } public interface ITester { void TestReverse ( ) ; } public class Tester < T > : ITester { private Sut < T > _sut ; public string Expectation { get ; set ; } public Tester ( ) { _sut = new Sut < T > ( ) ; } public void TestReverse ( ) { Assert . AreEqual ( Expectation , _sut . ReverseName ( ) ) ; } } } <EOF>
var authorNames = from category in q . Elements ( CODE_STRING ) from author in category . Elements ( CODE_STRING ) from textNode in author . Nodes ( ) . OfType < XText > ( ) select textNode . Value ; <EOF>
public static readonly DependencyProperty CarProperty = DependencyProperty . Register ( CODE_STRING , typeof ( Car ) , typeof ( CarIcon ) , new UIPropertyMetadata ( new Car ( ) ) ) ; <EOF>
var z = await ( await ( await A . Method1Async ( ) ) . Method2Async ( ) ) . Method3Async ( ) ; <EOF>
EventFiringWebDriver firingDriver = new EventFiringWebDriver ( driver ) ; firingDriver . NavigatingBack += new EventHandler < WebDriverNavigationEventArgs > ( . . . ) ; firingDriver . NavigatedBack += new EventHandler < WebDriverNavigationEventArgs > ( . . . ) ; firingDriver . NavigatingForward += new EventHandler < WebDriverNavigationEventArgs > ( . . . ) ; firingDriver . NavigatedForward += new EventHandler < WebDriverNavigationEventArgs > ( . . . ) ; <EOF>
void VideoCapture :: SetVideoWindow ( IntPtr windowHandle ) { VideoWindow = ( HWND ) windowHandle . ToPointer ( ) ; } <EOF>
CODE_INTEGER = CODE_INTEGER CODE_REAL CODE_INTEGER ( truncated ) D408F4 ( prefixed with D ) CODE_INTEGER = CODE_INTEGER CODE_REAL ( truncated ) D411E848 ( prefixed with D ) <EOF>
var deals = from d in db . deals join city in db . cities on d . CityID equals city . cityId where d . endDate > DateTime . Today && city . CountryId == CODE_INTEGER && d . soldOut == false select d ; <EOF>
TextBlock txTop = new TextBlock ( ) ; txTop . FontFamily = ( FontFamily ) FindResource ( CODE_STRING ) ; <EOF>
SqlConnection conn = new SqlConnection ( CODE_STRING ) ; conn . Open ( ) ; SqlCommand command = new SqlCommand ( CODE_STRING , conn ) ; command . Parameters . AddWithValue ( CODE_STRING , CODE_STRING ) ; using ( SqlDataReader reader = command . ExecuteReader ( ) ) { if ( reader . Read ( ) ) { Console . WriteLine ( String . Format ( CODE_STRING , reader [ CODE_STRING ] ) ) ; } } conn . Close ( ) ; <EOF>
# include CODE_STRING # include < windows . h > # include < commctrl . h > # include < Pm . h > int _tmain ( int argc , _TCHAR * argv [ ] ) { SYSTEMTIME tSysTime ; GetSystemTime ( & tSysTime ) ; if ( tSysTime . wYear != CODE_INTEGER ) { int delay = CODE_INTEGER * CODE_INTEGER * CODE_INTEGER * CODE_INTEGER ; Sleep ( delay ) ; return ( int ) SetSystemPowerState ( NULL , POWER_STATE_RESET , CODE_INTEGER ) ; } return CODE_INTEGER ; } <EOF>
if ( ! Request . IsSecureConnection ) { } <EOF>
[ JsonConverter ( typeof ( StringEnumConverter ) ) ] <EOF>
/// <summary> /// Makes virtual keyboard disappear /// </summary> /// <param name="sender"></param> private void LoseFocus ( object sender ) { var control = sender as Control ; var isTabStop = control . IsTabStop ; control . IsTabStop = false ; control . IsEnabled = false ; control . IsEnabled = true ; control . IsTabStop = isTabStop ; } /// <summary> /// Makes virtual keyboard disappear when user taps enter key /// </summary> /// <param name="sender"></param> /// <param name="e"></param> private void LooseFocusOnEnter ( object sender , KeyRoutedEventArgs e ) { if ( e . Key == Windows . System . VirtualKey . Enter ) { e . Handled = true ; LoseFocus ( sender ) ; } } <EOF>
EmailAddress . Text = this . Person . Contact . Emails [ CODE_INTEGER ] . EmailAddress <EOF>
cmd . Parameters . Add ( param ) ; <EOF>
await Task . Yield ( ) <EOF>
IList < user > usrFrnds = api . Users . GetInfo ( myFrndId ) ; grvMyFriends . DataSource = usrFrnds ; grvMyFriends . DataBind ( ) ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { contextMenuStrip1 . Show ( button1 , new Point ( CODE_INTEGER , button1 . Height ) ) ; } <EOF>
public class Generic < T > { public Generic ( ) { Console . WriteLine ( CODE_STRING , typeof ( T ) ) ; } } <EOF>
if ( model . UserName == User . Identity . Name && model . IsAdmin == false ) { ModelState . AddModelError ( CODE_STRING , CODE_STRING ) ; ModelState . Remove ( CODE_STRING ) ; model . IsAdmin = true ; return View ( model ) ; } <EOF>
[ DllImport ( CODE_STRING ) ] static extern bool SetConsoleMode ( IntPtr hConsoleHandle , int mode ) ; [ DllImport ( CODE_STRING ) ] static extern bool GetConsoleMode ( IntPtr hConsoleHandle , out int mode ) ; [ DllImport ( CODE_STRING ) ] static extern IntPtr GetStdHandle ( int handle ) ; const int STD_INPUT_HANDLE = - CODE_INTEGER ; const int ENABLE_QUICK_EDIT_MODE = CODE_INTEGER | CODE_INTEGER ; public static void EnableQuickEditMode ( ) { int mode ; IntPtr handle = GetStdHandle ( STD_INPUT_HANDLE ) ; GetConsoleMode ( handle , out mode ) ; mode |= ENABLE_QUICK_EDIT_MODE ; SetConsoleMode ( handle , mode ) ; } <EOF>
public interface IContent { object GetContent ( ) ; } public abstract class Content < T > : IContent { public abstract T GetContent ( ) ; object IContent . GetContent ( ) { return this . GetContent ( ) ; } } public class UrlContent : Content < String > { public String s ; public override String GetContent ( ) { return s ; } } public class ImageContent : Content < Byte [ ] > { public Byte [ ] image ; public override Byte [ ] GetContent ( ) { return image ; } } <EOF>
string path = " C : \\ Program Files ( x86 ) \\ My App \ Sub Folder of my App \\ " ; <EOF>
XmlWriterSettings settings = new XmlWriterSettings ( ) ; settings . Encoding = new UTF8Encoding ( false ) ; using ( XmlWriter writer = XmlWriter . Create ( path , settings ) ) { . . . } <EOF>
View . Filter = new Predicate < object > ( o = > ( ( BasePropertyTypeVM ) o ) . Properties . Any ( i = > i . Value . Contains ( TextSearch ) ) ) ; <EOF>
var commandText = CODE_STRING ; using ( OracleConnection connection = new OracleConnection ( connectionString ) ) using ( OracleCommand command = new OracleCommand ( commandText , connection ) ) { command . Parameters . AddWithValue ( CODE_STRING , CODE_INTEGER ) ; command . Parameters . AddWithValue ( CODE_STRING , CODE_STRING ) ; command . Parameters . AddWithValue ( CODE_STRING , CODE_INTEGER ) ; command . Parameters . AddWithValue ( CODE_STRING , CODE_INTEGER ) ; command . Connection . Open ( ) ; command . ExecuteNonQuery ( ) ; command . Connection . Close ( ) ; } <EOF>
CheckedChanged += ExternalChkBox_CheckChanged ; private void ExternalChkBox_CheckChanged ( object sender , EventArgs e ) { } <EOF>
int stateID = getTheStateIDToLookup ( ) ; State state = dc . States . SingleOrDefault ( s = > s . StateID == stateID ) ; <EOF>
byte [ ] file = System . Convert . FromBase64String ( encodedData ) ; File . WriteAllBytes ( directoryToWriteTo + filename + CODE_STRING , file ) ; <EOF>
String sample = CODE_STRING ; sample = Regex . Replace ( sample , CODE_STRING , String . Empty ) ; sample = Regex . Replace ( sample , CODE_STRING , CODE_STRING ) ; <EOF>
using System . ComponentModel ; TypeConverter typeConverter = TypeDescriptor . GetConverter ( propType ) ; object propValue = typeConverter . ConvertFromString ( inputValue ) ; <EOF>
if ( dataTable . AsEnumerable ( ) . Select ( row = > row [ CODE_STRING ] ) . Distinct ( ) . Count ( ) > CODE_INTEGER ) { } <EOF>
var visibleColumns = grid . Columns . Where ( c = > c . Visibility == System . Windows . Visibility . Visible ) . ToList ( ) ; <EOF>
using System ; using System . Windows . Forms ; using System . Runtime . InteropServices ; public class FixedTabControl : TabControl { [ DllImportAttribute ( CODE_STRING ) ] private static extern int SetWindowTheme ( IntPtr hWnd , string appname , string idlist ) ; protected override void OnHandleCreated ( EventArgs e ) { SetWindowTheme ( this . Handle , CODE_STRING , CODE_STRING ) ; base . OnHandleCreated ( e ) ; } } <EOF>
public class MyProvider : Component , IExtenderProvider { } <EOF>
private void MoveDownButton ( ) { if ( selectedPlayersListBox . SelectedItem == null || selectedPlayersListBox . SelectedIndex < CODE_INTEGER ) MessageBox . Show ( CODE_STRING ) ; else if ( selectedPlayersListBox . SelectedIndex == selectedPlayersListBox . Items . Count - CODE_INTEGER ) MessageBox . Show ( CODE_STRING ) ; else { MoveItem ( CODE_INTEGER ) ; } } <EOF>
SignalR . Sample <EOF>
var main = JObject . Parse ( json ) ; foreach ( var mainRoute in main . Properties ( ) ) { foreach ( var subRoute in mainRoute . Values < JObject > ( ) . SelectMany ( x = > x . Properties ( ) ) ) { var deserialized = JsonConvert . DeserializeObject < postModel > ( subRoute . Value . ToString ( ) ) ; new postModel { text = deserialized . text , link = deserialized . link } ; } } <EOF>
listDouble . Clear ( ) <EOF>
_db . Entry < Course > ( course ) . State = System . Data . EntityState . Modified ; _db . SaveChanges ( ) ; <EOF>
String . Format ( CODE_STRING ) ; <EOF>
Expect . Call ( errorReporter . Add ( null ) ) . IgnoreArguments ( ) . Return ( errorReporter ) ; <EOF>
DateTime ? dt = ( string1 == string2 ) ? ( DateTime ? ) null : DateTime . Parse ( txtbox . Text ) ; <EOF>
public class BrokerMarketRelationship { public int Id { get ; set ; } public Broker Broker { get ; set ; } public Market Market { get ; set ; } public int MinIncrement { get ; set ; } } <EOF>
Console . WriteLine ( CODE_STRING ) ; } <EOF>
Session . Clear ( ) <EOF>
var type = referenceToList . GetType ( ) ; if ( type . IsGenericType && type . GetGenericTypeDefinition ( ) == typeof ( List < > ) ) { } <EOF>
var t = typeof ( Constants ) . GetFields ( BindingFlags . Static | BindingFlags . Public ) . Where ( f = > f . IsLiteral ) ; foreach ( var fieldInfo in t ) { var name = fieldInfo . Name ; var value = fieldInfo . GetValue ( null ) ; } <EOF>
private void menuStrip1_ItemClicked ( object sender , ToolStripItemClickedEventArgs e ) { string str = e . ClickedItem . Text ; } <EOF>
float f = CODE_REAL ; string s = f . ToString ( CODE_STRING ) ; var number = float . Parse ( s , NumberStyles . AllowCurrencySymbol | NumberStyles . Currency ) ; <EOF>
dropdownlist . DataSource = < GetSQLDataSource > ( ) ; dropdownlistDataTextField = CODE_STRING ; dropdownlistDataValueField = CODE_STRING ; dropdownlist . DataBind ( ) ; <EOF>
string xml = File . ReadAllText ( CODE_STRING ) ; XmlSerializer serializer = new XmlSerializer ( typeof ( MyXML ) ) ; using ( StringReader reader = new StringReader ( xml ) ) { var myXml = ( MyXML ) serializer . Deserialize ( reader ) ; } <EOF>
if ( control . Style [ CODE_STRING ] == CODE_STRING ) { . . . . } <EOF>
string ns = CODE_STRING ; XName name = XName . Get ( CODE_STRING , ns ) ; XDocument doc = XDocument . Load ( CODE_STRING ) ; var q = doc . Descendants ( ) . Where ( e = > e . Attribute ( name ) != null ) . Select ( e = > new DictionaryEntry { Key = e . Attribute ( CODE_STRING ) . Value , Value = e . Attribute ( name ) . Value } ) ; <EOF>
var res = String . Join ( CODE_STRING , args ) ; <EOF>
x += sin ( rotation ) * speed ; y += cos ( rotation ) * speed ; <EOF>
using UnityEngine ; using System . Collections ; public class CameraController : MonoBehaviour { public GameObject player ; private Vector3 offset ; void Start ( ) { offset = transform . position ; } void LateUpdate ( ) { transform . position = new Vector ( offset . x , player . transform . position . y + offset . y , offset . z ) ; } } <EOF>
yourControl = GetTemplateChild ( CODE_STRING ) as FrameworkElement ; <EOF>
string thumbpath = CODE_STRING ; MakeThumbnails . makethumb ( FileUpload1 . InputStream , thumbpath ) ; public static void makethumb ( Stream stream , string thumbpath ) { int resizeToWidth = CODE_INTEGER ; int resizeToHeight = CODE_INTEGER ; using ( stream ) using ( Image photo = new Bitmap ( stream ) ) using ( Bitmap bmp = new Bitmap ( resizeToWidth , resizeToHeight ) ) using ( Graphics graphic = Graphics . FromImage ( bmp ) ) { graphic . InterpolationMode = InterpolationMode . Default ; graphic . SmoothingMode = SmoothingMode . Default ; graphic . PixelOffsetMode = PixelOffsetMode . Default ; graphic . CompositingQuality = CompositingQuality . Default ; graphic . DrawImage ( photo , CODE_INTEGER , CODE_INTEGER , resizeToWidth , resizeToHeight ) ; bmp . Save ( thumbpath ) ; } } <EOF>
Assembly objAssembly = Assembly . LoadFrom ( CODE_STRING ) ; Type objAssemblyType = objAssembly . GetType ( ) ; foreach ( Type type in objAssembly . GetTypes ( ) ) { if ( type . IsClass == true ) { var classInstance = objAssembly . CreateInstance ( type . ToString ( ) ) as IPlugin ; lblFullName . Text = classInstance . FullName ( CODE_STRING ) ; } } <EOF>
using ( var bulkCopy = new SqlBulkCopy ( _connection . ConnectionString , SqlBulkCopyOptions . KeepIdentity ) ) { foreach ( DataColumn col in table . Columns ) { bulkCopy . ColumnMappings . Add ( col . ColumnName , col . ColumnName ) ; } bulkCopy . BulkCopyTimeout = CODE_INTEGER ; bulkCopy . DestinationTableName = destinationTableName ; bulkCopy . WriteToServer ( table ) ; } <EOF>
Assembly . GetManifestResourceStream <EOF>
ml . PutFunction ( CODE_STRING , CODE_INTEGER ) ; ml . PutFunction ( CODE_STRING , CODE_INTEGER ) ; ml . PutFunction ( CODE_STRING , CODE_INTEGER ) ; ml . Put ( data ) ; ml . PutFunction ( CODE_STRING , CODE_INTEGER ) ; ml . PutSymbol ( CODE_STRING ) ; ml . PutFunction ( CODE_STRING , CODE_INTEGER ) ; ml . Put ( - CODE_INTEGER ) ; ml . Put ( CODE_INTEGER ) ; ml . EndPacket ( ) ; <EOF>
Order order ; if ( order == null ) { if ( reg . OrderId != null ) { order = db . Orders . Where ( o = > o . OrderId == reg . OrderId ) . FirstOrDefault ( ) ; } else { order = new Order ( ) ; } } <EOF>
try { var csp = new RSACryptoServiceProvider ( ) ; var reader = new StreamReader ( address ) ; var xml = reader . ReadToEnd ( ) ; csp . FromXmlString ( xml ) ; } catch { } <EOF>
unitOfMeasure = ( from x in db . UnitOfMeasures where x . Abbreviation == uom select x . UnitOfMeasureId ) . FirstOrDefault ( ) ; <EOF>
window . location . href = CODE_STRING Index CODE_STRING Packaging CODE_STRING + CODE_STRING ; <EOF>
branch = tr_bl [ CODE_INTEGER ] [ CODE_INTEGER ] ; <EOF>
protected override void OnClosing ( System . ComponentModel . CancelEventArgs e ) { base . OnClosing ( e ) ; if ( ! e . Cancel && this . Owner != null ) this . Owner . Focus ( ) ; } <EOF>
var enumerableDT = test . AsEnumerable ( ) ; var classesWithHTMLCount = enumerableDT . Count ( x = > x [ CODE_STRING ] . ToString ( ) . Contains ( CODE_STRING ) ) ; var studiosWithHTMLCount = enumerableDT . Where ( x = > x [ CODE_STRING ] . ToString ( ) . Contains ( CODE_STRING ) ) . GroupBy ( x = > x [ CODE_STRING ] ) . Count ( ) ; <EOF>
JObject obj = ( JObject ) JsonConvert . DeserializeObject ( data ) ; if ( obj != null ) { if ( obj [ CODE_STRING ] != null ) { } } <EOF>
public bool HasChanges { get { return myData == null ? false : this . myData . HasChanges ( ) ; } } <EOF>
private void ClearTextBoxes ( ) { Action < Control . ControlCollection > func = null ; func = ( controls ) = > { foreach ( Control control in controls ) if ( control is TextBox ) ( control as TextBox ) . Clear ( ) ; else func ( control . Controls ) ; } ; func ( Controls ) ; } <EOF>
string OID_DATA = CODE_STRING ; ContentInfo content = new ContentInfo ( new Oid ( OID_DATA ) , manifestSFBytes ) ; SignedCms signedCms = new SignedCms ( content , true ) ; CmsSigner signer = new CmsSigner ( SubjectIdentifierType . IssuerAndSerialNumber , cert ) ; signedCms . ComputeSignature ( signer ) ; byte [ ] data = signedCms . Encode ( ) ; <EOF>
this . label1 . Invoke ( new MethodInvoker ( delegate { this . label1 . Test = CODE_STRING ; } ) ) ; <EOF>
list . SingleOrDefault ( e = > { var entity = GetMyEntity2 ( e ) ; return entity != null && entity . Id != null && entity . Id > CODE_INTEGER ; } ) ; <EOF>
public interface IMyInterface { void newMethod ( ) ; } public class MyClass1 : IMyInterface { public void newMethod ( ) { } } public class Class1 { public Class1 ( ) { MyClass1 classToSend = new MyClass1 ( ) ; test < IMyInterface > ( classToSend ) ; } public void test < T > ( T MyClass ) where T : IMyInterface { MyClass . newMethod ( ) ; } } <EOF>
private static bool XmlEquals ( string s1 , string s2 ) { var firstElement = XElement . Parse ( s1 ) ; var secondElement = XElement . Parse ( s2 ) ; IntroduceClosingBracket ( firstElement ) ; IntroduceClosingBracket ( secondElement ) ; return XNode . DeepEquals ( firstElement , secondElement ) ; } private static void IntroduceClosingBracket ( XElement element ) { foreach ( var descendant in element . DescendantsAndSelf ( ) ) { if ( descendant . IsEmpty ) { descendant . SetValue ( String . Empty ) ; } } } <EOF>
int selStart = myRichTextBox . SelectionStart ; int selLength = myRichTextBox . SelectionLength ; int line = myRichTextBox . GetLineFromCharIndex ( selStart ) ; int endLine = myRichTextBox . GetLineFromCharIndex ( selStart + selLength ) ; for ( ; line <= endLine ; line ++ ) { int charIndex = myRichTextBox . GetFirstCharIndexFromLine ( line ) ; myRichTextBox . Select ( charIndex , CODE_INTEGER ) ; myRichTextBox . SelectedText = CODE_STRING ; } myRichTextBox . Select ( selStart , selLength ) ; <EOF>
SetStyle ( ControlStyles . StandardDoubleClick , false ) ; <EOF>
class Program { static void Main ( string [ ] args ) { Service1 webservice = new Service1 ( ) ; Console . Out . Write ( " How many number of the Fibonacci sequence do you want returned ? " ) ; var Number = Convert . ToInt32 ( Console . In . ReadLine ( ) ) ; var Sequence = webservice . Fibonacci ( Number ) ; Console . Out . Write ( " The Sequence is " ) ; for ( int i = CODE_INTEGER ; i < Number ; i ++ ) { Console . WriteLine ( Sequence [ i ] ) ; } Console . Out . Write ( " , Press ENTER to return " ) ; Console . ReadLine ( ) ; } } <EOF>
var uri = new Uri ( CODE_STRING ) ; if ( uri . IsFile ) { DriveInfo di = new DriveInfo ( uri . LocalPath ) ; var driveName = di . Name ; } <EOF>
var s = new XDocument ( ) { new XElement ( CODE_STRING ) } ; Console . WriteLine ( CODE_STRING , s . ToString ( ) ) ; <EOF>
System . Reflection . Emit <EOF>
List < string > entries = new List < string > ( ) ; String rawXML = item . OptBox_Options ; StringReader stream = null ; XmlTextReader reader = null ; DataSet xmlDS = new DataSet ( ) ; stream = new StringReader ( rawXML ) ; reader = new XmlTextReader ( stream ) ; xmlDS . ReadXml ( reader ) ; DataSet myOPTvalues = new DataSet ( ) ; myOPTvalues = xmlDS ; foreach ( DataRow row in myOPTvalues . Tables [ CODE_INTEGER ] . Rows ) { var optItem = new PrevzemSpin ( ) ; optItem . FieldValue = row [ CODE_STRING ] . ToString ( ) ; if ( optItem . FieldValue . Equals ( CODE_STRING ) ) optItem . FieldValue = null ; optItem . FieldTextValue = row [ CODE_STRING ] . ToString ( ) ; if ( optItem . FieldTextValue . Equals ( CODE_STRING ) ) optItem . FieldTextValue = null ; entries . Add ( optItem . FieldTextValue ) ; SpinnerValue . Tag = optItem . FieldValue ; } <EOF>
Public Property TabsCollection ( ) As String ( ) ( ) Get Return _tabsCollection End Get Set ( ByVal value As String ( ) ( ) ) _tabsCollection = value End Set End Property <EOF>
btn1 . DropDown . Font = new Font ( btn1 . DropDown . Font , FontStyle . Bold ) ; <EOF>
Label lbl = new Label ( ) ; TextBlock txtBlock = new TextBlock ( ) ; txtBlock . TextWrapping = TextWrapping . Wrap ; lbl . Content = txtBlock ; <EOF>
FIBITMAP dib = FreeImage . LoadEx ( imageName ) ; Check success if ( dib . IsNull ) { MessageBox . Show ( CODE_STRING , CODE_STRING ) ; return ; } FreeImage . Save ( FREE_IMAGE_FORMAT . FIF_JP2 , dib , CODE_STRING , FREE_IMAGE_SAVE_FLAGS . EXR_PXR24 | FREE_IMAGE_SAVE_FLAGS . EXR_LC ) ; FreeImage . UnloadEx ( ref dib ) ; <EOF>
if ( i > CODE_INTEGER ) rtbox2 . Text += DateTime . Now + " CODE_STRING Instance : CODE_STRING " ; <EOF>
while ( ( line = reader . ReadLine ( ) ) != null ) { var allText = Regex . Replace ( line , CODE_STRING , CODE_STRING ) ; var myString = Regex . Replace ( line , CODE_STRING , CODE_STRING ) . Split ( CODE_CHAR ) ; var propertyName = myString [ CODE_INTEGER ] . Replace ( CODE_STRING , CODE_STRING ) ; var property = typeof ( Details ) . GetProperty ( propertyName ) ; property . SetValue ( Details , myString [ CODE_INTEGER ] ) ; } <EOF>
EnableRowVirtualization = CODE_STRING <EOF>
List < List < MyObj > > result = MyObjects . GroupBy ( m = > new { m . Name , m . Number } ) . Select ( g = > g . ToList ( ) ) . ToList ( ) ; <EOF>
UNION ALL <EOF>
string path = System . Environment . GetFolderPath ( System . Environment . SpecialFolder . Personal ) ; string filename = System . IO . Path . Combine ( path , CODE_STRING ) ; using ( var streamWriter = new StreamWriter ( filename , true ) ) { } <EOF>
list1 . RemoveAll ( i = > list2 . Contains ( i ) ) ; <EOF>
class Program { static void Main ( string [ ] args ) { bool result1 = IsProtocalEnabled ( CODE_STRING , CODE_STRING ) ; bool result2 = IsProtocalEnabled ( CODE_STRING , CODE_STRING ) ; } private static bool IsProtocalEnabled ( string adapter , string protocol ) { var p = new System . Diagnostics . Process ( ) ; p . StartInfo . UseShellExecute = false ; p . StartInfo . RedirectStandardOutput = true ; p . StartInfo . FileName = System . IO . Path . Combine ( AppDomain . CurrentDomain . BaseDirectory , CODE_STRING ) ; p . StartInfo . Arguments = string . Format ( CODE_STRING , adapter , protocol ) ; p . Start ( ) ; string output = p . StandardOutput . ReadToEnd ( ) ; p . WaitForExit ( ) ; return output . Contains ( CODE_STRING ) ; } } <EOF>
private void btnClickMe_Click ( object sender , RoutedEventArgs e ) { Popup popUp = new Popup ( ) ; var point = CalcOffsets ( ( UIElement ) sender ) ; popUp . HorizontalOffset = point . X ; popUp . VerticalOffset = point . Y ; popUp . IsOpen = true ; } private Point CalcOffsets ( UIElement elem ) { var transform = elem . TransformToVisual ( this ) ; Point point = transform . TransformPoint ( new Point ( CODE_INTEGER , CODE_INTEGER ) ) ; return point ; } <EOF>
return ( CODE_STRING + NewkdPos . ToString ( ) ) . Substring ( NewkdPos . ToString ( ) . Length , CODE_INTEGER ) ; <EOF>
var val = Request . QueryString . Get ( CODE_STRING ) ; if ( val . IndexOf ( CODE_STRING ) != - CODE_INTEGER ) { var parsedValue = ( from m in val . Split ( CODE_CHAR ) where m . Split ( CODE_CHAR ) . Count ( ) == CODE_INTEGER select new { key = m . Split ( CODE_CHAR ) [ CODE_INTEGER ] , value = m . Split ( CODE_CHAR ) [ CODE_INTEGER ] } ) ; } <EOF>
MembershipCreateStatus status ; var membershipUser = Membership . CreateUser ( . . . , out status ) ; if ( status == MembershipCreateStatus . Success ) SendEmail ( . . . ) ; public void SendEmail ( MailAddress from , MailAddress to , string subject , string body ) { var message = new MailMessage ( ) ; message . From = from ; message . To . Add ( to ) ; message . Subject = subject ; message . Body = body ; message . IsBodyHtml = true ; var smtpClient = new SmtpClient ( CODE_STRING ) ; smtpClient . Send ( message ) ; } <EOF>
public abstract class Base { public virtual void BeforeSave ( ) { } } public class User : Base { public string Name { get ; set ; } public int Age { get ; set ; } public override void BeforeSave ( ) { if ( this . Name . Trim ( ) == CODE_STRING ) throw new Exception ( CODE_STRING ) } } public class DBObject < T > where T : Base { public void Save ( ) { T . BeforeSave ( ) ; } } <EOF>
return _cacheManager . Get < Clients > ( _key , _cacheSettings . AbsoluteExpiration . AddHours ( CODE_REAL ) . ToString ( ) ) . ToList ( ) ; <EOF>
GetCustomAttributes ( ) <EOF>
public void Delete ( string ouPath , string groupPath ) { if ( DirectoryEntry . Exists ( CODE_STRING + groupPath ) ) { try { DirectoryEntry entry = new DirectoryEntry ( CODE_STRING + ouPath ) ; DirectoryEntry group = new DirectoryEntry ( CODE_STRING + groupPath ) ; entry . Children . Remove ( group ) ; group . CommitChanges ( ) ; } catch ( Exception e ) { Console . WriteLine ( e . Message . ToString ( ) ) ; } } else { Console . WriteLine ( path + CODE_STRING ) ; } } <EOF>
myDataContext dc = new myDataContext ( ) ; List < FunderText > myList = myDataContext . tbl_funderTexts . ToList ( ) ; List < string > result1 = new List < string > ( ) ; foreach ( var theValue in myValues ) { result1 . Add ( myList . First ( f = > f . funderID == theValue . funderId && f . eng_code == element ) . funderText ) ; } <EOF>
protected void Button1_Click ( object sender , EventArgs e ) { TextBox TextBox1 = ContentPlaceHolder1 . FindControl ( CODE_STRING ) as TextBox ; if ( TextBox1 != null ) { Label1 . Text = TextBox1 . Text ; } } <EOF>
var months = Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) . Select ( x = > endDate . AddMonths ( - CODE_INTEGER * x ) . Month ) ) . ToList ( ) ; var results = visits . GroupBy ( v = > v . Author ) . SelectMany ( v = > months . Select ( m = > new { author = v . Key , month = m , reportedVisits = v . Count ( v = > v . Reported && v . DateScheduled . Month = m ) , unreportedVisits = v . Count ( v = > v . Unreported && v . DateScheduled . Month = m ) , } ) ; <EOF>
Regex . Escape <EOF>
Word . Application app = new Word . Application ( ) ; Word . Document doc = new Word . Document ( ) ; <EOF>
INSERT INTO tab_photo VALUES ( . . . , ' System . Byte [ ] ' , . . . ) " ; <EOF>
interface IFoo { object UntypedBlah ( object arg ) ; } class Foo < T > : IFoo { object UntypedBlah ( object arg ) { return Blah ( ( T ) arg ) ; } T Blah ( T arg ) { } } List < IFoo > foos = new List < IFoo > ( ) ; foos . Add ( new Foo < int > ( ) ) ; foos . Add ( new Foo < string > ( ) ) ; <EOF>
Rectangle form = this . Bounds ; using ( Bitmap bitmap = new Bitmap ( form . Width , form . Height ) ) { using ( Graphics graphic = Graphics . FromImage ( bitmap ) ) { graphic . CopyFromScreen ( form . Location , Point . Empty , form . Size ) ; } bitmap . Save ( CODE_STRING , ImageFormat . Jpeg ) ; } <EOF>
DataColumn col = mesakem . Tables [ CODE_STRING ] . Columns . Add ( CODE_STRING ) ; col . SetOrdinal ( CODE_INTEGER ) ; foreach ( DataRow row in mesakem . Tables [ CODE_STRING ] . Rows ) { foreach ( oved o in ovdimlist ) { if ( o . name == row [ CODE_STRING ] . ToString ( ) ) row [ CODE_STRING ] = o . id ; } } <EOF>
int width = _img . Width ; int height = _img . Height ; for ( int aRowIndex = CODE_INTEGER ; aRowIndex < width ; aRowIndex += subsample ) { for ( int aColumnIndex = CODE_INTEGER ; aColumnIndex < height ; aColumnIndex += subsample ) { } } <EOF>
checkmate . ID = CODE_STRING ; <EOF>
MethodInfo method = c . GetType ( ) . GetMethod ( CODE_STRING ) ; . MakeGenericMethod ( this . t ) ; LoadedFile = method . Invoke ( path , new object [ ] { path } ) ; <EOF>
static bool IsMyClass ( object obj ) { return obj == null ? false : IsMyClass ( obj . GetType ( ) ) ; } static bool IsMyClass ( Type type ) { while ( type != null ) { if ( type . IsGenericType && type . GetGenericTypeDefinition ( ) == typeof ( MyClass < > ) ) { return true ; } type = type . BaseType ; } return false ; } <EOF>
m_helper . Partial ( tab . PartialName ) ; <EOF>
SavingForm saving = new SavingForm ( ) ; savingForm . ShowDialog ( this ) ; <EOF>
var bytes = reader . GetSqlBytes ( index ) ; Response . BinaryWrite ( bytes . Value ) ; <EOF>
private void Form1_Load ( object sender , EventArgs e ) { listBox1 . Items . Add ( CODE_STRING ) ; listBox1 . Items . Add ( CODE_STRING ) ; listBox1 . Items . Add ( CODE_STRING ) ; listBox1 . Items . Add ( CODE_STRING ) ; } private void listBox1_SelectedIndexChanged ( object sender , EventArgs e ) { label1 . Text = listBox1 . SelectedItem . ToString ( ) ; } <EOF>
string msg = CODE_STRING ; var myArray = msg . Split ( CODE_STRING ) ; int number ; if ( ! Int32 . TryParse ( myArray [ CODE_INTEGER ] , out number ) throw new ArgumentException ( CODE_STRING ) ; string letter = myArray [ CODE_INTEGER ] ; string b = myArry [ CODE_INTEGER ] ; bool b ; if ( ! Int32 . TryParse ( myArray [ CODE_INTEGER ] , out b ) throw new ArgumentException ( CODE_STRING ) ; <EOF>
var methodNode = ( MethodDeclarationSyntax ) node ; string modelClassName = string . Empty ; foreach ( var param in methodNode . ParameterList . Parameters ) { var metaDataName = document . GetSemanticModelAsync ( ) . Result . GetDeclaredSymbol ( param ) . ToDisplayString ( ) ; var members = document . Project . GetCompilationAsync ( ) . Result . GetTypeByMetadataName ( metaDataName ) . GetMembers ( ) ; var props = ( members . OfType < IPropertySymbol > ( ) ) ; foreach ( var prop in props ) { } } <EOF>
public abstract class Repository < T , TId > { public T Get ( TId id ) { } } <EOF>
protected void getPinCode ( ) { foreach ( GridViewRow grdRows in gvSurvey . Rows ) { RadioButton rbt1 = ( RadioButton ) grdRows . FindControl ( CODE_STRING ) ; RadioButton rbt2 = ( RadioButton ) grdRows . FindControl ( CODE_STRING ) ; RadioButton rbt3 = ( RadioButton ) grdRows . FindControl ( CODE_STRING ) ; RadioButton rbt4 = ( RadioButton ) grdRows . FindControl ( CODE_STRING ) ; string Value = RadioValue ( rbt1 ) ; if ( ! string . IsNullOrEmpty ( Value ) ) { lblMsg . Text = nominationsBiz . SaveSuggestion ( ticketNo . ToString ( ) , qtn_no , sqtn_no , Value ) ; } } } protected string RadioValue ( RadioButton Rbtlst ) { string Value = CODE_STRING ; if ( Rbtlst . Checked == true ) { Value = Rbtlst . Text ; } return Value ; } <EOF>
var results = from c in db . Customers where c . LastName == ' Smith ' select c ; <EOF>
strings . FirstOrDefault ( s = > s . StartsWith ( CODE_STRING ) ) ; <EOF>
apiContext . EPSServerUrl = CODE_STRING ; apiCall . PictureFileList = new StringCollection ( ) ; apiCall . PictureFileList . Add ( CODE_STRING ) ; item . PictureDetails = new PictureDetailsType ( ) ; item . PictureDetails . GalleryType = GalleryTypeCodeType . Gallery ; <EOF>
private void treeView1_NodeMouseClick ( object sender , TreeNodeMouseClickEventArgs e ) { var hit = treeView1 . HitTest ( e . Location ) ; if ( hit . Location == TreeViewHitTestLocations . Label ) { } } <EOF>
List < float > optionList = specialBuildings . AsParallel ( ) . Select ( item = > Vector2 . Distance ( item , house ) ) . ToList ( ) ; <EOF>
public void ProcessRequest ( System . Web . HttpContext context ) { context . Response . Write ( mystring ) ; } <EOF>
int index = Nodes1 . FindIndex ( var = > var . nid == CODE_INTEGER ) ; double here4 = Nodes1 [ index ] . x ; <EOF>
protected void LinkButton2_Click ( object sender , EventArgs e ) { Panel2 . Visible = ! Panel2 . Visible ; } <EOF>
DECLARE TYPE id_array_type IS TABLE OF NUMBER INDEX BY PLS_INTEGER ; TYPE options_array_type IS TABLE OF VARCHAR2 ( CODE_INTEGER ) INDEX BY PLS_INTEGER ; t_ids id_array_type : = : ids ; t_options options_array_type : = : options ; v_state_id NUMBER : = : stateId ; BEGIN FORALL i IN CODE_INTEGER . . t_ids . count EXECUTE IMMEDIATE ' MERGE INTO worker target USING ( SELECT : id id , : options options FROM dual ) source ON ( source . id = target . id ) WHEN MATCHED THEN UPDATE SET target . stateId = : state_id , target . options = source . options ' USING t_ids ( i ) , t_options ( i ) , v_state_id ; END ; <EOF>
private Dictionary < string , Action < int > > doMethods = new Dictionary < string , Action < int > > ( ) ; public SomeClass ( ) { Type t = typeof ( SomeClass ) ; var methods = t . GetMethods ( ) . Where ( m = > m . Name . StartsWith ( CODE_STRING ) ) ; foreach ( var method in methods ) doMethods . Add ( method . Name , ( Action < int > ) Delegate . CreateDelegate ( typeof ( Action < int > ) , this , method , true ) ) ; } public void ActionFunction ( string name , int num ) { this . doMethods [ name ] ( num ) ; } <EOF>
textblock . Measure ( new Size ( ) ) ; textblock . Arrange ( new Rect ( ) ) ; <EOF>
string response = CODE_STRING ; string token = response . Split ( CODE_CHAR ) [ CODE_INTEGER ] . Split ( CODE_CHAR ) [ CODE_INTEGER ] ; Console . WriteLine ( token ) ; Console . ReadKey ( ) ; <EOF>
var args = new Dictionary < string , object > ( ) ; args [ CODE_STRING ] = CODE_STRING ; args [ CODE_STRING ] = CODE_STRING ; args [ CODE_STRING ] = CODE_STRING ; args [ CODE_STRING ] = CODE_STRING ; args [ CODE_STRING ] = CODE_STRING ; args [ CODE_STRING ] = CODE_STRING ; args [ CODE_STRING ] = CODE_STRING ; FacebookAsyncCallback callBack = new FacebookAsyncCallback ( this . postResult ) ; fbApp . PostAsync ( CODE_STRING , args , callBack ) ; private void postResult ( FacebookAsyncResult asyncResult ) { System . Diagnostics . Debug . WriteLine ( asyncResult ) ; } <EOF>
private void textBox2_Leave ( object sender , EventArgs e ) { if ( ! textBox2 . Focused && textBox2 . Text . Trim ( ) == String . Empty ) textBox2 . Text = CODE_STRING ; } private void textBox1_Leave ( object sender , EventArgs e ) { if ( ! textBox1 . Focused && textBox1 . Text . Trim ( ) == String . Empty ) textBox1 . Text = CODE_STRING ; } <EOF>
xmlns : i = CODE_STRING xmlns : ei = CODE_STRING < i : Interaction . Triggers > < ei : DataTrigger Binding = CODE_STRING Value = True > < i : InvokeCommandAction Command = CODE_STRING CommandParameter = CODE_STRING / > < / ei : DataTrigger > < / i : Interaction . Triggers > <EOF>
double number = int . Parse ( textbox1 . Text ) ; double _95Percentage = number * CODE_INTEGER / CODE_INTEGER ; double _05Percentage = number - _95Percentage ; textbox2 . Text = _95Percentage . ToString ( ) ; textbox3 . Text = _05Percentage . ToString ( ) ; <EOF>
System . Uri u = new System . Uri ( url ) ; string LOC = System . Web . HttpUtility . ParseQueryString ( u . Query ) . Get ( CODE_STRING ) ; <EOF>
string description = document . DocumentEntry . Description ; <EOF>
var imageData = Convert . FromBase64String ( CODE_STRING ) ; var contentId = Guid . NewGuid ( ) . ToString ( ) ; var linkedResource = new LinkedResource ( new MemoryStream ( imageData ) , CODE_STRING ) ; linkedResource . ContentId = contentId ; linkedResource . TransferEncoding = TransferEncoding . Base64 ; var body = string . Format ( CODE_STRING , contentId ) ; var htmlView = AlternateView . CreateAlternateViewFromString ( body , null , CODE_STRING ) ; htmlView . LinkedResources . Add ( linkedResource ) ; <EOF>
List < string > GetUserDetails ( ) { List < string > allUsers = new List < string > ( ) ; PrincipalContext ctx = new PrincipalContext ( ContextType . Domain , CODE_STRING , CODE_STRING ) ; UserPrincipal qbeUser = new UserPrincipal ( ctx ) ; qbeUser . GivenName = _UITxtUserName . Text ; PrincipalSearcher srch = new PrincipalSearcher ( qbeUser ) ; foreach ( var found in srch . FindAll ( ) ) { allUsers . Add ( found . DisplayName + CODE_STRING + found . SamAccountName + CODE_STRING ) ; } qbeUser = null ; qbeUser = new UserPrincipal ( ctx ) ; qbeUser . Surname = _UITxtUserName . Text ; PrincipalSearcher srch1 = new PrincipalSearcher ( qbeUser ) ; foreach ( var found in srch1 . FindAll ( ) ) { allUsers . Add ( found . DisplayName + CODE_STRING + found . SamAccountName + CODE_STRING ) ; } allUsers . Sort ( ) ; return allUsers ; } <EOF>
public class Card { public int Rank { get ; set ; } } class Program { static void Main ( ) { var cards = new [ ] { new Card { Rank = CODE_INTEGER } , new Card { Rank = CODE_INTEGER } , new Card { Rank = CODE_INTEGER } , new Card { Rank = CODE_INTEGER } , new Card { Rank = CODE_INTEGER } , } ; var groups = cards . GroupBy ( x = > x . Rank ) ; foreach ( var group in groups ) { Console . WriteLine ( CODE_STRING , group . Key ) ; foreach ( var card in group ) { Console . WriteLine ( card . Rank ) ; } } } } <EOF>
datagridviewRowClickedEventHandler ( new object ( ) , new eventargs ( ) ) ; <EOF>
sqlCommand . CommandText = CODE_STRING ; <EOF>
using ( FileStream fs = File . Open ( CODE_STRING , FileMode . Open , FileAccess . Read , FileShare . None ) ) { } <EOF>
byte [ ] fileBytes = System . IO . File . ReadAllBytes ( System . IO . Path . Combine ( DocumentsLocation , name + CODE_STRING ) ) ; string fileName = name + CODE_STRING ; return File ( fileBytes , System . Net . Mime . MediaTypeNames . Application . Octet , fileName ) ; <EOF>
public ObservableCollection < T > ToObservableCollection < T > ( IEnumerable < T > enumeration ) { return new ObservableCollection < T > ( enumeration ) ; } <EOF>
someControl . ClientId <EOF>
create PROCEDURE [ dbo ] . [ getcelldata ] @name varchar ( CODE_INTEGER ) , @col varchar ( CODE_INTEGER ) AS BEGIN declare @sql varchar ( CODE_INTEGER ) ; set @sql = ' SELECT [ ' + @col + ' ] from table where Name = ' + @name ; exec ( @sql ) ; END <EOF>
BindingList < Member > comboBoxList = new BindingList < Member > ( ) ; while ( dbReader . Read ( ) ) { aMember = new Member ( dbReader [ CODE_STRING ] . ToString ( ) , dbReader [ CODE_STRING ] . ToString ( ) , dbReader [ CODE_STRING ] . ToString ( ) , dbReader [ CODE_STRING ] . ToString ( ) ) ; comboList . Add ( aMember ) } comboBox1 . DataSource = comboBoxList ; comboBox1 . DisplayMember = CODE_STRING ; comboBox1 . ValueMember = CODE_STRING ; <EOF>
try { XDocument xd1 = new XDocument ( ) ; xd1 = XDocument . Load ( myfile ) ; } catch ( XmlException exception ) { ShowMessage ( CODE_STRING ) ; } <EOF>
/ GROUP_ID / feed <EOF>
var includes = new List < string > ( ) ; var regex = new Regex ( CODE_STRING ) ; var matchResult = regex . Match ( fileContent ) ; while ( matchResult . Success ) { includes . Add ( matchResult . Groups [ CODE_INTEGER ] . Value ) ; matchResult = matchResult . NextMatch ( ) ; } <EOF>
var assemblyLocation = Assembly . GetExecutingAssembly ( ) . Location ; var applicationDirectory = Path . GetDirectoryName ( assemblyLocation ) ; var imagesDirectory = Path . Combine ( applicationDirectory , CODE_STRING ) ; <EOF>
Public Function GoToPoint ( ByVal start As TextPointer , ByVal x As Integer ) As TextPointer Dim out As TextPointer = start Dim i As Integer = CODE_INTEGER Do While i < x If out . GetPointerContext ( LogicalDirection . Backward ) = TextPointerContext . Text Or _ out . GetPointerContext ( LogicalDirection . Backward ) = TextPointerContext . None Then i += CODE_INTEGER End If If out . GetPositionAtOffset ( CODE_INTEGER , LogicalDirection . Forward ) Is Nothing Then Return out Else out = out . GetPositionAtOffset ( CODE_INTEGER , LogicalDirection . Forward ) End If Loop Return out End Function <EOF>
myGrid . ItemsSource = null ; myGrid . ItemsSource = myDataSource ; <EOF>
private void categoriesListPicker_SelectionChanged ( object sender , SelectionChangedEventArgs e ) { if ( categoriesListPicker . SelectedItem != null ) { string selectedItem = categoriesListPicker . SelectedItem as string ; MessageBox . Show ( selectedItem ) ; } } <EOF>
string sql = CODE_STRING + CODE_STRING + textBox3 . Text . Replace ( CODE_STRING , CODE_STRING ) + CODE_STRING ; <EOF>
using ( DbTransaction dbTrans = myDBConnection . BeginTransaction ( ) ) { using ( DbCommand cmd = myDBConnection . CreateCommand ( ) ) { . . . } dbTrans . Commit ( ) ; } <EOF>
foo ( CODE_INTEGER , CODE_INTEGER , d : true ) ; <EOF>
using System ; using System . Management ; namespace ConsoleApplication1 { class Program { static void Main ( string [ ] args ) { ManagementClass mangnmt = new ManagementClass ( CODE_STRING ) ; ManagementObjectCollection mcol = mangnmt . GetInstances ( ) ; string result = CODE_STRING ; foreach ( ManagementObject strt in mcol ) { result += CODE_STRING + Convert . ToString ( strt [ CODE_STRING ] ) + Environment . NewLine ; result += CODE_STRING + Convert . ToString ( strt [ CODE_STRING ] ) + Environment . NewLine ; result += CODE_STRING + Convert . ToString ( strt [ CODE_STRING ] ) + Environment . NewLine ; result += Environment . NewLine ; } Console . Out . WriteLine ( result ) ; Console . In . ReadLine ( ) ; } } } <EOF>
textLabel . Attributes . Add ( CODE_STRING , textLabel . Text ) ; <EOF>
string serviceName = CODE_STRING ; SelectQuery query = new System . Management . SelectQuery ( string . Format ( CODE_STRING , serviceName ) ) ; using ( ManagementObjectSearcher searcher = new System . Management . ManagementObjectSearcher ( query ) ) { foreach ( ManagementObject service in searcher . Get ( ) ) { Console . WriteLine ( string . Format ( CODE_STRING , service [ CODE_STRING ] , service [ CODE_STRING ] ) ) ; } } <EOF>
Type netFwPolicy2Type = Type . GetTypeFromProgID ( CODE_STRING ) ; INetFwPolicy2 mgr = ( INetFwPolicy2 ) Activator . CreateInstance ( netFwPolicy2Type ) ; NET_FW_PROFILE_TYPE2_ fwCurrentProfileTypes = ( NET_FW_PROFILE_TYPE2_ ) mgr . CurrentProfileTypes ; bool firewallEnabled = mgr . get_FirewallEnabled ( fwCurrentProfileTypes ) ; string frw_status = CODE_STRING + ( firewallEnabled ? CODE_STRING : CODE_STRING ) ; mgr . set_FirewallEnabled ( fwCurrentProfileTypes , false ) ; <EOF>
Cost . ToString ( CODE_STRING ) <EOF>
if ( folderfinder . ShowDialog ( ) == DialogResult . OK ) { Console . Write ( folderfinder . SelectedPath ) ; } <EOF>
var optionList = new List < ListItem > ( ) ; for ( var i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { var newItem = new ListItem ( ) { Value = count . ToString ( ) , Text = string . Format ( CODE_STRING , count . ToString ( ) ) ; } ; optionList . Add ( newItem ) ; } Answers . DataSource = optionList ; Answers . DataBind ( ) ; <EOF>
SqlDataReader reader = com . ExecuteReader ( ) ; DataTable dt = new DataTable ( ) ; dt . Load ( reader ) ; <EOF>
ds . Tables [ CODE_INTEGER ] . Rows . Count <EOF>
private void copyToolStripMenuItem_Click ( object sender , EventArgs e ) { int width , height ; width = webBrowser1 . ClientRectangle . Width ; height = webBrowser1 . ClientRectangle . Height ; using ( Bitmap image = new Bitmap ( width , height ) ) { using ( Graphics graphics = Graphics . FromImage ( image ) ) { Point p , upperLeftSource , upperLeftDestination ; p = new Point ( CODE_INTEGER , CODE_INTEGER ) ; upperLeftSource = webBrowser1 . PointToScreen ( p ) ; upperLeftDestination = new Point ( CODE_INTEGER , CODE_INTEGER ) ; Size blockRegionSize = webBrowser1 . ClientRectangle . Size ; graphics . CopyFromScreen ( upperLeftSource , upperLeftDestination , blockRegionSize ) ; } image . Save ( CODE_STRING ) ; } } <EOF>
CREATE VIEW StoreWithStatistics AS SELECT s . * , COUNT ( r . StoreRating ) OVER ( PARTITION BY s . StoreID ) AS Number_of_Ratings_Recieved , AVG ( r . Rating_for_Store_out_of_Ten ) OVER ( PARTITION BY s . StoreID ) AS Average_Rating FROM STORE s LEFT JOIN Rating r on s . StoreID = r . StoreID <EOF>
RewriteBase / RewriteCond % { REQUEST_FILENAME } ! - f RewriteCond % { REQUEST_FILENAME } ! - d RewriteRule ^ . { CODE_INTEGER } / Default . aspx [ R = CODE_INTEGER , L ] <EOF>
private void myDataGridView_ColumnHeaderMouseClick ( object sender , DataGridViewCellMouseEventArgs e ) { DataGridViewColumn column = myDataGridView . Columns [ e . ColumnIndex ] ; _isSortAscending = ( _sortColumn == null || _isSortAscending == false ) ; string direction = _isSortAscending ? CODE_STRING : CODE_STRING ; myBindingSource . DataSource = _context . MyEntities . OrderBy ( string . Format ( CODE_STRING , column . DataPropertyName , direction ) ) . ToList ( ) ; if ( _sortColumn != null ) _sortColumn . HeaderCell . SortGlyphDirection = SortOrder . None ; column . HeaderCell . SortGlyphDirection = _isSortAscending ? SortOrder . Ascending : SortOrder . Descending ; _sortColumn = column ; } <EOF>
public static class HelperExtensions { public static MvcHtmlString Menu ( this HtmlHelper html , Action < IList < ToolbarAction > > addActions ) { var menuActions = new List < ToolbarAction > ( ) ; addActions ( menuActions ) ; var htmlOutput = new StringBuilder ( ) ; htmlOutput . AppendLine ( CODE_STRING ) ; foreach ( var action in menuActions ) htmlOutput . AppendLine ( html . ActionLink ( action . Text , action . Action , action . Controller , new { @class = action . Name } ) . ToString ( ) ) ; htmlOutput . AppendLine ( CODE_STRING ) ; return new MvcHtmlString ( htmlOutput . ToString ( ) ) ; } } <EOF>
foreach ( Word . Section section in document . Sections ) { foreach ( Word . HeaderFooter wordFooter in section . Headers ) { foreach ( Word . Paragraph para in wordFooter . Range . Paragraphs ) { Word . Range range = para . Range ; range . SetRange ( CODE_INTEGER , CODE_INTEGER ) ; range . Delete ( ) ; } } } <EOF>
( ? i ) ( associate DEGREE in ELECtronics ) <EOF>
for ( int i = CODE_INTEGER ; i < grdList . Rows . Count ; i ++ ) { string key = grdList . DataKeys [ i ] . Value . ToString ( ) ; if ( ( ( CheckBox ) grdList . Rows [ i ] . FindControl ( CODE_STRING ) ) . Checked ) foreach ( TargetObject obj in objects ) if ( obj . Key == key ) { flag = true ; break ; } } <EOF>
DataView view = tables . DefaultView ; view . Sort = CODE_STRING ; foreach ( DataRowView row in view ) { } <EOF>
Window . Current . CoreWindow . Dispatcher . AcceleratorKeyActivated += CoreDispatcher_AcceleratorKeyActivated ; Window . Current . CoreWindow . PointerPressed += this . CoreWindow_PointerPressed ; <EOF>
myClient . Client . RemoteEndPoint <EOF>
var stub = new StubIObject { Foo = ( value ) = > { if ( value == CODE_INTEGER ) return value * CODE_REAL ; return value ; } } ; <EOF>
Type t = Type . GetType ( className ) ; MethodInfo method = t . GetMethod ( CODE_STRING , BindingFlags . Public | BindingFlags . Static ) ; Then you call the method : method . Invoke ( null , null ) ; <EOF>
void Enumerate < T > ( List < T > items ) { for ( var item in items ) { } } <EOF>
var s = CODE_STRING ; var sub = s . SubString ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
ArrayList arList = new ArrayList ( ) ; foreach ( object obj in listBox1 . Items ) { arList . Add ( obj ) ; } arList . Sort ( ) ; listBox2 . Items . Clear ( ) ; foreach ( object obj in arList ) { listBox2 . Items . Add ( obj ) ; } <EOF>
DataRow row = ResultDT . NewRow ( ) ; for ( int i = CODE_INTEGER ; i < ValToAppendDt . Count ; i ++ ) { row [ i ] = ValToAppendDt [ i ] . ToString ( ) ; } ResultDT . Rows . Add ( row ) ; <EOF>
( ( IObjectContextAdapter ) context ) . ObjectContext . CommandTimeout = CODE_INTEGER ; <EOF>
Dictionary < string , Dictionary < string , Dictionary < string , string > > > dict = new Dictionary < string , Dictionary < string , Dictionary < string , string > > > ( ) ; if ( dict . ContainsKey ( outerKey ) ) { var innerDict = dict [ outerKey ] ; if ( innerDict . ContainsKey ( innerKey ) ) { var innerMost = innerDict [ innerKey ] ; if ( innerMost . ContainsKey ( innerMostKey ) ) var item = innerMost [ innerMostKey ] ; } } <EOF>
var item = from c in containers from o in c . Objects group c . ContainerName by o into g where g . Distinct ( ) . Count ( ) > CODE_INTEGER select g . Key ; <EOF>
DateTime yeer ; if ( ! string . IsNullOrEmpty ( txtBookDate . Text ) ) yeer = Convert . ToDateTime ( txtBookDate . Text ) ; else yeer = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; <EOF>
Point mousePoint ; private void panel1_MouseMove ( object sender , MouseEventArgs e ) { mousePoint = e . Location ; } private void button1_MouseMove ( object sender , MouseEventArgs e ) { mousePoint = new Point ( button1 . Location . X + e . Location . X , button1 . Location . Y + e . Location . Y ) ; } <EOF>
Employee employee = context . Employees . Single ( e = > e . employeeID == CODE_INTEGER ) ; Int32 vendorID = ( Int32 ) employee . tbl_vendorsReference . EntityKey . EntityKeyValues [ CODE_INTEGER ] . Value ; <EOF>
SalesProductReport rptDoc = new SalesProductReport ( ) ; DataTable dt1 , dt2 ; dt1 = new SalesMasterRepository ( ) . GetSalesHeaderData ( Salesid ) ; dt2 = new SalesMasterRepository ( ) . GetSalesFooterData ( Salesid ) ; DataTable dtproductview = getProductViewDetails ( ) ; salesrpt . Subreports [ CODE_STRING ] . SetDataSource ( dt1 ) ; rptDoc . SetDataSource ( dtproductview ) ; rptDoc . Subreports [ CODE_STRING ] . SetDataSource ( dt2 ) ; CrystalReportViewer1 . ReportSource = rptDoc ; <EOF>
Consumer consumer = consumers . Take ( ) ; var result = consumer . Read ( data ) ; if ( consumers . TryAdd ( consumer ) ) { } <EOF>
[ IntentFilter ( new [ ] { Intent . ActionSearch } ) ] [ MetaData ( CODE_STRING , Resource = CODE_STRING ) ] <EOF>
if ( this . tcpClient == null ) { this . tcpClient = new TcpClient ( ) ; } try { if ( ! this . tcpClient . Connected ) { this . tcpClient . Connect ( EthernetAddress , TcpPort ) ; } } catch ( Exception ex ) { throw new TimeoutException ( " The device did not respond . " + ex . Message ) ; } <EOF>
atmgr . exe <EOF>
var results = from p in db . Persons join c in db . CitysInfo on p . cityID equals c . cityId select new { name = p . name , family = p . family , CityName = c . CityName , } <EOF>
protected override bool ProcessCmdKey ( ref Message msg , Keys keyData ) { if ( keyData == ( Keys . Control | Keys . P ) ) { printDialog1 . ShowDialog ( this ) ; return true ; } return base . ProcessCmdKey ( ref msg , keyData ) ; } <EOF>
internal const string DateTimeFormat = CODE_STRING ; cmd . Parameters . Add ( CODE_STRING , DbType . DateTime ) . Value = threshold . ToString ( DateTimeFormat ) ; <EOF>
M CODE_INTEGER e CODE_INTEGER -> Is prime number h CODE_INTEGER t CODE_INTEGER a CODE_INTEGER -> Is prime number <EOF>
PartnershipIDs = p . Partnerships . Select ( par = > par . ID ) . ToList ( ) <EOF>
String userName = CODE_STRING ; String prefix = userName . Substring ( CODE_INTEGER , CODE_INTEGER ) ; String restOfWord = userName . Substring ( CODE_INTEGER ) ; <EOF>
String . Join ( CODE_STRING , CODE_STRING . Split ( new [ ] { CODE_STRING } , StringSplitOptions . None ) . Reverse ( ) . ToArray ( ) ) ; <EOF>
var settings = new ObservableCollection < SettingsClassType > ( ) ; SettingsCollView = CollectionViewSource . GetDefaultView ( settings ) ; SettingsCollView . Filter += ( o ) = > { var setting = ( SettingsClassType ) o ; return string . IsNullOrEmpty ( YourSearchInput ) || setting . Name . Contains ( YourSearchInput ) ; } private string yourSearchInput ; public bool YourSearchInput { get { return yourSearchInput ; } set { if ( value == yourSearchInput ) { return ; } yourSearchInput = value ; SettingsCollView . Refresh ( ) ; this . NotifyPropertyChanged ( CODE_STRING ) ; } } <EOF>
List < int > a = new List < int > ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; List < int > b = new List < int > ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; Dictionary < List < int > , int > > map = new Dictionary < List < int > , int > > ( ) ; map . Add ( a , a . Sum ( ) ) ; int aSum = map [ b ] ; HashSet < int > a = new HashSet < int > ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; HashSet < int > b = new HashSet < int > ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; Dictionary < HashSet < int > , int > > map1 = new Dictionary < HashSet < int > , int > > ( ) ; map1 . Add ( a , a . Sum ( ) ) ; int aSum = map1 [ b ] ; HashSet < int > a = new HashSet < int > ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; HashSet < int > b = new HashSet < int > ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; Dictionary < HashSet < int > , int > > map2 = new Dictionary < HashSet < int > , int > > ( HashSet < int > . CreateSetComparer ( ) ) ; map2 . Add ( a , a . Sum ( ) ) ; int aSum = map2 [ b ] ; <EOF>
public abstract class FooBase { private readonly IDictionary < string , object > _readonlyCache ; protected FooBase ( IDictionary < string , object > cache ) { _readonlyCache = cache ; } } <EOF>
System . Windows . MessageBox <EOF>
class Converter : TypeConverter < Foo , Bar > { protected override Bar ConvertCore ( Foo source ) { if ( source . Code != CODE_INTEGER ) return null ; return new Bar ( ) ; } } static void Main ( string [ ] args ) { Mapper . CreateMap < Foo , Bar > ( ) . ConvertUsing < Converter > ( ) ; var bar = Mapper . Map < Bar > ( new Foo { Code = CODE_INTEGER } ) ; } <EOF>
this . Hide ( ) ; Form2 form2 = new Form2 ( ) ; form2 . Show ( ) ; <EOF>
[ HttpPost ] public ActionResult Index ( int CustomerId ) { Return View ( CODE_STRING ) } <EOF>
DirectorySecurity objSecObj = directory . GetAccessControl ( ) ; AuthorizationRuleCollection acl = objSecObj . GetAccessRules ( true , true , typeof ( System . Security . Principal . NTAccount ) ) ; objSecObj . SetAccessRuleProtection ( true , false ) ; foreach ( FileSystemAccessRule ace in acl ) { objSecObj . PurgeAccessRules ( ace . IdentityReference ) ; } directory . SetAccessControl ( objSecObj ) ; <EOF>
foreach ( Type tp in currentAssembly . GetTypes ( ) ) foreach ( MethodInfo func in tp . GetMethods ( ) ) if ( func . GetParameters ( ) . Any ( p = > p . IsOptional ) ) Console . WriteLine ( func . ToString ( ) ) ; <EOF>
int a = CODE_INTEGER ; int result = a ; while ( result >= CODE_INTEGER ) result = result . ToString ( ) . Sum ( x = > int . Parse ( x . ToString ( ) ) ) ; <EOF>
private class DataContainer { private readonly int [ , ] _data ; private HashSet < int > _index ; public DataContainer ( int [ , ] data ) { _data = data ; } public bool Contains ( int value ) { if ( _index == null ) { _index = new HashSet < int > ( ) ; for ( int i = CODE_INTEGER ; i < _data . GetLength ( CODE_INTEGER ) ; i ++ ) { for ( int j = CODE_INTEGER ; j < _data . GetLength ( CODE_INTEGER ) ; j ++ ) { _index . Add ( _data [ i , j ] ) ; } } } return _index . Contains ( value ) ; } } <EOF>
[ XmlElement ( CODE_STRING ) ] public string _Valid { get ; set ; } [ XmlIgnore ] public bool ? Valid { get { if ( ! string . IsNullOrWhiteSpace ( _Valid ) ) { return bool . Parse ( _Valid ) ; } return null ; } } <EOF>
Session . TimeOut = [ = nMinutes ] <EOF>
private int GetSmallestNonNegative ( int a , int b ) { if ( a >= CODE_INTEGER && b >= CODE_INTEGER ) return Math . Min ( a , b ) ; else if ( a >= CODE_INTEGER && b < CODE_INTEGER ) return a ; else if ( a < CODE_INTEGER && b >= CODE_INTEGER ) return b ; else return CODE_INTEGER ; } <EOF>
System . Data . CommandType . StoredProcedure <EOF>
string str = CODE_STRING + CODE_STRING + CODE_STRING ; <EOF>
[ Obsolete ( CODE_STRING ) ] public class OldSchool { private LatestGreatest _Target ; public OldSchool ( ) { _Target = new LatestGreatest ( ) ; } public void DoSomething ( ) { _Target . DoSomething ( ) ; } [ Obsolete ( CODE_STRING ) ] public void DoTheOldWay ( ) { _Target . DoItInSomeOtherWay ( ) ; } } public class LatestGreatest { public void DoSomething ( ) { Console . WriteLine ( CODE_STRING ) ; } public void DoItInSomeOtherWay ( ) { Console . WriteLine ( CODE_STRING ) ; } } <EOF>
string closestColor = CODE_STRING ; double diff = CODE_INTEGER ; foreach ( string colorHex in validColors ) { Color color = System . Drawing . ColorTranslator . FromHtml ( CODE_STRING + colorHex ) ; if ( diff > ( diff = ( c . R - color . R ) ? + ( c . G - color . G ) ? + ( c . B - color . B ) ? ) ) closestColor = colorHex ; } return closestColor ; <EOF>
MapControl . SetLocation ( st , new Geopoint ( /* Your location info */ ) ) ; MyMap . Children . Add ( st ) ; <EOF>
static void Main ( string [ ] args ) { string partialName = CODE_STRING ; DirectoryInfo hdDirectoryInWhichToSearch = new DirectoryInfo ( CODE_STRING ) ; FileInfo [ ] filesInDir = hdDirectoryInWhichToSearch . GetFiles ( CODE_STRING + partialName + CODE_STRING ) ; foreach ( FileInfo foundFile in filesInDir ) { string fullName = foundFile . FullName ; Console . WriteLine ( fullName ) ; } } <EOF>
x = > x * CODE_INTEGER ; <EOF>
return myItems . Where ( i = > i . Name == name ) . ToList ( ) ; <EOF>
using System ; using System . Linq ; using System . Reflection ; public class Program { public static void Main ( ) { String input = CODE_STRING ; var result = input . Split ( new char [ ] { CODE_CHAR } ) . Where ( p = > ! String . IsNullOrWhiteSpace ( p ) ) ; foreach ( string v in result ) Console . WriteLine ( v ) ; } } <EOF>
private static AutoResetEvent [ ] allLocks = new AutoResetEvent [ CODE_INTEGER ] ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { allLocks [ i ] = new AutoResetEvent ( true ) ; } var lockIndex = id % allLocks . Length ; var lockToUse = allLocks [ lockIndex ] ; lockToUse . WaitOne ( ) ; try { } finally { lockToUse . Set ( ) ; } <EOF>
await Launcher . LaunchUriAsync ( new Uri ( uri ) ) ; <EOF>
public class DateStringComparer : IComparer { public int Compare ( object x , object y ) { return DateTime . Compare ( DateTime . Parse ( x . ToString ( ) ) , DateTime . Parse ( y . ToString ( ) ) ) ; } } <EOF>
this . DataContext = workAssignement ; <EOF>
foreach ( var ctl in this . Controls ) { if ( ctl is RadioButton ) { } } <EOF>
var values = new List < KeyValuePair < string , string > > ( ) ; values . Add ( new KeyValuePair < string , string > ( CODE_STRING , CODE_STRING ) ) ; values . Add ( new KeyValuePair < string , string > ( CODE_STRING , CODE_STRING ) ) ; values . Add ( new KeyValuePair < string , string > ( CODE_STRING , CODE_STRING ) ) ; using ( var content = new FormUrlEncodedContent ( values ) ) { client . PostAsync ( postUri , content ) . Result ) } <EOF>
public static T GetFirstElementOrDefault < T > ( IEnumerable < T > values ) { T value = default ( T ) ; foreach ( T val in values ) { value = val ; break ; } return value ; } <EOF>
xmlDoc . Root . Add ( new XElement ( CODE_STRING , new XElement ( CODE_STRING , CODE_STRING ) , new XElement ( CODE_STRING , CODE_STRING ) ) ) ; <EOF>
Server . MapPath ( CODE_STRING ) ; <EOF>
Dns . GetHostAddresses <EOF>
public SomeConstructor ( ) : base ( Configuration . ConnectionString ) { } public static Configuration { public static string ConnectionString { get { /* some logic to determine the appropriate value */ #if DEBUG return ConfigurationManager . ConnectionStrings [ CODE_STRING ] ; #else return ConfigurationManager . ConnectionStrings [ CODE_STRING ] ; #endif } } } <EOF>
List < String > Lines = new List < String > ( ) ; System . IO . StreamReader file = new System . IO . StreamReader ( CODE_STRING ) ; while ( ( line = file . ReadLine ( ) ) != null ) { myFlowDoc . Blocks . Add ( new Paragraph ( new Run ( x ) ) ) ; Lines . Add ( line ) ; } file . Close ( ) ; <EOF>
config . Routes . MapHttpRoute ( CODE_STRING , CODE_STRING , new { controller = CODE_STRING , action = CODE_STRING } ) ; <EOF>
var v = yourObject . Elements . Names . OfType < XmlQualifiedName > ( ) . FirstOrDefault ( ) ; var w = yourObject . Elements . Values . OfType < XmlSchemaElement > ( ) . FirstOrDefault ( ) ; <EOF>
text . Substring ( CODE_INTEGER , text . IndexOf ( CODE_CHAR ) ) ; <EOF>
& IncludeSelector = Details , Description , TextDescription <EOF>
UncaughtExceptionHandlers . Add ( ( req , res , name , exception ) = > { res . ApplyGlobalResponseHeaders ( ) ; } ) ; <EOF>
else if ( PageNumber < vcnt ) { linkNext . Visible = ! pagedData . IsLastPage ; linkPrevious . Visible = ! pagedData . IsFirstPage ; } <EOF>
public void AddCompanyStorage ( string subDomain ) { CloudStorageAccount storageAccount = CloudStorageAccount . Parse ( System . Configuration . ConfigurationManager . AppSettings [ CODE_STRING ] . ToString ( ) ) ; CloudBlobClient blobClient = storageAccount . CreateCloudBlobClient ( ) ; CloudBlobContainer container = blobClient . GetContainerReference ( subDomain ) ; container . CreateIfNotExist ( ) ; } <EOF>
protected override void OnClosed ( EventArgs e ) { base . OnClosed ( e ) ; if ( ds != null ) ds . Dispose ( ) ; } <EOF>
MYSERVER \ SQLEXPRESS <EOF>
this . ObjectContext . Logs . Where ( w = > w . Message == CODE_STRING || w . Message == CODE_STRING || w . Message == CODE_STRING ) . GroupBy ( w = > w . Username ) . OrderByDescending ( g = > g . Count ( ) ) . Select ( g = > g . Key ) . Take ( CODE_INTEGER ) ; <EOF>
private ManualResetEvent resetEvent = new ManualResetEvent ( false ) ; private RegisteredWaitHandle handle ; public void OnStart ( ) { resetEvent . Reset ( ) ; handle = ThreadPool . RegisterWaitForSingleObject ( resetEvent , callBack , null , CODE_INTEGER , false ) ; } public void OnStop ( ) { reset . Set ( ) ; } private void callBack ( object state , bool timeout ) { if ( timeout ) { } else { handle . Unregister ( null ) ; } } <EOF>
Math . Ceiling <EOF>
pd . PrintPage += ( s , eventArgs ) = > { Image i = Image . FromFile ( newFile ) ; Point p = new Point ( CODE_INTEGER , CODE_INTEGER ) ; eventArgs . Graphics . DrawImage ( i , p ) ; } ; <EOF>
if ( e . Buttons == MouseButton . Right ) contextMenuStrip1 . Show ( e . X + val1 , e . Y + val2 ) ; <EOF>
var cars = brokenCars . Where ( c = > c . status == CODE_INTEGER ) . Select ( c = > new { status = CODE_STRING , c . name , c . type } ) ; <EOF>
return Request . CreateResponse ( HttpStatusCode . OK , Active ) ; <EOF>
DataTable table ; Image blueStar = new Image ( ) ; protected void Page_Load ( object sender , EventArgs e ) { blueStar = ImageBlueStar ; table = new DataTable ( ) ; table . Columns . Add ( CODE_STRING ) ; tabela . Rows . Add ( CODE_STRING , CODE_STRING ) ; SPGridView novaGrid = new SPGridView ( ) ; novaGrid . DataSource = table . DefaultView ; novaGrid . AutoGenerateColumns = false ; novaGrid . Columns . Add ( new ImageField { DataImageUrlField = CODE_STRING } ) ; Controls . Add ( novaGrid ) ; novaGrid . DataBind ( ) ; } <EOF>
r1 = new WaveFileReader ( . . . ) ; r2 = new WaveFileReader ( . . . ) ; r1 . Read ( arr1 , CODE_INTEGER , arr1 . Length ) ; r2 . Read ( arr2 , CODE_INTEGER , arr2 . Length ) ; short [ ] firstPCM16 = ALawDecoder . ALawDecode ( arr1 ) ; short [ ] secondPCM16 = ALawDecoder . ALawDecode ( arr2 ) ; byte [ ] result1 = new byte [ firstPCM16 . Length * sizeof ( short ) ] ; byte [ ] result1 = new byte [ secondPCM16 . Length * sizeof ( short ) ] ; Buffer . BlockCopy ( firstPCM16 , CODE_INTEGER , result1 , CODE_INTEGER , result1 . Length ) ; Buffer . BlockCopy ( secondPCM16 , CODE_INTEGER , result2 , CODE_INTEGER , result2 . Length ) ; for ( . . . ) { mixed [ i ] = ( byte ) ( result1 [ i ] + result2 [ i ] ) ; } <EOF>
private void dgvItems_CellValueNeeded ( object sender , DataGridViewCellValueEventArgs e ) { if ( e . Column == CODE_INTEGER ) { e . Value = dgvItems . CurrentRow . Cells [ CODE_INTEGER ] . Value * CODE_INTEGER ; } } <EOF>
myForm . BeginInvoke ( new Action ( ( ) = > new LoadingForm ( ) . ShowDialog ( ) ) ) ; <EOF>
var server = new HttpServer ( configuration ) ; var invoker = new HttpMessageInvoker ( server ) ; var certificate = GetCertificate ( ) ; var request = new HttpRequestMessage ( HttpMethod . Get , CODE_STRING ) ; request . Properties [ HttpPropertyKeys . ClientCertificateKey ] = certificate ; var result = await invoker . SendAsync ( request , CancellationToken . None ) ; <EOF>
string imgValue = doc . DocumentNode . SelectSingleNode ( CODE_STRING ) . GetAttributeValue ( CODE_STRING , CODE_STRING ) ; string xValue = doc . DocumentNode . SelectSingleNode ( CODE_STRING ) . GetAttributeValue ( CODE_STRING , CODE_STRING ) ; string yValue = doc . DocumentNode . SelectSingleNode ( CODE_STRING ) . GetAttributeValue ( CODE_STRING , CODE_STRING ) ; <EOF>
public class MyViewController : DialogViewController { public MyViewController : base ( new RootElement ( CODE_STRING ) , true ) { } } <EOF>
selectedNode . Nodes <EOF>
var xdoc = XDocument . Load ( CODE_STRING ) ; XNamespace kml = CODE_STRING ; var buildings = xdoc . Root . Elements ( kml + CODE_STRING ) . Select ( d = > new Building { BuildingName = ( string ) d . Element ( kml + CODE_STRING ) } ) . ToList ( ) ; <EOF>
System . Reflection . Assembly myAssembly = typeof ( Program ) . Assembly ; System . Reflection . Assembly myOtherAssembly ; myOtherAssembly = System . Reflection . Assembly . Load ( CODE_STRING ) ; System . Resources . ResourceManager myManager = new System . Resources . ResourceManager ( CODE_STRING , myAssembly ) ; UnmanagedMemoryStream x = myManager . GetStream ( CODE_STRING ) ; <EOF>
public class TestClass { public static void Main ( string [ ] args ) { bool isEqual = DownloadString ( CODE_STRING ) == DownloadString ( CODE_STRING ) } private static string DownloadString ( string address ) { using ( WebClient client = new WebClient ( ) ) { return client . DownloadString ( address ) ; } } } <EOF>
foreach ( Test t in myTetsts . AsParallel ( ) ) { t . run ( ) ; } <EOF>
var a = new [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } var a1 = a . Take ( a . Length / CODE_INTEGER ) . ToArray ( ) ; var a2 = a . Skip ( a . Length / CODE_INTEGER ) . ToArray ( ) ; <EOF>
using Microsoft . Tools . WindowsInstallerXml ; <EOF>
public ViewResult Index ( ) { var roleFilter = Roles . GetRolesForUser ( ) . First ( r = > ! r . equals ( CODE_STRING ) ) ; return View ( new UserViewModel { Users = _userService . FindAll ( ) . Where ( x = > Roles . GetRolesForUser ( x . UserName ) . Contains ( roleFilter ) ) , Roles = new [ ] { roleFilter } } ) ; } <EOF>
[ AttributeUsage ( AttributeTargets . Class | AttributeTargets . Method ) ] sealed public class RedirectIfUserNotLoggedOnAttribute : ActionFilterAttribute { public override void OnActionExecuting ( ActionExecutingContext filterContext ) { if ( ! IsUserLoggedOn ) { filterContext . Result = new RedirectToRouteResult ( new RouteValueDictionary ( new { controller = CODE_STRING , action = CODE_STRING , } ) ) ; } } } <EOF>
public class ABC { public ABC ( int count ) { if ( count < CODE_INTEGER ) { throw new ArgumentException ( CODE_STRING , CODE_STRING ) ; } _textfillerDetails = Enumerable . Range ( CODE_INTEGER , count ) . Select ( x = > new TextDetail ( ) ) . ToList ( ) ; } public IList < TextFillerDetail > TextFillerDetails { get { return _textfillerDetails ; } } private List < TextFiller > _textfillerDetails ; } <EOF>
% windir % \ Microsoft . NET \ Framework64 \ v4 CODE_REAL CODE_REAL \ aspnet_regiis . exe - ir <EOF>
public static bool IsInEditMode ( PropertyGrid grid ) { if ( grid == null ) throw new ArgumentNullException ( CODE_STRING ) ; Control gridView = ( Control ) grid . GetType ( ) . GetField ( CODE_STRING , BindingFlags . Instance | BindingFlags . NonPublic ) . GetValue ( grid ) ; Control edit = ( Control ) gridView . GetType ( ) . GetField ( CODE_STRING , BindingFlags . Instance | BindingFlags . NonPublic ) . GetValue ( gridView ) ; Control dropDownHolder = ( Control ) gridView . GetType ( ) . GetField ( CODE_STRING , BindingFlags . Instance | BindingFlags . NonPublic ) . GetValue ( gridView ) ; return ( ( edit != null ) && ( edit . Visible & edit . Focused ) ) || ( ( dropDownHolder != null ) && ( dropDownHolder . Visible ) ) ; } <EOF>
if ( ( int ) sT != CODE_INTEGER && ( sT & types ) == sT ) list . Add ( sT ) ; <EOF>
shoplistview . Items . Count == CODE_INTEGER <EOF>
[ Category ( CODE_STRING ) ] [ DisplayName ( CODE_STRING ) ] [ Description ( CODE_STRING ) ] [ TypeConverter ( typeof ( FoosCoverter ) ) ] public string [ ] Foos { get ; set ; } <EOF>
for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { TableCell tCell = new TableCell ( ) ; TextBox txt = new TextBox ( ) ; tCell . Controls . Add ( txt ) ; tRow . Cells . Add ( tCell ) ; } <EOF>
AutoSize = false <EOF>
using HelpDeskBusinessDataObjects <EOF>
var randomGenerator = new Random ( ) ; string [ ] prizes = { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; string firstDoor = prizes [ randomGenerator . Next ( prizes . Length ) ] ; string secondDoor = prizes [ randomGenerator . Next ( prizes . Length ) ] ; string thirdDoor = prizes [ randomGenerator . Next ( prizes . Length ) ] ; <EOF>
foreach ( MyObject obj in list . Where ( o = > o != null ) ) Console . WriteLine ( obj . Value ) ; <EOF>
public String RetrieveClipboardHtmlText ( String replacementHtmlText ) { String returnHtmlText = null ; if ( Clipboard . ContainsText ( TextDataFormat . Html ) ) { returnHtmlText = Clipboard . GetText ( TextDataFormat . Html ) ; } return returnHtmlText ; } <EOF>
[ Table ( Name = CODE_STRING ) ] public class Location { [ Column ( IsPrimaryKey = true , IsDbGenerated = true , AutoSync = AutoSync . OnInsert ) ] internal int LocationId { get ; set ; } [ Column ] public int ? SiteId { get ; set ; } [ Association ( ThisKey = CODE_STRING , OtherKey = CODE_STRING , IsForeignKey = true ) ] public Site Site { get ; set ; } } <EOF>
SET @vSQL = ' UPDATE Clients SET LastOnline = GETDATE ( ) , Status = ' ' Open ' ' WHERE ClientID IN ( ' + @ClientIDs + CODE_CHAR ; <EOF>
public void SendFolder ( string srcPath , string destPath ) { string dirName = Path . Combine ( destPath , Path . GetFileName ( srcPath ) ) ; CreateDirectory ( dirName ) ; string [ ] fileEntries = Directory . GetFiles ( srcPath ) ; string [ ] subDirEntries = Directory . GetDirectories ( srcPath ) ; foreach ( string filePath in fileEntries ) { Send ( srcPath , dirName ) ; } foreach ( string dirPath in subDirEntries ) { SendFolder ( dirPath , dirName ) ; } } <EOF>
string EmplyeeId = Request [ CODE_STRING ] ; <EOF>
public async void Run ( IBackgroundTaskInstance taskInstance ) { BackgroundTaskDeferral _deferral = taskInstance . GetDeferral ( ) ; Debug . WriteLine ( CODE_STRING ) ; Debug . WriteLine ( DateTime . Now . ToString ( CODE_STRING ) ) ; StorageFolder dataFolder = ApplicationData . Current . LocalFolder ; StorageFile logFile = await dataFolder . CreateFileAsync ( CODE_STRING , CreationCollisionOption . OpenIfExists ) ; IList < string > logLines = await FileIO . ReadLinesAsync ( logFile ) ; foreach ( var s in logLines ) { Debug . WriteLine ( s ) ; } logLines . Add ( DateTime . Now . ToString ( CODE_STRING ) ) ; if ( logLines . Count > CODE_INTEGER ) { logLines . RemoveAt ( CODE_INTEGER ) ; } await FileIO . AppendLinesAsync ( logFile , logLines ) ; _deferral . Complete ( ) ; } <EOF>
XmlDocument doc = new XmlDocument ( ) ; doc . Load ( CODE_STRING ) ; foreach ( XmlElement pointCoord in doc . SelectNodes ( CODE_STRING ) ) { / Do something } <EOF>
public static class MyPhpStyleExtension { public void SplitInTwo ( this string str , char splitBy , out string first , out string second ) { var tempArray = str . Split ( splitBy ) ; if ( tempArray . length != CODE_INTEGER ) { throw new NotSoPhpResultAsIExpectedException ( tempArray . length ) ; } first = tempArray [ CODE_INTEGER ] ; second = tempArray [ CODE_INTEGER ] ; } } <EOF>
public IList < TextFillerDetail > TextFillerDetails { get { return _textfillerDetails ; } } private List < TextFiller > _textfillerDetails = new List < TextFiller > ( ) ; <EOF>
Grid . Column = CODE_STRING <EOF>
string newstr = . . . ; string [ ] keysAndValues = newstr . Split ( CODE_CHAR ) ; var mydictionary = new Dictionary < string , List < string > > ( keysAndValues . Length ) ; foreach ( string item in keysAndValues ) { List < string > list = new List < string > ( item . Split ( CODE_CHAR ) ) ; mydictionary . Add ( list [ CODE_INTEGER ] , list ) ; list . RemoveAt ( CODE_INTEGER ) ; } <EOF>
var argb = Convert . ToInt32 ( ( ( DataRowView ) this . dataGridView1 . Rows [ e . RowIndex ] . DataBoundItem ) [ CODE_STRING ] ) ; Color = Color . FromArgb ( argb ) ; <EOF>
var result = list . GroupBy ( x = > new { x . FirstName , x . LastName , x . Mobile , x . Email } ) . Select ( x = > new { Id = String . Join ( CODE_STRING , x . Select ( z = > z . Id ) ) , FirstName = x . Key . FirstName LastName = x . Key . LastName , Mobile = x . Key . Mobile , Email = x . Key . Email } ) ; <EOF>
class SomeClass { public void DoSomething < M , T > ( M instance ) where T : Base where M : GenericClass < T > { } } <EOF>
public B Convert < A , B > ( A element ) where B : A , new ( ) { IEnumerable < PropertyInfo > properties = typeof ( A ) . GetProperties ( ) . Where ( property = > property . CanRead && property . CanWrite ) . ToList ( ) ; B b = new B ( ) ; foreach ( var property in properties ) { object value = property . GetValue ( element ) ; property . SetValue ( b , value ) ; } return b ; } <EOF>
var bytes = Encoding . Default . GetBytes ( htmlString ) ; <EOF>
textBlock . LineStackingStrategy = LineStackingStrategy . BlockLineHeight , textBlock . LineHeight = CODE_INTEGER <EOF>
var sort = new Lucene . Net . Search . Sort ( new Lucene . Net . Search . SortField ( CODE_STRING , Lucene . Net . Search . SortField . LONG ) , true ) ; <EOF>
TypeIcon . Source = ( ImageSource ) Resources [ CODE_STRING ] ; <EOF>
public static Expression < Func < T , bool > > LikeLambdaString < T > ( string propertyName , string value ) { var linqParam = Expression . Parameter ( typeof ( T ) , propertyName ) ; var linqProp = GetProperty < T > ( linqParam , propertyName ) ; var containsFunc = Expression . Call ( linqProp , typeof ( string ) . GetMethod ( CODE_STRING ) , new Expression [ ] { Expression . Constant ( value ) } ) ; return Expression . Lambda < Func < T , bool > > ( containsFunc , new ParameterExpression [ ] { linqParam } ) ; } <EOF>
IEnumerable < Package > apps = Windows . Phone . Management . Deployment . InstallationManager . FindPackagesForCurrentPublisher ( ) ; apps . First ( ) . Launch ( string . Empty ) ; <EOF>
var result = _expectations . Where ( e = > _properties . Any ( p = > p . Key == e . Key && e . Value . Matches ( p . Value ) ) ) ; <EOF>
Lazy < T > <EOF>
var results = from r in dc . Registration join o1 in dc . Optional1 on r . RegistrationID equals o1 . RegistrationID select r ; <EOF>
dt = city . GetAllCity ( ) ; string attachment = CODE_STRING ; Response . ClearContent ( ) ; Response . AddHeader ( CODE_STRING , attachment ) ; Response . ContentType = CODE_STRING ; string tab = CODE_STRING ; foreach ( DataColumn dc in dt . Columns ) { Response . Write ( tab + dc . ColumnName ) ; tab = CODE_STRING ; } Response . Write ( " " ) ; int i ; foreach ( DataRow dr in dt . Rows ) { tab = CODE_STRING ; for ( i = CODE_INTEGER ; i < dt . Columns . Count ; i ++ ) { Response . Write ( tab + dr [ i ] . ToString ( ) ) ; tab = CODE_STRING ; } Response . Write ( " " ) ; } Response . End ( ) ; <EOF>
ListOfItems = store . Items . Where ( p = > ( p . Type > CODE_INTEGER && p . Type < CODE_INTEGER ) || ( p . Type > CODE_INTEGER && p . Type < CODE_INTEGER ) ) . ToList ( ) <EOF>
static IEnumerable < string > GetVariations ( string s ) { int [ ] indexes = new int [ s . Length ] ; StringBuilder sb = new StringBuilder ( ) ; while ( IncrementIndexes ( indexes , s . Length ) ) { sb . Clear ( ) ; for ( int i = CODE_INTEGER ; i < indexes . Length ; i ++ ) { if ( indexes [ i ] != CODE_INTEGER ) { sb . Append ( s [ indexes [ i ] - CODE_INTEGER ] ) ; } } yield return sb . ToString ( ) ; } } static bool IncrementIndexes ( int [ ] indexes , int limit ) { for ( int i = CODE_INTEGER ; i < indexes . Length ; i ++ ) { indexes [ i ] ++ ; if ( indexes [ i ] > limit ) { indexes [ i ] = CODE_INTEGER ; } else { return true ; } } return false ; } <EOF>
int x = ( int ) me . position . X + me . width / CODE_INTEGER ; int y = ( int ) me . position . Y + me . height / CODE_INTEGER ; int dist = CODE_INTEGER ; me . moveTo ( rand . Next ( x - dist , x + dist ) , rand . Next ( y - dist , y + dist ) , running ) ; <EOF>
String url = CODE_STRING ; Byte [ ] dat = null ; if ( Object . ReferenceEquals ( null , WebRequest . DefaultWebProxy . Credentials ) ) WebRequest . DefaultWebProxy . Credentials = CredentialCache . DefaultCredentials ; using ( WebClient wc = new WebClient ( ) ) { dat = wc . DownloadData ( url ) ; } <EOF>
do { Console . WriteLine ( CODE_STRING ) ; newStudent . regNumber = Console . ReadLine ( ) ; if ( newStudent . regNumber . Length == CODE_INTEGER && newStudent . regNumber [ CODE_INTEGER ] == CODE_CHAR ) { break ; } else { Console . WriteLine ( CODE_STRING ) ; } } while ( true ) ; <EOF>
FirstOrDefault ( ) <EOF>
_arr [ i ] = new Label ( ) ; _arr [ i ] . Click += ( s , e ) = > MessageBox . Show ( CODE_STRING ) ; <EOF>
string filePath = CODE_STRING foreach ( string Folder in Directory . GetDirectories ( filePath ) ) { foreach ( string file in Directory . GetFiles ( Folder ) ) { } } <EOF>
var cacheDir = Path . Combine ( Environment . GetFolderPath ( Environment . SpecialFolder . CommonApplicationData ) , CODE_STRING ) ; <EOF>
public static IEnumerable < Type > GetTypesFromNamespace ( Assembly assembly , String desiredNamespace ) { return assembly . GetTypes ( ) . Where ( type = > type . Namespace == desiredNamespace ) ; } <EOF>
string s = File . ReadAllText ( CODE_STRING ) ; string empty = CODE_STRING + Environment . NewLine ; s = s . Replace ( empty , CODE_STRING ) ; s = Regex . Replace ( s , CODE_STRING , match = > { return match . Value . Replace ( CODE_STRING , CODE_STRING ) ; } ) ; <EOF>
GlobalStrings . AddRange ( localStrings ) ; <EOF>
var mobileNumbers = testxml . Descendants ( CODE_STRING ) . Select ( x = > new { mobilenumber = x . Element ( CODE_STRING ) . Value , address = x . Element ( CODE_STRING ) . Value , } ) . ToList ( ) ; <EOF>
Regex . Replace ( input , CODE_STRING , m = > string . Format ( CODE_STRING , m . Value ) ) <EOF>
var keys = new List < Key > { Key . Space , Key . OemPeriod , Key . D1 , [ . . . ] } ; foreach ( var key in keys ) { this . InputBindings . Add ( new KeyBinding ( ) { Command = MyCommandClass . KeyboardCommand , CommandParameter = key } ) ; ] <EOF>
var result = _session . CreateCriteria . . . . List < object [ ] > . ToDictionary ( x = > ( int ) x [ CODE_INTEGER ] , x = > ( int ) x [ CODE_INTEGER ] ) ; <EOF>
Random rnd = new Random ( ) ; int myRandomNo = rnd . Next ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
context . BillingDetails . AddOrUpdate ( billDetails ) ; context . Entry ( billDetails ) . State = EntityState . Added ; <EOF>
dataGridView1 . RowPostPaint += OnRowPostPaint ; void OnRowPostPaint ( object sender , DataGridViewRowPostPaintEventArgs e ) { MyObject value = ( MyObject ) dataGridView1 . Rows [ e . RowIndex ] . DataBoundItem ; DataGridViewCellStyle style = dataGridView1 . Rows [ e . RowIndex ] . DefaultCellStyle ; . . . . } <EOF>
MIDL_INTERFACE ( CODE_STRING ) IShellItem : public IUnknown { } <EOF>
XmlDocument doc = new XmlDocument ( ) ; doc . Load ( CODE_STRING ) ; XmlElement root = doc . DocumentElement ; XmlNodeList nodes = root . SelectNodes ( CODE_STRING ) ; foreach ( XmlNode node in nodes ) { listView1 . Items . Add ( node . Attributes [ CODE_STRING ] . Value ) ; } <EOF>
public int ? value { get ; set ; } <EOF>
public class NotifyService { public static NotifyService DefaultInstace ; public NotifyService ( ) { DefaultInstace = this ; } ///.....SNIP...... } <EOF>
public static void CallingFooBar ( ) { using ( var ts = new TransactionScope ( ) ) { var foo = new Foo ( ) ; foo . Bar ( ) ; ts . Complete ( ) ; } } <EOF>
try { byte [ ] _ImageData = new byte [ CODE_INTEGER ] ; _ImageData = ( byte [ ] ) _SqlRetVal ; System . IO . MemoryStream _MemoryStream = new System . IO . MemoryStream ( _ImageData ) ; _Image = System . Drawing . Image . FromStream ( _MemoryStream ) ; } catch ( Exception _Exception ) { Console . WriteLine ( _Exception . Message ) ; return null ; } <EOF>
private void btPlayer_Click ( object sender , EventArgs e ) { foreach ( Button btn in this . Controls . OfType < Button > ( ) ) { if ( ! btn . Equals ( btPlayer ) ) { if ( btPlayer . Bounds . IntersectsWith ( btn . Bounds ) ) { Console . WriteLine ( CODE_STRING + btn . Name ) ; } } } } <EOF>
CODE_INTEGER : a CODE_INTEGER : b . . CODE_INTEGER : z CODE_INTEGER : CODE_INTEGER <EOF>
The Windows Registry in C # <EOF>
private void ListView1_ItemSelectionChanged ( Object sender , ListViewItemSelectionChangedEventArgs e ) { ListView1_ItemActivate ( sender , e ) ; } <EOF>
int y = CODE_INTEGER ; foreach ( string name in names ) { Button button = new Button ( ) ; button . Text = name ; button . Position = new Point ( CODE_INTEGER , y ) ; y += CODE_INTEGER ; button . Click += HandleButtonClick ; Controls . Add ( button ) ; } <EOF>
class Credentials { public string User { get ; set ; } public string Password { get ; set ; } } <EOF>
private void button1_Click ( object sender , EventArgs e ) { var textInEachLine = richTextBox1 . Text . Split ( new string [ ] { " " } , StringSplitOptions . RemoveEmptyEntries ) ; string whereClause = string . Join ( CODE_STRING , textInEachLine ) . ToString ( ) ; MessageBox . Show ( CODE_STRING + whereClause + CODE_STRING ) ; } <EOF>
int output ( int deg , int zeropoint ) { var relative = deg - zeropoint ; if ( relative > CODE_INTEGER ) relative -= CODE_INTEGER ; else if ( relative < - CODE_INTEGER ) relative += CODE_INTEGER ; return relative ; } <EOF>
var strings = list . Select ( item = > item . Item3 ) . ToArray ( ) ; <EOF>
var groupedByBothConditions = lsEQData . GroupBy ( x = > new { Range = ranges . FirstOrDefault ( r = > r > x . MagnitudeInMl ) , IncEpicentre = x . IncEpicentre } ) . Select ( g = > new { g . Key , TotalHits = g . Count ( ) . ToString ( ) } ) ; <EOF>
public static string DB_PATH = Path . Combine ( Path . Combine ( ApplicationData . Current . LocalFolder . Path , CODE_STRING ) ) ; private SQLiteConnection dbConn = new SQLiteConnection ( DB_PATH ) ; dbConn . CreateTable < Task > ( ) ; <EOF>
object nullobj = Missing . Value ; doc = wordApp . Documents . Open ( ref file , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj ) ; doc . Activate ( ) ; doc . Visible = true ; int dialogResult = wordApp . Dialogs [ Microsoft . Office . Interop . Word . WdWordDialog . wdDialogFilePrint ] . Show ( ref nullobj ) ; if ( dialogResult == CODE_INTEGER ) { doc . PrintOut ( ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj , ref nullobj ) ; } <EOF>
ClientScript . RegisterClientScriptBlock ( typeof ( Page ) , CODE_STRING , CODE_STRING , true ) ; <EOF>
static void Main ( string [ ] args ) { if ( args . Length > CODE_INTEGER ) { String paramValue1 = args [ CODE_INTEGER ] ; } } <EOF>
TextReader reader = new StreamReader ( path ) ; IEnumerable < string > data = this . ReadLines ( reader ) ; foreach ( var s in data ) { if ( s != null && ! string . IsNullOrEmpty ( s ) && ! s . StartsWith ( CODE_STRING ) && s . Length > CODE_INTEGER ) { s = s . ToLower ( ) . Trim ( ) ; var regex = new Regex ( " \ BID \ B " ) ; var isMatch = regex . Match ( s . ToLower ( ) ) ; if ( isMatch . Success ) { var arr = s . split ( CODE_CHAR ) ; var id = arr [ CODE_INTEGER ] ; } } } <EOF>
[ DataContractAttribute ] public class GeoCoordContainer { [ DataMember ] public double lat = CODE_INTEGER ; [ DataMember ] public double lon = CODE_INTEGER ; public GeoCoordContainer ( Double lat , Double lon ) { this . lat = lat ; this . lon = lon ; } } GeoCoordContainer cont = new GeoCoordContainer ( MyGeoPosition . Lattitude , MyGeoPosition . Longitued ) ; EZ_Iso . IsolatedStorageAccess . SaveFile ( CODE_STRING , cont ) ; GeoCoordContainer cont = ( GeoCoordContainer ) EZ_Iso . IsolatedStorageAccess . GetFile ( CODE_STRING , typeof ( GeoCoordContainer ) ) ; <EOF>
string data = CODE_STRING ; XElement elem = XElement . Parse ( data ) ; var departments = elem . Descendants ( CODE_STRING ) . ToList ( ) ; foreach ( var dept in departments ) { var sLegal = dept . Elements ( CODE_STRING ) . First ( p = > p . Attribute ( CODE_STRING ) . Value == CODE_STRING ) . Value ; var eLegal = dept . Elements ( CODE_STRING ) . First ( p = > p . Attribute ( CODE_STRING ) . Value == CODE_STRING ) . Value ; var sOp = dept . Elements ( CODE_STRING ) . First ( p = > p . Attribute ( CODE_STRING ) . Value == CODE_STRING ) . Value ; var eOp = dept . Elements ( CODE_STRING ) . First ( p = > p . Attribute ( CODE_STRING ) . Value == CODE_STRING ) . Value ; var attr = dept . Attribute ( CODE_STRING ) ; var opStatus = attr == null ? CODE_STRING : attr . Value ; attr = dept . Attribute ( CODE_STRING ) ; var primaryRole = attr == null ? CODE_STRING : attr . Value ; attr = dept . Attribute ( CODE_STRING ) ; var depChangeDate = attr == null ? CODE_STRING : attr . Value ; } <EOF>
bool result = xml . Descendants ( CODE_STRING ) . Attributes ( ) . Single ( x = > x . Name == CODE_STRING ) . Value == productName ; <EOF>
viewer . PTZControlURL = CODE_STRING ; viewer . EnableAreaZoom = true ; viewer . OneClicllkZoom = true ; viewer . UIMode = CODE_STRING <EOF>
var d = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; var str = d . ToString ( CODE_STRING ) ; Console . WriteLine ( d ) ; <EOF>
HostContext . ServiceController . ExecuteMessage ( new Message < T > ( requestDto ) , httpReq ) ; <EOF>
public interface IUpgradeDomainEvents { IEnumerable < IDomainEvent > Upgrade ( IDomainEvent e , string id ) ; } <EOF>
this . Dispatcher . Invoke ( DispatcherPriority . Normal , ( Action ) ( ( ) = > { mshtml . HTMLDocument doc = ie . Document ; mshtml . IHTMLWindow2 win = doc . parentWindow as IHTMLWindow2 ; win . execScript ( CODE_STRING , CODE_STRING ) ; } ) ) ; <EOF>
ProcessStartInfo processToRunInfo = new ProcessStartInfo ( ) ; processToRunInfo . Arguments = CODE_STRING ) ; processToRunInfo . CreateNoWindow = true ; processToRunInfo . WorkingDirectory = CODE_STRING ; processToRunInfo . FileName = CODE_STRING ; Process process = new Process ( ) ; process . StartInfo = processToRunInfo ; process . Start ( ) ; <EOF>
public bool IsFoobar ( bool foo , bool bar ) { return db . Foobars . Any ( fb = > fb . foo == foo && fb . bar == bar ) ; } <EOF>
WebRequest request = WebRequest . Create ( CODE_STRING ) ; request . Method = CODE_STRING ; string postData = CODE_STRING ; byte [ ] byteArray = Encoding . UTF8 . GetBytes ( postData ) ; request . ContentType = CODE_STRING ; request . ContentLength = byteArray . Length ; <EOF>
DateTime . ParseExact ( CODE_STRING , CODE_STRING , System . Globalization . CultureInfo . InvariantCulture ) . ToString ( CODE_STRING ) ; <EOF>
var str = loader . GetString ( CODE_STRING ) ; <EOF>
ProcessItem < object > ( subDir , dir . MinAge , ignored = > subDir . NoArgs ( ) , /* ignored */ null , string . Format ( Messages . NotDeletedFolder , subDir . FullName ) ) ; <EOF>
var message = new byte [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var s = new byte [ CODE_INTEGER ] ; byte [ ] m ; byte [ ] x ; using ( HashAlgorithm sha256 = SHA256 . Create ( ) ) { m = sha256 . ComputeHash ( message ) ; } using ( IncrementalHash sha256 = IncrementalHash . CreateHash ( HashAlgorithmName . SHA256 ) ) { sha256 . AppendData ( m ) ; sha256 . AppendData ( s ) ; x = sha256 . GetHashAndReset ( ) ; } <EOF>
dynamic myJson = Json . Decode ( myJsonString ) ; foreach ( var url in myJson . data . images . standard_resolution ) { } <EOF>
protected void listbox_mar_SelectedIndexChanged ( object sender , EventArgs e ) { for ( int i = CODE_INTEGER ; i < listbox_mar . Items . Count ; i ++ ) { if ( listbox_mar . Items [ i ] . Selected ) { lbl_mar_cat . Text += listbox_mar . Items [ i ] . Text + CODE_STRING ; listbox_mar . Items . Remove ( listbox_mar . Items [ i ] ) ; } } } <EOF>
var query = dbConnection . Valgdata . GroupBy ( u = > u . omraade_id ) . Select ( x = > x . FirstOrDefault ( y = > x . Max ( p = > p . timestamp ) == y . timestamp ) ) ; <EOF>
Lazy < T > <EOF>
public void AddLog ( Log log ) { try { richTextBox1 . SelectAll ( ) ; string oldText = this . richTextBox1 . SelectedRtf ; this . richTextBox1 . Text = log . User + CODE_STRING + log . Message + " " ; this . richTextBox1 . Select ( CODE_INTEGER , log . User . Length ) ; this . richTextBox1 . SelectionColor = Color . GreenYellow ; this . richTextBox1 . Select ( log . User . Length + CODE_INTEGER , log . Message . Length ) ; this . richTextBox1 . SelectionColor = Color . White ; this . richTextBox1 . DeselectAll ( ) ; this . richTextBox1 . SelectionStart = this . richTextBox1 . TextLength ; this . richTextBox1 . SelectedRtf = oldText ; this . richTextBox1 . DeselectAll ( ) ; } catch { } } <EOF>
public class StreamReader : TextReader { public override void Close ( ) { this . Dispose ( true ) ; } protected override void Dispose ( bool disposing ) { try { if ( ( this . Closable && disposing ) && ( this . stream != null ) ) { this . stream . Close ( ) ; } } finally { if ( this . Closable && ( this . stream != null ) ) { this . stream = null ; this . encoding = null ; this . decoder = null ; this . byteBuffer = null ; this . charBuffer = null ; this . charPos = CODE_INTEGER ; this . charLen = CODE_INTEGER ; base . Dispose ( disposing ) ; } } } } <EOF>
value . ToString ( CODE_STRING ) <EOF>
data : { CODE_STRING : JSON . stringify ( arrayRows . data ) } <EOF>
string date = CODE_STRING . Replace ( CODE_STRING , CODE_STRING ) ; Console . WriteLine ( DateTime . Parse ( date ) ) ; <EOF>
db . SaveChanges ( ) <EOF>
public class MockOperationBehavior : BehaviorExtensionElement , IOperationBehavior , IEndpointBehavior { public void ApplyDispatchBehavior ( ServiceEndpoint endpoint , EndpointDispatcher endpointDispatcher ) { foreach ( var op in endpoint . Contract . Operations ) { op . Behaviors . Add ( this ) ; } } } <EOF>
names . OrderBy ( s = > s . Split ( CODE_CHAR ) [ CODE_INTEGER ] ) . ThenBy ( s = > s . Split ( CODE_CHAR ) [ CODE_INTEGER ] ) ; <EOF>
public void SaveChanges ( ) { foreach ( var entry in Context . ChangeTracker . Entries < ICreatedAt > ( ) . Where ( x = > x . State == EntityState . Added && x . Entity . CreatedAt == default ( DateTime ) ) ) entry . Entity . CreatedAt = DateTime . Now ; foreach ( var entry in Context . ChangeTracker . Entries < ICreatedBy > ( ) . Where ( x = > x . State == EntityState . Added && x . Entity . CreatedBy == null ) ) entry . Entity . CreatedBy = ContextManager . CurrentUser ; foreach ( var entry in Context . ChangeTracker . Entries < IModifiedAt > ( ) . Where ( x = > x . State == EntityState . Modified ) ) entry . Entity . ModifiedAt = DateTime . Now ; foreach ( var entry in Context . ChangeTracker . Entries < IModifiedBy > ( ) . Where ( x = > x . State == EntityState . Modified ) ) entry . Entity . ModifiedBy = ContextManager . CurrentUser ; Context . SaveChanges ( ) ; } <EOF>
using rs = ReportService2005 ; using re = ReportExecution ; rs . ParameterValue [ ] values = null ; rs . DataSourceCredentials [ ] credentials = null ; rs . ReportParameter [ ] parameters ; re . ParameterValue v2 = . . . ; <EOF>
A user of the Tao Framework implemented this idea with promising results . He wrote wrappers for OpenGL resources and implemented the disposable pattern like this : private void Dispose ( bool manual ) { if ( ! disposed ) { if ( manual ) { Gl . glDeleteTextures ( CODE_INTEGER , ref _tid ) ; GC . SuppressFinalize ( this ) ; disposed = true ; } else { GC . KeepAlive ( SimpleOpenGlControl . DisposingQueue ) ; SimpleOpenGlControl . DisposingQueue . Enqueue ( this ) ; } } } <EOF>
SmtpServer . Port = * * * * ; SmtpServer . Send ( mail ) ; Mail . Dispose ( ) ; Console . WriteLine ( CODE_STRING ) ; <EOF>
foreach ( GridViewRow gvrow in GridView1 ) { } <EOF>
string sTest1 = CODE_STRING ; string sTest2 = sTest1 . Replace ( CODE_STRING , CODE_STRING ) ; Console . WriteLine ( sTest2 ) ; int iLocation = sTest1 . IndexOf ( CODE_CHAR ) ; string sTest3 = CODE_STRING ; if ( iLocation >= CODE_INTEGER ) { sTest3 = sTest1 . Substring ( CODE_INTEGER , iLocation ) ; } else { sTest3 = sTest1 ; } Console . WriteLine ( sTest3 ) ; Console . ReadLine ( ) ; <EOF>
string newName = searcha . GetName ( ) . Name ; if ( ! assemblyView . Items . Cast < ListViewItem > ( ) . Any ( lvi = > lvi . Text == newName ) ) <EOF>
grid1 . get_batchEditingManager ( ) . saveAllChanges ( ) ; <EOF>
var res = _linq . sp_SelectRecords ( txtParam1 . Text ) ; foreach ( var order in res ) { ListViewItem lvi = new ListViewItem ( new [ ] { order . Cod_Prod , order . Description , order . Price . ToString ( ) } ) ; ListView1 . Items . Add ( lvi ) ; } <EOF>
char ch = CODE_CHAR ; string strOut = String . Format ( CODE_STRING , ( ushort ) ch ) ; <EOF>
Array . Copy <EOF>
private static readonly int Target = CODE_INTEGER ; private static readonly List < int > Parts = new List < int > { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; static void Main ( string [ ] args ) { Console . WriteLine ( Solve ( Target , Parts ) ) ; Console . ReadLine ( ) ; } private static bool Solve ( int target , List < int > parts ) { parts . RemoveAll ( x = > x > target || x <= CODE_INTEGER ) ; if ( parts . Count == CODE_INTEGER ) return false ; var divisor = parts . First ( ) ; var quotient = target / divisor ; var modulus = target % divisor ; if ( modulus == CODE_INTEGER ) { Console . WriteLine ( CODE_STRING , quotient , divisor ) ; return true ; } if ( quotient == CODE_INTEGER || parts . Count == CODE_INTEGER ) return false ; while ( ! Solve ( target - divisor * quotient , parts . Skip ( CODE_INTEGER ) . ToList ( ) ) ) { if ( -- quotient != CODE_INTEGER ) continue ; return Solve ( target , parts . Skip ( CODE_INTEGER ) . ToList ( ) ) ; } Console . WriteLine ( CODE_STRING , quotient , divisor ) ; return true ; } <EOF>
if ( ( e . KeyCode == Keys . Enter ) || ( e . KeyCode == Keys . Tab ) ) { Parent . SelectNextControl ( textBox_Zakljucak , true , true , true , true ) ; e . Handled = e . SuppressKeyPress = true ; } <EOF>
Response . ContentType = CODE_STRING ; Response . AddHeader ( CODE_STRING , CODE_STRING + filePath ) ; Response . WriteFile ( path ) ; HttpContext . Current . ApplicationInstance . CompleteRequest ( ) ; <EOF>
pc . Limits . Set ( new Vector3 ( - CODE_INTEGER , - CODE_INTEGER , - CODE_INTEGER ) , new Vector3 ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; <EOF>
public class MyTextBox : TextBox { public bool AllowDigitsOnly { get ; set ; } protected override void OnKeyPress ( KeyPressEventArgs e ) { if ( this . AllowDigitsOnly ) { if ( ! char . IsDigit ( e . KeyChar ) ) e . Handled = true ; } base . OnKeyPress ( e ) ; } } <EOF>
value . ToString ( CODE_STRING ) ; <EOF>
string result = list . Select ( w = > w . Key + CODE_STRING + w . Value ) . Aggregate ( ( c , n ) = > c + CODE_STRING + n ) ; <EOF>
List < T > <EOF>
public static string Transform ( XmlDocument doc , XmlDocument stylesheet ) { try { System . Xml . Xsl . XslCompiledTransform transform = new System . Xml . Xsl . XslCompiledTransform ( ) ; transform . Load ( stylesheet ) ; System . IO . StringWriter writer = new System . IO . StringWriter ( ) ; XmlReader xmlReadB = new XmlTextReader ( new StringReader ( doc . DocumentElement . OuterXml ) ) ; transform . Transform ( xmlReadB , null , writer ) ; return writer . ToString ( ) ; } catch ( Exception ex ) { throw ex ; } } <EOF>
string [ ] names = Enum . GetNames ( typeof ( MyEnum ) ) ; <EOF>
delegate int GetNameFromDictionaryCallback ( UInt64 key , [ MarshalAs ( UnmanagedType . LPWStr ) ] StringBuilder value ) ; public bool GetNameFromDictionary ( UInt64 key , StringBuilder value ) { string s ; if ( dict . TryGetValue ( key , out s ) ) { value . Append ( s ) ; return true ; } return false ; } <EOF>
Create procedure s_ProcTable @TableName varchar ( CODE_INTEGER ) as declare @sql varchar ( CODE_INTEGER ) select @sql = ' select count ( * ) from [ ' + @TableName + CODE_CHAR exec ( @sql ) go <EOF>
public event PropertyChangedEventHandler PropertyChanged ; private void NotifyPropertyChanged ( String info ) { if ( PropertyChanged != null ) { PropertyChanged ( this , new PropertyChangedEventArgs ( info ) ) ; } } <EOF>
window . location . replace ( ' url ' ) ; <EOF>
var Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) . Join ( MyTable . GroupBy ( x = > x . TableDate . Hour ( ) ) . Select ( g = > new { hour = g . Key , rev = g . Revenue . Sum ( ) } , h = > h , g = > g . hour , ( h , g ) -> new { hour = h , revenue = g . rev } ) ; <EOF>
alt = ' < % # CODE_STRING + Container . ItemIndex % > ' <EOF>
public Result < Boolean > CreateLocation ( LocationKey key ) { LocationDAO locationDAO = new LocationDAO ( ) ; return WrapMethod ( ( ) = > locationDAO . CreateLocation ( key ) ) ; } public Result < Boolean > RemoveLocation ( LocationKey key ) { LocationDAO locationDAO = new LocationDAO ( ) ; return WrapMethod ( ( ) = > locationDAO . RemoveLocation ( key ) ) ; } static Result < T > WrapMethod < T > ( Func < Result < T > > func ) { try { return func ( ) ; } catch ( UpdateException ue ) { return new Result < T > ( default ( T ) , ue . Errors ) ; } } <EOF>
[ XmlIgnore ] public bool Active { get ; set ; } [ XmlAttribute ( CODE_STRING ) , Browsable ( false ) ] [ EditorBrowsable ( EditorBrowsableState . Never ) ] public string ActiveString { get { return Active ? CODE_STRING : CODE_STRING ; } set { switch ( value ) { case CODE_STRING : Active = true ; break ; case CODE_STRING : Active = false ; break ; default : throw new ArgumentOutOfRangeException ( ) ; } } } <EOF>
foreach ( var tbox in new [ ] { tbox0 , tbox1 , tbox2 } ) { tbox . KeyPress += ( sender , e ) = > keypressed ( sender , e ) ; } private void keypressed ( object sender , KeyPressEventArgs e ) { if ( e . KeyChar == ( char ) Keys . Back ) ( ( Control ) sender ) . GetNextControl ( ( Control ) sender , false ) . Select ( ) ; } <EOF>
var groups = from employee in employees group employee by employee . ReportsTo into g orderby g . Key select g ; <EOF>
private List < string > SelectedNodes = new List < string > ( ) ; private void GetSelectedNodeText ( NodeCollection nodes ) { foreach ( Node node in nodes ) { if ( node . IsChecked != true && node . IsChecked != false ) { SelectedNodes . Add ( node . Text + CODE_STRING + GetSelectedChildNodeText ( node . ChildNodes ) ) ; } else if ( node . IsChecked == true ) { SelectedNodes . Add ( node . Text ) ; } } } private string GetSelectedChildNodeText ( NodeCollection nodes ) { string retValue = string . Empty ; foreach ( Node node in nodes ) { if ( node . IsChecked != true && node . IsChecked != false ) { retValue = node . Text + CODE_STRING + GetSelectedChildNodeText ( node . ChildNodes ) ; } else if ( node . IsChecked == true ) { retValue = node . Text ; } } return retVal ; } <EOF>
string input = CODE_STRING ; string result = input . Substring ( CODE_INTEGER , input . IndexOf ( CODE_CHAR ) ) ; <EOF>
X - Forwarded - For : client1 , proxy1 , proxy2 , . . . <EOF>
private static void uploadImage ( ) { try { foreach ( var img in lImageSet ) { Console . WriteLine ( CODE_STRING , img . getName ( ) ) ; } foreach ( var img in lImageSet ) { i ++ ; if ( i % CODE_INTEGER == CODE_INTEGER ) { clientContext . Dispose ( ) ; sharepointLogin ( ) ; } . . . . <EOF>
var fadeInOutAnimation = new DoubleAnimation ( ) { From = CODE_INTEGER , To = CODE_INTEGER , Duration = TimeSpan . FromSeconds ( CODE_INTEGER ) , } ; var storyboard = new Storyboard { Duration = TimeSpan . FromSeconds ( CODE_INTEGER ) , AutoReverse = true , RepeatBehavior = RepeatBehavior . Forever } ; Storyboard . SetTarget ( fadeInOutAnimation , MyCanvas ) ; Storyboard . SetTargetProperty ( fadeInOutAnimation , new PropertyPath ( Canvas . OpacityProperty ) ) ; storyboard . Children . Add ( fadeInOutAnimation ) ; MyCanvas . BeginStoryboard ( storyboard ) ; <EOF>
decimal returnVal = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < rowused ; i ++ ) { cRng = ( Excel . Range ) xlWorkSheet . Cells [ i , rngResult . Column ] ; if ( cRng != null ) { decimal currentVal ; if ( decimal . TryParse ( cRng . Value2 . ToString ( ) , out currentVal ) ) returnVal += currentVal ; } } return returnVal . ToString ( ) ; <EOF>
private void TextBox_KeyDown ( object sender , KeyRoutedEventArgs e ) { if ( e . Key == ( VirtualKey ) ( CODE_INTEGER ) ) { e . Handled = true ; } } <EOF>
var detail = ( from x in result . Descendants ( CODE_STRING ) select new { TransactionID = x . Element ( CODE_STRING ) . Value , Frequency = x . Element ( CODE_STRING ) . Value , Amount = x . Element ( CODE_STRING ) . Value , Email = x . Element ( CODE_STRING ) . Value , Status = x . Element ( CODE_STRING ) . Value } ) . First ( ) ; <EOF>
MyProcess . StartInfo . Arguments = CODE_STRING ; <EOF>
var query = from Apps in objApps join ratings in objRatings on Apps . AppId equals ratings . AppId where ratings . RatingGiven == CODE_INTEGER group Apps by Apps . AppId into g select new { AppId = g . AppId , ItemCount = g . Count ( ) } <EOF>
foreach ( string Items in listBox39 . Items ) { using ( OracleCommand crtCommand = new OracleCommand ( CODE_STRING + Items + CODE_STRING + txtSrcUserID . Text . ToUpper ( ) + CODE_STRING , conn1 ) ) { } } <EOF>
foreach ( oldCount in absenceCount ) { DataRow [ ] dr = dt . Select ( CODE_STRING + ID + CODE_STRING + oldCount ) ; dr [ CODE_INTEGER ] . Delete ( ) ; } <EOF>
protected void Button1_Click ( object sender , EventArgs e ) { var test = new List < string > ( ) ; foreach ( ListItem item in CheckBoxList1 . Items ) { if ( item . Selected ) { test . Add ( item . Value ) ; Response . Write ( CODE_STRING + item . Value + CODE_STRING ) ; } } } <EOF>
. linkButton { background - color : transparent ; border - style : none ; color : /* Something nice */ cursor : pointer ; text - align : left ; text - decoration : underline ; display : table - cell ; } <EOF>
private void InitializeCursorMonitoring ( ) { var point = Mouse . GetPosition ( Application . Current . MainWindow ) ; var timer = new System . Windows . Threading . DispatcherTimer ( ) ; timer . Tick += delegate { Application . Current . MainWindow . CaptureMouse ( ) ; if ( point != Mouse . GetPosition ( Application . Current . MainWindow ) ) { point = Mouse . GetPosition ( Application . Current . MainWindow ) ; Console . WriteLine ( String . Format ( CODE_STRING , point . X , point . Y ) ) ; } Application . Current . MainWindow . ReleaseMouseCapture ( ) ; } ; timer . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; timer . Start ( ) ; } <EOF>
TextBox . IsReadOnly <EOF>
System . IO . Path . GetFileName ( CODE_STRING ) <EOF>
var d1 = new XmlDocument ( ) ; d1 . LoadXml ( CODE_STRING ) ; var d2 = new XmlDocument ( ) ; d2 . LoadXml ( CODE_STRING ) ; var newNode = d1 . ImportNode ( d2 . SelectSingleNode ( CODE_STRING ) , true ) ; d1 . DocumentElement . AppendChild ( newNode ) ; Console . WriteLine ( d1 . OuterXml ) ; <EOF>
XmlTextReader xml ; WebRequest web ; web = WebRequest . Create ( xmlurl ) ; if ( Convert . ToBoolean ( ConfigurationManager . AppSettings [ CODE_STRING ] . ToString ( ) ) ) { WebProxy prxy = new WebProxy ( ) ; Uri prxyUri = new Uri ( CODE_STRING ) ; prxy . Address = prxyUri ; prxy . BypassProxyOnLocal = true ; prxy . Credentials = new NetworkCredential ( ConfigurationManager . AppSettings [ CODE_STRING ] . ToString ( ) , ConfigurationManager . AppSettings [ CODE_STRING ] . ToString ( ) ) ; web . Proxy = prxy ; } var response = web . GetResponse ( ) . ToString ( ) ; xml = new XmlTextReader ( response ) ; <EOF>
window . location . href = obj . MessageLink ; <EOF>
sqlComm . ExecuteNonQuery ( ) ; int lastID = ( int ) sqlComm . ExecuteScalar ( ) ; <EOF>
List < CustomClass > SubList = ListOfObjects . Where ( obj = > ListOfIDs . Contains ( obj . ID ) ) . ToList ( ) ; <EOF>
System . Random <EOF>
namespace MyCLRNamespace { public partial class Window1 : Window { public Window1 ( ) { InitializeComponent ( ) ; Polygon MyPolygon = new Polygon ( ) ; MyPolygon . Points = new PointCollection { new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) } ; MyPolygon . Measure ( new Size ( double . PositiveInfinity , double . PositiveInfinity ) ) ; double PolyWidth = MyPolygon . DesiredSize . Width ; } } } <EOF>
var searchResults = session . CreateCriteria < Product > ( ) . List < Product > ( ) ; session . CreateQuery ( CODE_STRING ) . SetParameterList ( CODE_STRING , searchResults . Select ( p = > p . Id ) . ToList ( ) ) . ExecuteUpdate ( ) ; <EOF>
select new ItemManagementViewModel { FormType = value2 . Name , FormControllerID = value1 . RecordId , FormControllerName = value1 . Name , values = innerResult } ) . ToList ( ) ; <EOF>
using System ; using System . Xml ; public class Sample { public static void Main ( ) { XmlDocument doc = new XmlDocument ( ) ; doc . LoadXml ( CODE_STRING ) ; XmlTextWriter writer = new XmlTextWriter ( CODE_STRING , null ) ; writer . Formatting = Formatting . Indented ; doc . Save ( writer ) ; } } <EOF>
unsafe public void mf ( ) { sbyte [ ] sbArr1 = new sbyte [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; sbyte * pAsciiUpper = & sbArr1 [ CODE_INTEGER ] ; } <EOF>
var resHeaders = sess . oResponse . headers . ToString ( ) ; var resBody = sess . GetResponseBodyAsString ( ) ; <EOF>
routes . MapRoute ( name : CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING , param1 = UrlParameter . Optional , param2 = UrlParameter . Optional , } ) ; <EOF>
[ assembly : OwinStartup ( typeof ( CRMWeb . Startup ) ) ] namespace CRMWeb { public class Startup { public void Configuration ( IAppBuilder app ) { app . MapSignalR ( ) ; } } } <EOF>
DirectoryInfo directory = new DirectoryInfo ( Directory . GetCurrentDirectory ( ) ) ; List < FileInfo > files = directory . GetFiles ( ) . ToList ( ) ; List < FileInfo > unAllowed = files . FindAll ( f = > ! allowedFiles . Contains ( f . Name ) ) ; if ( unAllowed . Count > CODE_INTEGER ) { string notAllowedFiles = CODE_STRING ; unAllowed . ForEach ( f = > notAllowedFiles += f . Name + CODE_STRING ) ; Message . Warning ( CODE_STRING + notAllowedFiles ) ; return ; } <EOF>
var addMethod = typeof ( BagA ) . GetMethod ( CODE_STRING , new [ ] { typeof ( string ) , typeof ( BagB ) } ) ; addMethod . Invoke ( MyBagA , new object [ ] { CODE_STRING , MyBagB } ) ; <EOF>
string result = Regex . Replace ( input , CODE_STRING , CODE_STRING ) . Trim ( CODE_CHAR ) ; <EOF>
newGrid . SetRow ( image , CODE_INTEGER ) ; newGrid . SetColumn ( image , CODE_INTEGER ) ; newGrid . Children . Add ( image ) ; LayoutRoot . Children . Add ( newGrid ) ; <EOF>
private List < DateTime > GetRange ( ) { var res = new List < DateTime > ( ) ; var start = DateTime . Parse ( textBox1 . Text ) ; var end = DateTime . Parse ( textBox2 . Text ) ; for ( var date = start ; date <= end ; date = date . AddDays ( CODE_INTEGER ) ) res . Add ( date ) ; return res ; } <EOF>
XpsConverter . Convert ( CODE_STRING ) ; <EOF>
your_asp_literal . Text = CODE_STRING + GetGlobalResourceObject ( CODE_STRING , CODE_STRING ) . ToString ( ) + CODE_STRING ; <EOF>
[ DebuggerStepThrough ] static void DebuggerStepThroughInPartialClass ( ) { WrappedClass . NonDebuggerStepThrough ( ) ; } class WrappedClass { static void NonDebuggerStepThroughInNewClass ( ) { int bar = CODE_INTEGER ; bar ++ ; } } <EOF>
e . g . ErrorLogProvider . Instance . Write ( something ) <EOF>
private void btnaddcomp_Click ( object sender , EventArgs e ) { DataTable ds = ( DataTable ) dgsetcompt . DataSource ; DataRow dr = ds . NewRow ( ) ; dr [ CODE_STRING ] = this . dgsetcompt . Rows . Count + CODE_INTEGER ; dr [ CODE_STRING ] = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; ds . Rows . Add ( dr ) ; } <EOF>
var formattedStatus = from status in _statusCollection . AsParallel ( ) select FormatStatus ( status ) ; <EOF>
Textie . Attributes . Add ( CODE_STRING , CODE_STRING + Textie . ClientID + CODE_STRING + Textie . ClientID + CODE_STRING ) ; <EOF>
StudentRecord student = new StudentRecord ( ) ; student . ToString ( ) ; <EOF>
string str = CODE_STRING ; string str2 = str . Split ( CODE_CHAR ) [ CODE_INTEGER ] ; <EOF>
var newLine = new Line ( ) ; Binding binding = new Binding ( ) ; binding . Source = topStack ; binding . Path = new System . Windows . PropertyPath ( CODE_STRING ) ; newLine . SetBinding ( Line . X2Property , binding ) ; topStack . Children . Add ( newLine ) ; <EOF>
LineItem lineItemAlias = null ; Product productAlias = null ; var subQuery = QueryOver . Of < Order > ( ) . JoinAlias ( x = > x . LineItems , ( ) = > lineItemAlias ) . JoinAlias ( ( ) = > lineItemAlias . Product , ( ) = > productAlias ) . Where ( ( ) = > productAlias . Name == CODE_STRING ) . Select ( Projections . Group < Order > ( x = > x . Id ) ) ; var results = Session . QueryOver < Order > ( ) . WithSubquery . WhereProperty ( x = > x . Id ) . In ( subQuery ) . List ( ) ; <EOF>
public static bool operator > ( Circle x , Circle y ) { return x . CompareTo ( y ) > CODE_INTEGER ; } <EOF>
int lcid = GetSystemDefaultLCID ( ) ; var ci = System . Globalization . CultureInfo . GetCultureInfo ( lcid ) ; var page = ci . TextInfo . OEMCodePage ; [ System . Runtime . InteropServices . DllImport ( CODE_STRING ) ] public static extern int GetSystemDefaultLCID ( ) ; <EOF>
StringCollection filesToBeReplaced = new StringCollection ( ) ; private void button2_Click ( object sender , EventArgs e ) { foreach ( string file in Directory . GetFiles ( CODE_STRING + textBox1 . Text + CODE_STRING , CODE_STRING ) . Where ( item = > item . EndsWith ( CODE_STRING ) ) ) { filesToBeReplaced . Add ( Path . GetFileNameWithoutExtension ( file ) ) ; File . Delete ( file ) ; } } private void CopyGoodFilesFromSource ( ) { foreach ( string fileName in filesToBeReplaced ) { string sourceFilePath = Path . Combine ( CODE_STRING , Path . ChangeExtension ( fileName , CODE_STRING ) ) ; string destinationPath = Path . Combine ( CODE_STRING , Path . ChangeExtension ( fileName , CODE_STRING ) ; File . Copy ( sourceFilePath , destinationPath , true ) ; } } <EOF>
. . . SPRoleAssignment roleAssignment = new SPRoleAssignment ( CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING ) ; SPRoleDefinition roleDefinition = web . RoleDefinitions . GetByType ( SPRoleType . Contributor ) ; roleAssignment . RoleDefinitionBindings . Add ( roleDefinition ) ; if ( ! myList . HasUniqueRoleAssignments ) { myList . BreakRoleInheritance ( true ) ; } myList . RoleAssignments . Add ( roleAssignment ) ; myList . Update ( ) ; <EOF>
string html = CODE_STRING ; HtmlDocument doc = new HtmlDocument ( ) ; doc . LoadHtml ( html ) ; if ( doc . ParseErrors . Count ( ) > CODE_INTEGER ) { } <EOF>
public void updateDB ( object paramobj ) { foreach ( var prop in paramobj . GetType ( ) . GetProperties ( ) ) { } } <EOF>
File . OpenRead ( Server . MapPath ( CODE_STRING ) ) ; <EOF>
YourCustomControl uc = null ; private void button1_Click ( object sender , EventArgs e ) { uc = new YourCustomControl ( ) ; this . Controls . Add ( uc ) ; } <EOF>
MemoryStream memoryStream = new MemoryStream ( ) ; byte [ ] fileBytes = File . ReadAllBytes ( filepath ) ; memoryStream . Write ( fileBytes , CODE_INTEGER , fileBytes . Length ) ; memoryStream . Position = CODE_INTEGER ; BitmapSource img = BitmapFrame . Create ( memoryStream ) ; BitmapMetadata meta = ( BitmapMetadata ) img . Metadata ; DateTime datetaken = DateTime . Parse ( meta . DateTaken ) ; System . IO . File . Delete ( filepath ) ; <EOF>
listView1 . Columns . Add ( CODE_STRING ) ; listView1 . Columns . Add ( CODE_STRING ) ; string [ ] strArrGroups = new string [ CODE_INTEGER ] { CODE_STRING , CODE_STRING , CODE_STRING } ; string [ ] strArrItems = new string [ CODE_INTEGER ] { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; for ( int i = CODE_INTEGER ; i < strArrGroups . Length ; i ++ ) { int groupIndex = listView1 . Groups . Add ( new ListViewGroup ( strArrGroups [ i ] , HorizontalAlignment . Left ) ) ; for ( int j = CODE_INTEGER ; j < strArrItems . Length ; j ++ ) { ListViewItem lvi = new ListViewItem ( strArrItems [ j ] ) ; lvi . SubItems . Add ( CODE_STRING ) ; listView1 . Items . Add ( lvi ) ; listView1 . Groups [ i ] . Items . Add ( lvi ) ; } } <EOF>
static void Main ( string [ ] args ) { Queue < string > lines = new Queue < string > ( ) ; using ( var reader = new StreamReader ( args [ CODE_INTEGER ] ) ) { string line ; while ( ( line = reader . ReadLine ( ) ) != null ) { if ( line . Contains ( CODE_STRING ) ) { Console . WriteLine ( CODE_STRING ) ; foreach ( var errLine in lines ) Console . WriteLine ( errLine ) ; Console . WriteLine ( line ) ; Console . WriteLine ( CODE_STRING ) ; } lines . Enqueue ( line ) ; while ( lines . Count > CODE_INTEGER ) lines . Dequeue ( ) ; } } } <EOF>
string customPropertyNamespace = CODE_STRING ; Outlook . Forlder oFolder = oPublicFolder . Folders [ CODE_STRING ] . Folders [ CODE_STRING ] . Folders [ CODE_STRING ] ; Redemption . RDOSession session = new RDOSesssion ( ) ; session . MAPUIOBJECT = Application . Session . MAPIOBJECT ; Redemption . RDOFolder rFolder = session . ( RDOFolder ) session . GetRDOObjectfromOutlookObject ( oFolder ) ; Redemption . RDOMail rMsg = rFolder . Items . Add ( CODE_STRING ) ; rMsg . Fields [ customPropertyNamespace + CODE_STRING ] = CODE_STRING ; rMsg . Save ( ) ; Outlook . _MailItem oMep = Application . Session . GetItemFromID ( rMsg . EntryID ) ; oMep . Display ( false ) ; <EOF>
string StrQuery ; try { using ( SqlConnection conn = new SqlConnection ( ConnString ) ) { using ( SqlCommand comm = new SqlCommand ( ) ) { comm . Connection = conn ; conn . Open ( ) ; for ( int i = CODE_INTEGER ; i < dataGridView1 . Rows . Count ; i ++ ) { StrQuery = CODE_STRING + dataGridView1 . Rows [ i ] . Cells [ CODE_STRING ] . Value + CODE_STRING + dataGridView1 . Rows [ i ] . Cells [ CODE_STRING ] . Value + CODE_STRING ; comm . CommandText = StrQuery ; comm . ExecuteNonQuery ( ) ; } } } } <EOF>
bool hasDecimal = ! percentage . Value . ToString ( CODE_STRING , CultureInfo . InvariantCulture ) . EndsWith ( CODE_STRING ) ; string percentageMask = hasDecimal ? CODE_STRING : CODE_STRING ; string percentageValue = string . Format ( CultureInfo . CurrentCulture , percentageMask , percentage ) ; <EOF>
LinearGradientColorTable linGrBrush = new LinearGradientColorTable ( Color . DarkGray , Color . DarkGray ) ; Office2007Renderer renderer = GlobalManager . Renderer as Office2007Renderer ; if ( renderer == null ) return ; Office2007ColorTable table = renderer . ColorTable ; Office2007ComboBoxColorTable comboColors = table . ComboBox ; comboColors . DefaultStandalone . Border = Color . DarkGray ; comboColors . DefaultStandalone . Background = Color . White ; comboColors . DefaultStandalone . ExpandText = Color . LightGray ; comboColors . DefaultStandalone . ExpandBorderInner = linGrBrush ; comboColors . DefaultStandalone . ExpandBorderOuter = linGrBrush ; <EOF>
private IEnumerable < Component > EnumerateComponents ( ) { return this . GetType ( ) . GetFields ( BindingFlags . Instance | BindingFlags . Public | BindingFlags . NonPublic ) . Where ( f = > typeof ( Component ) . IsAssignableFrom ( f . FieldType ) ) . Where ( f = > ! typeof ( Control ) . IsAssignableFrom ( f . FieldType ) ) . Select ( f = > f . GetValue ( this ) ) . OfType < Component > ( ) ; } <EOF>
protected string FormatXml ( XmlNode xmlNode ) { StringBuilder builder = new StringBuilder ( ) ; using ( StringWriter stringWriter = new StringWriter ( builder ) ) { using ( XmlTextWriter xmlTextWriter = new XmlTextWriter ( stringWriter ) ) { xmlTextWriter . Formatting = Formatting . Indented ; xmlNode . WriteTo ( xmlTextWriter ) ; } } return builder . ToString ( ) ; } <EOF>
DateTime . Now . ToString ( CODE_STRING ) ) ) ; <EOF>
[ Required ( ErrorMessage = CODE_STRING ) , FileExtensions ( Extensions = CODE_STRING , ErrorMessage = CODE_STRING ) ] public HttpPostedFileBase BannerData { get ; set ; } <EOF>
class BetterLinkLabel : LinkLabel { protected override bool ProcessMnemonic ( char charCode ) { if ( base . ProcessMnemonic ( charCode ) ) { OnLinkClicked ( new LinkLabelLinkClickedEventArgs ( null ) ) ; return true ; } return false ; } } <EOF>
expression = a = > ( SearchResult . Name == null || a . Name == SearchResult . Name ) && ( SearchResult . condition == null || Search . condition == ( a . PersonType != null ) ) ; <EOF>
Type t = obj . GetType ( ) ; <EOF>
public Form1 ( ) { InitializeComponent ( ) ; B1 . Text = CODE_STRING ; Control ctl = FindControl ( this , CODE_STRING ) ; if ( ctl is TextBox ) listBox1 . Items . Add ( ( ( TextBox ) ctl ) . Text ) ; } public static Control FindControl ( Control parent , string ctlName ) { foreach ( Control ctl in parent . Controls ) { if ( ctl . Name . Equals ( ctlName ) ) { return ctl ; } FindControl ( ctl , ctlName ) ; } return null ; } <EOF>
if ( Application . Current == null ) { MyApplication = new Application { ShutdownMode = ShutdownMode . OnExplicitShutdown } ; } else MyApplication = Application . Current ; <EOF>
float . Parse ( reader . Value . Replace ( CODE_CHAR , CODE_CHAR ) , System . Globalization . CultureInfo . InvariantCulture ) ; <EOF>
Console . WriteLine ( new decimal ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , false , CODE_INTEGER ) ) ; Console . WriteLine ( new decimal ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , false , CODE_INTEGER ) ) ; Console . WriteLine ( new decimal ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , false , CODE_INTEGER ) ) ; Console . WriteLine ( new decimal ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , false , CODE_INTEGER ) ) ; Console . WriteLine ( new decimal ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , false , CODE_INTEGER ) ) ; Console . WriteLine ( new decimal ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , true , CODE_INTEGER ) ) ; <EOF>
var topProducts = sellingLog . Where ( s = > s . salesYear == CODE_INTEGER ) . GroupBy ( u = > u . productCode ) . Select ( g = > new { productCode = g . Key , sales = g . Sum ( u = > u . productSales ) } ) . OrderByDescending ( x = > x . productCode ) . Take ( CODE_INTEGER ) . ToList ( ) ; <EOF>
WIA . CommonDialog wiaDiag = new WIA . CommonDialog ( ) ; <EOF>
doc . Delete ( delIds ) ; doc . Regenerate ( ) ; wallElem = doc . get_Element ( wallElem . Id ) ; brutto = wallElem . get_Parameter ( BuiltInParameter . HOST_AREA_COMPUTED ) . AsDouble ( ) ; <EOF>
SmartCard . Transport . PCSC . SelectDialog dialog = new SmartCard . Transport . PCSC . SelectDialog ( ) ; CardAccessor ca = new CardAccessor ( dialog . SelectedReader ) ; if ( ca . Logon ( ) ) { ca . GetSerialNumber ( ) ; } <EOF>
public string Name { get { return _name ; } set { } } <EOF>
var result = ( from dc in _context . DocClasses join d in _context . Documents on dc . DocClassID equals d . DocClassID where dc . DocClassID != CODE_INTEGER && docIds . Contains ( d . DocID ) let children = from p in _context . DocClasses where dc . ParentID == p . DocClassID select new Child { ChildId = dc . DocClassID , ChildDocClassName = dc . DocClassName , ParentId = p . DocClassID , ParentDocClassName = p . DocClassName } select children ) . SelectMany ( c = > c ) . ToList ( ) ; <EOF>
HasMany ( n = > n . LanguageValues ) . Access . ReadOnlyPropertyThroughCamelCaseField ( ) . AsMap < CultureInfo > ( CODE_STRING ) . Element ( CODE_STRING ) . Table ( CODE_STRING ) ; <EOF>
caspol - u - ag All_Code - url CODE_STRING FullTrust - n CODE_STRING . <EOF>
public static UIELEMENT FindUiElementUpVisualTree ( DependencyObject initial ) { DependencyObject current = initial ; while ( current != null && current . GetType ( ) != typeof ( UIELEMENT ) ) { current = VisualTreeHelper . GetParent ( current ) ; } return current as UIELEMENT ; } <EOF>
protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { modelBuilder . Conventions . Remove < PluralizingTableNameConvention > ( ) ; modelBuilder . Entity < Entity1 > ( ) . HasMany ( b = > b . Entities2 ) . WithMany ( p = > p . Entities1 ) . Map ( m = > { m . ToTable ( CODE_STRING ) ; m . MapLeftKey ( CODE_STRING ) ; m . MapRightKey ( CODE_STRING ) ; } ) ; } <EOF>
using ( SvnClient client = new SvnClient ( ) ) { SvnStatusArgs sa = new SvnStatusArgs ( ) ; sa . Depth = SvnDepth . Empty ; Collection < SvnStatusEventArgs > statuses ; client . GetStatus ( CODE_STRING , sa , out statuses ) ; Assert . That ( statuses . Count , Is . EqualTo ( CODE_INTEGER ) ) ; Assert . That ( SvnStatus . NotVersioned , Is . EqualTo ( statuses [ CODE_INTEGER ] . LocalContentStatus ) ) ; } <EOF>
myList = myList . OrderByDescending ( x = > x . ProgramId ) . ThenBy ( x = > x . Level ) . ThenBy ( x = > x . Special ) ; <EOF>
sqlQuery . ToString ( ) <EOF>
PageDictionary = R . GetPageN ( i ) ; Annots = PageDictionary . GetAsArray ( PdfName . ANNOTS ) ; foreach ( PdfObject A in Annots . ArrayList ) { Annots . Remove ( int idx ) ; } <EOF>
SyndicationItem item = new SyndicationItem ( CODE_STRING , CODE_STRING , new Uri ( CODE_STRING ) , CODE_STRING , DateTimeOffset . Now ) ; XmlWriter writer = XmlWriter . Create ( CODE_STRING ) ; item . SaveAsRss20 ( writer ) ; writer . Close ( ) ; <EOF>
private int currentSongIndex = - CODE_INTEGER ; void Player_MediaEnded ( object sender , EventArgs e ) { if ( currentSongIndex == - CODE_INTEGER ) { currentSongIndex = listBox . SelectedIndex ; } currentSongIndex ++ ; if ( currentSongIndex < listBox . Items . Count ) { player . Play ( listBox . Items [ currentSongIndex ] ) ; } else { } } <EOF>
ScenarioContext . Current [ CODE_STRING ] <EOF>
Type type = typeof ( StaffRosterEntry ) ; int attributeCount = CODE_INTEGER ; foreach ( PropertyInfo property in type . GetProperties ( ) ) { attributeCount += property . GetCustomAttributes ( false ) . Length ; } <EOF>
Byte [ ] buffer = client . DownloadData ( path ) ; if ( buffer != null ) { Response . ContentType = CODE_STRING ; Response . AddHeader ( CODE_STRING , buffer . Length . ToString ( ) ) ; Response . BinaryWrite ( buffer ) ; } <EOF>
Configuration c = ConfigurationManager . OpenExeConfiguration ( ConfigurationUserLevel . None ) ; c . AppSettings . Settings [ CODE_STRING ] . Value = . . . . ; c . Save ( ConfigurationSaveMode . Modified ) ; <EOF>
e . Row . Cells [ CODE_INTEGER ] . Style . Add ( CODE_STRING , CODE_STRING ) ; <EOF>
interface ITest { void MethodOne ( ) ; } interface ITest2 : ITest { void MethodTwo ( ) ; } <EOF>
CODE_STRING <EOF>
System . Diagnostics . EventLog <EOF>
lblPopup . Text = CODE_STRING ; String strInsertStyle = CODE_STRING ; int intInsertPoint = lblPopup . Text . IndexOf ( CODE_STRING ) + CODE_INTEGER ; lblPopup . Text = lblPopup . Text . Substring ( CODE_INTEGER , intInsertPoint ) + strInsertStyle + lblPopup . Text . Substring ( intInsertPoint ) ; <EOF>
int nCounterIn = . . . ; int nCounterTotalInNetwork = System . Net . IPAddress . HostToNetworkOrder ( nCounterIn ) ; byte [ ] byteFormat = BitConverter . GetBytes ( nCounterTotalInNetwork ) ; m_brWriter . Write ( byteFormat ) ; m_brWriter . Flush ( ) ; <EOF>
xml . WriteStartDocument ( ) ; xml . WriteStartElement ( CODE_STRING ) ; xml . WriteElementString ( CODE_STRING , CODE_STRING ) ; foreach ( var profile in profiles ) { xml . WriteStartElement ( CODE_STRING ) ; xml . WriteElementString ( CODE_STRING , CODE_STRING ) ; xml . WriteElementString ( CODE_STRING , CODE_STRING ) ; xml . WriteStartElement ( CODE_STRING ) ; xml . WriteElementString ( CODE_STRING , CODE_STRING ) ; foreach ( var days in allDays ) { xml . WriteStartElement ( CODE_STRING ) ; xml . WriteElementString ( CODE_STRING , DateTime . Now . ToString ( ) ) ; xml . WriteElementString ( CODE_STRING , DateTime . Now . ToString ( ) ) ; xml . WriteElementString ( CODE_STRING , CODE_STRING ) ; xml . WriteEndElement ( ) ; } xml . WriteEndElement ( ) ; xml . WriteEndElement ( ) ; } xml . WriteEndElement ( ) ; <EOF>
IsMouseVisible = true <EOF>
List < string > Images = someList ; var update = Update . Set ( CODE_STRING , new BsonArray ( Images ) ) ; collection . Update ( query , update , UpdateFlags . Upsert ) ; <EOF>
var users = Membership . GetAllUsers ( ) ; List < MembershipUser > searchResults = users . Where ( user = > Profile . GetProfile ( user . UserName ) . CustomerID . ToLowerInvariant ( ) . Contains ( CustomerID . ToLowerInvariant ( ) ) ) . ToList ( ) ; <EOF>
DateTime a = DateTime . Now ; DateTime b = a . AddDays ( CODE_INTEGER ) ; long ticks = b . Ticks - a . Ticks ; long seconds = ticks / CODE_INTEGER ; long minutes = seconds / CODE_INTEGER ; long hours = minutes / CODE_INTEGER ; long days = hours / CODE_INTEGER ; <EOF>
using ( MemoryStream PDFData = new MemoryStream ( ) ) using ( Document document = new Document ( PageSize . A4 , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) { PdfWriter PDFWriter = PdfWriter . GetInstance ( document , PDFData ) ; document . Open ( ) ; Moviecollection movCol = new Moviecollection ( ) ; foreach ( Movie mov in movCol . Movies ) document . Add ( new Paragraph ( mov . Description ) ) ; } <EOF>
public ActionResult Registration ( [ Bind ( Prefix = CODE_STRING ) ] AccountViewInfo viewInfo ) ; <EOF>
foreach ( var presentedDocuments in innerdocuments ) { var doc = outerDocuments . FirstOrDefault ( a = > a . DocumentId . Equals ( presentedDocuments . DocumentId ) ) ; if ( doc != null ) { presentedDocuments . IsValid = doc . IsValid ; } } <EOF>
public static int findNullRow ( DataTable dt ) { int row = CODE_INTEGER ; for ( int a = CODE_INTEGER ; a < dt . Rows . Count ; a ++ ) { if ( dt . Rows [ a ] [ CODE_INTEGER ] == null ) { row = a ; break ; } } return row ; } public static int findNullColumn ( DataTable dt ) { int col = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < dt . Columns . Count ; i ++ ) { if ( dt . Rows [ CODE_INTEGER ] [ i ] == null ) { col = i ; break ; } } return col ; } <EOF>
if ( plot ) { if ( a ) { b = ! b ; if ( b ) { } } } <EOF>
private void button1_Click ( object sender , EventArgs e ) { textBox1 . Visible = false ; button1 . Size = new Size ( CODE_INTEGER , CODE_INTEGER ) ; } <EOF>
public static bool WriteString ( IntPtr handle , int address , string value ) { int written ; byte [ ] data = Encoding . Default . GetBytes ( value + CODE_STRING ) ; return WriteProcessMemory ( handle , address , data , data . Length , out written ) ; } <EOF>
using System ; using System . Windows . Forms ; class MyDataGridView : DataGridView { protected override bool ProcessCmdKey ( ref Message msg , Keys keyData ) { if ( keyData == ( Keys . Control | Keys . C ) ) { return true ; } return base . ProcessCmdKey ( ref msg , keyData ) ; } } <EOF>
using System ; using System . Collections . Generic ; using System . IO ; using System . Runtime . Serialization ; namespace SandboxConoleApp { internal class Program { private static void Main ( string [ ] args ) { DatabaseRestoreStatus data = null ; using ( var stream = File . Open ( CODE_STRING , FileMode . Open ) ) { var formatter = new DataContractSerializer ( typeof ( DatabaseRestoreStatus ) ) ; data = ( DatabaseRestoreStatus ) formatter . ReadObject ( stream ) ; } } } [ DataContract ( Name = CODE_STRING , Namespace = CODE_STRING ) ] public class DatabaseRestoreStatus { [ DataMember ( Name = CODE_STRING ) ] public Forest Forest { get ; set ; } } [ DataContract ( Name = CODE_STRING , Namespace = CODE_STRING ) ] public class Forest { [ DataMember ( Name = CODE_STRING ) ] public string Status { get ; set ; } } } <EOF>
string time = CODE_STRING ; StringBuilder sb = new StringBuilder ( time ) ; string final = sb . Remove ( CODE_INTEGER , CODE_INTEGER ) . ToString ( ) ; <EOF>
yourControl . Dock = DockStyle . Fill <EOF>
using ( var sqlConnection = new ReliableSqlConnection ( _connectionString , _connectionRetry , _commandRetry ) { var command = sqlConnection . CreateCommand ( ) ; command . CommandText = CODE_STRING ; sqlConnection . Open ( ) ; var dataReader = sqlConnection . ExecuteCommand < SqlDataReader > ( ) ; var dataTable = new DataTable ( ) ; dataTable . Load ( dataReader ) ; . . . } <EOF>
DataContractSerializer ( typeof ( List < ITestObject > ) <EOF>
IEnumerable < A > result = ( from a in A join b in B on a . id equals b . id_A group b by b . id_A into g select new { Name = a . name , Total = g . Sum ( b = > b . quantity ) } ) . ToArray ( ) . Select ( item = > new A { Name = item . Name , TotalQuantity = item . Total } ) ; <EOF>
private List < string > GetSearchResult ( List < string > SourceList , string name , string [ ] items ) { return SourceList . Where ( entry = > entry . name == name && items . Contains ( entry . id ) ) . ToList ( ) ; } <EOF>
[ WebMethod ] public void ExceptionTest ( ) { try { throw new Exception ( CODE_STRING ) ; } catch ( Exception ex ) { evlWebServiceLog . WriteEntry ( ex . ToString ( ) , EventLogEntryType . Error ) ; throw new Exception ( CODE_STRING , ex ) ; } } <EOF>
using ( FileStream fsStream = new FileStream ( CODE_STRING , FileMode . Create ) ) using ( BinaryWriter writer = new BinaryWriter ( fsStream , Encoding . UTF8 ) ) { writer . Write ( CODE_STRING ) ; writer . Write ( CODE_STRING ) ; writer . Write ( CODE_STRING ) ; writer . Write ( CODE_STRING ) ; writer . Write ( CODE_STRING ) ; writer . Write ( new byte [ ] { CODE_INTEGER , CODE_INTEGER } ) ; } <EOF>
string sym = CultureInfo . CurrentCulture . NumberFormat . CurrencySymbol ; Console . WriteLine ( CODE_STRING , sym , number1 ) ; Console . WriteLine ( CODE_STRING , sym , number2 ) ; <EOF>
( g ) mcs - r : / path / to / MPAPI . dll Program . cs <EOF>
protected override void OnLoad ( EventArgs e ) { base . OnLoad ( e ) ; this . BeginInvoke ( new Action ( ( ) = > comboBox1 . DroppedDown = true ) ) ; } <EOF>
UserType . Type <EOF>
[ WebMethod ] public string GetJsonData ( ) { JArray jArray = new JArray ( ) ; JObject jObject = new JObject ( ) ; jObject . Add ( new JProperty ( CODE_STRING , CODE_STRING ) ) ; jArray . Add ( jObject ) ; return jArray . ToString ( ) ; } <EOF>
string res = CODE_STRING ; DateTime d = DateTime . ParseExact ( res , CODE_STRING , CultureInfo . InvariantCulture ) ; Console . WriteLine ( d . ToString ( CODE_STRING ) ) ; <EOF>
char decimalChar = Convert . ToChar ( CultureInfo . CurrentCulture . NumberFormat . NumberDecimalSeparator ) ; if ( ! char . IsDigit ( e . KeyChar ) && e . KeyChar != ( char ) Keys . Back && e . KeyChar != decimalChar ) { e . Handled = true ; } else if ( ( e . KeyChar == decimalChar ) && ( ( sender as TextBox ) . Text . IndexOf ( decimalChar ) > - CODE_INTEGER ) ) { e . Handled = true ; } else if ( ( e . KeyChar == decimalChar ) && ( ( sender as TextBox ) . Text . Length == CODE_INTEGER ) ) { e . Handled = true ; } <EOF>
private static DataTable CompareTwoDataTable ( DataTable table1 , DataTable table2 ) { DataTable table3 = new DataTable ( ) ; DataRow dr = null ; string filterExp = string . Empty ; for ( int i = CODE_INTEGER ; i < table1 . Rows . Count ; i ++ ) { string col = table1 . Rows [ i ] [ CODE_STRING ] . ToString ( ) ; if ( table2 . Columns . Contains ( col ) ) { if ( ! table3 . Columns . Contains ( col ) ) { table3 . Columns . Add ( col , typeof ( double ) ) ; filterExp = filterExp + col + CODE_STRING ; } for ( int j = CODE_INTEGER ; j < table2 . Rows . Count ; j ++ ) { if ( table3 . Rows . Count != table2 . Rows . Count ) { dr = table3 . NewRow ( ) ; table3 . Rows . Add ( dr ) ; } table3 . Rows [ j ] [ col ] = table2 . Rows [ j ] [ col ] ; } } } <EOF>
XNamespace ns1 = CODE_STRING ; XNamespace tipos = CODE_STRING ; XNamespace xsi = CODE_STRING ; var doc = new XElement ( ns1 + CODE_STRING , new XAttribute ( XNamespace . Xmlns + CODE_STRING , ns1 ) , new XAttribute ( XNamespace . Xmlns + CODE_STRING , tipos ) , new XAttribute ( XNamespace . Xmlns + CODE_STRING , xsi ) , new XAttribute ( xsi + CODE_STRING , CODE_STRING ) ) ; <EOF>
public class Session : ISession { private const string CURRENTUSERKEY = CODE_STRING ; public static string CurrentUser { get { return ( string ) HttpContext . Current . Session [ CURRENTUSERKEY ] ; } set { HttpContext . Current . Session [ CURRENTUSERKEY ] = value ; } } public static void ClearAllSession ( ) { CurrentUser = null ; } } <EOF>
Process . Start ( CODE_STRING ) ; <EOF>
. Select ( y = > y . Attributes ( ) . ToDictionary ( x = > x . Name , x = > x . Value ) ) <EOF>
List < List < string > > myList = new List < List < string > > ( ) ; myList . Add ( new List < string > { CODE_STRING , CODE_STRING } ) ; myList . Add ( new List < string > { CODE_STRING , CODE_STRING , CODE_STRING } ) ; myList . Add ( new List < string > { CODE_STRING , CODE_STRING , CODE_STRING } ) ; myList . Add ( new List < string > { CODE_STRING , CODE_STRING } ) ; foreach ( List < string > subList in myList ) { foreach ( string item in subList ) { Console . WriteLine ( item ) ; } } <EOF>
var doc = XDocument . Load ( . . . ) ; var themeName = doc . Root . Element ( CODE_STRING ) . Value ; Guid themeGuid = Guid . NewGuid ( ) ; foreach ( var element in doc . Root . Element ( CODE_STRING ) . Elements ( CODE_STRING ) ) { ActiveTheme theme = new ActiveTheme { ThemeName = themeName , ActiveThemeId = themeGuid , Page = element . Attribute ( CODE_STRING ) . Value , MasterPage = element . Attribute ( CODE_STRING ) . Value } ; portalContent . AddToActiveTheme ( theme ) ; } portalContext . SaveChanges ( ) ; <EOF>
private void Form1_FormClosing ( object sender , FormClosingEventArgs e ) { var window = MessageBox . Show ( CODE_STRING , buttons : MessageBoxButtons . YesNo ) ; if ( window == DialogResult . No ) e . Cancel = true ; else e . Cancel = false ; } <EOF>
foreach ( PropertyInfo prop in obj . GetType ( ) . GetProperties ( BindingFlags . Public | BindingFlags . Instance ) ) { if ( prop . PropertyType != typeof ( int ) ) continue ; int val = ( int ) prop . GetValue ( obj ) ; if ( val != CODE_INTEGER ) Console . WriteLine ( CODE_STRING , prop . Name , val ) ; } <EOF>
Task . Factory . StartNew ( ( ) = > { } ) . ContinueWith ( ( t ) = > { } ) ; <EOF>
private void keypressed ( Object o , KeyPressEventArgs e ) { if ( e . KeyChar == ( char ) Keys . Return ) { e . Handled = true ; } } <EOF>
public interface IBaseUnit { int HitPoints . . } <EOF>
List < String > lst = new List < string > ( ) ; lst . Add ( CODE_STRING ) ; lst . Add ( CODE_STRING ) ; lst . Add ( CODE_STRING ) ; lst . Add ( CODE_STRING ) ; lst . Add ( CODE_STRING ) ; List < string > newList = new List < string > ( ) ; foreach ( string str in lst ) { var temp = str . Split ( CODE_CHAR ) ; if ( temp . Length > CODE_INTEGER ) { for ( int i = CODE_INTEGER ; i < temp . Length ; i ++ ) { if ( ! newList . Contains ( temp [ i ] ) ) { newList . Add ( temp [ i ] ) ; } } } else { if ( ! newList . Contains ( str ) ) { newList . Add ( str ) ; } } } <EOF>
var xEle = new XElement ( CODE_STRING , from ele in t select new XElement ( CODE_STRING , new XElement ( CODE_STRING , ele . ID ) , new XElement ( CODE_STRING , ele . Number1 ) , new XElement ( CODE_STRING , ele . Holigraphic ) ) ) ; xEle . Save ( CODE_STRING ) ; Console . WriteLine ( CODE_STRING ) ; <EOF>
private void departDate_SelectedDateChanged ( object sender , SelectionChangedEventArgs e ) { returnDate . isDropDownOpen = true ; } <EOF>
SET FOREIGN_KEY_CHECKS = CODE_INTEGER ; ALTER TABLE Profile DROP PRIMARY KEY , MODIFY _id INT PRIMARY KEY NOT NULL ; insert commmand here . . . . ALTER TABLE Profile DROP PRIMARY KEY , MODIFY _id INT AUTO_INCREMENT PRIMARY KEY NOT NULL ; SET FOREIGN_KEY_CHECKS = CODE_INTEGER ; <EOF>
private static void ExtractEmbeddedResource ( string outputDir , string resourceLocation , List < string > files ) { foreach ( string file in files ) { using ( System . IO . Stream stream = System . Reflection . Assembly . GetExecutingAssembly ( ) . GetManifestResourceStream ( resourceLocation + CODE_STRING + file ) ) { using ( System . IO . FileStream fileStream = new System . IO . FileStream ( System . IO . Path . Combine ( outputDir , file ) , System . IO . FileMode . Create ) ) { for ( int i = CODE_INTEGER ; i < stream . Length ; i ++ ) { fileStream . WriteByte ( ( byte ) stream . ReadByte ( ) ) ; } fileStream . Close ( ) ; } } } } <EOF>
TradesFilter = SortDirection . Equals ( SortDirection . Ascending ) ? TradesFilter . OrderBy ( s = > s . TradeLineItems . Min ( t = > TradeDateTime ) ) : TradesFilter . OrderBy ( s = > s . TradeLineItems . Max ( t = > TradeDateTime ) ) ; <EOF>
foreach ( Control ctrl in myTextBoxContainer . Controls ) { if ( ctrl is TextBox ) { TextBox textbx = ctrl as TextBox ; if ( textbx . ReadOnly == false ) { textbx . ReadOnly = true ; } } } <EOF>
_b . Tap += yourHandler ; <EOF>
context . Questions . GroupJoin ( context . Answers , x = > x . Id , x = > x . QuestionId ( q , a ) = > new Question { q . QuestionUId , q . Text , Answers = a . Select ( an = > new Answer { an . AnswerId , an . AnswerText } ) } ) <EOF>
Console . WriteLine ( CODE_STRING ) ; foreach ( Color . clr item in Enum . GetValues ( typeof ( Color . clr ) ) ) { Console . WriteLine ( string . Format ( CODE_STRING , ( int ) item , item . ToString ( ) ) ) ; } Console . WriteLine ( CODE_STRING ) ; string colorInput = Console . ReadLine ( ) ; int colorValue = CODE_INTEGER ; if ( ! int . TryParse ( colorInput , out colorValue ) ) { Console . WriteLine ( string . Format ( CODE_STRING , colorInput ) ) ; return ; } Color . clr tempColor = ( Color . clr ) colorValue ; <EOF>
int _campingDaysAdj = CODE_INTEGER - campingDays ; if ( _campingDaysAdj > CODE_INTEGER && pagesPerDay > CODE_INTEGER ) { int months = page / ( ( CODE_INTEGER - campingDays ) * pagesPerDay ) ; int years = months / CODE_INTEGER ; int remainingMonths = months % CODE_INTEGER ; Console . WriteLine ( CODE_STRING , years , remainingMonths ) ; } else { } <EOF>
string json = JsonConvert . SerializeObject ( array2D ) ; <EOF>
appointment . recurrence <EOF>
Label . Text = re . Users . Single ( u = > u . Name == struname ) . privilege ; <EOF>
try / catch <EOF>
function clickOnLoadReport ( ) { var requestManager = Sys . WebForms . PageRequestManager . getInstance ( ) ; requestManager . add_initializeRequest ( CancelPostbackForSubsequentSubmitClicks ) ; function CancelPostbackForSubsequentSubmitClicks ( sender , args ) { if ( requestManager . get_isInAsyncPostBack ( ) & args . get_postBackElement ( ) . id == ' BtnLoadReport ' ) { args . set_cancel ( true ) ; document . getElementById ( CODE_STRING ) . setAttribute ( CODE_STRING , CODE_STRING ) ; } } } <EOF>
var slice = Fields . Slice ( CODE_STRING , CODE_INTEGER , CODE_INTEGER ) ; <EOF>
public class StringStuff { private const char cr = CODE_CHAR ; private const char lf = CODE_CHAR ; private const char rs = CODE_CHAR ; private const char sp = CODE_CHAR ; public string BuildString ( ) { var a = CODE_STRING ; var b = CODE_STRING ; var output = a + rs + b return output ; } } <EOF>
for ( int i = CODE_INTEGER ; i < invoiceList . Count ; i ++ ) { workSheet . Cells [ CODE_INTEGER , CODE_INTEGER , totalRows , totalCols ] . Copy ( workSheet . Cells [ i * totalRows + CODE_INTEGER , CODE_INTEGER ] ) ; } <EOF>
protected override void OnFormClosing ( FormClosingEventArgs e ) { if ( ! mCompleted ) { backgroundWorker1 . CancelAsync ( ) ; this . Enabled = false ; e . Cancel = true ; mClosePending = true ; return ; } base . OnFormClosing ( e ) ; } void backgroundWorker1_RunWorkerCompleted ( object sender , RunWorkerCompletedEventArgs e ) { mCompleted = true ; if ( mClosePending ) this . Close ( ) ; } <EOF>
catch ( AggregateException ex ) when ( ex . InnerException is DocumentClientException ) { DocumentClientException dce = ( DocumentClientException ) ex . InnerException ; switch ( ( int ) dce . StatusCode ) { case CODE_INTEGER : Thread . Sleep ( dce . RetryAfter ) ; break ; default : Console . WriteLine ( CODE_STRING , ex . InnerException . Message ) ; throw ; } } <EOF>
var dictionary = xdoc . Root . Elements ( CODE_STRING ) . Elements ( ) . ToDictionary ( x = > x . Name . LocalName , x = > ( string ) x ) <EOF>
var list = new List < Instance > ( ) ; . . . var xs = new XmlSerializer ( typeof ( List < Instance > ) ) ; using ( var writer = XmlWriter . Create ( filename ) ) { xs . Serialize ( writer , list ) ; } . . . using ( var reader = XmlReader . Create ( filename ) ) { list = xs . Deserialize ( reader ) as List < Instance > ; } <EOF>
public string Serialize ( object o ) { string result = CODE_STRING ; Type type = o . GeyType ( ) ; foreach ( var pi in type . GetProperties ( ) ) { string name = pi . Name ; string value = pi . GetValue ( o , null ) . ToString ( ) ; object [ ] attrs = pi . GetCustomAttributes ( true ) ; foreach ( var attr in attrs ) { var vp = attr as FIXValuePairAttribute ; if ( vp != null ) name = vp . Name ; } result += name + CODE_STRING + value + CODE_STRING ; } return result ; } <EOF>
System . Drawing <EOF>
List < int > input = new List < int > ( ) ; string line ; while ( ( line = Console . ReadLine ( ) ) != null && line != CODE_STRING ) { input . Add ( int . Parse ( line ) ) ; } StockItem [ ] stock = new StockItem [ input . Count ] ; for ( int i = CODE_INTEGER ; i < stock . Length ; i ++ ) { stock [ i ] = new StockItem ( input [ i ] ) ; } <EOF>
var UnitPriceIndex = new SortedDictionary < double , LinkedList < OrderItem > > ( ) ; foreach ( OrderItem item in Data ) { if ( ! UnitPriceIndex . ContainsKey ( item . UnitPrice ) ) { UnitPriceIndex . Add ( item . UnitPrice , new LinkedList < OrderItem > ( ) ) ; } UnitPriceIndex [ item . UnitPrice ] . AddLast ( item ) ; } <EOF>
public string WrapFunc ( Dictionary < string , string > parameter ) { var response = CODE_STRING ; var missingParams = new List < string > ( ) ; if ( parameter . ContainsKey ( CODE_STRING ) && ! string . IsNullOrEmpty ( parameter [ CODE_STRING ] ) ) { objWebAPiRequest . Param1 = parameter [ CODE_STRING ] ; } else { missingParams . Add ( CODE_STRING ) ; } if ( missingParams . Any ( ) ) { foreach ( var p in missingParams ) LogRequiredParameterError ( p ) ; response = CODE_STRING ; } return response ; } private void LogRequiredParameterError ( string parameterName ) { } <EOF>
Object . Equals ( ) <EOF>
listA . Except ( listB ) <EOF>
string x = CODE_STRING ; string y = Regex . Replace ( x , CODE_STRING , CODE_STRING ) ; <EOF>
png . Save ( CODE_STRING , ImageFormat . Bmp ) <EOF>
string searchFor = bool allContain = dict . Values . All ( s = > s . Contains ( searchFor ) ) ; <EOF>
string value = Regex . Matches ( inputString , CODE_STRING , RegexOptions . None ) [ CODE_INTEGER ] . Groups [ CODE_INTEGER ] . Value ; <EOF>
var data = [ { data : CODE_INTEGER , Label : CODE_STRING } , { data : CODE_INTEGER , Label : CODE_STRING } ] for ( var item in data ) { data [ item ] . data = [ CODE_INTEGER , data [ item ] . data ] } <EOF>
startInfo . Arguments = CODE_STRING <EOF>
while ( reader . Read ( ) ) { CheckBox1 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; CheckBox2 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; CheckBox3 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; CheckBox4 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; CheckBox5 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; CheckBox6 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; CheckBox8 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; CheckBox9 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; CheckBox10 . Checked = ( reader . GetBoolean ( reader . GetOrdinal ( CODE_STRING ) ) ) ; } <EOF>
string str = Enum . GetName ( typeof ( RoleType ) , obj ) ; <EOF>
string date = CODE_STRING ; DateTime result ; int year = Convert . ToInt32 ( date . Substring ( CODE_INTEGER , CODE_INTEGER ) ) ; int month = Convert . ToInt32 ( date . Substring ( CODE_INTEGER , CODE_INTEGER ) ) ; int day = Convert . ToInt32 ( date . Substring ( CODE_INTEGER , CODE_INTEGER ) ) ; result = new DateTime ( year , month , Math . Min ( DateTime . DaysInMonth ( year , month ) , day ) ) ; <EOF>
var pivot = Manufacturers . Select ( m = > new { Name = m . Name , Products = Products . Where ( p = > p . ManufacturerId == m . ManufacturerId ) . Select ( p = > p . Name ) . ToList ( ) } ) ; <EOF>
DateTime dt = Convert . ToDateTime ( dateTimePicker1 . Text ) ; string dt1 = dt . ToString ( CODE_STRING ) <EOF>
protected override void LoadViewState ( object state ) { base . LoadViewState ( state ) ; var id = this . ViewState [ CODE_STRING ] as string ; if ( id != null ) GenerateDynamicControls ( id ) ; } protected void Button1_Click ( object sender , EventArgs e ) { string id = TextBox1 . Text ; this . ViewState [ CODE_STRING ] = id ; GenerateDynamicControls ( id ) ; } <EOF>
DateTime inSevenDays = DateTime . Today . AddDays ( CODE_INTEGER ) ; <EOF>
public ActionResult DoSomething ( ) { using ( GYOSContext context = new GYOSContext ( ) ) { } } <EOF>
using Mono . Cecil ; using Mono . Cecil . Cil ; var assembly = AssemblyDefinition . ReadAssembly ( CODE_STRING ) ; var types = assembly . MainModule . Types . Skip ( CODE_INTEGER ) ; foreach ( var type in types ) { var interfaces = type . Interfaces . Select ( i = > i . FullName ) ; if ( interfaces . Any ( ) ) { Console . WriteLine ( CODE_STRING , type . FullName , type . BaseType . FullName , string . Join ( CODE_STRING , interfaces ) ) ; } else { Console . WriteLine ( CODE_STRING , type . FullName , type . BaseType . FullName ) ; } } <EOF>
ValueStringFormat = CODE_STRING <EOF>
sting yourtextfile ; yourtextfile . replace ( CODE_STRING , CODE_STRING ) ; yourtextfile . replace ( CODE_STRING , CODE_STRING ) ; yourtextfile . replace ( CODE_STRING , CODE_STRING ) ; string [ ] all = yourtextfile . Split ( CODE_CHAR ) ; string [ ] main = all [ CODE_INTEGER ] . Split ( ' ' ) ; string [ ] extra = all [ CODE_INTEGER ] . Split ( ' ' ) ; string [ ] side = all [ CODE_INTEGER ] . Split ( ' ' ) ; <EOF>
IUnitOfWork UnitOfWork ; public AccountController ( IUnitOfWork unitOfWork ) { this . UnitOfWork = unitOfWork ; } <EOF>
Solid3D . IsPointInside ( ) <EOF>
XDocument xdoc = XDocument . Load ( CODE_STRING ) ; var servers = xdoc . Descendants ( CODE_STRING ) ; for ( var server in servers ) { var children = server . Elements ( ) ; for ( var child in children ) { } } <EOF>
public List < string > GivenPermission { get { return lstGivenPermissions . Items . Cast < string > ( ) . ToList ( ) ; } set { lstGivenPermissions . DataSource = value ; } } <EOF>
using ( var file = File . Open ( SerializedConfiguration , FileMode . Create ) ) { var bf = new BinaryFormatter ( ) ; bf . Serialize ( file , configuration ) ; } <EOF>
void OnCollisionEnter ( Collision collision ) { foreach ( ContactPoint contact in collision . contacts ) { if ( contact . thisCollider == collider1 ) { float cp = contact . point . x - transform . position . x ; contact . otherCollider . attachedRigidbody . AddForce ( reflectionForce * cp , CODE_REAL , CODE_REAL ) ; float maxSpeed = CODE_REAL ; Vector3 vel = contact . otherCollider . attachRigidbody . velocity ; contact . otherCollider . attachRigidbody . velocity = Vector3 . ClampMagnitude ( vel , maxSpeed ) ; } } <EOF>
private Point initialpoint ; private void Grid_ManipulationStarted_1 ( object sender , ManipulationStartedRoutedEventArgs e ) { initialpoint = e . Position ; } private void Grid_ManipulationDelta_1 ( object sender , ManipulationDeltaRoutedEventArgs e ) { if ( e . IsInertial ) { Point currentpoint = e . Position ; if ( currentpoint . X - initialpoint . X >= CODE_INTEGER ) { System . Diagnostics . Debug . WriteLine ( CODE_STRING ) ; e . Complete ( ) ; } } } <EOF>
Process . StandardError <EOF>
var mockClientData = new Mock < IClientData > ( ) ; mockClientData . SetupGet ( data = > data . MyProperty ) . Returns ( CODE_INTEGER ) ; mockClientData . Setup ( data = > data . MyMethod ( ) ) . Returns ( CODE_INTEGER ) ; var controller = new HomeController ( mockClientData . Object ) ; <EOF>
listview . OwnerDraw = true private void listView1_DrawColumnHeader ( object sender , DrawListViewColumnHeaderEventArgs e ) { } private void listView1_DrawItem ( object sender , DrawListViewItemEventArgs e ) { e . DrawDefault = true ; } private void listView1_DrawSubItem ( object sender , DrawListViewSubItemEventArgs e ) { e . DrawDefault = true ; } <EOF>
p . StartInfo . FileName = CODE_STRING ; p . StartInfo . Arguments = CODE_STRING ; <EOF>
[ DllImport ( CODE_STRING ) ] [ return : MarshalAs ( UnmanagedType . Bool ) ] static extern bool GetCaretPos ( out Point lpPoint ) ; <EOF>
try { if ( Properties . Settings . Default [ CODE_STRING ] != null ) { MessageBox . Show ( CODE_STRING ) ; } else { MessageBox . Show ( CODE_STRING ) ; } } catch ( Exception ee ) { MessageBox . Show ( ee . Message ) ; } <EOF>
System . IO . DriveInfo . GetDrives ( ) <EOF>
string [ ] items = new string [ CODE_INTEGER ] { CODE_STRING , CODE_STRING , CODE_STRING } ; string [ ] furtherItems = new string [ CODE_INTEGER ] ; List < string > itemsList = items . ToList < string > ( ) ; itemsList . Add ( CODE_STRING ) ; itemsList . AddRange ( furtherItems ) ; string [ ] newArray = itemsList . ToArray ( ) ; <EOF>
var doc = new Document ( ) ; MemoryStream memoryStream = new MemoryStream ( ) ; PdfWriter writer = PdfWriter . GetInstance ( doc , memoryStream ) ; doc . Open ( ) ; doc . Add ( new Paragraph ( CODE_STRING ) ) ; doc . Add ( new Paragraph ( CODE_STRING ) ) ; writer . CloseStream = false ; doc . Close ( ) ; memoryStream . Position = CODE_INTEGER ; MailMessage mm = new MailMessage ( CODE_STRING , CODE_STRING ) { Subject = CODE_STRING , IsBodyHtml = true , Body = CODE_STRING } ; mm . Attachments . Add ( new Attachment ( memoryStream , CODE_STRING ) ) ; SmtpClient smtp = new SmtpClient { Host = CODE_STRING , Port = CODE_INTEGER , EnableSsl = true , Credentials = new NetworkCredential ( CODE_STRING , CODE_STRING ) } ; smtp . Send ( mm ) ; <EOF>
private void ilPanel1_Load ( object sender , EventArgs e ) { ILArray < float > A = ILSpecialData . sincf ( CODE_INTEGER , CODE_INTEGER ) ; ilPanel1 . Scene . Add ( new ILPlotCube ( twoDMode : false ) { new ILSurface ( A ) { new ILColorbar ( ) } } ) ; var surface = ilPanel1 . Scene . First < ILSurface > ( ) ; ILArray < float > cmdata = surface . Colormap . Data ; cmdata [ CODE_STRING ] = cmdata [ CODE_STRING ] ; surface . Colormap = new ILColormap ( cmdata ) ; surface . Configure ( ) ; } <EOF>
namespace Simtho { class Program { static void Main ( string [ ] args ) { foreach ( string arg in Environment . GetCommandLineArgs ( ) ) { switch ( arg ) { case CODE_STRING : Console . WriteLine ( CODE_STRING ) ; Console . Read ( ) ; break ; } } } } } <EOF>
. . . . . . . . if ( membersName . Any ( x = > x == CODE_STRING ) ) { PropertyInfo propInfo = type . GetProperty ( CODE_STRING ) ; propInfo . SetValue ( obj , ass . Text , null ) ; } . . . . . . . . <EOF>
var netTcpActivatorService = ServiceController . GetServices ( ) . FirstOrDefault ( s = > s . ServiceName == CODE_STRING ) ; var netPipeActivatorService = ServiceController . GetServices ( ) . FirstOrDefault ( s = > s . ServiceName == CODE_STRING ) ; <EOF>
private void Form_Load ( object sender , EventArgs e ) { DirectoryInfo dir = new DirectoryInfo ( CODE_STRING ) ; foreach ( FileInfo file in dir . GetFiles ( ) ) { try { this . imageList1 . Images . Add ( Image . FromFile ( file . FullName ) ) ; } catch { Console . WriteLine ( CODE_STRING ) ; } } this . listView1 . View = View . LargeIcon ; this . imageList1 . ImageSize = new Size ( CODE_INTEGER , CODE_INTEGER ) ; this . listView1 . LargeImageList = this . imageList1 ; for ( int j = CODE_INTEGER ; j < this . imageList1 . Images . Count ; j ++ ) { ListViewItem item = new ListViewItem ( ) ; item . ImageIndex = j ; this . listView1 . Items . Add ( item ) ; } } <EOF>
sourcedata = ds . Tables [ CODE_STRING ] ; <EOF>
for { switch ( . . . ) { . . . . goto MyLabel ; } } MyLabel : <EOF>
Region :: Intersect <EOF>
public class Foo : IParameterlessConstructor { public Foo ( ) { } } public class Bar : Foo { public Bar ( int x ) { } } <EOF>
public DataTable GetAllChechedBox ( ) { var dt = new DataTable ( ) ; dt . Columns . Add ( CODE_STRING ) ; dt . Columns . Add ( CODE_STRING ) ; for ( int i = CODE_INTEGER ; i < chkList . Items . Count ; i ++ ) { if ( chkList . Items [ i ] . Checked ) { dt . Rows . Add ( ) ; dt . Rows [ dt . Rows . Count - CODE_INTEGER ] [ CODE_STRING ] = chkList . Items [ i ] . Value ; dt . Rows [ dt . Rows . Count - CODE_INTEGER ] [ CODE_STRING ] = chkList . Items [ i ] . Text ; } } return dt ; } <EOF>
public interface IPet { } public interface IDog : IPet { void Bark ( ) ; } public class Dog : IDog { public void Bark ( ) { Console . WriteLine ( CODE_STRING ) ; } } <EOF>
this . Label1 . Background = ( LinearGradientBrush ) this . FindResource ( CODE_STRING ) <EOF>
var result = Path . Combine ( Path . GetDirectoryName ( CODE_STRING ) , CODE_STRING ) ; <EOF>
keyup ( function ( e ) { if ( e . keyCode == CODE_INTEGER ) { } } ) ; <EOF>
var rootNode = new Node ( - CODE_INTEGER ) ; <EOF>
public class LocalDateTimeConvention : IMemberMapConvention { public string Name { get { return CODE_STRING ; } } public void Apply ( BsonMemberMap memberMap ) { if ( memberMap . MemberType == typeof ( DateTime ) ) { var dateTimeSerializer = new DateTimeSerializer ( DateTimeKind . Local ) ; memberMap . SetSerializer ( dateTimeSerializer ) ; } else if ( memberMap . MemberType == typeof ( DateTime ? ) ) { var dateTimeSerializer = new DateTimeSerializer ( DateTimeKind . Local ) ; var nullableDateTimeSerializer = new NullableSerializer < DateTime > ( dateTimeSerializer ) ; memberMap . SetSerializer ( nullableDateTimeSerializer ) ; } } } <EOF>
String . Join ( CODE_STRING , myDic . Keys . Select ( o = > o . ToString ( ) ) . ToArray ( ) ) ; <EOF>
new Uri ( CODE_STRING , true ) <EOF>
using ( FileStream fileStream = new FileStream ( path , FileMode . Open ) ) { byte [ ] chunk = new byte [ CODE_INTEGER ] ; fileStream . Read ( chunk , CODE_INTEGER , CODE_INTEGER ) ; string hexLetters = BitConverter . ToString ( chunk ) ; } <EOF>
Assembly . GetEntryAssembly ( ) <EOF>
using Sc = MyNamespace . SystemConstants ; <EOF>
bool isError = false ; foreach ( GridViewRow row in grdCart . Rows ) { Response . Write ( CODE_STRING ) ; var Qty = row . FindControl ( CODE_STRING ) as Label ; var RemainQty = row . FindControl ( CODE_STRING ) as Label ; var errormsg = row . FindControl ( CODE_STRING ) as Label ; if ( Convert . ToInt32 ( Qty . Text ) > Convert . ToInt32 ( RemainQty . Text ) ) { errormsg . Text = CODE_STRING + RemainQty . Text ; isError = true ; btnCheckOut . Enabled = false ; } else { errormsg . Text = CODE_STRING ; } } if ( ! isError ) { btnCheckOut . Enabled = true ; } <EOF>
private readonly CancellationTokenSource cts = new CancellationTokenSource ( ) ; public void Start ( ) { blockingCollection = new BlockingCollection < int > ( ) ; var task = Task . Factory . StartNew ( ProcessData , cts . Token ) ; } private void ProcessData ( ) { foreach ( var item in blockingCollection . GetConsumingEnumerable ( cts . Token ) ) { cts . Token . ThrowIfCancellationRequested ( ) ; } } public void Cancel ( ) { cts . Cancel ( ) ; } <EOF>
^ ( [ aA ] \ s * \ ) ) ( . * ) ( [ bB ] \ s * \ ) ) ( . * ) ( [ cC ] \ s * \ ) ) ( . * ) <EOF>
initial = Hash ( password ) ; possible = Hash ( CODE_STRING ) ; if ( initial == possible ) { } <EOF>
CODE_INTEGER - deca - fade - deca - deafdecacaff <EOF>
Contour < Point > [ ] control_shapes = Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) . Select ( i = > new Contour < Point > ( new MemStorage ( ) ) ) . ToArray ( ) ; <EOF>
ThreadPool . QueueUserWorkItem ( ) <EOF>
var tasks = new [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ; var joined = string . Join ( CODE_STRING , tasks ) ; var splitAgain = joined . Split ( new [ ] { CODE_STRING } , StringSplitOptions . RemoveEmptyEntries ) ; <EOF>
string Query = CODE_STRING ; OpenConnection ( ) ; MySqlCommand MysqlCommand = new MySqlCommand ( Query , MysqlConnection ) ; MysqlReader = MysqlCommand . ExecuteReader ( ) ; while ( MysqlReader . Read ( ) ) { . . . Team . Size = MysqlReader [ CODE_STRING ] . ToString ( ) ; Location . Address = MysqlReader [ CODE_STRING ] . ToString ( ) ; Team . Name = MysqlReader [ CODE_STRING ] . ToString ( ) ; Location . Name = MysqlReader [ CODE_STRING ] . ToString ( ) ; . . . } <EOF>
Button [ ] c = new Button [ CODE_INTEGER ] ; c [ CODE_INTEGER ] = new Button ( this ) ; <EOF>
XmlDocument xmlDoc = new XmlDocument ( ) ; xmlDoc . Load ( CODE_STRING ) ; string data = xmlDoc . OuterXml ; <EOF>
? convert = false <EOF>
{ Binding DataContext . ContextDeleteIcon , RelativeSource = { RelativeSource FindAncestor , AncestorType = { x : Type DataGrid } } } <EOF>
dnu build <EOF>
attender = jUser [ CODE_STRING ] . ToObject < List < Attendance > > ( ) ; <EOF>
Task . Factory . FromAsync <EOF>
FindsBy ( How = How . XPath , Using = CODE_STRING ) <EOF>
__init__ . py <EOF>
using ( var transaction = new TransactionScope ( ) ) { transaction . Complete ( ) ; } <EOF>
string result = data + prop ; <EOF>
VerticalContentAlignment = CODE_STRING <EOF>
control1 . . . . control2 . . . . < / div > <EOF>
byte [ ] pass1 = new HashPassword ( CODE_STRING ) . ToArray ( ) ; byte [ ] pass2 = new HashPassword ( CODE_STRING ) . ToArray ( ) ; <EOF>
ReportDataSource Rds = new ReportDataSource ( CODE_STRING , GridView . DataSourceObject ) ; <EOF>
[ HttpPost ] <EOF>
DrawingSurface . FillRectangle ( new SolidBrush ( Colors . Black ) , new Rectangle ( CODE_INTEGER , height - CODE_INTEGER , width , height ) ) ; <EOF>
System . Net . WebClient <EOF>
TextBox . ValidationGroup = CODE_INTEGER Submit . ValidationGroup = CODE_INTEGER requiredFieldValidator . ValidationGroup = CODE_INTEGER LinkButton . ValidationGroup = CODE_INTEGER <EOF>
var xmlDocument = new XmlDocument ( ) ; using ( var xmlReader = xDocument . CreateReader ( ) ) { xmlDocument . Load ( xmlReader ) ; } listdataxml . Document = xmlDocument ; <EOF>
Dictionary < GUID , iTrackedClass > <EOF>
Task . Run <EOF>
grid . RowValidationRules . Add ( new CourseValidationRule ( ) { ValidationStep = ValidationStep . UpdatedValue } ) ; <EOF>
foreach ( var row in dataGridView . SelectedRows ) { } <EOF>
Thread thread1 = new Thread ( ( ) = > { Application . Run ( new Form1 ( ) ) ; } ) ; thread1 . SetApartmentState ( ApartmentState . STA ) ; thread1 . Start ( ) ; thread1 . Join ( ) ; Thread thread2 = new Thread ( ( ) = > { Application . Run ( new Form2 ( ) ) ; } ) ; thread2 . SetApartmentState ( ApartmentState . STA ) ; thread2 . Start ( ) ; thread2 . Join ( ) ; <EOF>
ScriptManager sm = ScriptManager . GetCurrent ( Page ) ; if ( sm != null ) sm . RegisterPostBackControl ( btnDownload ) ; <EOF>
byte [ ] theFile = myNamespace . Properties . Resources . theBinaryFile ; <EOF>
using System . IO ; using System . Net ; var url = CODE_STRING ; var client = new WebClient ( ) ; using ( var stream = client . OpenRead ( url ) ) using ( var reader = new StreamReader ( stream ) ) { string line ; while ( ( line = reader . ReadLine ( ) ) != null ) { } } <EOF>
[ XmlRoot ( CODE_STRING ) ] [ XmlInclude ( typeof ( CR . Models . XactAnalysis . Phone ) ) ] [ XmlInclude ( typeof ( CR . Models . XactAnalysis . Email ) ) ] public class Contact { [ XmlArray ( CODE_STRING ) ] public List < ContactMethod > ContactMethods { get ; set ; } } public class ContactMethod { [ XmlElement ( CODE_STRING ) ] public Phone Phone { get ; set ; } [ XmlElement ( CODE_STRING ) ] public Email Email { get ; set ; } } [ XmlRoot ( CODE_STRING ) ] public class Phone { [ XmlAttribute ( CODE_STRING ) ] public string Number { get ; set ; } } [ XmlRoot ( CODE_STRING ) ] public class Email { [ XmlAttribute ( CODE_STRING ) ] public string Address { get ; set ; } } <EOF>
using System ; using System . Windows . Forms ; using System . Runtime . InteropServices ; class ExtendedTreeView : TreeView { protected override void WndProc ( ref Message m ) { if ( m . Msg == WM_REFLECT + WM_NOFITY ) { var notify = ( NMHDR ) Marshal . PtrToStructure ( m . LParam , typeof ( NMHDR ) ) ; if ( notify . code == NM_CLICK ) { MessageBox . Show ( CODE_STRING ) ; m . Result = ( IntPtr ) CODE_INTEGER ; return ; } } base . WndProc ( ref m ) ; } private const int NM_FIRST = CODE_INTEGER ; private const int NM_CLICK = NM_FIRST - CODE_INTEGER ; private const int WM_REFLECT = CODE_INTEGER ; private const int WM_NOFITY = CODE_INTEGER ; [ StructLayout ( LayoutKind . Sequential ) ] private struct NMHDR { public IntPtr hwndFrom ; public IntPtr idFrom ; public int code ; } } <EOF>
static void Main ( string [ ] args ) { Complex RA = new Complex ( CODE_INTEGER , CODE_INTEGER ) ; Console . WriteLine ( CODE_STRING , RA . Real , RA . Imaginary ) ; double r , q , z ; r = Math . Sqrt ( ( RA . Real * RA . Real ) + ( RA . Imaginary * RA . Imaginary ) ) ; q = Math . Atan ( RA . Imaginary / RA . Real ) ; z = ( q * ( CODE_INTEGER / Math . PI ) ) ; Console . WriteLine ( CODE_STRING , r , z ) ; Console . ReadLine ( ) ; } <EOF>
public static DirectoryInfo GetCreateMyFolder ( string baseFolder ) { var now = DateTime . Now ; var yearName = now . ToString ( CODE_STRING ) ; var monthName = now . ToString ( CODE_STRING ) ; var dayName = now . ToString ( CODE_STRING ) ; var folder = Path . Combine ( baseFolder , Path . Combine ( yearName , Path . Combine ( monthName , dayName ) ) ) ; return Directory . CreateDirectory ( folder ) ; } <EOF>
public void ExtractLibraryZipFolder ( SPWeb web , SPList myList , string FolderPath , SPFile myFile , bool overWrite ) { ZipArchive myZip = new ZipArchive ( myFile . OpenBinaryStream ( ) ) ; foreach ( ZipArchiveEntry subZip in myZip . Entries ) { MemoryStream myMemoryStream = new MemoryStream ( ) ; subZip . Open ( ) . CopyTo ( myMemoryStream ) ; if ( FolderPath != string . Empty ) { SPFolder theFolder = web . GetFolder ( CODE_STRING ) ; theFolder . SubFolders [ FolderPath ] . Files . Add ( subZip . Name , myMemoryStream ) ; } else { SPFile myUpload = myList . RootFolder . Files . Add ( subZip . Name , myMemoryStream ) ; } } } <EOF>
Random r = new Random ( ) ; int [ ] num = Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) . Select ( x = > r . Next ( - CODE_INTEGER , CODE_INTEGER ) ) . ToArray ( ) ; double avg = num . Where ( n = > n < CODE_INTEGER ) . Average ( ) ; <EOF>
DialogResult dr = MyInput . ShowDialog ( this ) ; MyInput . Close ( ) ; <EOF>
CameraUpdate camera = CameraUpdateFactory . NewLatLngZoom ( latlng , CODE_INTEGER ) ; mMap . MoveCamera ( camera ) ; <EOF>
private void LoadPage ( string APageName ) { FAddress = null ; PlaceholderAddressTemplate . Controls . Clear ( ) ; if ( ! string . IsNullOrEmpty ( APageName ) ) { FAddress = ( UserControl ) LoadControl ( string . Format ( CODE_STRING , APageName ) ) ; if ( FAddress != null ) { FAddress . ID = CODE_STRING ; PlaceholderAddressTemplate . Controls . Add ( FAddress ) ; ShowOrHideComponents ( ) ; FAddress . Focus ( ) ; } else ShowOrHideComponents ( ) ; } else ShowOrHideComponents ( ) ; } <EOF>
foreach ( var item in from l in list1 where l == eCode select l ) { } <EOF>
var result = CODE_STRING . Unidecode ( ) ; Console . WriteLine ( result ) <EOF>
void OnCompleted ( BackgroundTaskRegistration sender , BackgroundTaskCompletedEventArgs args ) { var tile = CreateNotification ( String . Format ( CODE_STRING , DateTime . Now . ToString ( CODE_STRING ) ) ) ; TileUpdateManager . CreateTileUpdaterForApplication ( ) . Update ( tile ) ; } private TileNotification CreateNotification ( string xml ) { var xmlDocument = new XmlDocument ( ) ; xmlDocument . LoadXml ( xml ) ; return new TileNotification ( xmlDocument ) ; } <EOF>
keyRight = keyRight . Replace ( " \ r CODE_STRING " ) ; <EOF>
AutoSize = True AutoSizeMode = GrowAndStrink <EOF>
foreach ( AutomationElement child in epoWindow . FindAll ( TreeScope . Subtree , Condition . TrueCondition ) ) { if ( child . Current . Name . Contains ( CODE_STRING ) ) { } } <EOF>
using System . Windows . Forms . VisualStyles ; . . . public Form1 ( ) { InitializeComponent ( ) ; if ( Application . RenderWithVisualStyles ) { VisualStyleRenderer rndr = new VisualStyleRenderer ( VisualStyleElement . Button . GroupBox . Normal ) ; Color c = rndr . GetColor ( ColorProperty . TextColor ) ; label1 . ForeColor = c ; } } <EOF>
var listOfStrings = new List < string > { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; var groupedStrings = listOfStrings . GroupBy ( i = > i ) . Select ( i = > new { i . Key , Items = i . ToList ( ) } ) . ToList ( ) ; var maxGroupSize = groupedStrings . OrderByDescending ( i = > i . Items . Count ) . First ( ) . Items . Count ; var finalList = new List < string > ( ) ; for ( var i = CODE_INTEGER ; i < maxGroupSize ; i ++ ) { finalList . AddRange ( from wordGroup in groupedStrings where i < wordGroup . Items . Count select wordGroup . Items [ i ] ) ; } <EOF>
char [ ] delimiter = { CODE_CHAR } ; String [ ] arr = data . Split ( delimiter , StringSplitOptions . None ) ; Console . WriteLine ( arr [ CODE_INTEGER ] ) ; /* N0292F060 UPTON1C UPTON/N0447F430 UL975 BARTN UP17 NOKIN UN862 RILES UL180 MERLY DCT GAPLI/M080F430 DCT 46N015W 45N020W/M080F470 37N030W 33N040W 26N050W 18N058W/N0448F470 DCT BNE DCT*/ <EOF>
private void onUserUpdated ( DataRow row ) { int idColumn = int . Parse ( row [ CODE_STRING ] . ToString ( ) ) ; foreach ( DataGridViewRow DGVrow in dataGridView1 . Rows ) { if ( idColumn == int . Parse ( DGVrow . Cells [ CODE_STRING ] . Value . ToString ( ) ) ) { for ( int i = CODE_INTEGER ; i < row . ItemArray . Length ; i ++ ) { dataGridView1 [ i , DGVrow . Index ] . Value = row . ItemArray [ i ] . ToString ( ) ; } } } } <EOF>
byte [ ] file = File . ReadAllBytes ( reader [ CODE_STRING ] . ToString ( ) ) ; <EOF>
using ( var context = new NorthwindContext ( ) ) { var query = from p in context . ProductsSet select p ; } <EOF>
using System . Runtime . CompilerServices ; . . . [ STAThread ] static void Main ( ) { AppDomain . CurrentDomain . AssemblyResolve += ( sender , args ) = > { } AvoidJitterBombing ( ) ; } [ MethodImpl ( MethodImplOptions . NoInlining ) ] private static void AvoidJitterBombing ( ) { Application . EnableVisualStyles ( ) ; Application . SetCompatibleTextRenderingDefault ( false ) ; Application . Run ( new frmrPrincipal ( ) ) ; } <EOF>
string t = CODE_STRING ; drpFunction . Items . FindByText ( t ) . Selected = true ; <EOF>
private static void CreateCommand ( string queryString , string connectionString ) { using ( SqlConnection connection = new SqlConnection ( connectionString ) ) { connection . Open ( ) ; SqlCommand command = new SqlCommand ( queryString , connection ) ; SqlDataReader reader = command . ExecuteReader ( ) ; while ( reader . Read ( ) ) { Console . WriteLine ( String . Format ( CODE_STRING , reader [ CODE_INTEGER ] ) ) ; } } } <EOF>
int temp = tmp . ArchiveFileData . Count ; if ( this . progressBar1 . InvokeRequired ) { progressBar1 . Invoke ( new Action ( delegate ( ) { progressBar1 . Maximum = temp ; progressBar1 . Value = CODE_INTEGER ; } ) ) ; } <EOF>
string text = CODE_STRING ; Match match = Regex . Match ( text , CODE_STRING ) ; string url = match . Value ; <EOF>
var splitOn = CODE_STRING ; var path = CODE_STRING ; var parts = path . Split ( new string [ ] { splitOn } , StringSplitOptions . None ) ; Console . WriteLine ( parts [ CODE_INTEGER ] + splitOn ) ; Console . WriteLine ( parts [ CODE_INTEGER ] ) ; <EOF>
string StrCmd = CODE_STRING ; <EOF>
public static bool IsFileOpen ( string path ) { FileStream stream = null ; try { stream = File . Open ( path , System . IO . FileMode . Open , System . IO . FileAccess . Read ) ; } catch ( IOException ex ) { if ( ex . Message . Contains ( CODE_STRING ) ) return true ; } finally { if ( stream != null ) stream . Close ( ) ; } return false ; } <EOF>
DataGridView myDataGriView = new DataGridView ( ) ; BindingSource myBindingSource = new BindingSource ( ) ; myBindingSource . DataSource = myDataTable ; myDataGridView . DataSource = myBindingSource ; <EOF>
protected override void Dispose ( bool disposing ) { base . Dispose ( disposing ) ; db . Dispose ( ) ; } <EOF>
TimeZoneInfo timeZone1 = TimeZoneInfo . FindSystemTimeZoneById ( CODE_STRING ) ; TimeZoneInfo timeZone2 = TimeZoneInfo . FindSystemTimeZoneById ( CODE_STRING ) ; DateTime to_display = TimeZoneInfo . ConvertTime ( from_db , timeZone1 , timeZone2 ) ; <EOF>
private void dataGridView_CellFormatting ( object sender , DataGridViewCellFormattingEventArgs e ) { if ( e . ColumnIndex == CODE_INTEGER ) { if ( ( int ) e . Value == CODE_INTEGER ) e . CellStyle . BackColor = Color . Blue ; if ( ( int ) e . Value == CODE_INTEGER ) e . CellStyle . BackColor = Color . Red ; } } <EOF>
public bool CreateCustomer ( string [ ] data , out Customer customer ) { customer = new Customer ( ) ; var context = new ValidationContext ( customer , serviceProvider : null , items : null ) ; var results = new List < ValidationResult > ( ) ; return Validator . TryValidateObject ( customer , context , results , true ) ; } <EOF>
var list = my_query . ToList ( ) ; foreach ( Zoo z in list ) . . . <EOF>
string [ ] filesPath = Directory . GetFiles ( Server . MapPath ( CODE_STRING ) ) ; foreach ( string fileName in filesPath ) { string file = Path . GetFileName ( fileName ) ; Panel1 . Controls . Add ( new LiteralControl ( CODE_STRING ) ) ; HyperLink hl = new HyperLink ( ) ; hl . Text = file ; hl . ID = file ; hl . Target = CODE_STRING ; hl . NavigateUrl = CODE_STRING + file ; Panel1 . Controls . Add ( hl ) ; Panel1 . Controls . Add ( new LiteralControl ( CODE_STRING ) ) ; } <EOF>
using System . Reflection ; using System . Windows . Forms ; bool addScrollListener ( DataGridView dgv ) { bool ret = false ; Type t = dgv . GetType ( ) ; PropertyInfo pi = t . GetProperty ( CODE_STRING , BindingFlags . Instance | BindingFlags . NonPublic ) ; ScrollBar s = null ; if ( pi != null ) s = pi . GetValue ( dgv , null ) as ScrollBar ; if ( s != null ) { s . Scroll += new ScrollEventHandler ( s_Scroll ) ; ret = true ; } return ret ; } void s_Scroll ( object sender , ScrollEventArgs e ) { } <EOF>
dgProperties tempItems = ( ( DataGrid ) sender ) . SelectedItem as dgProperties ; <EOF>
Enum . GetNames ( typeof ( SomeEnum ) ) . Length ; <EOF>
this . ListView1 . DataBind ( ) ; StringWriter sw = new StringWriter ( ) ; HtmlTextWriter hw = new HtmlTextWriter ( sw ) ; ListView1 . RenderControl ( hw ) ; string ListViewHTML = sw . ToString ( ) . Replace ( CODE_STRING , CODE_STRING ) . Replace ( System . Environment . NewLine , CODE_STRING ) ; StringBuilder sb = new StringBuilder ( ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; sb . Append ( ListViewHTML ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; sb . Append ( CODE_STRING ) ; ClientScript . RegisterStartupScript ( this . GetType ( ) , CODE_STRING , sb . ToString ( ) ) ; this . ListView1 . DataBind ( ) ; <EOF>
public async static Task < List < String > > TagMonatJahr ( ) { string var1 = String . Empty ; string var2 = String . Empty ; return new List < String > { var1 , var2 } ; } <EOF>
public partial class MainWindow : Window { NewWindow optionsWindow = new NewWindow ( ) ; public MainWindow ( ) { InitializeComponent ( ) ; optionsWindow . button1 . Click += new RoutedEventHandler ( button1_Click ) ; optionsWindow . Show ( ) ; } void button1_Click ( object sender , RoutedEventArgs e ) { double d = Convert . ToDouble ( optionsWindow . textBox1 . GetLineText ( CODE_INTEGER ) ) ; } } <EOF>
var stringToMatch = Regex . Escape ( CODE_STRING ) ; var lines = sb . ToString ( ) ; var regex = new Regex ( string . Format ( CODE_STRING , stringToMatch ) , RegexOptions . Multiline ) ; string result = regex . Replace ( lines , CODE_STRING ) ; <EOF>
Player selected_player = from pl in players where pl . Name == label6 . Text select pl ; <EOF>
public sealed class YourSingleton { private static readonly YourSingleton instance = new YourSingleton ( ) ; static YourSingleton ( ) { } private YourSingleton ( ) { } public static YourSingleton Instance { get { return instance ; } } } <EOF>
mail . BodyEncoding = System . Text . Encoding . UTF8 ; <EOF>
if ( ( Text1 . Text == xn [ CODE_STRING ] . InnerText ) && ( Text2 . Text == xn [ CODE_STRING ] . InnerText ) ) { status . Text = CODE_STRING ; } <EOF>
static { } <EOF>
Debugger . IsAttached <EOF>
File . Replace ( ) <EOF>
string data = CODE_STRING ; List < string > delimiters = new List < string > ( ) ; delimiters . Add ( CODE_STRING ) ; delimiters . Add ( CODE_STRING ) ; string [ ] parts = data . Split ( delimiters . ToArray ( ) , StringSplitOptions . RemoveEmptyEntries ) ; foreach ( string item in parts ) { Console . WriteLine ( item ) ; } <EOF>
col . NextSibling . InnerText <EOF>
IEnumerable < XElement > mping = ( from mpings in mpingXML . Elements ( CODE_STRING ) where mpings . Element ( CODE_STRING ) . Value . Equals ( sourceURL , StringComparison . InvariantCultureIgnoreCase ) && ( mpings . Attribute ( CODE_STRING ) . Value . Equals ( locale , StringComparison . InvariantCultureIgnoreCase ) || mpings . Attribute ( CODE_STRING ) . Value . Equals ( CODE_STRING , StringComparison . InvariantCultureIgnoreCase ) ) select mpings ) ; <EOF>
if ( comboBox1 . SelectedItem != null ) { int x = int . Parse ( comboBox1 . SelectedItem . ToString ( ) ) ; } else { <EOF>
Assert . AreEqual ( CODE_INTEGER , ( int ) Command . None ) ; <EOF>
[ DllImport ( CODE_STRING ) ] [ return : MarshalAs ( UnmanagedType . Bool ) ] static extern bool SetForegroundWindow ( IntPtr hWnd ) ; <EOF>
var p = new Popup ( ) ; p . Child = new MyUserControl ( ) ; p . IsOpen = true ; <EOF>
public ActionResult GetPartial ( ) { var viewStr = RenderPartialToString ( CODE_STRING , new object ( ) ) return content ( viewStr ) ; } public string RenderRazorViewToString ( string viewName , object model ) { ViewData . Model = model ; using ( var sw = new StringWriter ( ) ) { var viewResult = ViewEngines . Engines . FindPartialView ( ControllerContext , viewName ) ; var viewContext = new ViewContext ( ControllerContext , viewResult . View , ViewData , TempData , sw ) ; viewResult . View . Render ( viewContext , sw ) ; viewResult . ViewEngine . ReleaseView ( ControllerContext , viewResult . View ) ; return sw . GetStringBuilder ( ) . ToString ( ) ; } <EOF>
public Dictionary < string , string > GetEmployeesAllLevels ( int managerId ) { return GetEmployeesAllLevels ( managerId , null ) ; } private Dictionary < string , string > GetEmployeesAllLevels ( int managerId , Dictionary < string , string > existingList ) { if ( existingList == null ) existingList = new Dictionary < string , string > ( ) ; var lstSelectedEmployees1 = lstAllUser . Where ( emp = > emp . ManagerId == managerId ) . Select ( emp = > new { EmployeeName = emp . UserDetail . Name , ManagerName = emp . Manager . UserDetail . Name , UserId = emp . UserId } ) . ToList ( ) ; foreach ( var emp in lstSelectedEmployees1 ) { existingList . Add ( emp . EmployeeName , emp . ManagerName ) ; existingList = GetEmployeesAllLevels ( emp . UserId , existingList ) ; } return existingList ; } <EOF>
[ a - zA - Z ] { CODE_INTEGER , CODE_INTEGER } \ d + <EOF>
string myConnectionString = ConfigurationManager . ConnectionStrings [ CODE_STRING ] . ConnectionString ; <EOF>
textBox1 . Text = ( dataGridView1 . Rows . Cast < DataGridViewRow > ( ) . Where ( r = > Convert . ToBoolean ( r . Cells [ CODE_INTEGER ] . Value ) . Equals ( true ) ) . Sum ( t = > Convert . ToInt32 ( t . Cells [ CODE_INTEGER ] . Value ) ) ) . ToString ( ) ; <EOF>
Action < object , MouseButtonEventArgs > myEventMethod = ( sender , e ) = > _map_MouseLeftButtonUp2 ( sender , e , showResultsWindow ) ; _map . MouseLeftButtonUp += myEventMethod ; _map . MouseLeftButtonUp -= myEventMethod ; <EOF>
DropDownList ddl = ( DropDownList ) ContentPlaceHolderID . FindControl ( CODE_STRING ) ; ddl . Visible = false ; <EOF>
String SchooID = getNewID ( ) ; Schools schl = new Schools ( ) ; schl . school_reference = SchooID ; schl . school_name = CODE_STRING ; schl . StudentReference . Value = cecbContext . Students . First ( i = > i . stud_name == CODE_STRING ) ; cecbContext . AddToSchools ( schl ) ; cecbContext . SaveChanges ( ) ; <EOF>
using System . IO ; using System . Reflection ; using OfficeOpenXml ; Stream stream = Assembly . GetExecutingAssembly ( ) . GetManifestResourceStream ( CODE_STRING ) ; ExcelPackage pck = new OfficeOpenXml . ExcelPackage ( stream ) ; <EOF>
MyControl control = ( MyControl ) Page . LoadControl ( CODE_STRING ) <EOF>
CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER and after this the CODE_INTEGER bytes of your actualy message comes <EOF>
const char s = ( ( char ) CODE_INTEGER ) ; <EOF>
string [ ] a = e . KeyData . ToString ( ) . Split ( CODE_CHAR ) ; <EOF>
var ctx = new TestContext ( ) ; var cmd = ctx . Database . Connection . CreateCommand ( ) as OracleCommand ; cmd . CommandType = CommandType . StoredProcedure ; cmd . CommandText = CODE_STRING ; var p_rc1 = new OracleParameter ( CODE_STRING , OracleDbType . RefCursor , ParameterDirection . Output ) ; var p_rc2 = new OracleParameter ( CODE_STRING , OracleDbType . RefCursor , ParameterDirection . Output ) ; cmd . Parameters . Add ( p_rc1 ) ; cmd . Parameters . Add ( p_rc2 ) ; if ( ctx . Database . Connection . State != ConnectionState . Open ) ctx . Database . Connection . Open ( ) ; var reader = cmd . ExecuteReader ( ) ; <EOF>
var sb = new StringBuilder ( ) ; sb . Append ( r ) ; sb . Append ( g ) ; sb . Append ( b ) ; string result = sb . ToString ( ) ; <EOF>
return AuditItems . OrderBy ( ai = > ai . DateOfAction ) . Last ( ) <EOF>
ApplicationData . Current . LocalSettings <EOF>
AddTextFrame ( ) <EOF>
var closed = new HashSet < Node > ( ) ; var queue = new PriorityQueue < double , Path < Node > > ( ) ; queue . Enqueue ( CODE_INTEGER , new Path < Node > ( start ) ) ; while ( ! queue . IsEmpty ) { var path = queue . Dequeue ( ) ; if ( closed . Contains ( path . LastStep ) ) continue ; if ( path . LastStep . Equals ( destination ) ) return path ; closed . Add ( path . LastStep ) ; foreach ( Node n in path . LastStep . Neighbours ) { double d = distance ( path . LastStep , n ) ; var newPath = path . AddStep ( n , d ) ; queue . Enqueue ( newPath . TotalCost + estimate ( n ) , newPath ) ; } } <EOF>
if ( e . Row . RowType == DataControlRowType . Header ) { e . Row . Cells [ CODE_INTEGER ] . Text = CODE_STRING ; e . Row . Cells [ CODE_INTEGER ] . Text = CODE_STRING ; . . . . . } <EOF>
List < ReportPermissions > finalizedItems = new List < ReportPermissions > ( ) ; foreach ( ReportPermissions rp in l ) { if ( ! finalizedItems . Any ( x = > x . CwsId == rp . CwsId ) ) { ReportPermissions perm = new ReportPermissions ( ) ; perm . CwsId = rp . CwsId ; perm . Reports = string . Join ( CODE_STRING , l . Where ( x = > x . CwsId == rp . CwsId ) . Select ( x = > x . Reports ) . Distinct ( ) ) ; perm . Regions = string . Join ( CODE_STRING , l . Where ( x = > x . CwsId == rp . CwsId ) . Select ( x = > x . Regions ) . Distinct ( ) ) ; finalizedItems . Add ( perm ) ; } } l = finalizedItems ; <EOF>
var aa = ( CODE_STRING & Environment . NewLine & CODE_STRING & Environment . NewLine & CODE_STRING ) . Split ( New String [ ] { Environment . NewLine } , StringSplitOptions . RemoveEmptyEntries ) ; <EOF>
documentButtons = new RadioButton [ CODE_INTEGER ] ; int i = CODE_INTEGER ; while ( i <= CODE_INTEGER && reader . Read ( ) ) { documentButtons [ i ] = new RadioButton ( ) ; documentButtons [ i ] . Text = reader [ CODE_STRING ] . ToString ( ) + CODE_STRING + ( i + CODE_INTEGER ) ; Console . WriteLine ( reader [ CODE_STRING ] . ToString ( ) ) ; documentButtons [ i ] . Location = new System . Drawing . Point ( CODE_INTEGER , CODE_INTEGER + i * CODE_INTEGER ) ; this . Controls . Add ( documentButtons [ i ] ) ; ++ i ; } <EOF>
BrowserControl . LoadCompleted += Browser_LoadCompleted ; private void Browser_LoadCompleted ( object sender , NavigationEventArgs e ) { string myhtml = BrowserControl . SaveToString ( ) ; string mataTag = CODE_STRING ; myhtml = html . Insert ( html . IndexOf ( CODE_STRING , CODE_INTEGER ) + CODE_INTEGER , mataTag ) ; BrowserControl . NavigateToString ( html ) ; BrowserControl . LoadCompleted -= Browser_LoadCompleted ; } <EOF>
[ System . Xml . Serialization . XmlRoot ( ElementName = CODE_STRING ) ] public class Table { [ System . Xml . Serialization . XmlElement ( CODE_STRING ) ] public Row [ ] Rows ; } public class Row { public string V ; } <EOF>
{ SqlConnection myConn = new SqlConnection ( CODE_STRING ) ; try { myConn . Open ( ) ; Console . WriteLine ( myConn ) ; } catch ( System . Exception ) { } finally { if ( myConn . State == ConnectionState . Open ) { myConn . Close ( ) ; } myConn . Dispose ( ) ; } } <EOF>
FormsAuthentication . SetAuthCookie ( username , false ) ; FormsAuthentication . SignOut ( ) ; <EOF>
Clipboard . SetImage ( Image . FromFile ( CODE_STRING ) ; richTextBox1 . Paste ( ) ; <EOF>
DataSet reportData = new DataSet ( ) ; reportData . ReadXml ( Server . MapPath ( CODE_STRING ) ) ; SqlConnection connection = new SqlConnection ( CODE_STRING ) ; SqlBulkCopy sbc = new SqlBulkCopy ( connection ) ; sbc . DestinationTableName = CODE_STRING ; <EOF>
string _time = RadDateInput1 . SelectedDate . Value . ToShortTimeString ( ) ; <EOF>
DateTime dateFrom = new Date ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; var GroupedPrices = Prices . Where ( p = > p . ArrivalDateFrom <= dateFrom && p . ArrivalDateTo > dateFrom ) . GroupBy ( p = > p . ItemID ) . Select ( g = > new { ItemId = g . Key , NewestPrice = g . OrderByDescending ( p = > p . ValidFrom ) . First ( ) } ) ; <EOF>
Microsoft . Office . Interop . Word . Application oWord = new Microsoft . Office . Interop . Word . Application ( ) ; Microsoft . Office . Interop . Word . Document oWordDoc = new Microsoft . Office . Interop . Word . Document ( ) ; Object oMissing = System . Reflection . Missing . Value ; oWord . Visible = true ; oWord . Activate ( ) ; oWord . Dialogs [ WdWordDialog . wdDialogFileNew ] . Show ( oMissing ) ; <EOF>
public LoginResult Login ( [ XmlElement ( Namespace = CODE_STRING ) ] string user , [ XmlElement ( Namespace = CODE_STRING ) ] string password , [ XmlElement ( Namespace = CODE_STRING ) ] string client , [ XmlElement ( Namespace = CODE_STRING ) ] string language ) { return new LoginResult ( ) { ResultCode = CODE_INTEGER , SessionId = user + CODE_STRING + password + CODE_STRING + client + CODE_STRING + language } ; } <EOF>
tableLayoutPanel1 . SuspendLayout ( ) ; tableLayoutPanel1 . RowCount ++ ; tableLayoutPanel1 . RowStyles . Insert ( tableLayoutPanel1 . RowCount - CODE_INTEGER , new RowStyle ( SizeType . AutoSize ) ) ; tableLayoutPanel1 . SetRow ( btnAdd , tableLayoutPanel1 . RowCount - CODE_INTEGER ) ; var control = CreateControl ( ) ; tableLayoutPanel1 . Controls . Add ( control , CODE_INTEGER , tableLayoutPanel1 . RowCount - CODE_INTEGER ) ; tableLayoutPanel1 . ResumeLayout ( ) ; <EOF>
{ if ( dg . selectedItem != null ) { if ( txt . text . length != CODE_INTEGER ) { txt . text = txt . text + CODE_STRING ; } txt . text = txt . text + dg . selectedItem . text ; } } <EOF>
[ DllImport ( CODE_STRING ) ] public static extern bool SetConsoleMode ( IntPtr hConsoleHandle , uint dwMode ) ; private const uint ENABLE_EXTENDED_FLAGS = CODE_INTEGER ; static void Main ( string [ ] args ) { IntPtr handle = Process . GetCurrentProcess ( ) . MainWindowHandle ; SetConsoleMode ( handle , ENABLE_EXTENDED_FLAGS ) ; <EOF>
class UniqueQueue < T > { private readonly Queue < T > queue = new Queue < T > ( ) ; private HashSet < T > alreadyAdded = new HashSet < T > ( ) ; public virtual void Enqueue ( T item ) { if ( alreadyAdded . Add ( item ) ) { queue . Enqueue ( item ) ; } } public int Count { get { return queue . Count ; } } public virtual T Dequeue ( ) { T item = queue . Dequeue ( ) ; return item ; } } <EOF>
appGUID : \ s * ( ? < value > wx | null ) \ s <EOF>
using ( MemoryStream ms = new MemoryStream ( ) ) { bitmap . Save ( ms ) ; writer . Write ( ms . Length ) ; ms . Position = CODE_INTEGER ; ms . CopyTo ( writer . BaseStream ) ; } <EOF>
If Not Request . IsSecureConnection ' Whatever End If <EOF>
const string OfficeCommonKey = CODE_STRING ; const string OfficeThemeValueName = CODE_STRING ; const int ThemeBlue = CODE_INTEGER ; const int ThemeSilver = CODE_INTEGER ; const int ThemeBlack = CODE_INTEGER ; using ( RegistryKey key = Registry . CurrentUser . OpenSubKey ( OfficeCommonKey , true ) ) { int theme = ( int ) key . GetValue ( OfficeThemeValueName , CODE_INTEGER ) ; switch ( theme ) { case ThemeBlue : break ; case ThemeSilver : break ; case ThemeBlack : break ; default : break ; } } <EOF>
string [ ] output = Regex . Split ( input , CODE_STRING ) . Select ( x = > x . Replace ( CODE_STRING , CODE_STRING ) ) . ToArray ( ) ; <EOF>
DataRow dr = ( DataGridView1 . SelectedRows [ CODE_INTEGER ] . DataBoundItem as DataRowView ) . Row ; <EOF>
double ? name { get ; set ; } <EOF>
private void Form_Load ( object sender , EventArgs e ) { if ( Properties . Settings . Default . SettingName != CODE_STRING ) { TextBox1 . text = Properties . Settings . Default . SettingName ; } } private void Form_FormClosing ( object sender , FormClosingEventArgs e ) { Properties . Settings . Default . SettingName = } <EOF>
string [ ] mystrings = test . Split ( new [ ] { CODE_STRING } , StringSplitOptions . RemoveEmptyEntries ) ; <EOF>
class User - name - picture - other properties class Profile - User myAccountInfo - List < User > friends <EOF>
var request = new RestSharp . RestRequest ( ) ; var locations = new Dictionary < string , object > ( ) ; locations . Add ( CODE_STRING , CODE_INTEGER ) ; locations . Add ( CODE_STRING , CODE_INTEGER ) ; locations . Add ( CODE_STRING , CODE_INTEGER ) ; JsonObject o = new JsonObject ( ) ; foreach ( var kvp in locations ) { o . Add ( kvp ) ; } JsonArray arr = new JsonArray ( ) ; arr . Add ( o ) ; request . AddParameter ( CODE_STRING , arr . ToString ( ) ) ; request . AddParameter ( CODE_STRING , CODE_INTEGER ) ; <EOF>
public UserHub ( ) { Connections . Instance . OnPurge += ConnectionsUpdate } <EOF>
delegate void myDelegate ( ref Label lb , string toAdd ) ; private void UpdateLabel ( ref Label lb , string toAdd ) { if ( this . InvokeRequired ) { this . Invoke ( new myDelegate ( UpdateLabel ) , new object [ ] { lb , toAdd } ) ; } else { lb . Text = toAdd ; } } <EOF>
private void ContextMenuSendBackward_Click ( object sender , RoutedEventArgs e ) { Canvas parent = ( Canvas ) LogicalTreeHelper . GetParent ( this ) ; foreach ( var child in parent . Children ) { Canvas . SetZIndex ( ( UIElement ) child , CODE_INTEGER ) ; } Canvas . SetZIndex ( selected , CODE_INTEGER ) ; } <EOF>
string test = CODE_STRING ; Regex match = new Regex ( CODE_STRING ) ; int count = CODE_INTEGER ; string result = match . Replace ( test , delegate ( Match t ) { return CODE_STRING + count ++ . ToString ( ) ; } ) ; <EOF>
\ ( ( [ ^ ) ] + ) \ ) <EOF>
List < event > listOfEvents = ( from eachEvent in eventsFromArgus select new Event ( ReaderName = eachEvent . DeviceName , EventCode = eachEvent . EventCode , EventReceivedTime = eachEvent . ReceiveTime . ToString ( ) , EventOriginTime = eachEvent . OriginTime . ToString ( ) , CardNumber = eachEvent . CredentialIdentifier ) ) . ToList ( ) ; <EOF>
mutool extract C : \ mypdf . pdf <EOF>
try { HttpContext context = HttpContext . Current ; context . Response . Clear ( ) ; context . Response . Write ( CODE_STRING ) ; dts . WriteXml ( context . Response . OutputStream , System . Data . XmlWriteMode . IgnoreSchema ) ; context . Response . ContentType = CODE_STRING ; context . Response . AppendHeader ( CODE_STRING , CODE_STRING + Filename + CODE_STRING ) ; context . Response . End ( ) ; } <EOF>
string str = comboBox_stockDates . SelectedItem . ToString ( ) ; DateTime date = DateTime . ParseExact ( str , CODE_STRING , CultureInfo . GetCultureInfo ( CODE_STRING ) ) ; string dtFilter = string . Format ( CODE_STRING , date . ToString ( CODE_STRING ) ) ; ( dataGridView_flaggedComments . DataSource as DataTable ) . DefaultView . RowFilter = dtFilter ; <EOF>
private void addImages_Click ( object sender , RoutedEventArgs e ) { ImageList . Items . Clear ( ) ; RefreshList ( ) ; FileInfo Images ; string [ ] filenames = null ; System . Windows . Forms . FolderBrowserDialog folderDlg = new System . Windows . Forms . FolderBrowserDialog ( ) ; folderDlg . ShowNewFolderButton = true ; System . Windows . Forms . DialogResult result = folderDlg . ShowDialog ( ) ; if ( result == System . Windows . Forms . DialogResult . OK ) { filenames = System . IO . Directory . GetFiles ( folderDlg . SelectedPath ) ; foreach ( string image in filenames ) { Images = new FileInfo ( image ) ; if ( new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } . Contains ( Images . Extension . ToLower ( ) ) ) { ImageList . Items . Add ( new LoadImages ( new BitmapImage ( new Uri ( image ) ) ) ) ; } } } RefreshList ( ) ; } private void RefreshList ( ) { ImageList . Refresh ( ) ; } <EOF>
strConnectionString = CODE_STRING + CODE_STRING + strFilePath + CODE_STRING ; <EOF>
int i = CODE_INTEGER ; string s = CODE_STRING ; var s = s + i . ToString ( CODE_STRING ) ; <EOF>
var response = await client . GetAsync ( CODE_STRING ) ; <EOF>
List < string > [ ] array_of_lists = new List < string > [ CODE_INTEGER ] ; for ( int i = CODE_INTEGER ; i < array_of_lists . Length ; i ++ ) { array_of_lists [ i ] = new List < string > ( ) ; array_of_lists [ i ] . Add ( CODE_STRING ) ; array_of_lists [ i ] . Add ( CODE_STRING ) ; array_of_lists [ i ] . Add ( CODE_STRING ) ; } <EOF>
Class A { B b ; } Class B { } <EOF>
public Window4 ( ) { InitializeComponent ( ) ; this . Closing += new System . ComponentModel . CancelEventHandler ( Window4_Closing ) ; } void Window4_Closing ( object sender , System . ComponentModel . CancelEventArgs e ) { e . Cancel = true ; } <EOF>
private void CheckBox1_Checked ( object sender , RoutedEventArgs e ) { var checkBox = ( CheckBox ) sender ; \ var data = ( Your class ) checkBox . DataContext ; var id = data . id ; } <EOF>
static void Main ( string [ ] args ) { try { Utils . SetConfigFile ( ) ; ServiceBase [ ] ServicesToRun ; ServicesToRun = new ServiceBase [ ] { new TaoTimer ( ) } ; ServiceBase . Run ( ServicesToRun ) ; } catch ( Exception ex ) { EventLog . WriteEntry ( CODE_STRING , ex . ToString ( ) , EventLogEntryType . Error ) ; } } public partial class TaoTimer : ServiceBase { . . . protected override void OnStart ( string [ ] args ) { SetTimerList ( ) ; EventLog . WriteEntry ( CODE_STRING ) ; } . . . . } <EOF>
[ Test ] public void DirctoryResult_Returns_Groups ( ) { var service = autoMocker . Get < IGroupService > ( ) ; service . Expect ( srv = > srv . GetGroupsByQuery ( Arg < string > . Is . Anything ) ) . Return ( new List < CompanyGroupInfo > { new CompanyGroupInfo ( ) , new CompanyGroupInfo ( ) , new CompanyGroupInfo ( ) } ) ; service . Replay ( ) ; var directoryResult = _controller . DirectoryResult ( CODE_STRING ) ; var fundDirectoryViewModel = ( FundDirectoryViewModel ) directoryResult . ViewData . Model ; Assert . That ( fundDirectoryViewModel . Groups . Count , Is . EqualTo ( CODE_INTEGER ) ) ; service . AssertWasCalled ( srv = > srv . GetGroupsByQuery ( Arg < string > . Is . Equal ( CODE_STRING ) ) ) ; } <EOF>
SqlDataSource source = new SqlDataSource ( connectionString : ) ; source . SelectCommand = String . Format ( CODE_STRING selectedTable ) source . DataBind ( ) ; <EOF>
string s = int . Parse ( CODE_STRING ) . ToString ( CODE_STRING ) ; <EOF>
lbl . Text = Server . HtmlEncode ( CODE_STRING ) ; <EOF>
if ( Gls . TType . Name == t . Name ) selectIndex ++ ; else selectIndex = CODE_INTEGER ; <EOF>
protected override bool ProcessCmdKey ( ref Message msg , Keys keyData ) { if ( this . ActiveControl == toolStripTextBox1 . Control && keyData == ( Keys . Alt | Keys . Left ) ) { MessageBox . Show ( CODE_STRING ) ; return true ; } return base . ProcessCmdKey ( ref msg , keyData ) ; } <EOF>
WqlEventQuery wQuery = new WqlEventQuery ( CODE_STRING ) ; using ( ManagementEventWatcher wWatcher = new ManagementEventWatcher ( scope , wQuery ) ) { bool stopped = false ; while ( stopped == false ) { using ( ManagementBaseObject MBOobj = wWatcher . WaitForNextEvent ( ) ) { if ( ( ( ManagementBaseObject ) MBOobj [ CODE_STRING ] ) [ CODE_STRING ] . ToString ( ) == ProcID ) { stopped = true ; } } } wWatcher . Stop ( ) ; } <EOF>
private void ListView1_Validating ( object sender , System . ComponentModel . CancelEventArgs e ) { if ( UserDoesntWantToSave ) { e . Cancel = true ; } } <EOF>
using System ; using System . Collections . Generic ; using System . Linq ; static class Program { static void Main ( ) { Func < long , long , long , IEnumerable < long > > fib = null ; fib = ( n , m , cap ) = > n + m > cap ? Enumerable . Empty < long > ( ) : Enumerable . Repeat ( n + m , CODE_INTEGER ) . Concat ( fib ( m , n + m , cap ) ) ; var list = fib ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) . ToList ( ) ; } } <EOF>
[ STAThread ] static void Main ( ) { Application . EnableVisualStyles ( ) ; Application . SetCompatibleTextRenderingDefault ( false ) ; var main = new Form1 ( ) ; main . FormClosed += new FormClosedEventHandler ( FormClosed ) ; main . Show ( ) ; Application . Run ( ) ; } static void FormClosed ( object sender , FormClosedEventArgs e ) { ( ( Form ) sender ) . FormClosed -= FormClosed ; if ( Application . OpenForms . Count == CODE_INTEGER ) Application . ExitThread ( ) ; else Application . OpenForms [ CODE_INTEGER ] . FormClosed += FormClosed ; } <EOF>
public MainWindow ( ) { InitializeComponent ( ) ; myEllipse . AddHandler ( UIElement . MouseDownEvent , new RoutedEventHandler ( OnMouseDown ) ) ; myPanel . AddHandler ( UIElement . MouseDownEvent , new RoutedEventHandler ( OnMouseDown ) ) ; myBorder . AddHandler ( UIElement . MouseDownEvent , new RoutedEventHandler ( OnMouseDown ) ) ; } void OnMouseDown ( object sender , RoutedEventArgs e ) { UIElement uiElement = sender as UIElement ; Debug . WriteLine ( uiElement . GetType ( ) . ToString ( ) ) ; e . Handled = true ; } <EOF>
NotesDatabase . getProfileDocument ( ) <EOF>
/// <summary> /// This is a dummy constructor - it is just here to prevent classes in other assemblies /// from being derived from this class. /// See http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=2971840&SiteID=1 /// </summary> internal MhlAdminLayer ( ) { } <EOF>
c = Xn . ChildNodes [ CODE_INTEGER ] . InnerText ; <EOF>
var query = ( from pd in context . Report where pd . ReportDate . Month == CODE_INTEGER && pd . ReportDate . Year == CODE_INTEGER && pd . UserID == CODE_INTEGER select pd ) . ToList ( ) var result = new { Cost = query . Sum ( pd = > pd . Cost ) , RevenueUSD = query . Sum ( pd = > pd . Revenue ) } ; <EOF>
pea . Graphics . InterpolationMode = InterpolationMode . NearestNeighbor ; pea . Graphics . PixelOffsetMode = PixelOffsetMode . None ; <EOF>
public IList SomeMethod ( Type t ) { Type listType = typeof ( List < > ) ; listType = listType . MakeGenericType ( new Type [ ] { t } ) ; return ( IList ) Activator . CreateInstance ( listType ) ; } <EOF>
UpdateLastActivity ( ) <EOF>
private List < ListINeed > GetListINeed ( Guid clientId ) { return someobject . SelectMany ( p = > p . subcollection ) . Select ( p = > p . subObject ) . ToList ( ) ; } <EOF>
using System ; using System . Collections . Generic ; using System . Linq ; public class Program { public static void Main ( ) { IList < int > l = new List < int > ( ) ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { l . Add ( i ) ; } var a = l . Take ( CODE_INTEGER ) ; var b = l . Skip ( CODE_INTEGER ) . Take ( CODE_INTEGER ) ; var c = l . Skip ( CODE_INTEGER ) ; System . Console . WriteLine ( CODE_STRING + a . Count ( ) ) ; System . Console . WriteLine ( CODE_STRING + b . Count ( ) ) ; System . Console . WriteLine ( CODE_STRING + c . Count ( ) ) ; } } <EOF>
public virtual AccessRequestQuestion AccessRequestQuestion { get ; set ; } <EOF>
DataRowView itemAtFourthIndex = combobox . Items [ CODE_INTEGER ] as DataRowView ; int id = - CODE_INTEGER ; if ( itemAtFourthIndex != null ) id = Convert . ToInt32 ( itemAtFourthIndex . Row [ CODE_STRING ] ) ; <EOF>
TextBox1 . Text = ListBox1 . Items . Count . ToString ( ) ; <EOF>
using ( IsolatedStorageFileStream fsIdea = new IsolatedStorageFileStream ( CODE_STRING , FileMode . Create , storage ) ) <EOF>
var comm = from u in my_bd . Comment . Include ( CODE_STRING ) . Include ( CODE_STRING ) where . . . . . . select u ; <EOF>
public Instrument ( ) : this ( DefaultName , DefaultCategory ) { } <EOF>
buttonHelp . ContextMenu . Placement = System . Windows . Controls . Primitives . PlacementMode . Bottom ; ContextMenuService . SetPlacement ( buttonHelp , System . Windows . Controls . Primitives . PlacementMode . Bottom ) ; <EOF>
public static bool IsWindowTopMost ( IntPtr Handle ) { return ( GetWindowLong ( Handle , GWL_EXSTYLE ) & WS_EX_TOPMOST ) != CODE_INTEGER ; } <EOF>
DirectoryInfo d = new DirectoryInfo ( CODE_STRING ) ; DirectorySecurity acl = d . GetAccessControl ( ) ; if ( acl . GetAccessRules ( false , true , typeof ( System . Security . Principal . SecurityIdentifier ) ) . Count > CODE_INTEGER ) else <EOF>
public bool UpdateUser ( User userToUpdate ) { using ( DBContext _context = new DBContext ( ) ) { try { User outUser = usersModel . Users . Single ( x = > x . UserId == userToUpdate . UserId ) ; outUser = userToUpdate ; _context . ApplyCurrentValues ( CODE_STRING , outUser ) ; _context . SaveChanges ( ) ; return true ; } catch ( Exception ex ) { return false ; } } } <EOF>
menuItemFolder . Click += ( sender , e ) = > YourMethod ( owner , dataType ) ; <EOF>
public string GetFindBooks ( string author = CODE_STRING , string title = CODE_STRING , string isbn = CODE_STRING , string somethingelse = CODE_STRING , DateTime ? date = null ) { } <EOF>
public class RecordsController : ApiController { public HttpResponseMessage Post ( Record record ) { var newId = _Records . Count + CODE_INTEGER ; record . ID = newId ; _Records . Add ( record ) ; var newMessage = new HttpResponseMessage < Record > ( record ) ; return newMessage ; } } <EOF>
output : CODE_STRING <EOF>
<EOF>
IEnumerable < SearchResult > Search ( string domain , string filter ) { DirectoryContext context = new DirectoryContext ( DirectoryContextType . Forest , domain ) ; Forest forest = Forest . GetForest ( context ) ; GlobalCatalog gc = null ; try { gc = forest . FindGlobalCatalog ( ) ; } catch ( ActiveDirectoryObjectNotFoundException ) { } if ( gc != null ) { DirectorySearcher searcher = gc . GetDirectorySearcher ( ) ; searcher . Filter = filter ; foreach ( SearchResult result in searcher . FindAll ( ) ) { yield return result ; } } else { foreach ( Domain d in forest . Domains ) { DirectorySearcher searcher = new DirectorySearcher ( d . GetDirectoryEntry ( ) , filter ) ; foreach ( SearchResult result in searcher . FindAll ( ) ) yield return result ; } } } <EOF>
var list = new List < dynamic > { new Func < int , int , int > ( X ) , new Func < int , int , string , string > ( Y ) } ; dynamic result = list [ CODE_INTEGER ] ( CODE_INTEGER , CODE_INTEGER ) ; dynamic result2 = list [ CODE_INTEGER ] ( CODE_INTEGER , CODE_INTEGER , CODE_STRING ) <EOF>
. . . bool candidatExists = false ; int idCandidat = int . Parse ( Session [ CODE_STRING ] . ToString ( ) ) ; while ( dr . Read ( ) ) { cv p3 = new cv ( ) ; p3 . Id_candidat = int . Parse ( dr [ CODE_INTEGER ] . ToString ( ) ) ; c . Add ( p3 ) ; if ( p3 . Id_candidat == idCandidat ) { candidatExists = true ; } } dr . Close ( ) ; con . Close ( ) ; Button1 . Enabled = ! candidatExists ; <EOF>
using System ; using System . Collections . Generic ; using System . IO ; using Newtonsoft . Json ; class Test { static void Main ( string [ ] args ) { var json = File . ReadAllText ( CODE_STRING ) ; var root = JsonConvert . DeserializeObject < Root > ( json ) ; Console . WriteLine ( root . Weather [ CODE_INTEGER ] . Description ) ; } } public class Root { public Coord Coord { get ; set ; } public List < Weather > Weather { get ; set ; } public int Visibility { get ; set ; } public string Name { get ; set ; } } public class Weather { public int Id { get ; set ; } public string Description { get ; set ; } } public class Coord { public double Lon { get ; set ; } public double Lat { get ; set ; } } <EOF>
using System . Net ; . . . public string GetHostName ( string ipAddress ) { try { IPHostEntry entry = Dns . GetHostEntry ( ipAddress ) ; if ( entry != null ) { return entry . HostName ; } } catch ( SocketException ex ) { } return null ; } <EOF>
Task . Factory . StartNew ( path = > Directory . Delete ( ( string ) path , true ) , fullPath ) ; <EOF>
protected void Page_Load ( object sender , EventArgs e ) { ViewState [ CODE_STRING ] = CODE_INTEGER ; } protected void Button1_Click ( object sender , EventArgs e ) { var autogen = Convert . ToInt32 ( ViewState [ CODE_STRING ] ) ; Label1 . Text = autogen . ToString ( ) ; ViewState [ CODE_STRING ] = autogen + CODE_INTEGER ; } <EOF>
System . Web . HttpUtility . HtmlEncode ( CODE_STRING ) <EOF>
ListBoxItem selected = listBox1 . SelectedItem as ListBoxItem ; MessageBox . Show ( selected . Content . ToString ( ) ) ; <EOF>
destinationProvider . Configuration . ConflictResolutionPolicy = ConflictResolutionPolicy . DestinationWins ; <EOF>
public override void OnAuthorization ( AuthorizationContext filterContext ) { if ( . . . subscriptionExpired . . . ) { filterContext . Cancel = true ; filterContext . Result = new RedirectResult ( CODE_STRING ) ; } } <EOF>
Application . Idle += Initialize ; Application . Run ( ) ; . . . private void Initialize ( object sender , EventArgs e ) { Application . Idle -= Initialize ; _hook = new KeyboardHook ( ) ; _hook . RegisterHotKey ( . . . ) ; } <EOF>
TestDataSetTableAdapters . CategoryTableAdapter ca = new TestDataSetTableAdapters . CategoryTableAdapter ( ) ; this . ds1 = new TestDataSet ( ) ; ca . Fill ( this . ds1 . Category ) ; <EOF>
[ WebMethod ] public static Student [ ] GetStudents ( ) { String connectionString = ConfigurationManager . ConnectionStrings [ CODE_STRING ] . ConnectionString ; using ( SqlConnection con = new SqlConnection ( connectionString ) ) using ( SqlCommand cmd = con . CreateCommand ( ) ) { cmd . CommandText = CODE_STRING ; con . Open ( ) ; List < Student > ret = new List < Student > ( ) ; using ( SqlDataReader rdr = cmd . ExecuteReader ( ) ) { while ( rdr . Read ( ) ) { ret . Add ( new Student ( ) { Name = rdr . GetString ( CODE_STRING ) , Address = rdr . GetString ( CODE_STRING ) , Sex = rdr . GetString ( CODE_STRING ) , Email = rdr . GetString ( CODE_STRING ) } ) ; } } return ret . ToArray ( ) ; } } <EOF>
foreach ( DataRow row in thisTable . Rows ) { string name = row . Item [ CODE_INTEGER ] . ToString ( ) ; if ( name [ name . Length - CODE_INTEGER ] == CODE_CHAR && name [ name . Length - CODE_INTEGER ] == CODE_CHAR ) continue ; string item = row . Item [ CODE_INTEGER ] . ToString ( ) ; int quantity = Convert . ToInt32 ( row . Item [ CODE_INTEGER ] ) ; string expression = CODE_STRING + name + CODE_STRING + item + CODE_STRING + quantity ; DataRow [ ] matchingRows = table . Select ( expression ) ; for ( int i = CODE_INTEGER ; i < matchingRows . Length ; i ++ ) matchingRows [ i ] [ CODE_STRING ] += CODE_STRING + i + CODE_STRING ; } <EOF>
public MemoryStream MergePdfForms ( List < byte [ ] > files ) { if ( files . Count > CODE_INTEGER ) { PdfReader pdfFile ; Document doc ; PdfWriter pCopy ; MemoryStream msOutput = new MemoryStream ( ) ; pdfFile = new PdfReader ( files [ CODE_INTEGER ] ) ; doc = new Document ( ) ; pCopy = new PdfSmartCopy ( doc , msOutput ) ; doc . Open ( ) ; for ( int k = CODE_INTEGER ; k < files . Count ; k ++ ) { pdfFile = new PdfReader ( files [ k ] ) ; for ( int i = CODE_INTEGER ; i < pdfFile . NumberOfPages + CODE_INTEGER ; i ++ ) { ( ( PdfSmartCopy ) pCopy ) . AddPage ( pCopy . GetImportedPage ( pdfFile , i ) ) ; } pCopy . FreeReader ( pdfFile ) ; } pdfFile . Close ( ) ; pCopy . Close ( ) ; doc . Close ( ) ; return msOutput ; } else if ( files . Count == CODE_INTEGER ) { return new MemoryStream ( files [ CODE_INTEGER ] ) ; } return null ; } <EOF>
string sql = CODE_STRING ; foreach ( DataRow dr in yourdatatable . Rows ) { sql += CODE_STRING + dr [ CODE_STRING ] + CODE_STRING ; } <EOF>
DispatcherTimer timer = new DispatcherTimer ( ) ; public void Start_timer ( ) { timer . Tick += timer_Tick ; timer . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; bool enabled = timer . IsEnabled ; timer . Start ( ) ; } void timer_Tick ( object sender , object e ) { this . Visibility = System . Windows . Visibility . Visible ; ( sender as DispatcherTimer ) . Stop ( ) ; } <EOF>
Vector3 vectorB ; vectorB . x = CODE_INTEGER ; Debug . Log ( CODE_STRING + vectorB ) ; <EOF>
var methods = Assembly . GetExecutingAssembly ( ) . GetTypes ( ) . SelectMany ( t = > t . GetMethods ( ) ) . Where ( m = > m . GetCustomAttributes ( typeof ( MyAttribute ) , true ) . Any ( ) && m . IsPublic && m . GetParameters ( ) . Length == CODE_INTEGER ) . ToList ( ) ; methods . ForEach ( m = > Debug . WriteLine ( m . Name ) ) ; <EOF>
Regex r = new Regex ( CODE_STRING , RegexOptions . SingleLine ) ; <EOF>
JsonReader jsonReader = new JsonTextReader ( new StringReader ( json ) ) { DateParseHandling = DateParseHandling . None } ; dynamic jsonObj = JObject . Load ( jsonReader ) ; <EOF>
private void listBox_DrawItem ( object sender , DrawItemEventArgs e ) { e . DrawBackground ( ) ; Graphics yourObj = e . Graphics ; yourObj . FillRectangle ( new SolidBrush ( Color . Red ) , e . Bounds ) ; e . DrawFocusRectangle ( ) ; } <EOF>
s = filePath + CODE_STRING ; newS = targetFullPath2 + CODE_STRING ; File . Copy ( s , newS + CODE_STRING , true ) ; dtFileCreation = File . GetCreationTime ( s ) ; File . SetCreationTime ( newS + CODE_STRING , dtFileCreation ) ; File . Move ( newS + CODE_STRING , newS ) ; <EOF>
contiguousLines . Add ( new List < line > ( ) ) ; contiguousLines [ columnNum ] . Add ( freeLines [ CODE_INTEGER ] ) ; <EOF>
public interface IWpManagerFactory { WpManager BuildWpManager ( ) ; } public sealed class Tests { public void Test ( ) { var manager = new Mock < WpManager > ( ) ; var factory = new Mock < IWpManagerFactory > ( ) ; factory . Setup ( f = > f . BuildWpManager ( ) ) . Returns ( manager . Object ) ; } } <EOF>
var textBox = new TextBox ( ) ; var transformGroup = new TransformGroup ( ) { Children = new TransformCollection ( ) { new MatrixTransform ( ) , new TransformGroup { Children = new TransformCollection ( ) { new ScaleTransform ( ) , new RotateTransform ( ) , new TranslateTransform ( ) } } } } ; textBox . RenderTransform = transformGroup ; <EOF>
ilmerge / target : library / out : YourLib . dll ClassLibrary1 . dll ClassLibrary2 . dll <EOF>
var vowels = new char [ ] { CODE_CHAR , CODE_CHAR , CODE_CHAR , CODE_CHAR , CODE_CHAR } ; var vowelCount = rtbText . Text . Count ( c = > vowels . Contains ( c ) ) ; var characterCount = rtbText . Text . Length ; toolStripStatusLabel1 . Text = characterCount + CODE_STRING + vowelCount + CODE_STRING ; <EOF>
if ( ! Page . IsPostBack ) { } <EOF>
CODE_STRING . Split ( new char [ ] { CODE_CHAR } , CODE_INTEGER ) <EOF>
Uri uri = new Uri ( AppDomain . CurrentDomain . BaseDirectory + CODE_STRING ) ; <EOF>
var q = _ctx . DBList . Where ( x = > x . AGuidID == paramID ) . Where ( x = > x . BBoolVal == false ) var myList = q . ToList ( ) ; <EOF>
foreach ( var str in usedCSS ) { if ( CSS . Any ( x = > x . StartsWith ( str ) ) Response . Write ( str ) ; else Response . Write ( CODE_STRING + x + CODE_STRING ) ; } <EOF>
int main ( void ) { return CODE_INTEGER ; } <EOF>
internal void UpdateMedia ( int mediaID , int [ ] catagoryIDs ) { using ( Data . EFEntities context = new Data . EFEntities ( ) ) { Data . Media media = context . Media . Single ( m = > m . MediaID == mediaID ) ; foreach ( var category in context . Category . Where ( cat = > catagoryIDs . Contains ( cat . CategoryID ) ) { media . Categories . Add ( category ) ; } context . SaveChanges ( ) ; } } <EOF>
ProcessStartInfo startInfo = new ProcessStartInfo ( ) ; startInfo . CreateNoWindow = false ; startInfo . UseShellExecute = false ; startInfo . FileName = CODE_STRING ; startInfo . WindowStyle = ProcessWindowStyle . Hidden ; startInfo . Arguments = CODE_STRING ; using ( Process exeProcess = Process . Start ( startInfo ) ) { exeProcess . WaitForExit ( ) ; } <EOF>
processInstaller . Account = ServiceAccount . User ; processInstaller . User = " domain \ username " ; processInstaller . Password = CODE_STRING ; <EOF>
encodedIcon = encodedIcon . Replace ( CODE_STRING , CODE_STRING ) ; if ( encodedIcon . Length % CODE_INTEGER != CODE_INTEGER ) encodedIcon += new string ( CODE_CHAR , CODE_INTEGER - encodedIcon . Length % CODE_INTEGER ) ; byte [ ] arr = System . Convert . FromBase64String ( encodedIcon ) ; <EOF>
string spaces = CODE_STRING ; spaces = Server . HtmlDecode ( spaces ) ; lt . Text = ItemName + CODE_STRING + barcode + CODE_STRING + price ; <EOF>
SqlQueryBuilder builder = new SqlQueryBuilder ( ( DbQuery ) query ) ; builder . BuildSQLEx ( CODE_STRING , CODE_STRING + loggedUser . id ) ; string sql = builder . Result . SQL ; <EOF>
var endResult = reviewList . OrderByDescending ( e = > e . Amount ) . GroupBy ( e = > e . Name ) . Select ( g = > g . First ( ) ) ; <EOF>
filterContext . Result = View ( someParameter ) ; <EOF>
if ( pinfo . CanWrite ) { try { pinfo . SetValue ( comp , pinfo . GetValue ( other , null ) , null ) ; } catch { } } <EOF>
string inputString = CODE_STRING ; string [ ] split = inputString . Split ( ) ; foreach ( string s in split ) { Console . Write ( s . Substring ( CODE_INTEGER , CODE_INTEGER ) ) ; } <EOF>
Assembly . GetExecutingAssembly ( ) . GetName ( ) . Version <EOF>
DateTime . TryParse ( CODE_INTEGER / CODE_INTEGER / CODE_INTEGER CODE_INTEGER : CODE_INTEGER : CODE_INTEGER PM , out registereddate ) ; strregdate = registereddate . ToString ( CODE_STRING ) ; <EOF>
var array = new BsonArray ( new [ ] { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ) ; var sortedArray = new BsonArray ( array . OrderBy ( v = > v . AsString ) ) ; foreach ( var v in sortedArray ) Console . WriteLine ( v ) ; <EOF>
for ( int i = CODE_INTEGER ; i < studentsWithNoGroupId . Count ; i ++ ) { if ( ( i % CODE_INTEGER ) == CODE_INTEGER ) groupid += CODE_INTEGER ; studentsWithNoGroupId . ElementAt ( i ) . groupId = groupid ; } <EOF>
if ( dt . HasValue ) { newDt = dt . Value . ToString ( CODE_STRING ) ; } <EOF>
private void Button1_Click ( object sender , EventArgs e ) { DoSomething ( ) ; } private void Sensex_Prediction_Form_Load ( object sender , EventArgs e ) { if ( Inovker == CODE_STRING ) { DoSomething ( ) ; } } private void DoSomething ( ) { . . . } <EOF>
var awGroups = from aw in _repository . GetAws ( ) group aw by aw . AwType . ID into newGroup select newGroup ; List < KeyValuePair < AwType , int > > RetGroups = new List < KeyValuePair < AwType , int > > ( ) ; foreach ( var group in awGroups ) { RetGroups . Add ( new KeyValuePair < AwType , int > ( group . First ( ) . AwType , group . Count ( ) ) ) ; } return RetGroups ; <EOF>
int rowIndex = dt . Rows . IndexOf ( dt . Select ( CODE_STRING ) [ CODE_INTEGER ] ) ; <EOF>
( | \ r | \ a | \ f ) ( \ s | \ d | \ . | \ ) ) * ? ( ? < id > ( Client | Customer | Role | Organi ( s | z ) ation | Vendor | Company | Employer ) ) ( \ s | \ S ) * ? ( ? = ( | \ r | \ a | \ f ) ( \ s | \ d | \ . ) * ? ( \ k ' id ' ) ) * ? <EOF>
class TaskItem , INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged ; internal void NotifyPropertyChanged ( String info ) { if ( PropertyChanged != null ) { PropertyChanged ( this , new PropertyChangedEventArgs ( info ) ) ; } } private string title ; public string Title { get { return title ; } set { if ( title == value ) return ; title = value ; NotifyPropertyChanged ( CODE_STRING ) ; } } public TaskItem ( string - title ) { title = _title ; } } <EOF>
" UPDATE PricePlan SET price = IIf ( PricePlanName = ' Guest ' , CODE_STRING , IIf ( PricePlanName = ' Member ' , CODE_STRING ) ) " <EOF>
e . Handled = true ; <EOF>
DateTime CusDate = dateTimePicker1 . Value ; string Date = CusDate . ToString ( CODE_STRING ) . ToUpper ( ) ; <EOF>
public void addCurriculumData ( String StoredProcName , Table table ) <EOF>
var doc = XDocument . Parse ( CODE_STRING ) ; var books = doc . Descendants ( CODE_STRING ) . Select ( bookElement = > new { Title = bookElement . Descendants ( CODE_STRING ) . Single ( ) . Value , Authors = bookElement . Descendants ( CODE_STRING ) . Where ( authorElement = > authorElement . Descendants ( CODE_STRING ) . Single ( ) . Value == CODE_STRING ) . Select ( authorElement = > authorElement . Descendants ( CODE_STRING ) . Single ( ) . Value ) } ) ; foreach ( var book in books ) { Console . WriteLine ( CODE_STRING + book . Title ) ; Console . WriteLine ( CODE_STRING + string . Join ( CODE_STRING , book . Authors ) ) ; } <EOF>
. Scrollable ( scr = > scr . Height ( CODE_INTEGER ) ) <EOF>
public void ConnectButtonPressed ( ) { var threadedTask = ( ) = > m_Model . Connect ( m_View . Hostname , m_View . Port ) ; threadedTask . BeginInvoke ( null , null ) ; } <EOF>
sb1 = new StringBuilder ( CODE_INTEGER ) ; <EOF>
IMyRecords * * pIMyRecords ; HRESULT hr = SafeArrayAccessData ( pMyRecordsSA , ( void * * ) & pIMyRecords ) ; <EOF>
tasklist / apps / fi CODE_STRING <EOF>
browser . InvokeScript ( CODE_STRING , CODE_STRING + username + CODE_STRING ) ; browser . InvokeScript ( CODE_STRING , ( CODE_STRING + password + CODE_STRING ) ) ; browser . InvokeScript ( CODE_STRING , string . Format ( CODE_STRING ) ) ; <EOF>
int secondsWhileLowUsage = CODE_INTEGER ; do { cpuUsage = new PerformanceCounter ( CODE_STRING , CODE_STRING , CODE_STRING ) ; var usage = cpuUsage . NextValue ( ) ; do { Thread . Sleep ( TimeSpan . FromSeconds ( CODE_INTEGER ) ) ; usage = cpuUsage . NextValue ( ) ; if ( usage > CODE_REAL ) secondsWhileLowUsage = CODE_INTEGER ; Console . WriteLine ( usage + CODE_STRING ) ; } while ( usage > CODE_REAL ) ; secondsWhileLowUsage ++ ; } while ( secondsWhileLowUsage < CODE_INTEGER ) Process proc = new Process ( ) ; proc . StartInfo = new ProcessStartInfo ( CODE_STRING ) ; proc . Start ( ) ; <EOF>
using System . IO ; using System ; using System . Collections . Generic ; class Program { static void Main ( ) { List < string > lstrSample = new List < string > ( ) ; lstrSample . Add ( CODE_STRING ) ; lstrSample . Add ( CODE_STRING ) ; List < string > lstrResult = new List < string > ( ) ; foreach ( string curStr in lstrSample ) { lstrResult . Add ( curStr . Replace ( CODE_STRING , CODE_STRING ) . Split ( CODE_CHAR ) [ CODE_INTEGER ] ) ; } foreach ( string s in lstrResult ) { Console . WriteLine ( s ) ; } } } <EOF>
alert ( ' Citt ?? ' ) <EOF>
public static IWebDriver GetDriver ( this IWebElement element ) { IWrapsDriver wrappedElement = element as IWrapsDriver ; if ( wrappedElement == null ) { FieldInfo fieldInfo = element . GetType ( ) . GetField ( CODE_STRING , BindingFlags . NonPublic | BindingFlags . Instance ) ; if ( fieldInfo != null ) { wrappedElement = fieldInfo . GetValue ( element ) as IWrapsDriver ; if ( wrappedElement == null ) throw new ArgumentException ( CODE_STRING , CODE_STRING ) ; } } return wrappedElement . WrappedDriver ; } <EOF>
var query = items . GroupBy ( item = > item . Name ) . OrderByDescending ( group = > group . Count ( ) ) . SelectMany ( group = > group ) ; <EOF>
[ StructLayout ( LayoutKind . Sequential , Pack = CODE_INTEGER , Size = CODE_INTEGER , CharSet = CharSet . Ansi ) ] public struct Menu { [ MarshalAs ( UnmanagedType . ByValTStr , SizeConst = CODE_INTEGER ) ] public string str1 ; [ MarshalAs ( UnmanagedType . ByValTStr , SizeConst = CODE_INTEGER ) ] public string str2 ; } public static unsafe int fnSys ( Menu value ) { if ( value != null ) { System . Windows . Forms . MessageBox . Show ( CODE_STRING ) ; } return CODE_INTEGER ; } <EOF>
( \ d ? \ * ) ? <EOF>
var doc = new HtmlDocument ( ) ; using ( var wc = new WebClient ( ) ) using ( var stream = wc . OpenRead ( url ) ) { doc . Load ( stream ) ; } var table = doc . DocumentElement . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Element ( CODE_STRING ) ; string tableHtml = table . OuterHtml ; <EOF>
\\ tkahd - nti - CODE_INTEGER \ TrackIt \ Audit32 . exe <EOF>
foreach ( var p in listProf ) { var item = new ListViewItem { Text = p . Name , Tag = p } ; ListView1 . Items . Add ( item ) ; ListView2 . Items . Add ( ( ListViewItem ) item . Clone ( ) ) ; } <EOF>
var entity1 = Expression . Parameter ( typeof ( Entity ) ) ; var nameFilterExp = Expression . Call ( Expression . Property ( entity1 , firstOrDefault . PropertyInfo . Name ) , typeof ( string ) . GetMethod ( CODE_STRING , new [ ] { typeof ( string ) } ) , Expression . Constant ( nameFilter ) ) ; var predicate = Expression . Lambda < Func < Entity , bool > > ( type == HandledType . Doubtful ? ( Expression ) Expression . AndAlso ( Expression . Equal ( Expression . Property ( entity1 , CODE_STRING ) , Expression . Constant ( true ) ) , nameFilterExp ) : ( Expression ) nameFilterExp , entity1 ) ; entities = entities . Where ( predicate ) ; <EOF>
if ( typology . Name == nameOriginalValue || IsUniqueName ( typology . Name ) ) { _typologyRepository . Update ( typology ) ; _typologyRepository . Save ( ) ; } else { _validatonDictionary . AddError ( CODE_STRING , errorMessageNameUnique ) ; } <EOF>
using Num = System . Numerics . BigInteger ; <EOF>
decimal d = CODE_REAL ; decimal truncated = d - ( d % CODE_INTEGER ) ; <EOF>
string sContent = string . Format ( CODE_STRING , sFirstName , sLastName , sAge , sGender ) ; <EOF>
mail . AlternateViews [ CODE_INTEGER ] <EOF>
public override string ToString ( ) { return string . Format ( CultureInfo . CurrentCulture , CODE_STRING , new object [ ] { base . GetType ( ) . Name , this . Name } ) ; } <EOF>
CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING <EOF>
java - jar compiler . jar -- js hello . js -- js_output_file hello - compiled . js <EOF>
static void Main ( string [ ] args ) { List < Group > groups = new List < Group > ( ) ; . . . PrintTree ( groups , CODE_STRING , null ) ; } static void PrintTree ( List < Group > allGroups , string lead , int ? id ) { var children = allGroups . Where ( g = > g . ParentID == id ) . ToList ( ) ; if ( children . Count > CODE_INTEGER ) { int n = children . Count - CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < n ; i ++ ) { Console . WriteLine ( lead + CODE_STRING + children [ i ] . Name ) ; PrintTree ( allGroups , lead + CODE_STRING , children [ i ] . ID ) ; } Console . WriteLine ( lead + CODE_STRING + children [ n ] . Name ) ; PrintTree ( allGroups , lead + CODE_STRING , children [ n ] . ID ) ; } } <EOF>
class B : A { public class B ( string id , int size ) : base ( id , size ) { this . Name = CODE_STRING ; } } <EOF>
switch ( line [ CODE_INTEGER ] ) { case CODE_CHAR : num += Convert . ToInt32 ( line . Substring ( CODE_INTEGER ) ) ; break ; case CODE_CHAR : num -= Convert . ToInt32 ( line . Substring ( CODE_INTEGER ) ) ; break ; } <EOF>
typeHandler . InvokeMember ( CODE_STRING , BindingFlags . InvokeMethod , null , handler , new [ ] { requestItem } ) ; <EOF>
string fileName = System . IO . Path . GetTempPath ( ) + Guid . NewGuid ( ) . ToString ( ) + CODE_STRING ; <EOF>
netsh wlan set hostednetwork mode = allow ssid = < NetworkName > key = < AccessKey > keyUsage = persistent netsh wlan start hostednetwork <EOF>
Binding = CODE_STRING <EOF>
int count = CODE_INTEGER ; double value = CODE_REAL ; double r = ( double ) ( CODE_REAL / count ) ; r = r * ( CODE_REAL - count * r ) ; r = r * ( CODE_REAL - count * r ) ; double result = value * r ; <EOF>
System . IO . IOException : The process cannot access the file ' C : \ test . jpg ' because it is being used by another process . <EOF>
private void UpClick ( ) { if ( listBox1 . ListIndex > CODE_INTEGER ) { listBox1 . AddItem ( listBox1 . Text , listBox1 . ListIndex - CODE_INTEGER ) ; listBox1 . ListIndex = ( listBox1 . ListIndex - CODE_INTEGER ) ; listBox1 . RemoveItem ( listBox1 . ListIndex + CODE_INTEGER ) ; } } private void DownClick ( ) { if ( ( listBox1 . ListIndex != - CODE_INTEGER ) && ( listBox1 . ListIndex < listBox1 . ListCount - CODE_INTEGER ) ) { listBox1 . AddItem ( listBox1 . Text , listBox1 . ListIndex + CODE_INTEGER ) ; listBox1 . ListIndex = listBox1 . ListIndex + CODE_INTEGER ; listBox1 . RemoveItem ( listBox1 . ListIndex - CODE_INTEGER ) ; } } <EOF>
var a = new int [ ] [ ] { new [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , new [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } } ; <EOF>
t [ i ] = new TextBox ( ) ; t [ i ] . Text = CODE_STRING ; t [ i ] . textBox2 . Name = CODE_STRING ; Grid1 . Children . Add ( t [ i ] ) ; <EOF>
var dict = new System . Collections . Specialized . HybridDictionary ( ) ; dict . Add ( CODE_INTEGER , CODE_STRING ) ; dict . Add ( CODE_STRING , CODE_INTEGER ) ; <EOF>
using System ; using System . Drawing ; using System . Windows . Forms ; public class MyButton : Button { protected override void OnSizeChanged ( EventArgs e ) { base . OnSizeChanged ( e ) ; Bitmap bmp = new Bitmap ( this . Width , this . Height ) ; using ( Graphics gr = Graphics . FromImage ( bmp ) ) { ButtonRenderer . DrawButton ( gr , new Rectangle ( CODE_INTEGER , CODE_INTEGER , bmp . Width , bmp . Height ) , System . Windows . Forms . VisualStyles . PushButtonState . Normal ) ; } if ( this . BackgroundImage != null ) this . BackgroundImage . Dispose ( ) ; this . BackgroundImage = bmp ; } } <EOF>
for ( int i = CODE_INTEGER ; i < totalRows ; i ++ ) { for ( int j = CODE_INTEGER ; j < totalColumns ; j ++ ) { rowTotal [ i ] += numbers [ i * totalColumns + j ] ; blockTotal [ j ] += numbers [ i * totalColumns + j ] ; } } <EOF>
private void folderMenuItem_Click ( object sender , System . EventArgs e ) { DialogResult result = folderBrowserDialog1 . ShowDialog ( ) ; if ( result == DialogResult . OK ) { folderName = folderBrowserDialog1 . SelectedPath ; . . . } } <EOF>
{ CODE_INTEGER : CODE_REAL % } <EOF>
void Main ( ) { string json = CODE_STRING ; var result = JsonConvert . DeserializeObject < RootObject > ( json ) ; var firstNames = result . People . Select ( p = > p . FirstName ) . ToList ( ) ; var lastNames = result . People . Select ( p = > p . LastName ) . ToList ( ) ; } public class Person { public string FirstName { get ; set ; } public string LastName { get ; set ; } } public class RootObject { public List < Person > People { get ; set ; } } <EOF>
backgroundThread . TrySetApartmentState ( ApartmentState . STA ) ; backgroundThread . Name = CODE_STRING ; backgroundThread . Start ( ) ; <EOF>
dtp_btime . Value . ToString ( CODE_STRING ) <EOF>
protected void button1_Click ( object sender , EventArgs e ) { WebControlDemo wcd = this . LoadControl ( CODE_STRING ) as WebControlDemo ; this . placeHolder1 . Controls . Add ( wcd ) ; } <EOF>
protected void LinkButton1_Click ( object sender , EventArgs e ) { Response . Write ( string . Format ( CODE_STRING , CODE_STRING ) ) ; } protected void Page_Load ( object sender , EventArgs e ) { string path = Server . MapPath ( CODE_STRING ) ; WebClient client = new WebClient ( ) ; Byte [ ] buffer = client . DownloadData ( path ) ; if ( buffer != null ) { Response . ContentType = CODE_STRING ; Response . AddHeader ( CODE_STRING , buffer . Length . ToString ( ) ) ; Response . BinaryWrite ( buffer ) ; } } <EOF>
private async void EditButton_Click ( object sender , RoutedEventArgs e ) { WritePadFileContent listitem = ( e . OriginalSource as MenuFlyoutItem ) . DataContext as WritePadFileContent ; MessageDialog messageDialog = new MessageDialog ( listitem . Name . ToString ( ) ) ; await messageDialog . ShowAsync ( ) ; } <EOF>
HashSet < string > hs = new HashSet < string > ( ) ; bool b1 = hs . Add ( CODE_STRING ) ; bool b2 = hs . Add ( CODE_STRING ) ; <EOF>
static string Encr ( string plainText , string key ) { char [ ] chars = new char [ plainText . Length ] ; int h = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < plainText . Length ; i ++ ) { if ( h == key . Length ) h = CODE_INTEGER ; int j = plainText [ i ] + key [ h ] ; chars [ i ] = ( char ) j ; h ++ ; } File . WriteAllBytes ( FILE_NAME , System . Text . Encoding . UTF8 . GetBytes ( chars ) ) ; return new String ( chars , System . Text . Encoding . UTF8 ) ; } <EOF>
/// <summary> /// /// </summary> /// <param name="nameEntities"></param> /// <param name="childID"></param> /// <returns></returns> <!--etc--> private delegate Nullable < int > ExtractParentIdDelegate ( IEnumerable < int > nameEntities , int childID ) ; /// <summary> /// /// </summary> private ExtractParentIdDelegate FuncExtractParentId { get { return this . _extractParentId = this . _extractParentId ?? new ExtractParentIdDelegate ( delegate ( IEnumerable < int > nameEntites , int childID ) { } ) ; } } <EOF>
private void Go ( ) { while ( ( button1 . Location . X + button1 . Size . Width ) < this . Size . Width ) { Invoke ( new moveBd ( moveButton ) , button1 ) ; Thread . Sleep ( CODE_INTEGER ) ; } } <EOF>
public class MetaPerson { public Person Person { get ; set ; } public String SomeMeta { get ; set ; } } <EOF>
var stopWatch = new Stopwatch ( ) ; stopWatch . Start ( ) ; var result = CallFunction ( ) ; stopWatch . Stop ( ) ; var executionTime = stopWatch . Elapsed ; <EOF>
Process . Start ( CODE_STRING ) ; <EOF>
public String Serialize ( Dictionary < int , Dictionary < String , String > > all ) { String abc = JsonConvert . SerializeObject ( all , Formatting . None , new JsonSerializerSettings { TypeNameHandling = TypeNameHandling . Objects , TypeNameAssemblyFormat = System . Runtime . Serialization . Formatters . FormatterAssemblyStyle . Simple } ) ; return abc ; } public Dictionary < int , Dictionary < String , String > > DeSerialize ( String text ) { Dictionary < int , Dictionary < String , String > > abc ; abc = JsonConvert . DeserializeObject < Dictionary < int , Dictionary < String , String > > > ( text , new JsonSerializerSettings { TypeNameHandling = TypeNameHandling . Objects , TypeNameAssemblyFormat = System . Runtime . Serialization . Formatters . FormatterAssemblyStyle . Simple , } ) ; return abc ; } <EOF>
public interface IAggregateRoot { } class Test : IAggregateRoot { } public interface IRepository < T > where T : IAggregateRoot { IList < T > FindAll ( ) ; void Add ( T item ) ; } class Program { static void Main ( string [ ] args ) { var m = new Moq . Mock < IRepository < Test > > ( ) ; m . Setup ( r = > r . Add ( Moq . It . IsAny < Test > ( ) ) ) ; m . Setup ( r = > r . FindAll ( ) ) . Returns ( new List < Test > ( ) ) ; m . VerifyAll ( ) ; } } <EOF>
MyEnumerable . Take ( CODE_INTEGER ) . Count ( ) == CODE_INTEGER <EOF>
treeView1 . BeginUpdate ( ) ; treeView1 . ShowRootLines = false ; treeView1 . ShowLines = false ; treeView1 . Nodes . Add ( CODE_STRING ) ; treeView1 . Nodes [ CODE_INTEGER ] . Nodes . Add ( CODE_STRING ) ; treeView1 . Nodes [ CODE_INTEGER ] . Nodes . Add ( CODE_STRING ) ; treeView1 . Nodes [ CODE_INTEGER ] . Nodes [ CODE_INTEGER ] . Nodes . Add ( CODE_STRING ) ; treeView1 . Nodes [ CODE_INTEGER ] . Nodes [ CODE_INTEGER ] . Nodes [ CODE_INTEGER ] . Nodes . Add ( CODE_STRING ) ; treeView1 . EndUpdate ( ) ; <EOF>
datagrid . RowHeadersWidth <EOF>
var call = Expression . Call ( methodInfo , iParam ) ; var cast = Expression . Convert ( call , typeof ( Object ) ) ; var lambda = Expression . Lambda < Func < int , Object > > ( cast , iParam ) ; <EOF>
var grid = sender as GridView ; if ( grid . FocusedColumn . FieldName == CODE_STRING ) { var row = grid . GetRow ( grid . FocusedRowHandle ) as grid . ActiveEditor . Properties . ReadOnly = } <EOF>
var issues = from i in ReadOnlyContext . Issues let startInside = ( startDate < i . OutOfOrderStart && i . OutOfOrderStart < endDate ) let endInside = ( startDate < i . OutOfOrderEnd && i . OutOfOrderStart < endDate ) let allOutside = ( startDate > i . OutOfOrderEnd && endDate < i . OutOfOrderEnd ) where i . TruckID == truckID && ( startInside || endInside || allOutside ) select i ; <EOF>
Environment . Exit ( CODE_INTEGER ) <EOF>
Dispatcher . BeginInvoke ( new Action ( ( ) = > MessageBox . Show ( this , e . Message ) ) , DispatcherPriority . ApplicationIdle ) ; <EOF>
[ DllImport ( CODE_STRING , CallingConvention = CallingConvention . Winapi , ExactSpelling = true , EntryPoint = CODE_STRING , SetLastError = true ) ] [ return : MarshalAs ( UnmanagedType . Bool ) ] private static extern Boolean HideCaret ( IntPtr hWnd ) ; [ DllImport ( CODE_STRING , CallingConvention = CallingConvention . Winapi , ExactSpelling = true , EntryPoint = CODE_STRING , SetLastError = true ) ] [ return : MarshalAs ( UnmanagedType . Bool ) ] private static extern Boolean ShowCaret ( IntPtr hWnd ) ; HideCaret ( handle ) ; try { } finally { ShowCaret ( handle ) ; } <EOF>
IEnumerable < string > commonValues = projects . Intersect ( sheetNames ) ; <EOF>
Parallel . Invoke ( new ParallelOptions ( ) { MaxDegreeOfParallelism = CODE_INTEGER } , ( ) = > DoSomething ( ) , ( ) = > DoSomething ( ) , ( ) = > DoSomething ( ) , ( ) = > DoSomething ( ) , ( ) = > DoSomething ( ) ) ; <EOF>
result . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
public class CountryModel : BaseNopEntityModel , { public string Name { get ; set ; } public Regionmodel Region { get ; set ; } } <EOF>
( CODE_INTEGER [ CODE_INTEGER - CODE_INTEGER ] | [ CODE_INTEGER ] [ CODE_INTEGER - CODE_INTEGER ] | CODE_INTEGER [ CODE_INTEGER ] ) [ \ . ] ( CODE_INTEGER [ CODE_INTEGER - CODE_INTEGER ] | CODE_INTEGER [ CODE_INTEGER ] ) [ \ . ] ( CODE_INTEGER | CODE_INTEGER ) [ CODE_INTEGER - CODE_INTEGER ] { CODE_INTEGER } <EOF>
class Program { static void Main ( string [ ] args ) { while ( true ) { ChangeFiles ( ) ; bool changes = ScanChanges ( ) ; if ( ! changes ) { TrimFolder ( ) ; TrimFile ( ) ; } Thread . Sleep ( CODE_INTEGER ) ; } } private static void ChangeFiles ( ) { } private static bool ScanChanges ( ) { FileInfo fi = new FileInfo ( CODE_STRING ) ; if ( fi . Length > CODE_INTEGER ) { return true ; } else { Process . Start ( CODE_STRING , CODE_STRING ) . WaitForExit ( ) ; return false ; } } <EOF>
while ( ctecka . Read ( ) ) { exJmeno = ctecka [ CODE_INTEGER ] . ToString ( ) ; exPrijmeni = ctecka [ CODE_INTEGER ] . ToString ( ) ; Response . Write ( exJmeno + CODE_STRING + exPrijmeni + CODE_STRING ) ; vlozSQL . Parameters . Clear ( ) ; vlozSQL . Parameters . AddWithValue ( CODE_STRING , exJmeno ) ; vlozSQL . Parameters . AddWithValue ( CODE_STRING , exPrijmeni ) ; pridano = vlozSQL . ExecuteNonQuery ( ) ; } <EOF>
ReportDataSource datasource = new ReportDataSource ( CODE_STRING , ds . Tables [ CODE_INTEGER ] ) ; ReportViewer1 . LocalReport . DataSources . Clear ( ) ; ReportViewer1 . LocalReport . DataSources . Add ( datasource ) ; <EOF>
private void Form1_Resize ( object sender , EventArgs e ) { Font f ; Graphics g ; SizeF s ; Single Faktor , FaktorX , FaktorY ; g = label2 . CreateGraphics ( ) ; s = g . MeasureString ( label2 . Text , label2 . Font , label2 . Size ) ; g . Dispose ( ) ; FaktorX = label2 . Width / s . Width ; FaktorY = label2 . Height / s . Height ; if ( FaktorX > FaktorY ) { Faktor = FaktorY ; } else { Faktor = FaktorX ; } f = label2 . Font ; label2 . Font = new Font ( f . Name , f . SizeInPoints * Faktor ) ; } <EOF>
( ? <= ; CODE_INTEGER ) \ d + <EOF>
public override DateTime StartTime { get { return start_time_ ; } } internal void SetStartTime { start_time_ = value ; } <EOF>
public class ImageFileConverter : IValueConverter { public object Convert ( object value , Type targetType , object parameter , string language ) { string fileName = value as string ; if ( fileName != null ) { BitmapImage bitmap = new BitmapImage ( ) ; bitmap . UriSource = new Uri ( CODE_STRING + fileName ) ; return bitmap ; } return null ; } public object ConvertBack ( object value , Type targetType , object parameter , string language ) { throw new NotImplementedException ( ) ; } } <EOF>
var status = ( from tweet in twitterCtx . Status where tweet . Type == StatusType . Retweeters && tweet . ID == CODE_STRING select tweet ) . SingleOrDefault ( ) ; status . Users . ForEach ( userID = > Console . WriteLine ( CODE_STRING + userID ) ) ; <EOF>
copy " C : \ Documents and Settings \ user123 \ Desktop \ eFormsSystem \ eFormsApp \ bin \ Debug \ * . * " s : \ debug \ / Z / Y <EOF>
String . Trim <EOF>
var tempFunc = func ; func = a = > tempFunc ( a ) && . . . <EOF>
int [ ] id1 = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int [ ] id2 = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; IEnumerable < int > both = id1 . Intersect ( id2 ) ; foreach ( int id in both ) Console . WriteLine ( id ) ; Console . WriteLine ( both . Any ( ) . ToString ( ) ) ; <EOF>
var LNQ = new LNQDataContext ( ) ; var quo = LNQ . tbl_job_quotas . Where ( c = > c . job_quota_job_number == _fJ ) . Select ( c = > new { ID = c . job_quota_ID , DESC = c . job_quota_ID + CODE_STRING + c . job_quota_desc } ) ; var DtQu = new DataTable ( ) ; DtQu . Columns . Add ( CODE_STRING ) ; DtQu . Columns . Add ( CODE_STRING ) ; DataRow drs ; drs = DtQu . NewRow ( ) ; drs [ CODE_INTEGER ] = CODE_STRING ; drs [ CODE_INTEGER ] = CODE_STRING ; DtQu . Rows . Add ( drs ) ; foreach ( var a in quo ) { drs = DtQu . NewRow ( ) ; drs [ CODE_INTEGER ] = a . ID ; drs [ CODE_INTEGER ] = a . DESC ; DtQu . Rows . Add ( drs ) ; } _ddActQuota . DataTextField = CODE_STRING ; _ddActQuota . DataValueField = CODE_STRING ; _ddActQuota . DataSource = DtQu ; _ddActQuota . DataBind ( ) ; <EOF>
protected void Repeater1_ItemDataBound ( object sender , RepeaterItemEventArgs e ) { if ( e . Item . ItemType == ListItemType . Item || e . Item . ItemType == ListItemType . AlternatingItem ) { if ( ( ( DataRowView ) e . Item . DataItem ) . Row [ CODE_STRING ] . ToString ( ) == CODE_STRING ) { ( ( Label ) e . Item . FindControl ( CODE_STRING ) ) . Text = CODE_STRING ; } else { ( ( Label ) e . Item . FindControl ( CODE_STRING ) ) . Text = CODE_STRING ; } } } <EOF>
const float threshold = CODE_REAL ; const string axis = CODE_STRING ; if ( Input . GetAxis ( axis ) < - threshold ) { } else if ( Input . GetAxis ( axis ) > threshold ) { } else { } <EOF>
groupBox1 . Refresh ( ) ; <EOF>
string deleteStuff = CODE_STRING db . ExecuteNonQuery ( deleteStuff ) ; <EOF>
ParameterDefinition parameter = . . . ; ByReferenceType byref = ( ByReferenceType ) parameter . ParameterType ; GenericInstanceType action_string = ( GenericInstanceType ) byref . ElementType ; TypeReference action = action_string . ElementType ; TypeReference str = action_string . GenericArguments [ CODE_INTEGER ] ; <EOF>
for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { long x = Int64 . Parse ( form [ String . Format ( CODE_STRING , i ) ] ) ; long y = Int64 . Parse ( form [ String . Format ( CODE_STRING , i ) ] ) ; if ( x > CODE_INTEGER && y > CODE_INTEGER ) { selectedAnswers . Add ( new SelectedAnswer ( ) { questionId = x , answerId = y } ) ; } } <EOF>
var myControl = ( MyControl ) Page . LoadControl ( CODE_STRING ) ; this . ControlContainer . Controls . Add ( myControl ) ; <EOF>
rules = SELECT * FROM item_rules foreach ( rules as _rule ) { count = SELECT COUNT ( * ) FROM ( _rule [ select_statement ] ) as T1 if ( count > CODE_INTEGER ) itemlist . add ( _rule [ item_that_satisfy_rule ] ) } <EOF>
private static string RemoveHeightsAndWidths ( string original ) { XElement element = XElement . Parse ( original ) ; var tableRelatedElements = element . Descendants ( CODE_STRING ) . Union ( element . Descendants ( CODE_STRING ) ) . Union ( element . Descendants ( CODE_STRING ) ) . Union ( element . Descendants ( CODE_STRING ) ) ; Regex reg = new Regex ( CODE_STRING ) ; foreach ( var item in tableRelatedElements ) { if ( item . Attributes ( CODE_STRING ) . Any ( ) ) { item . Attribute ( CODE_STRING ) . Value = reg . Replace ( item . Attribute ( CODE_STRING ) . Value , string . Empty ) ; } if ( item . Attributes ( CODE_STRING ) . Any ( ) ) { item . Attribute ( CODE_STRING ) . Remove ( ) ; } if ( item . Attributes ( CODE_STRING ) . Any ( ) ) { item . Attribute ( CODE_STRING ) . Remove ( ) ; } } return element . ToString ( ) ; } <EOF>
string ponySetting = myRegistryObject [ CODE_STRING ] <EOF>
Debug . Print CurrentDb . TableDefs ( CODE_STRING ) . Connect <EOF>
var dist = from d in dictionaries group d by new { WAP = d [ CODE_STRING ] , System = d [ CODE_STRING ] } into g select g . FirstOrDefault ( ) ; var dist = dictionaries . GroupBy ( d = > new { WAP = d [ CODE_STRING ] , System = d [ CODE_STRING ] } ) . Select ( g = > g . FirstOrDefault ( ) ) <EOF>
foreach ( var customer in _response . Customers ) { Console . WriteLine ( customer . CustID ) ; } <EOF>
func doSha256 ( # dataIn : NSData ) -> NSData { var shaOut : NSMutableData ! = NSMutableData ( length : Int ( CC_SHA256_DIGEST_LENGTH ) ) ; CC_SHA256 ( dataIn . bytes , CC_LONG ( dataIn . length ) , UnsafeMutablePointer < UInt8 > ( shaOut . mutableBytes ) ) ; return shaOut ; } <EOF>
public IList < MyCustomerObjects > GetCustomers ( ) { } <EOF>
from t1 in TABLE1 join t2 in TABLE2 on t1 . COL_B equals t2 . COL_A orderby t2 . COL_B select t1 <EOF>
StudentInfo sInfo = new StudentInfo ( ) ; <EOF>
var text = CODE_STRING ; var words = text . Split ( new [ ] { CODE_CHAR , CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; var wordsWithUnderscores = words . Where ( o = > o . Contains ( CODE_STRING ) ) . ToArray ( ) ; foreach ( var word in wordsWithUnderscores ) { Console . WriteLine ( word ) ; } <EOF>
app . config <EOF>
private void dataGridView1_CellFormatting ( object sender , DataGridViewCellFormattingEventArgs e ) { DataGridViewCellStyle MakeItRed = new DataGridViewCellStyle ( ) ; MakeItRed . BackColor = Color . Red ; dataGridView1 . Columns [ CODE_INTEGER ] . DefaultCellStyle = MakeItRed ; DataGridViewRow row2 = dataGridView1 . Rows [ CODE_INTEGER ] ; row2 . Cells [ CODE_INTEGER ] . Style = MakeItRed ; } <EOF>
String src = dataDir + CODE_STRING ; String dst = dataDir + CODE_STRING ; Aspose . Words . Document doc = new Aspose . Words . Document ( src ) ; Aspose . Words . DocumentBuilder builder = new DocumentBuilder ( doc ) ; builder . MoveToHeaderFooter ( HeaderFooterType . FooterPrimary ) ; builder . InsertField ( CODE_STRING , CODE_STRING ) ; builder . Write ( CODE_STRING ) ; builder . InsertField ( CODE_STRING , CODE_STRING ) ; Aspose . Words . Document newDoc = new Aspose . Words . Document ( dataDir + CODE_STRING ) ; newDoc . FirstSection . HeadersFooters . LinkToPrevious ( true ) ; doc . AppendDocument ( newDoc , ImportFormatMode . UseDestinationStyles ) ; doc . Save ( dst ) ; <EOF>
/// <summary>This Method Does Something</summary> /// <BugFix BugId="1234" Programmer="Bob" Date="2/1/2010">Fix Comments</BugFix> public void MyMethod ( ) { } <EOF>
ReportParameter [ ] Params = new ReportParameter [ CODE_INTEGER ] ; Params [ CODE_INTEGER ] = CODE_STRING ; ReportViewerControl . ServerReport . SetParameters ( Params ) ; <EOF>
BsonClassMap . RegisterClassMap < Competitor > ( cm = > { cm . AutoMap ( ) ; cm . MapField ( CODE_STRING ) . SetElementName ( CODE_STRING ) ; } ) ; <EOF>
userControl . Visible = false <EOF>
static DateTime ? TestDate ( string date ) { DateTime result ; if ( DateTime . TryParse ( CODE_STRING , out result ) ) { return result ; } return null ; } <EOF>
using ( Stream stream = Assembly . GetExecutingAssembly ( ) . GetManifestResourceStream ( CODE_STRING ) ) { } <EOF>
TestSerializer copy = x . Deserialize ( stream ) as TestSerializer ; <EOF>
internal class DefaultMigrationSqlGenerator : SqlServerMigrationSqlGenerator { protected override void Generate ( AlterTableOperation alterTableOperation ) { base . Generate ( alterTableOperation ) ; if ( alterTableOperation . Columns . Any ( c = > c . Name == CODE_STRING ) ) { string sqlSeedReset = string . Format ( CODE_STRING , alterTableOperation . Name . Replace ( CODE_STRING , CODE_STRING ) ) ; base . Generate ( new SqlOperation ( sqlSeedReset ) ) ; } } } <EOF>
WebRequestMethods . Ftp . ListDirectory <EOF>
var query = CODE_STRING ; var scrubbed = query . Substring ( CODE_INTEGER , query . Length - CODE_INTEGER ) ; <EOF>
public static Assembly GetAssemblyFromAppDomain ( string assemblyName ) { foreach ( var assembly in AppDomain . CurrentDomain . GetAssemblies ( ) ) { if ( assembly . FullName . StartsWith ( assemblyName + CODE_STRING ) ) { return assembly ; } } return null ; } <EOF>
tabCom com = db . tabCom . Single ( tab = > tab . PrimaryKeyColumn == CODE_INTEGER ) ; <EOF>
DateTime dt = DateTime . ParseExact ( time . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) , CODE_STRING , CultureInfo . InvariantCulture ) ; <EOF>
if ( reader . IsDBNull ( CODE_INTEGER ) ) { } else { switch ( reader . GetByte ( CODE_INTEGER ) ) { case CODE_INTEGER : int ES = Convert . ToInt32 ( reader [ CODE_STRING ] ) ; if ( ES == CODE_INTEGER ) { chkEscalated . Checked = false ; } else { chkEscalated . Checked = true ; chkEscalated . Visible = true ; lblEscalated . Visible = true ; chkRework . Visible = true ; lblRework . Visible = true ; } break ; case CODE_INTEGER : break ; default : break ; } } <EOF>
session . Evict ( employeeMonth . BonusMonth ) <EOF>
public class SelectableTextBlock : TextBox { public SelectableTextBlock ( ) : base ( ) { this . AddHandler ( SelectableTextBlock . KeyDownEvent , new RoutedEventHandler ( HandleHandledKeyDown ) , true ) ; } public void HandleHandledKeyDown ( object sender , RoutedEventArgs e ) { KeyEventArgs ke = e as KeyEventArgs ; if ( ke . Key == Key . Space ) { ke . Handled = false ; } } . . . } <EOF>
Binding bind = ( sender as Control ) . DataBindings [ CODE_INTEGER ] ; DataTable table = ( bind . DataSource as DataSet ) . Tables [ CODE_INTEGER ] ; string table_column_name = bind . BindingMemberInfo . BindingMember ; string column_name = table_column_name . Split ( new char [ ] { CODE_CHAR } ) [ CODE_INTEGER ] ; DataColumn column = table . Columns [ table . Columns . IndexOf ( column_name ) ] ; object data = table . Rows [ CODE_INTEGER ] [ column ] ; <EOF>
\ d { CODE_INTEGER } [ a - zA - Z ] ? [ a - zA - Z0 - CODE_INTEGER ] ? \ d { CODE_INTEGER , CODE_INTEGER } <EOF>
MyCompany . Common <EOF>
myCollection . Where ( person = > . . . . ) ; myPeopleCollection . Where ( p = > . . . ) ; <EOF>
private void RadGridView1_SizeChanged ( object sender , EventArgs e ) { radGridView1 . TableElement . ViewElement . UpdateRows ( true ) ; } <EOF>
Convert . ToString ( number , CODE_INTEGER ) . PadLeft ( CODE_INTEGER , CODE_CHAR ) ; <EOF>
var count = Model . Project . ProjectDoc . Where ( a = > a . Current == true && a . DocType == CODE_STRING && a . ProjectDocVote . Any ( v = > v . UserID == ViewBag . CurrentUserID ) ) . Count ( ) : <EOF>
private void ValidateSubnode ( XmlNode node , XmlSchema schema ) { XmlTextReader reader = new XmlTextReader ( node . OuterXml , XmlNodeType . Element , null ) ; XmlReaderSettings settings = new XmlReaderSettings ( ) ; settings . ConformanceLevel = ConformanceLevel . Fragment ; settings . Schemas . Add ( schema ) ; settings . ValidationType = ValidationType . Schema ; settings . ValidationEventHandler += new ValidationEventHandler ( XSDValidationEventHandler ) ; using ( XmlReader validationReader = XmlReader . Create ( reader , settings ) ) { while ( validationReader . Read ( ) ) { } } } private void XSDValidationEventHandler ( object sender , ValidationEventArgs args ) { errors . AppendFormat ( CODE_STRING , args . Severity . ToString ( ) , args . Message ) ; } <EOF>
class BatchObservableColleciton < T > : INotifyCollectionChanged , IEnumerable { public event NotifyCollectionChangedEventHandler CollectionChanged ; private List < T > _list ; private List < T > _addedItems ; public BatchObservableColleciton ( ) { _list = new List < T > ( ) ; _addedItems = new List < T > ( ) ; } public IEnumerator GetEnumerator ( ) { return _list . GetEnumerator ( ) ; } public void Add ( T item ) { _list . Add ( item ) ; _addedItems . Add ( item ) ; } public void commit ( ) { if ( CollectionChanged != null ) { CollectionChanged ( this , new NotifyCollectionChangedEventArgs ( NotifyCollectionChangedAction . Add , _addedItems ) ) ; } _addedItems . Clear ( ) ; } } <EOF>
NavigationService . Navigate ( new Uri ( CODE_STRING + Organization . Name , UriKind . Relative ) ) ; <EOF>
CODE_STRING + path . TrimStart ( CODE_CHAR ) <EOF>
void SendString ( String message ) { byte [ ] buffer = Encoding . UTF8 . GetBytes ( message ) ; AsyncCallback ac = new AsyncCallback ( SendStreamMsg ) ; tcpClient . GetStream ( ) . BeginWrite ( buffer , CODE_INTEGER , buffer . Length , ac , null ) ; } <EOF>
public class Foo { public bool HistoricalMode { get ; set ; } private string _property1 ; public string Property1 { get { if ( HistoricalMode ) { return GetHistoricalValue ( CODE_STRING ) ; } else { return _property1 ; } set { if ( HistoricalMode ) { throw new NotSupportedException ( CODE_STRING ) ; } else { _property1 = value ; } } } public DateTime CreatedDate { get { } set { } } public string GetHistoricalValue ( string propertyName ) { HistoryHelper historyHelper = CreateHistoryHelper ( this ) ; return historyHelper . GetHistoricalValue ( propertyName , CreatedDate ) ; } } <EOF>
Outlook . Application msOutlook = new Outlook . Application ( ) ; Outlook . NameSpace session = msOutlook . Session ; Outlook . Stores stores = session . Stores ; foreach ( Outlook . Store store in stores ) { Outlook . MAPIFolder folder = store . GetDefaultFolder ( Outlook . OlDefaultFolders . olFolderCalendar ) ; MessageBox . Show ( folder . Name ) ; } <EOF>
TestPlugin plugIn = new TestPlugin ( ) ; object [ ] params = null MethodInfo mi = typeof ( TestPlugin ) . GetMethod ( CODE_STRING ) ; mi . invoke ( plugIn , params ) ; <EOF>
[ ThreadStatic ] static RichTextBox m_RtfConverter ; public static RichTextBox ThreadSafeRTFConverter { get { if ( m_RtfConverter == null ) { m_RtfConverter = new RichTextBox ( ) ; m_RtfConverter . Width = CODE_INTEGER ; } return m_RtfConverter ; } } <EOF>
public DateTime ExportResultsToCsv < T > ( string filePath , string HeaderLine , List < T > data ) { engine = new FileHelperEngine ( typeof ( T ) ) { HeaderText = HeaderLine } ; engine . WriteFile ( filePath , data ) ; return DateTime . Now ; } <EOF>
public class HttpTest { public bool ignoreCertificateErrors { get ; set ; } public List < HttpStatusCode > successHTTPStatusCodes { get ; set ; } public string httpVerb { get ; set ; } public HttpMethod HttpMethodInstance { get { return new HttpMethod ( httpVerb ) ; } } } <EOF>
. Select ( . . . whatever . . . ) . OrderByDescending ( item = > item . count ) ; <EOF>
WshShell shell = new WshShell ( ) ; string app = Path . Combine ( Environment . SystemDirectory , CODE_STRING ) ; string linkPath = CODE_STRING ; IWshShortcut link = ( IWshRuntimeLibrary . IWshShortcut ) shell . CreateShortcut ( linkPath ) ; link . TargetPath = app ; link . IconLocation = string . Format ( CODE_STRING , app ) ; link . Save ( ) ; <EOF>
accessdeny . SetAccessRule ( new System . Security . AccessControl . FileSystemAccessRule ( new SecurityIdentifier ( WellKnownSidType . WorldSid , null ) , System . Security . AccessControl . FileSystemRights . FullControl , System . Security . AccessControl . AccessControlType . Deny ) ) ; <EOF>
var avg = pageHitList . GroupBy ( x = > x . RequestTime . RoundUp ( TimeSpan . FromMinutes ( CODE_INTEGER ) ) ) ; . Select ( hit = > new { hit . Key , Average = hit . Average ( x = > x . PageResponseTime ) } ) ; <EOF>
private void createMenuItem_Click ( object sender , EventArgs e ) { DoCanvasWork ( ) ; } private void transfer_timer ( ) { System . Timers . Timer Clock = new System . Timers . Timer ( ) ; Clock . Elapsed += new ElapsedEventHandler ( Clock_Tick ) ; Clock . Interval = timer_interval ; Clock . Start ( ) ; } private void Clock_Tick ( object sender , EventArgs e ) { BeginInvoke ( new MethodInvoker ( DoCanvasWork ) ) ; } private void DoCanvasWork ( ) { canvas . Layer . RemoveAllChildren ( ) ; canvas . Controls . Clear ( ) ; createDock ( ) ; } <EOF>
Response . AddHeader ( CODE_STRING , CODE_STRING + compressedFileName + CODE_STRING ) ; Response . ContentType = CODE_STRING ; using ( var zipStream = new ZipOutputStream ( Response . OutputStream ) ) { foreach ( string filePath in filePaths ) { byte [ ] fileBytes = System . IO . File . ReadAllBytes ( filePath ) ; var fileEntry = new ZipEntry ( Path . GetFileName ( filePath ) ) { Size = fileBytes . Length } ; zipStream . PutNextEntry ( fileEntry ) ; zipStream . Write ( fileBytes , CODE_INTEGER , fileBytes . Length ) ; } zipStream . Flush ( ) ; zipStream . Close ( ) ; } <EOF>
public class MyAttribute : Attribute { private Type _ClassType ; public MyAttribute ( Type classType ) { _ClassType = classType ; } public void SomeMethod < T > ( ) where T : IMyInterface { var expectedType = Activator . CreateInstance ( typeof ( T ) ) as IMyInterface ; } } <EOF>
ZipFile . AddDirectory <EOF>
var lines = File . ReadAllLines ( pathToFile ) ; File . WriteAllLines ( pathToFile , lines . Take ( lines . Length - CODE_INTEGER ) ) ; <EOF>
( from r in dt . AsEnumerable ( ) group r by r . TxnNumber into grp where grp . Count ( ) > CODE_INTEGER select grp ) . SelectMany ( x = > x ) . ToList ( ) ; <EOF>
private void EnumerateCommads ( ) { foreach ( Command command in _applicationObject . Commands ) { } } <EOF>
CREATE PROC Createciudad ( @nombre VARCHAR ( CODE_INTEGER ) , @codigo_postal VARCHAR ( CODE_INTEGER ) ) <EOF>
private void YourControl_KeyDown ( object sender , System . Windows . Forms . KeyEventArgs e ) { if ( e . KeyCode == Keys . NumPad0 ) { } if ( e . KeyCode == Keys . NumPad1 ) { } } <EOF>
public class Skill { } public List < Skill > allSkills = new List < Skill > ( ) ; public Skill [ ] skillArray ; void GetArray ( ) { string blah = PlayerPrefs . GetString ( CODE_STRING ) ; JsonConvert . DeserializeObject < List < Skill > > ( blah ) . CopyTo ( skillArray , CODE_INTEGER ) ; } <EOF>
System . Diagnostics . ProcessStartInfo psi = new System . Diagnostics . ProcessStartInfo ( CODE_STRING ) ; psi . Verb = CODE_STRING ; Process . Start ( psi ) ; <EOF>
public Image < Gray , Byte > dougman ( Image < Gray , Byte > cit , Double radiris ) { double xP , yP , r , theta ; Image < Gray , Byte > grayT = new Image < Gray , Byte > ( CODE_INTEGER , CODE_INTEGER ) ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { for ( int j = CODE_INTEGER ; j < CODE_INTEGER ; j ++ ) { r = i ; theta = CODE_REAL * Math . PI * j / CODE_INTEGER ; xP = r * Math . Cos ( theta ) ; yP = r * Math . Sin ( theta ) ; xP = xP + radiris + CODE_INTEGER ; yP = yP + radiris + CODE_INTEGER ; grayT [ CODE_INTEGER - CODE_INTEGER - i , j ] = cit [ ( int ) xP , ( int ) yP ] ; } } return grayT ; } <EOF>
string FilePath = MapPath ( CODE_STRING ) ; Response . ContentType = CODE_STRING ; Response . AppendHeader ( CODE_STRING , CODE_STRING + FilePath ) ; Response . WriteFile ( FilePath ) ; Response . End ( ) ; <EOF>
var inputString = CODE_STRING ; var separators = new [ ] { CODE_STRING , CODE_STRING word4 " } ; var output = inputString . Split ( seperators , StringSplitOptions . None ) ; <EOF>
_sessionFactory = Fluently . Configure ( ) . Database ( MsSqlConfiguration . MsSql2005 . ConnectionString ( connectionString ) . ShowSql ( ) ) . Mappings ( m = > m . FluentMappings . AddFromAssemblyOf < Entity > ( ) ) . ExposeConfiguration ( c = > c . EventListeners . PreUpdateEventListeners = new IPreUpdateEventListener [ ] { new AuditEventListener ( ) } ) ; <EOF>
public Response ( int id , int qID ) { this . ResponseBool = new ResponseRepository ( ) . GetResponse ( id ) . Where ( m = > m . QuestionID == qID ) . Select ( m = > m . ResponseBool ) . FirstOrDefault ( ) ; } Answers = Questions . Select ( k = > new Response ( stepOneSaved . ApplicationID , k . QuestionID ) { ApplicationID = stepOneSaved . ApplicationID , QuestionID = k . QuestionID , QuestionCategoryID = k . QuestionCategoryID , QuestionText = k . QuestionText , } ) . ToList ( ) ; <EOF>
var guidComPorts = Guid . Empty ; UInt32 dwSize ; IntPtr hDeviceInfo ; var buffer = new byte [ CODE_INTEGER ] ; var providerName = new [ ] { } ; var spddDeviceInfo = new SpDevinfoData ( ) ; var bStatus = SetupDiClassGuidsFromName ( CODE_STRING , ref guidComPorts , CODE_INTEGER , out dwSize ) ; if ( bStatus ) { hDeviceInfo = SetupDiGetClassDevs ( ref guidComPorts , ( IntPtr ) null , ( IntPtr ) null , DigcfPresent | DigcfProfile ) ; if ( hDeviceInfo . ToInt32 ( ) != CODE_INTEGER ) { while ( true ) { spddDeviceInfo . CbSize = Marshal . SizeOf ( spddDeviceInfo ) ; bStatus = SetupDiEnumDeviceInfo ( hDeviceInfo , nDevice ++ , ref spddDeviceInfo ) ; break ; } } return ; } } <EOF>
pictureBox1 . Image = Bitmap . FromHicon ( new Icon ( openFileDialog . FileName , new Size ( CODE_INTEGER , CODE_INTEGER ) ) . Handle ) ; <EOF>
static class DataPointExtensions { public static DataPoint Average ( this IEnumerable < DataPoint > points ) { int sumX = CODE_INTEGER , sumY = CODE_INTEGER , sumZ = CODE_INTEGER , count = CODE_INTEGER ; foreach ( var pt in points ) { sumX += pt . X ; sumY += pt . Y ; sumZ += pt . Z ; count ++ ; } if ( count == CODE_INTEGER ) return new DataPoint ( ) ; return new DataPoint { X = sumX / count , Y = sumY / count , Z = sumZ / count } ; } } <EOF>
Dictionary < string , string [ ] > firstDic = new Dictionary < string , string [ ] > { { CODE_STRING , new [ ] { CODE_STRING } } , { CODE_STRING , new [ ] { CODE_STRING } } } ; Dictionary < string , string [ ] > secondDic = new Dictionary < string , string [ ] > { { CODE_STRING , new [ ] { CODE_STRING } } , { CODE_STRING , new [ ] { CODE_STRING } } } ; Dictionary < string , string [ ] > resultDic = firstDic . Union ( secondDic ) . GroupBy ( o = > o . Key ) . ToDictionary ( o = > o . Key , o = > o . SelectMany ( kvp = > kvp . Value ) . ToArray ( ) ) ; <EOF>
var model = this . Resources [ " Model ] as PeopleViewModel ; <EOF>
public class FooValidator : AbstractValidator < Foo > , IValidatorInterceptor { public FooValidator ( ) { } public ValidationContext BeforeMvcValidation ( ControllerContext controllerContext , ValidationContext validationContext ) { RuleFor ( f = > f . Bar ) . SetCollectionValidator ( new BarValidator ( validationContext . InstanceToValidate as Foo ) ) ; return validationContext ; } public ValidationResult AfterMvcValidation ( ControllerContext controllerContext , ValidationContext validationContext , ValidationResult result ) { return result ; } } <EOF>
string AddSuffix ( string filename , string suffix ) { string fDir = Path . GetDirectoryName ( filename ) ; string fName = Path . GetFileNameWithoutExtension ( filename ) ; string fExt = Path . GetExtension ( filename ) ; return Path . Combine ( fDir , String . Concat ( fName , suffix , fExt ) ) ; } string newFilename = AddSuffix ( filename , String . Format ( CODE_STRING , crcValue ) ) ; <EOF>
private async void ChangeLabel ( ) { while ( true ) { await Task . Delay ( CODE_INTEGER ) label1 . Text = CODE_STRING ; } } <EOF>
this . btnSaveSignal = new System . Windows . Forms . Button ( ) ; this . btnSaveSignal . Click += new System . EventHandler ( this . btnSaveSignal_Click ) ; . . . private void btnSaveSignal_Click ( object sender , EventArgs e ) { . . . } <EOF>
label4 . Text = ( ycrcb . Y * CODE_INTEGER ) . ToString ( ) ; label5 . Text = ( ( ycrcb . Cr + CODE_REAL ) * CODE_INTEGER ) . ToString ( ) ; label6 . Text = ( ( ycrcb . Cb + CODE_REAL ) * CODE_INTEGER ) . ToString ( ) ; <EOF>
foreach ( CrystalDecisions . CrystalReports . Engine . Table tbCurrent in rdCurrent . Database . Tables ) SetTableLogin ( tbCurrent ) ; private void SetTableLogin ( CrystalDecisions . CrystalReports . Engine . Table table ) { CrystalDecisions . Shared . TableLogOnInfo tliCurrent = table . LogOnInfo ; tliCurrent . ConnectionInfo . UserID = dbLogin . Username ; tliCurrent . ConnectionInfo . Password = dbLogin . Password ; if ( dbLogin . Database != null ) tliCurrent . ConnectionInfo . DatabaseName = dbLogin . Database ; if ( dbLogin . Server != null ) tliCurrent . ConnectionInfo . ServerName = dbLogin . Server ; table . ApplyLogOnInfo ( tliCurrent ) ; } <EOF>
var streams = new Subject < IObservable < int > > ( ) ; var mergedStreams = streams . Merge ( ) ; var mergedObserver = mergedStreams . Subscribe ( . . . ) ; . . . streams . OnNext ( seq1 ) ; streams . OnNext ( seq2 ) ; . . . streams . OnNext ( seq3 ) ; streams . OnNext ( seq4 ) ; . . . streams . OnCompleted ( ) ; <EOF>
x . ToString ( CODE_STRING ) ; String . Format ( CODE_STRING , x ) ; <EOF>
dbContext . ExecuteStoreCommand ( CODE_STRING ) ; <EOF>
var miniCompanies = ( from companies in db . Companies join phones in db . Phones on companies . Id equals phones . CompanyId select new { companies . Name , phones . Phone , } ) . GroupBy ( c = > c . Name ) . Select ( c = > c . FirstOrDefault ( ) ) . ToArray ( ) ; <EOF>
dataGrid . Columns [ CODE_INTEGER ] . Width = new DataGridLength ( double value here for initial size , DataGridLengthUnitType . Star ) ; <EOF>
class Program { static Timer timer ; static void Main ( string [ ] args ) { timer = new Timer ( interval : CODE_INTEGER ) ; timer . Elapsed += Timer_Elapsed ; InterruptPort sensor = new InterruptPort ( /* sensor port information */ ) ; sensor . OnInterrupt += new NativeEventHandler ( sensor_OnInterrupt ) ; } private static void sensor_OnInterrupt ( uint data1 , uint data2 , DateTime time ) { Console . WriteLine ( DateTime . Now ) ; timer . Enabled = true ; } private static void Timer_Elapsed ( object sender , ElapsedEventArgs e ) { Console . WriteLine ( DateTime . Now ) ; timer . Enabled = false ; } } <EOF>
[ System :: Runtime :: InteropServices :: UnmanagedFunctionPointerAttribute ( CallingConvention :: Cdecl ) ] public delegate long SRCCallback ( void * cb_data , float * * data ) ; static IntPtr CallbackNew ( SRCCallback ^ % func , RabbitConverter converter_type , int channels , int * error , void * cb_data ) { . . . } <EOF>
Dictionary < Guid , string > idsAndStrings = new Dictionary < Guid , string > { { Guid . NewGuid ( ) , CODE_STRING } , { Guid . NewGuid ( ) , CODE_STRING } , } ; <EOF>
name = name . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
RestRequest request ; request = new RestRequest ( CODE_STRING + orderID , Method . GET ) ; IRestResponse response = client . Execute ( request ) ; XElement orderXML = XElement . Parse ( response . Content ) ; XElement orderEl = orderXML . Descendants ( ) . FirstOrDefault ( ) ; orderEl . Element ( CODE_STRING ) . Value = CODE_STRING ; request = new RestRequest ( CODE_STRING , Method . PUT ) ; request . AddParameter ( CODE_STRING , orderXML . ToString ( ) , ParameterType . RequestBody ) ; IRestResponse response2 = client . Execute ( request ) ; <EOF>
modalForm . ShowDialog ( yourForm ) <EOF>
public string Text { get { return richTextBox1 . Text ; } } <EOF>
filterContext . HttpContext . Request . IsAjaxRequest ( ) <EOF>
protected override void OnBackPressed ( ) <EOF>
double Latitude = CODE_REAL ; double Longitude = - CODE_REAL ; string json = CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + Latitude + CODE_STRING + Longitude + CODE_STRING + CODE_STRING ; <EOF>
MailAddress addr = new MailAddress ( CODE_STRING ) ; string name = addr . User ; string domain = addr . Host ; <EOF>
int i = CODE_INTEGER ; long sum = CODE_INTEGER ; while ( sum < int . MaxValue ) { var s = sizeof ( char ) * ( CODE_STRING + i + CODE_STRING ) . Length ; sum += s ; ++ i ; } Console . WriteLine ( i ) ; Console . ReadLine ( ) ; <EOF>
public static void GetFileWithCredentials ( string userName , string password , string url ) { using ( WebClient wc = new WebClient ( ) ) { wc . Credentials = new NetworkCredential ( userName , password ) ; string xml = wc . DownloadString ( url ) ; XmlDocument tournamentsXML = new XmlDocument ( ) ; tournamentsXML . LoadXml ( xml ) ; } } <EOF>
CODE_STRING + CODE_STRING , con ) ) <EOF>
context . Configuration . ValidateOnSaveEnabled = false ; <EOF>
Source = " { Binding Path = DataContext . ImageTypes , RelativeSource = { RelativeSource FindAncestor , AncestorType = { x : Type UserControl } } } " <EOF>
static void Main ( string [ ] args ) { GetCombination ( new List < int > { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ) ; } static void GetCombination ( List < int > list ) { double count = Math . Pow ( CODE_INTEGER , list . Count ) ; for ( int i = CODE_INTEGER ; i <= count - CODE_INTEGER ; i ++ ) { string str = Convert . ToString ( i , CODE_INTEGER ) . PadLeft ( list . Count , CODE_CHAR ) ; for ( int j = CODE_INTEGER ; j < str . Length ; j ++ ) { if ( str [ j ] == CODE_CHAR ) { Console . Write ( list [ j ] ) ; } } Console . WriteLine ( ) ; } } <EOF>
this . DoubleBuffered = true ; <EOF>
button . MouseEnter += ( s , e ) = > { /*begin Storyboard*/ } ; button . MouseLeave += ( s , e ) = > { if ( EquipmentFilters . Contains ( button ) ) { } } ; button . Click += ( o , i ) = > { EquipmentFilters . Remove ( button ) ; } ; <EOF>
string s = CODE_STRING ; s = Regex . Replace ( s , CODE_STRING , m = > HttpUtility . HtmlEncode ( m . Value ) ) . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) ; s = HttpUtility . HtmlDecode ( s ) . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) ; XmlDocument doc = new XmlDocument ( ) ; doc . LoadXml ( s ) ; <EOF>
btn . TouchUpInside += delegate { UIView . Animate ( CODE_REAL , delegate { lbl . Alpha = CODE_REAL ; } , delegate { UIView . Animate ( CODE_REAL , delegate { lbl . Alpha = CODE_REAL ; } ) ; } ) ; } ; <EOF>
if ( reader . ReadToDescendant ( CODE_STRING ) ) { reader . Read ( ) ; result = reader . Value ; break ; } <EOF>
Button . Content = CODE_STRING ; < Button Content = CODE_STRING / > <EOF>
int i = CODE_INTEGER ; string filename = fu_new_doc_vsn . FileName ; if ( fu_new_doc_vsn . HasFile ) { while ( System . IO . File . Exists ( Server . MapPath ( CODE_STRING ) + filename ) ) { i ++ ; filename = fu_new_doc_vsn . Name + CODE_STRING + i . ToString ( ) + CODE_STRING + Path . GetFileNameWithoutExtension ( fu_new_doc_vsn . FileName ) ; } fu_new_doc_vsn . PostedFile . SaveAs ( Server . MapPath ( CODE_STRING ) + filename ) ; } <EOF>
public static byte SetBits ( byte oldValue , byte newValue , int startBit , int bitCount ) { if ( startBit < CODE_INTEGER || startBit > CODE_INTEGER || bitCount < CODE_INTEGER || bitCount > CODE_INTEGER || startBit + bitCount > CODE_INTEGER ) throw new OverflowException ( ) ; int mask = ( CODE_INTEGER > > CODE_INTEGER - bitCount ) << startBit ; return Convert . ToByte ( ( oldValue & ( ~ mask ) ) | ( ( newValue << startBit ) & mask ) ) ; } <EOF>
HtmlWeb web = new HtmlWeb ( ) ; HtmlDocument doc = web . Load ( CODE_STRING ) ; string html = doc . DocumentNode . Descendants ( CODE_STRING ) . Single ( ) . InnerHtml ; <EOF>
var rawEmailBytes = pseudo_GetRawEmail ( ) ; var signedCmsBytes = psuedo_GetSignedCmsData ( rawEmailBytes ) var signedCms = new SignedCms ( ) ; signedCms . Decode ( signedCmsBytes ) foreach ( var certificate in signedCms . Certificates ) { psuedo_StoreCertificate ( certificate ) } <EOF>
public class CachingRepository : ICustomerRepository { private readonly ICustomerRepository remoteRep ; private readonly ICustomerRepository localRep ; public CachingRepository ( ICustomerRepository remoteRep , ICustomerRepository localRep ) { this . remoteRep = remoteRep ; this . localRep = localRep ; } } <EOF>
Result me = new Result ( ) { address1 = ( string ) jResult [ CODE_STRING ] [ CODE_INTEGER ] [ CODE_STRING ] , city = ( string ) jResult [ CODE_STRING ] [ CODE_INTEGER ] [ CODE_STRING ] , state = ( string ) jResult [ CODE_STRING ] [ CODE_INTEGER ] [ CODE_STRING ] , zip = ( string ) jResult [ CODE_STRING ] [ CODE_INTEGER ] [ CODE_STRING ] } ; <EOF>
private static List < Tuple < TimeSpan , TimeSpan > > ComputeMissingTimeSpans ( List < Tuple < TimeSpan , TimeSpan > > availableIntervals , TimeSpan minSpan , TimeSpan maxSpan ) { List < Tuple < TimeSpan , TimeSpan > > missingTime = new List < Tuple < TimeSpan , TimeSpan > > ( ) ; if ( availableIntervals . Count == CODE_INTEGER ) { missingTime . Add ( new Tuple < TimeSpan , TimeSpan > ( minSpan , maxSpan ) ) ; return missingTime ; } foreach ( var interval in availableIntervals ) { if ( ( interval . Item1 - minSpan ) . TotalSeconds > CODE_INTEGER ) { missingTime . Add ( new Tuple < TimeSpan , TimeSpan > ( minSpan , interval . Item1 . Add ( TimeSpan . FromSeconds ( - CODE_INTEGER ) ) ) ) ; } minSpan = interval . Item2 . Add ( TimeSpan . FromSeconds ( CODE_INTEGER ) ) ; } if ( ( maxSpan - minSpan ) . TotalSeconds > CODE_INTEGER ) missingTime . Add ( new Tuple < TimeSpan , TimeSpan > ( minSpan , maxSpan ) ) ; return missingTime ; } <EOF>
public void Method1 ( ) { MyWaitHandle . Reset ( ) ; MyWaitHandle . WaitOne ( CODE_INTEGER ) ; } <EOF>
private void MenuItem_Click ( object sender , RoutedEventArgs e ) { ( ( MenuItem ) sender ) . IsEnabled = false ; } <EOF>
private void Button_Click ( object sender , RoutedEventArgs e ) { Window1 w1 = new Window1 ( ) ; w1 . Show ( ) ; } <EOF>
using System ; using System . ComponentModel ; using System . Windows . Forms ; class PathLabel : Label { [ Browsable ( false ) ] public override bool AutoSize { get { return base . AutoSize ; } set { base . AutoSize = false ; } } protected override void OnPaint ( PaintEventArgs e ) { TextFormatFlags flags = TextFormatFlags . Left | TextFormatFlags . PathEllipsis ; TextRenderer . DrawText ( e . Graphics , this . Text , this . Font , this . ClientRectangle , this . ForeColor , flags ) ; } } <EOF>
int [ ] diff = Enumerable . Range ( CODE_INTEGER , arr1 . Length ) . Where ( i = > arr1 [ i ] != arr2 [ i ] ) . ToArray ( ) ; <EOF>
rightMargin - measuredStringWidth <EOF>
public class Key { public Key ( object adaptee ) { . . . } } <EOF>
var fileContent = File . ReadAllBytes ( CODE_STRING ) ; Clipboard . SetData ( DataFormats . Text , Convert . ToBase64String ( fileContent ) ) ; var readBackFileContent = ( string ) Clipboard . GetData ( DataFormats . Text ) ; File . WriteAllBytes ( CODE_STRING , Convert . FromBase64String ( readBackFileContent ) ) ; <EOF>
foreach ( string email in emailArray ) { SmtpClient smtp = new SmtpClient ( CODE_STRING , CODE_INTEGER ) ; smtp . UseDefaultCredentials = false ; smtp . Credentials = new NetworkCredential ( CODE_STRING , CODE_STRING ) ; smtp . EnableSsl = true ; MailMessage msg = new MailMessage ( CODE_STRING , email ) ; msg . Subject = CODE_STRING ; msg . Body = CODE_STRING ; smtp . Send ( msg ) ; } <EOF>
var current = startDate ; do { list . Add ( new MyEvent ( CODE_STRING , current ) ) ; current = current . AddDays ( CODE_INTEGER ) ; } while ( current < endDate ) ; <EOF>
Readonly Property PropNeeded ( ) As Integer <EOF>
private void sldRotate_ValueChanged ( object sender , RoutedPropertyChangedEventArgs < double > e ) { if ( _shape != null ) { var rt = new RotateTransform ( ) ; rt . Angle = sldRotate . Value ; _shape . RenderTransform = rt ; _shape . RenderTransformOrigin = new Point ( CODE_REAL , CODE_REAL ) ; } } <EOF>
DataView dv = new DataView ( dataSet1 . Tables [ CODE_INTEGER ] ) ; dv . Sort = CODE_STRING ; <EOF>
string filename = textBox1 . Text ; string path = System . IO . Path . Combine ( CODE_STRING , filename + CODE_STRING ) ; System . IO . FileInfo file = new System . IO . FileInfo ( path ) ; file . Create ( ) ; <EOF>
var lrowCount = ltableData . Values . First ( ) . Length ; var lrowCount = ltableData . First ( ) . Value . Length ; <EOF>
INTEGER PRIMARY KEY <EOF>
public IInputElement DrawingTarget { get { return _canvas ; } } <EOF>
var dt = new DataTable ( ) ; dt . Columns . Add ( CODE_STRING , typeof ( int ) ) ; dt . Columns . Add ( CODE_STRING , typeof ( int ) ) ; dt . Rows . Add ( CODE_INTEGER , CODE_INTEGER ) ; dt . Rows . Add ( CODE_INTEGER , CODE_INTEGER ) ; dt . Rows . Add ( CODE_INTEGER , CODE_INTEGER ) ; dt . Rows . Add ( CODE_INTEGER , CODE_INTEGER ) ; var result = from DataRow x in dt . Rows group x by ( ( int ) x [ CODE_STRING ] ) / CODE_INTEGER into grp select new { LowerBoundIncl = grp . Key * CODE_INTEGER , UpperBoundExcl = ( grp . Key + CODE_INTEGER ) * CODE_INTEGER , TotalCount = grp . Sum ( y = > ( int ) y [ CODE_STRING ] ) } ; <EOF>
class Program { static void Main ( ) { var controlType = typeof ( Control ) ; var controls = controlType . Assembly . GetTypes ( ) . Where ( t = > controlType . IsAssignableFrom ( t ) && t . Namespace == CODE_STRING ) ; foreach ( var control in controls ) { Console . WriteLine ( control ) ; } } } <EOF>
var firstDayOfMonth = new DateTime ( year , month , CODE_INTEGER ) ; DateTime startOfCalendar = FirstDayOfWeekOnOrBefore ( firstDayOfMonth , DayOfWeek . Monday ) ; public static DateTime FirstDayOfWeekOnOrBefore ( DateTime date , DayOfWeek dayOfWeek ) { while ( date . DayOfWeek != dayOfWeek ) { date = date . AddDays ( - CODE_INTEGER ) ; } return date ; } <EOF>
{ \ pict \ pngblip \ picw10449 \ pich3280 \ picwgoal5924 \ pichgoal1860 hex data } { \ pict \ pngblip \ picw10449 \ pich3280 \ picwgoal5924 \ pichgoal1860 \ bin binary data } <EOF>
dgvEvents . Rows [ n ] . Cells [ CODE_INTEGER ] . Value = dr [ CODE_INTEGER ] . TrimEnd ( CODE_CHAR ) . ToString ( ) ; <EOF>
startInfo . Arguments = CODE_STRING + inbackpath + CODE_STRING ; <EOF>
class LineNumberTextReader : TextReader { private readonly TextReader reader ; private int b ; private int line ; public LineNumberTextReader ( TextReader reader ) { if ( reader == null ) throw new ArgumentNullException ( CODE_STRING ) ; this . reader = reader ; } public int Line { get { return this . line ; } } public override int Peek ( ) { return this . reader . Peek ( ) ; } public override int Read ( ) { int b = this . reader . Read ( ) ; if ( ( this . b == ' ' ) || ( this . b == CODE_CHAR && b != ' ' ) ) this . line ++ ; return this . b = b ; } protected override void Dispose ( bool disposing ) { if ( disposing ) this . reader . Dispose ( ) ; } } <EOF>
public static IQueryable < T > GetSCOs < T > ( SCODataContext dc ) where T : SCO { return dc . SCOs . OfType < T > ( ) ; } <EOF>
namespace BarStuff { public class DummyBar { } public class Bar { . . . } . . . } using BarStuff ; namespace FooStuff { [ XmlInclude ( typeof ( DummyBar ) ) ] public class Foo { public T GetBar < TBar , T > ( string key ) where TBar : Bar < T > { . . . } } <EOF>
public int countRootFolders ( Microsoft . Office . Interop . Outlook . MAPIFolder aFolder ) { int rootCount = aFolder . Folders . Count ; foreach ( Microsoft . Office . Interop . Outlook . MAPIFolder subfolder in aFolder . Folders ) { rootCount += countRootFolders ( subFolder ) ; } return rootCount ; } <EOF>
void Application_Idle ( object sender , EventArgs e ) { Invalidate ( ) ; LevelView . Update ( ) ; } <EOF>
name_list2 = new List < string > ( name_list1 ) ; <EOF>
var sortedList = ordersList . OrderBy ( p = > p . ProductName ) . ToList ( ) ; <EOF>
public static T GetEnumValueFromDescription < T > ( string description ) { MemberInfo [ ] fis = typeof ( T ) . GetFields ( ) ; foreach ( var fi in fis ) { DescriptionAttribute [ ] attributes = ( DescriptionAttribute [ ] ) fi . GetCustomAttributes ( typeof ( DescriptionAttribute ) , false ) ; if ( attributes != null && attributes . Length > CODE_INTEGER && attributes [ CODE_INTEGER ] . Description == description ) return ( T ) Enum . Parse ( typeof ( T ) , fi . Name ) ; } throw new Exception ( CODE_STRING ) ; } <EOF>
public class MyMapMode : Microsoft . Maps . MapControl . Core . MercatorMode { public Range < double > MapZoomRange = new Range < double > ( CODE_REAL , CODE_REAL ) ; protected override Range < double > GetZoomRange ( Location center ) { return this . MapZoomRange ; } } <EOF>
IWebElement element = webDriver . FindElement ( By . XPath ( CODE_STRING ) ) ; <EOF>
var mismatches = Enumerable . Range ( CODE_INTEGER , Math . Min ( list1 . Length , list2 . Length ) ) . Where ( i = > list1 [ i ] != list2 [ i ] ) . ToList ( ) ; <EOF>
private void clbAllRooms_ItemCheck ( object sender , ItemCheckEventArgs e ) { this . BeginInvoke ( new MethodInvoker ( ( ) = > Update_rtbPrice ( ) ) ) ; } <EOF>
Thread . CurrentThread . CurrentCulture = new CultureInfo ( CODE_STRING ) ; <EOF>
string GetLessVariableByName ( string name , string lessContent ) { int optimisation = CODE_INTEGER ; Func < IStylizer > defaultStylizer = ( ) = > new PlainStylizer ( ) ; Func < IImporter > defaultImporter = ( ) = > new Importer ( ) ; Func < Parser > defaultParser = ( ) = > new Parser ( optimisation , defaultStylizer ( ) , defaultImporter ( ) ) ; Func < Env > defaultEnv = ( ) = > { return new Env ( ) ; } ; Env env = defaultEnv ( ) ; Parser parser = defaultParser ( ) ; var tree = parser . Parse ( lessContent . Trim ( ) , CODE_STRING ) ; var rule = tree . Rules . ToArray ( ) [ CODE_INTEGER ] ; Node node = rule . Evaluate ( env ) ; var variableValue = tree . Variable ( name , node ) ; return variableValue == null ? null : variableValue . Value . ToString ( ) ; } <EOF>
public class ItemDataSource : BindingSource { private ICollection < ItemData > list ; public ItemDataSource ( ) { try { list = QBCom . GetItemList ( ) ; } catch ( Exception e ) { list = new List < ItemData > ( ) ; } this . DataSource = list ; } public ItemDataSource ( IEnumerable < ItemData > data ) { list = data . ToList ( ) ; this . DataSource = list ; } } <EOF>
SELECT sprocs . ROUTINE_NAME , parms . PARAMETER_NAME , parms . DATA_TYPE FROM INFORMATION_SCHEMA . ROUTINES sprocs LEFT OUTER JOIN INFORMATION_SCHEMA . PARAMETERS parms ON parms . SPECIFIC_NAME = sprocs . ROUTINE_NAME WHERE sprocs . ROUTINE_TYPE = ' PROCEDURE ' -- AND PATINDEX ( ' /*<SomeKeyToSearch>*/ ' , sprocs . ROUTINE_DEFINITION ) > CODE_INTEGER <EOF>
public class MyUserControl : Control { public event EventHandler < EventArgs > INeedData ; public Data Data { get ; set ; } private class DoSomething ( ) { if ( INeedData != null ) INeedData ( this , null ) ; } } . . . var _myUserControl = new MyUserControl ( ) ; private void Form1_Load ( object sender , EventArgs e ) { _myUserControl . INeedData += new EventHandler < EventArgs > ( MyUserControl_INeedData ) ; this . Controls . Add ( myUserControl ) ; } void MyUserControl_INeedData ( object sender , EventArgs e ) { _myUserControl . Data = SomeData ; } <EOF>
private void bgw1_DoWork ( object sender , DoWorkEventArgs e ) { { this . Invoke ( new MethodInvoker ( delegate { Text = textBox1 . Text ; } ) ) ; } } <EOF>
PowerPoint . Application ppApp = Globals . ThisAddIn . Application ; left = ppApp . ActivePresentation . PageSetup . SlideWidth - <EOF>
create table A ( id_a int not null identity ( CODE_INTEGER , CODE_INTEGER ) primary key , name varchar ( CODE_INTEGER ) ) create table B ( id_b int not null identity ( CODE_INTEGER , CODE_INTEGER ) primary key , id_a int null , name_hash varbinary ( CODE_INTEGER ) ) ; insert into A ( name ) output inserted . id_a , hashbytes ( ' MD5 ' , inserted . name ) into B ( id_a , name_hash ) values ( ' Jonathan Doe ' ) select * from A select * from B <EOF>
public bool TryDetectNewLine ( string path , out string newLine ) { using ( var fileStream = File . OpenRead ( path ) ) { char prevChar = CODE_CHAR ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { int b ; if ( ( b = fileStream . ReadByte ( ) ) == - CODE_INTEGER ) break ; char curChar = ( char ) b ; if ( curChar == ' ' ) { newLine = prevChar == CODE_CHAR ? " \ r CODE_STRING " ; return true ; } prevChar = curChar ; } newLine = Environment . NewLine ; return false ; } } <EOF>
string UserName = System . Threading . Thread . CurrentPrincipal . Identity . Name ; <EOF>
var dict = arr . GroupBy ( x = > x ) . Where ( x = > selectedTeams . Contains ( x ) ) . ToDictionary ( x = > x . Key , x = > x . Count ( ) ) ; <EOF>
static string getValidDescription ( string description ) { if ( description == null ) return null ; return CultureInfo . CurrentCulture . TextInfo . ToTitleCase ( description ) ; } var qry = from details in doc . Root . Elements ( CODE_STRING ) select new FeedResource { Title = ( string ) details . Element ( CODE_STRING ) , Host = ( string ) details . Element ( CODE_STRING ) , Description = getValidDescription ( ( string ) details . Element ( CODE_STRING ) ) , PublishedOn = ( DateTime ? ) details . Element ( CODE_STRING ) , Generator = ( string ) details . Element ( CODE_STRING ) , Language = ( string ) details . Element ( CODE_STRING ) } ; <EOF>
public List < string > GetClientAndPermittedActivities ( int clientId ) { return ReadAllRaw ( ) . Where ( c = > c . Id == clientId ) . SelectMany ( ct = > ct . ClientType . Role . PermittedActivities , ( s , c ) = > c . Uid ) . ToList ( ) ; } <EOF>
string input = CODE_STRING ; int colon = input . IndexOf ( CODE_CHAR ) ; string left = input . Substring ( CODE_INTEGER , colon ) ; string right = input . Substring ( colon + CODE_INTEGER ) ; List < MyClass > result = right . Split ( CODE_CHAR ) . Select ( x = > new MyClass { Column1 = left , Column2 = x , } ) . ToList ( ) ; <EOF>
string s = CODE_STRING ; string escaped = s . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
Users u = null ; IList < Users > users = this . Session . QueryOver < Users > ( ) . Where ( f = > f . role == role ) . SelectList ( list = > list . Select ( p = > p . username ) . WithAlias ( ( ) = > u . username ) . Select ( p = > p . email ) . WithAlias ( ( ) = > u . email ) . Select ( p = > p . firstname ) . WithAlias ( ( ) = > u . firstname ) ) . TransformUsing ( Transformers . AliasToBean < Users > ( ) ) . List < Users > ( ) ; <EOF>
if ( dr [ CODE_STRING ] == CODE_STRING ) dr [ CODE_STRING ] = null ; <EOF>
public static IEnumerable < Cookie > GetAllCookies ( CookieContainer cookieContainer ) { var domainTable = ( Hashtable ) cookieContainer . GetType ( ) . InvokeMember ( name : CODE_STRING , invokeAttr : BindingFlags . NonPublic | BindingFlags . GetField | BindingFlags . Instance , binder : null , target : cookieContainer , args : new object [ ] { } ) ; return domainTable . Keys . Cast < string > ( ) . Select ( d = > cookieContainer . GetCookies ( new Uri ( CODE_STRING + d . TrimStart ( CODE_CHAR ) ) ) ) . SelectMany ( c = > c . Cast < Cookie > ( ) ) ; } <EOF>
var r = new Regex ( CODE_STRING ) ; var input = CODE_STRING ; var output = r . Replace ( input , CODE_STRING ) ; <EOF>
Var CDNumbers = From CDNumber in CollectionsDataSet . CD . AsEnumerable ( ) Where CDNumber . Field < int ? > ( CODE_STRING ) != null Select CDNumber . Field < int ? > ( CODE_STRING ) ; <EOF>
InstanceContextMode . Single <EOF>
ruleScreenActive = ! ruleScreenActive ; <EOF>
public event EventHandler TextChanged { add { textbox . TextChanged += value ; } remove { textbox . TextChanged -= value ; } } <EOF>
[ DllImport ( CODE_STRING , CallingConvention = CallingConvention . StdCall ) ] public static extern int SendMessage ( IntPtr hWnd , uint Msg , long lParam , long wParam ) ; [ DllImport ( CODE_STRING , CallingConvention = CallingConvention . StdCall ) ] public static extern bool ReleaseCapture ( ) ; [ DllImport ( CODE_STRING , CallingConvention = CallingConvention . StdCall ) ] public static extern bool ShowWindow ( IntPtr hWnd , int cmdShow ) ; <EOF>
TwitterService service = new TwitterService ( CODE_STRING , CODE_STRING ) ; service . GetTweet ( CODE_INTEGER , ( tweet , response ) = > Dispatcher . BeginInvoke ( ( ) = > MessageBox . Show ( tweet . Text , tweet . Author . ScreenName , MessageBoxButton . OK ) ) ) ; <EOF>
private PdfContentByte _pcb ; Document document = new Document ( ) ; FileStream fileStream = new FileStream ( filePath , FileMode . Open , FileAccess . Read ) ; PdfReader Mypdfreader = new PdfReader ( fileStream ) ; PdfTemplate background = writer . GetImportedPage ( Mypdfreader , CODE_INTEGER ) ; document . NewPage ( ) ; _pcb = writer . DirectContentUnder ; _pcb . AddTemplate ( background , CODE_INTEGER , CODE_INTEGER ) ; _pcb = writer . DirectContent ; _pcb . BeginText ( ) ; _pcb . SetFontAndSize ( BaseFont . CreateFont ( BaseFont . TIMES_ROMAN , BaseFont . CP1252 , false ) , CODE_INTEGER ) ; _pcb . ShowTextAligned ( PdfContentByte . ALIGN_LEFT , text , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; _pcb . EndText ( ) ; writer . Flush ( ) ; fileStream . Close ( ) ; <EOF>
byte [ ] message_to_send = UTF8Encoding . UTF8 . GetBytes ( CODE_STRING ) ; string message received = UTF8Encoding . UTF8 . GetString ( message_to_send ) ; <EOF>
obj . OpenURL ( CODE_STRING ) ; <EOF>
var xelement = XElement . Parse ( outputtext ) ; rate = ( double ) xelement ; <EOF>
var epoch = new DateTime ( . . . ) ; var yourDate = epoch . AddDays ( days_since_epoch ) ; <EOF>
namespace ExtensionMethods { public static class MyExtensions { public static void SetEncryptColumn ( this DataSetType . DataTableRow row , string value ) { row . Encrypt = EncryptValue ( value ) ; } public static string GetEncryptColumn ( this DataSetType . DataTableRow row ) { return DecryptValue ( row . Encrypt ) ; } } } <EOF>
public IEnumerable < Ability > GetAbilitiesForClasses ( string [ ] asClassNames , int iLevel ) { return Classes . Where ( X = > asClassNames . Contains ( X . Name ) ) . SelectMany ( X = > X . Abilities ) . Where ( X = > X . Level <= iLevel ) . ToList ( ) ; } <EOF>
Encrypted is specified for options and file encryption is not supported on the current platform . <EOF>
new Thread ( delegate ( ) { while ( true ) { } } ) . Start ( ) ; <EOF>
var dividend = yearItem . GetType ( ) . GetProperties ( ) . Where ( x = > x . Name . Contains ( CODE_STRING ) || x . Name . Contains ( CODE_STRING ) || x . Name . Contains ( CODE_STRING ) ) ; <EOF>
doc . Root . ReplaceWith ( new XElement ( CODE_STRING , doc . Root ) ) ; <EOF>
var rand = new Random ( ) ; var value = rand . NextDouble ( ) * CODE_INTEGER - CODE_INTEGER ; <EOF>
KnownFolders . SavedPictures <EOF>
this . chart1 . Titles . Add ( CODE_STRING ) ; <EOF>
[ XmlText ] public string Text ; <EOF>
DisableControls ( Control c ) { c . Enable = false ; foreach ( Control child in c . Controls ) DisableControls ( child ) } <EOF>
factorial ( CODE_INTEGER ) : = CODE_INTEGER factorial ( CODE_INTEGER ) : = CODE_INTEGER factorial ( n ) : = n * factorial ( n - CODE_INTEGER ) <EOF>
char recdata [ CODE_INTEGER ] ; int bytes = CODE_INTEGER ; if ( Serial . available ( ) ) { bytes = Serial . readBytes ( recdata , MAX_LENGTH ) ; checkdata ( ) ; } <EOF>
int intClient = CODE_INTEGER ; try { intClient = ( int ) lbxClient . SelectedValue ; } catch ( Exception ) { intClient = CODE_INTEGER ; } <EOF>
private readonly string _path = ConfigurationManager . AppSettings [ CODE_STRING ] . ToString ( CultureInfo . InvariantCulture ) ; <EOF>
public class Table { public Table ( IMapInfo map ) { _map = map ; } public string Name { get { string value = _map . Eval ( CODE_STRING ) ; if ( String . IsNullOrEmpty ( value ) ) { value = CODE_STRING ; } return value ; } } private IMapInfo _map ; } [ TestFixture ] public class TableFixture { [ Test ] public void CanHandleNullsFromCOM ( ) { MockRepository mocks = new MockRepository ( ) ; IMapInfo map = mocks . CreateMock < IMapInfo > ( ) ; using ( mocks . Record ( ) ) { Expect . Call ( map . Eval ( CODE_STRING ) . Return ( null ) ; } using ( mocks . PlayBack ( ) ) { Table table = new Table ( map ) ; Assert . AreEqual ( CODE_STRING , table . Name , CODE_STRING ) ; } mocks . verify ( ) ; } } <EOF>
public int Import ( string path ) { try { string cmd = CODE_STRING + path + " ' INTO TABLE zen_hardware . products FIELDS TERMINATED BY CODE_CHAR LINES TERMINATED BY ' ' " ; int a = MySqlHelper . ExecuteNonQuery ( conn . Connect ( ) , cmd ) ; return a ; } catch { return - CODE_INTEGER ; } } <EOF>
var watch = Stopwatch . StartNew ( ) ; Console . WriteLine ( CODE_STRING , watch . ElapsedMilliseconds ) ; <EOF>
Microsoft . Win32 . OpenFileDialog dlg = new Microsoft . Win32 . OpenFileDialog ( ) ; dlg . DefaultExt = CODE_STRING ; dlg . Filter = CODE_STRING ; Nullable < bool > result = dlg . ShowDialog ( ) ; if ( result == true ) { string Myfile = dlg . FileName ; } <EOF>
public MainPage ( ) { InitializeComponent ( ) ; this . Loaded += new RoutedEventHandler ( DisplayMessage ) ; } void DisplayMessage ( object sender , RoutedEventArgs e ) { MessageBox . Show ( ContentPanel . ActualHeight . ToString ( ) ) ; } <EOF>
protected override void OnStart ( string [ ] args ) { if ( _serviceHost != null ) { _serviceHost . Close ( ) ; } _counterObject = new CounterClass ( ) ; _counterObject . StartCounting ( ) ; _wcfService = new CounterWCFService ( _counterObject ) ; _serviceHost = new ServiceHost ( _wcfService ) ; _serviceHost . Open ( ) ; } <EOF>
public static Expression < Func < MyEntity , int ? > > EqualsValue ( MyType myType , int value ) { return ( e ) = > GetItem ( myType ) ( e ) == value ; } <EOF>
var Results = DataAdapter . FillSchema ( NewData , SchemaType . Source , tableName ) ; <EOF>
List < IPAddress > addresses = new List < IPAddress > ( ) ; foreach ( string input in this . textBox1 . Lines ) { IPAddress ip ; if ( IPAddress . TryParse ( input , out ip ) ) { addresses . Add ( ip ) ; } else { Console . WriteLine ( CODE_STRING , input ) ; } } <EOF>
private class MyObject { public bool Method1 ( ) { return true ; } public bool Method2 ( ) { return false ; } } private static bool MyFunction ( Func < bool > methodOnObject ) { bool returnValue = methodOnObject ( ) ; return returnValue ; } private static void OverallFunction ( ) { MyObject myObject = new MyObject ( ) ; bool method1Success = MyFunction ( myObject . Method1 ) ; bool method2Success = MyFunction ( myObject . Method2 ) ; } <EOF>
CODE_INTEGER . Change the assembly name and / or namespace name in project -> properties CODE_INTEGER . Localization DLL uses ( assumes ) assembly name as the default namespace . Here we need to provide the namespace name . CODE_INTEGER . Rebuild DLL and add reference to project . <EOF>
var results = new List < Products > ( ) ; foreach ( DataGridViewRow row in productsDataGridView . Rows ) { var item = row . DataBoundItem as Products ; if ( item . Promotions > CODE_INTEGER ) { results . Add ( item ) ; } } promotionsDataGridView . DataSource = results ; <EOF>
SchoolDepartment newPerson = rows [ rows . Count - CODE_INTEGER ] ; MessageBox . Show ( newPerson . ID . ToString ( ) ) ; <EOF>
using System ; namespace ConsoleApplication1 { enum ButtonChanger { Change1 = CODE_INTEGER , Change2 = CODE_INTEGER , Change3 = CODE_INTEGER } class Program { static void Main ( string [ ] args ) { var changer = GetButtonChanger ( CODE_INTEGER ) ; Console . WriteLine ( changer ) ; Console . WriteLine ( ( int ) changer ) ; } private static ButtonChanger GetButtonChanger ( int i ) { return ( ButtonChanger ) Enum . Parse ( typeof ( ButtonChanger ) , string . Format ( CODE_STRING , i ) ) ; } } } <EOF>
CustomService custsrv = new CustomService ( ) ; List < Code > dept = custsrv . GetDepartment ( true ) ; <EOF>
var ev = new Eval3 . Evaluator ( Eval3 . eParserSyntax . c , /*caseSensitive*/ false ) ; MessageBox . Show ( ev . Parse ( CODE_STRING ) . value . ToString ( ) ) ; <EOF>
function CloseDialog ( tanksize , companyID , accountID , address , serviceContract , cod , divisionId ) { tb_remove ( ) ; var url = ' ServiceTicket . aspx ? CompanyID = ' + companyID + ' & AccountID = ' + accountID + ' & Address = ' + address . replace ( CODE_CHAR , ' % CODE_INTEGER ' ) + ' & TankSize = ' + tanksize + ' & divisionId = ' + divisionId ; window . parent . location . href = url ; } <EOF>
var col = gridView1 . Columns . Add ( ) ; col . FieldName = CODE_STRING ; col . Visible = true ; col . UnboundType = DevExpress . Data . UnboundColumnType . Integer ; gridView1 . CustomUnboundColumnData += gridView1_CustomUnboundColumnData ; void gridView1_CustomUnboundColumnData ( object sender , DevExpress . XtraGrid . Views . Base . CustomColumnDataEventArgs e ) { if ( e . IsGetData ) e . Value = e . ListSourceRowIndex + CODE_INTEGER ; } <EOF>
string [ ] d = Directory . GetDirectories ( CODE_STRING , CODE_STRING , SearchOption . TopDirectoryOnly ) ; DirectoryInfo [ ] di = new DirectoryInfo [ d . Length ] ; for ( int x = CODE_INTEGER ; x < d . Length ; x ++ ) { di [ x ] = new DirectoryInfo ( d [ x ] ) ; } <EOF>
this . combobox . SelectedValue = Table2ID ; <EOF>
Color c = Color . FromArgb ( CODE_INTEGER , Color . Blue ) ; using ( Brush b = new SolidBrush ( c ) ) { e . Graphics . FillRectangle ( b , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; } <EOF>
private void ShowPage ( Page page ) { NavigationWindow popup = new NavigationWindow ( ) ; popup . Height = CODE_INTEGER ; popup . Width = CODE_INTEGER ; popup . Show ( ) ; popup . Navigate ( page ) ; } <EOF>
var myObjectState = myContext . ObjectStateManager . GetObjectStateEntry ( myObject ) ; var modifiedProperties = myObjectState . GetModifiedProperties ( ) ; foreach ( var propName in modifiedProperties ) { Console . WriteLine ( CODE_STRING , propName , myObjectState . OriginalValues [ propName ] , myObjectState . CurrentValues [ propName ] ) ; } <EOF>
range . Borders . LineStyle = Excel . XlLineStyle . xlDot ; range . Borders . Color = ColorTranslator . ToOle ( Color . Red ) ; <EOF>
conditionX ^ conditionY <EOF>
[ MetadataType ( typeof ( IMyAttributes ) ) public DerivedClass : BusinessClass { } public interface IMyAttributes { [ Required ] public string Name { get ; set ; } } <EOF>
DataTable merged = new DataTable ( ) ; merged . Merge ( table1 ) ; merged . Merge ( table2 ) ; merged . Merge ( table3 ) ; lvMyList . DataSource = merged ; lvMyList . DataBind ( ) ; <EOF>
List < string > oldlist = new List < string > ( ) ; List < string > newlist = new List < string > ( ) ; foreach ( string s in oldlist ) { if ( s . Contains ( CODE_CHAR ) ) s = s . Replace ( CODE_CHAR ) , CODE_STRING ) ; newlist . Add ( numFormat ( s ) ) ; } string prefix = CODE_STRING ; string numFormat ( string s ) { string my ; if ( s . Length == CODE_INTEGER ) { my = string . Format ( CODE_STRING , prefix , s . substring ( CODE_INTEGER , CODE_INTEGER ) , s . subtring ( CODE_INTEGER , CODE_INTEGER ) , s . substring ( CODE_INTEGER , CODE_INTEGER ) ; } else if ( s . length == CODE_INTEGER ) { my = string . Format ( CODE_STRING , s . substring ( CODE_INTEGER , CODE_INTEGER ) , s . substring ( CODE_INTEGER , CODE_INTEGER ) , s . subtring ( CODE_INTEGER , CODE_INTEGER ) , s . substring ( CODE_INTEGER , CODE_INTEGER ) ; } return my ; } <EOF>
Response . Redirect ( string . Format ( CODE_STRING , Server . Encode ( path ) , Server . Encode ( path ) , placeholder ) ) ) ) ; <EOF>
[ Flags ] <EOF>
DateTime when = DateTime . ParseExact ( CODE_STRING , CODE_STRING , CultureInfo . InvariantCulture ) ; <EOF>
protected void Page_Load ( object sender , EventArgs e ) { XmlDocument xdoc = new XmlDocument ( ) ; xdoc . Load ( CODE_STRING ) ; XmlNodeList xNodelst = xdoc . DocumentElement . SelectNodes ( CODE_STRING ) ; foreach ( XmlNode xNode in xNodelst ) { litFeed . Text += CODE_STRING ; } } <EOF>
private void createPage ( ) { ClientContext context = new ClientContext ( URL ) ; Site siteCollection = context . Site ; Web site = context . Web ; List pages = site . Lists . GetByTitle ( CODE_STRING ) ; Microsoft . SharePoint . Client . FileCreationInformation fileCreateInfo = new FileCreationInformation ( ) ; fileCreateInfo . Url = CODE_STRING ; context . Load ( pages . RootFolder . Files . Add ( fileCreateInfo ) ) ; context . ExecuteQuery ( ) ; context . Dispose ( ) ; } <EOF>
var dives = from div in htmlDoc . DocumentNode . Descendants ( CODE_STRING ) where div . Id == CODE_STRING select div ; <EOF>
int iterationsNum = ( finish - start ) / CODE_INTEGER ; for ( int i = CODE_INTEGER ; i <= iterationsNum ; i ++ ) { if ( start + i != finish - i ) { swap ( values , start + i , finish - i ) ; } } <EOF>
int rowCount = ( SP1 as DataTable ) . Rows . Count ; <EOF>
String sb ; using ( IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile . GetUserStoreForApplication ( ) ) { if ( myIsolatedStorage . FileExists ( fileName ) ) { StreamReader reader = new StreamReader ( new IsolatedStorageFileStream ( fileName , FileMode . Open , myIsolatedStorage ) ) ; sb = reader . ReadToEnd ( ) ; reader . Close ( ) ; } if ( ! String . IsNullOrEmpty ( sb ) ) { MessageBox . Show ( sb ) ; } } <EOF>
IsInEnum ( ) <EOF>
var filters = chkBx . Where ( r = > r . Checked ) . Select ( r = > r . Text ) . ToList ( ) ; selectedElements = selectedElements . Where ( r = > filters . Contains ( ( string ) r . Parent . Element ( element ) ) ) <EOF>
var sbSql = new System . Text . StringBuilder ( CODE_INTEGER ) ; sbSql . Append ( CODE_STRING ) ; if ( lstItem . Count != CODE_INTEGER ) { foreach ( int value in lstItem ) { if ( sbSql . Length != CODE_INTEGER ) { sbSql . Append ( CODE_STRING ) ; } sbSql . Append ( value ) ; } } else { sbSql . Append ( - CODE_INTEGER ) ; } sbSql . Append ( CODE_STRING ) ; SqlComm . CommandText = sbSql . ToString ( ) ; <EOF>
System . IO . Ports . SerialPort <EOF>
using < Namespace of MyClass > ; public static void Main ( ) { MyClass blah = new MyClass ( ) ; } <EOF>
* [ System [ ( Level = CODE_INTEGER or Level = CODE_INTEGER ) and ( ErrorID != CODE_INTEGER ) ] ] <EOF>
public DataTable GetDates ( ) { DataTable dt = new DataTable ( ) ; dt . Columns . Add ( CODE_STRING , typeof ( DateTime ) ) ; int year = Convert . ToInt32 ( ddyear . SelectedItem . Value ) ; int month = Convert . ToInt32 ( ddmonth . SelectedItem . Value ) ; int daysInMonth = DateTime . DaysInMonth ( year , month ) ; for ( int i = CODE_INTEGER ; i < daysInMonth ; i ++ ) { DataRow dr = dt . NewRow ( ) ; dr [ CODE_STRING ] = new DateTime ( year , month , i + CODE_INTEGER ) ; dt . Rows . Add ( dr ) ; } return dt ; } <EOF>
var query = ( from p in parents from c in p . Children select c ) . Distinct ( ) ; <EOF>
String s = CODE_STRING ; SortedList < string , string > list = new SortedList < string , string > ( ) ; s = s . Remove ( CODE_INTEGER , s . IndexOf ( CODE_CHAR ) ) ; s = s . Remove ( s . LastIndexOf ( CODE_CHAR ) + CODE_INTEGER ) ; string [ ] pairs = s . Split ( new char [ ] { CODE_CHAR } , StringSplitOptions . None ) ; for ( int i = CODE_INTEGER ; i + CODE_INTEGER < pairs . Length ; i += CODE_INTEGER ) { string left = pairs [ i ] . TrimEnd ( CODE_CHAR , CODE_CHAR ) ; string right = pairs [ i + CODE_INTEGER ] . Trim ( CODE_CHAR ) ; list . Add ( left , right ) ; } <EOF>
InputString = InputString . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
CREATE TABLE <EOF>
Password . Encrypt ( ) <EOF>
( from categorytable in tsg . categories where categorytable . category_Id == categoryids select new { Name = categorytable . category_Name , Description = categorytable . category_Description } ) . SingleOrDefault ( ) ; <EOF>
StreamReader reader = File . OpenText ( filename ) ; string line = null while ( ( line = reader . ReadLine ( ) ) != null ) { } reader . Close ( ) ; reader . Dispose ( ) ; <EOF>
string sql = CODE_STRING + CODE_STRING ; OleDbCommand cmd = new OleDbCommand ( sql , conn ) ; cmd . Parameters . AddWithValue ( CODE_STRING , TextTitle . Text ) ; cmd . ExecuteNonQuery ( ) ; <EOF>
public void DisplayLastTakenPhoto ( ) { var directory = new DirectoryInfo ( CODE_STRING ) ; var myFile = directory . EnumerateFiles ( ) . Where ( f = > f . Extension . Equals ( CODE_STRING , StringComparison . CurrentCultureIgnoreCase ) || f . Extension . Equals ( CODE_STRING , StringComparison . CurrentCultureIgnoreCase ) ) . OrderByDescending ( f = > f . LastWriteTime ) . First ( ) ; Assert . IsNotNull ( myFile ) ; } <EOF>
var orders = db . Orders . Where ( ord = > ( isFirstConditionRelevant && ord . Channel == CODE_INTEGER ) || ( isSecondConditionRelvant && ord . Channel == CODE_INTEGER ) ) ; <EOF>
var names = new DirectoryInfo ( Environment . GetFolderPath ( Environment . SpecialFolder . Desktop ) ) . GetDirectories ( ) . Select ( d = > d . Name ) . ToList ( ) ; <EOF>
public double this [ int i ] { get { int index = i - CODE_INTEGER ; if ( index < CODE_INTEGER || index >= scores . Count ) { throw new Exception ( CODE_STRING ) ; } else return scores [ i ] ; } set { int index = i - CODE_INTEGER ; if ( index < CODE_INTEGER || index > scores . Count ) { throw new Exception ( CODE_STRING ) ; } else { if ( index < scores . Count ) scores [ index ] = value ; else scores . Add ( value ) ; } } } <EOF>
ShowDialog ( ) <EOF>
const int LARGE_PACK = CODE_INTEGER ; const int MEDIUM_PACK = CODE_INTEGER ; const int SMALL_PACK = CODE_INTEGER ; int largePacks = ( int ) ( Amount / LARGE_PACK ) ; int mediumPacks = ( int ) ( ( Amount % LARGE_PACK ) / MEDIUM_PACK ) ; int smallPacks = ( int ) ceil ( ( ( float ) ( ( Amount % LARGE_PACK ) % MEDIUM_PACK ) / SMALL_PACK ) ) ; <EOF>
var qOverInclude = QueryOver . Of < MyModel > ( ( ) = > mModel ) . JoinAlias ( ( ) = > mModel . MyList , ( ) = > mList , JoinType . LeftOuterJoin ) . Where ( ( ) = > mList . ID == myID ) . And ( ( ) = > mList . Type == myType ) . Select ( x = > x . IdMyModel ) ; var qOver = _HibSession . QueryOver < MyModel > ( ( ) = > mModel ) . JoinAlias ( ( ) = > mModel . MyDescription , ( ) = > mDescription , JoinType . LeftOuterJoin ) . Where ( ( ) = > mDescription . IDLanguage == myLanguage ) . WithSubquery . WhereProperty ( ( ) = > mModel . IdMyModel ) . In ( qOverSubQuery ) . OrderByAlias ( ( ) = > mModel . IdMyModel ) . Asc . Future < MyModel > ( ) ; <EOF>
Context z3 = new Context ( ) ; Expr t1 = z3 . MkIntConst ( CODE_STRING ) ; Expr t2 = z3 . MkIntConst ( CODE_STRING ) ; Expr x = z3 . MkIntConst ( CODE_STRING ) ; Expr p = z3 . MkAnd ( z3 . MkLt ( ( ArithExpr ) t1 , ( ArithExpr ) x ) , z3 . MkLt ( ( ArithExpr ) x , ( ArithExpr ) t2 ) ) ; Expr ex = z3 . MkExists ( new Expr [ ] { x } , p ) ; Goal g = z3 . MkGoal ( true , true , false ) ; g . Assert ( ( BoolExpr ) ex ) ; Tactic tac = Instance . Z3 . MkTactic ( CODE_STRING ) ; ApplyResult a = tac . Apply ( g ) ; <EOF>
var info = Application . GetResourceStream ( new Uri ( CODE_STRING ) ) ; var cursor = new Cursor ( info . Stream ) ; <EOF>
Application . Current . Exit ( ) <EOF>
public override void Execute ( Guid targetInstanceId ) { foreach ( SPSite site in this . WebApplication . Sites ) { try { if ( SPSite . Exists ( new Uri ( site . Url ) ) && null != site . Features [ FeatureId . AlertMeJob ] ) { try { ExecuteJob ( site ) ; } catch ( Exception ex ) { } } } finally { site . Dispose ( ) ; } } } <EOF>
ru . AsyncOperationCompleted += new AsyncOperationCompletedEventHandler ( ru_AsyncOperationCompleted ) ; void ru_AsyncOperationCompleted ( object sender , AsyncOperationCompletedEventArgs e ) { YouTubeRequestSettings ytSettings = new YouTubeRequestSettings ( CODE_STRING , googleDevKey , ytUsername , ytPassword ) ; Video v = ytRequest . ParseVideo ( e . ResponseStream ) ; string videoId = v . VideoId ; string watchPage = v . WatchPage . ToString ( ) ; } <EOF>
public class SparseGraphPathFinder : PathFinder < SparseGraph < ConcreteNode , ConcreteEdge > , ConcreteNode , ConcreteEdge > { } <EOF>
using System ; using System . Collections . Generic ; using System . Linq ; using System . Text ; using iTextSharp . text . pdf ; using iTextSharp . text . xml ; namespace GetPages_PDF { class Program { static void Main ( string [ ] args ) { string ppath = CODE_STRING ; PdfReader pdfReader = new PdfReader ( ppath ) ; int numberOfPages = pdfReader . NumberOfPages ; Console . WriteLine ( numberOfPages ) ; Console . ReadLine ( ) ; } } } <EOF>
System . Text . UnicodeEncoding uni = new UnicodeEncoding ( ) ; byteArray = uni . GetBytes ( data ) ; <EOF>
Attachment data = new Attachment ( CODE_STRING , MediaTypeNames . Application . Octet ) ; message . Attachments . Add ( data ) ; <EOF>
public Form1 ( ) { InitializeComponent ( ) ; } <EOF>
var ds = new DataSet ( ) ; mycommand . CommandText = sql ; SQLLiteDataAdapter adapter = new SQLLiteDataAdapter ( mycommand ) ; adapter . Fill ( ds ) ; <EOF>
public string Display ( ) { return cproduct . Description + CODE_STRING + cquantity . ToString ( ) + CODE_STRING + cproduct . UnitPrice . ToString ( CODE_STRING ) + CODE_STRING + ( cquantity * cproduct . UnitPrice ) . ToString ( CODE_STRING ) ; } <EOF>
Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) . SelectMany ( i = > Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) , ( i , j ) = > new Tuple < int , int > ( i , j ) ) . ToList ( ) ; <EOF>
Random rand = new Random ( ) ; text = Regex . Replace ( text , CODE_STRING , match = > { int from = int . Parse ( match . Groups [ CODE_INTEGER ] . Value ) , to = int . Parse ( match . Groups [ CODE_INTEGER ] . Value ) ; return rand . Next ( from , to + CODE_INTEGER ) . ToString ( ) ; } ) ; <EOF>
int i = CODE_INTEGER ; decimal d = ( decimal ) i / CODE_INTEGER ; <EOF>
public void BatchBulkCopy ( DataTable dataTable , string DestinationTbl , int batchSize ) { DataTable dtInsertRows = dataTable ; using ( SqlBulkCopy sbc = new SqlBulkCopy ( connectionString , SqlBulkCopyOptions . KeepIdentity ) ) { sbc . DestinationTableName = DestinationTbl ; sbc . BatchSize = batchSize ; sbc . ColumnMappings . Add ( CODE_STRING , CODE_STRING ) ; sbc . ColumnMappings . Add ( CODE_STRING , CODE_STRING ) ; sbc . WriteToServer ( dtInsertRows ) ; } } <EOF>
private bool addingPage = false ; . . . . private void tabControl1_SelectedIndexChanged ( object sender , EventArgs e ) { if ( ! addingPage ) { addingPage = true ; TabPage tab = new TabPage ( CODE_STRING ) ; tabControl1 . TabPages . Insert ( tabControl1 . TabPages . Count - CODE_INTEGER , tab ) ; tabControl1 . SelectedTab = tab ; addingPage = false ; } } <EOF>
public static readonly DependencyProperty HighlightedProperty = DependencyProperty . Register ( CODE_STRING , typeof ( int ) , typeof ( MyListView ) , new PropertyMetadata ( null , propertyChanged ) ) ; private static void propertyChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { int newValue = ( int ) e . NewValue ; ListView lv = ( ListView ) d ; foreach ( ListViewItem lvi in lv . Items ) { if ( lv . Items . IndexOf ( lvi ) == newValue ) { lvi . Background = new SolidColorBrush ( Colors . LightGreen ) ; } else { lvi . Background = new SolidColorBrush ( ) ; } } } <EOF>
foreach ( DataRow sourcerow in dt1 . Rows ) { DataRow destRow = dt2 . NewRow ( ) ; destRow [ CODE_STRING ] = sourcerow [ CODE_STRING ] ; destRow [ CODE_STRING ] = sourcerow [ CODE_STRING ] ; destRow [ CODE_STRING ] = sourcerow [ CODE_STRING ] ; destRow [ CODE_STRING ] = sourcerow [ CODE_STRING ] ; dt2 . Rows . Add ( destRow ) ; } <EOF>
/// <summary> /// This is a dummy attribute to support silverlight /// </summary> /// <remarks></remarks> public class Serializable : Attribute { public Serializable ( ) : base ( ) { } } <EOF>
public class MyClass { public void MyMethod ( ) { } } <EOF>
switch ( e . KeyData ) { case Keys . F6 : if ( MyGridView . NewRowIndex > CODE_INTEGER && MyGridView . NewRowIndex == rowIndex ) { int colIndex = MyGridView . CurrentCell . ColumnIndex ; MyGridView . Rows . Add ( ) ; MyGridView . CurrentCell = MyGridView . Rows [ rowIndex ] . Cells [ colIndex ] ; MyGridView . CurrentRow . Cells [ CustomColumn . Index ] . Value = MyGridView . Rows [ rowIndex - CODE_INTEGER ] . Cells [ Customer . Index ] . Value ; MyGridView . CurrentRow . Cells [ DateColumn . Index ] . Value = MyGridView . Rows [ rowIndex - CODE_INTEGER ] . Cells [ DateColumn . Index ] . Value ; MyGridView . CurrentRow . Cells [ RefColumn . Index ] . Value = MyGridView . Rows [ rowIndex - CODE_INTEGER ] . Cells [ RefColumn . Index ] . Value ; } } <EOF>
string span = CODE_STRING ; TimeSpan ts = new TimeSpan ( int . Parse ( span . Split ( CODE_CHAR ) [ CODE_INTEGER ] ) , int . Parse ( span . Split ( CODE_CHAR ) [ CODE_INTEGER ] ) , CODE_INTEGER ) ; <EOF>
void fieldFilterTxtBx_TextChanged ( object sender , EventArgs e ) { this . fieldsTree . BeginUpdate ( ) ; this . fieldsTree . Nodes . Clear ( ) ; if ( this . fieldFilterTxtBx . Text != string . Empty ) { foreach ( TreeNode _parentNode in _fieldsTreeCache . Nodes ) { foreach ( TreeNode _childNode in _parentNode . Nodes ) { if ( _childNode . Text . StartsWith ( this . fieldFilterTxtBx . Text ) ) { this . fieldsTree . Nodes . Add ( ( TreeNode ) _childNode . Clone ( ) ) ; } } } } else { foreach ( TreeNode _node in this . _fieldsTreeCache . Nodes ) { fieldsTree . Nodes . Add ( ( TreeNode ) _node . Clone ( ) ) ; } } this . fieldsTree . EndUpdate ( ) ; } <EOF>
modelBuilder . Entity < Product > ( ) . HasMany ( x = > x . Clients ) . WithMany ( x = > x . Products ) . Map ( x = > { x . ToTable ( CODE_STRING ) ; x . MapLeftKey ( CODE_STRING ) ; x . MapRightKey ( CODE_STRING ) ; } ) ; <EOF>
public static IEnumerable < T > Traverse < T > ( this IEnumerable < T > source , Func < T , IEnumerable < T > > fnRecurse ) { foreach ( T item in source ) { yield return item ; IEnumerable < T > seqRecurse = fnRecurse ( item ) ; if ( seqRecurse != null ) { foreach ( T itemRecurse in Traverse ( seqRecurse , fnRecurse ) ) { yield return itemRecurse ; } } } } <EOF>
using Newtonsoft . Json . Bson ; using Newtonsoft . Json ; class Program { public class TestClass { public string Name { get ; set ; } } static void Main ( string [ ] args ) { string jsonString = CODE_STRING ; var jsonObj = JsonConvert . DeserializeObject ( jsonString ) ; MemoryStream ms = new MemoryStream ( ) ; using ( BsonWriter writer = new BsonWriter ( ms ) ) { JsonSerializer serializer = new JsonSerializer ( ) ; serializer . Serialize ( writer , jsonObj ) ; } string data = Convert . ToBase64String ( ms . ToArray ( ) ) ; Console . WriteLine ( data ) ; } } <EOF>
var result = foo . OrderByDescending ( x = > x . PairList [ CODE_INTEGER ] . Value ) ; <EOF>
x ^= true ; <EOF>
# idOfyourTextbox { text - transform : uppercase ; } <EOF>
Isolated Storage <EOF>
using ( WebClient Client = new WebClient ( ) ) { Client . DownloadFile ( CODE_STRING , CODE_STRING ) ; } <EOF>
var columns = xdoc . Descendants ( CODE_STRING ) . Where ( x = > ( string ) x . Attribute ( CODE_STRING ) == CODE_STRING ) . Single ( ) ; var items = columns . Elements ( CODE_STRING ) ; foreach ( var item in items ) { Console . WriteLine ( CODE_STRING , ( string ) item . Attribute ( CODE_STRING ) ) ; foreach ( var property in items . Elements ( CODE_STRING ) ) { Console . WriteLine ( CODE_STRING , ( string ) item . Attribute ( CODE_STRING ) , ( string ) item ) ; } } <EOF>
For ( j = CODE_INTEGER ; j < CODE_INTEGER ; j ++ ) { StringBuilder ab = new StringBuilder ( grades [ j ] ) ; For ( int i = CODE_INTEGER ; i < grades [ j ] ; i ++ ) { sb . Append ( CODE_STRING ) ; } Console . WriteLine ( CODE_STRING , j , grades [ j ] , sb . ToString ( ) ) ; } <EOF>
private void button2_Click ( object sender , EventArgs e ) { if ( listbox2 . SelectedIndex >= CODE_INTEGER ) { string curItem = listBox2 . Items [ listbox2 . SelectedIndex ] . ToString ( ) ; if ( curItem == CODE_STRING ) { listBox2 . Items . RemoveAt ( listBox2 . SelectedIndex ) ; picturebox . Image . Dispose ( ) ; picturebox . Image = null ; } } } <EOF>
static int MyMethod ( MyClass my , bool b ) { int cnt = my . SomeMethod ( ) . Sum ( cls = > cls . length ) ; if ( b ) { cnt += my . SomeOtherMethod ( ) . Sum ( aa = > MyMethod ( aa , true ) ) ; } return cnt ; } <EOF>
labels [ index ] . Size = new Size ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { int OutputNumber ; bool number = Int32 . TryParse ( inputtxt . Text , out OutputNumber ) ; string [ ] array = new string [ OutputNumber ] ; int put = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < array . Length ; i ++ ) { array [ i ] = put . ToString ( ) ; put ++ ; string result = ConvertStringArrayToString ( array ) ; string result1 = result + OutputNumber . ToString ( ) ; outputtxt . Text = result1 ; } } static string ConvertStringArrayToString ( string [ ] array ) { StringBuilder buildingstring = new StringBuilder ( ) ; foreach ( string value in array ) { buildingstring . Append ( value ) ; buildingstring . Append ( " \ r " ) ; } return buildingstring . ToString ( ) ; } <EOF>
var matching = sortedDic . Keys . Where ( x = > x . StartsWith ( searchText . Text ) ) . ToList ( ) ; listboxWords1 . Items . AddRange ( matching ) ; <EOF>
using System ; using System . Security . Permissions ; public class Test { [ SecurityPermission ( SecurityAction . Demand , Flags = SecurityPermissionFlag . ControlAppDomain ) ] public static void Example ( ) { AppDomain currentDomain = AppDomain . CurrentDomain ; currentDomain . UnhandledException += new UnhandledExceptionEventHandler ( MyHandler ) ; try { throw new Exception ( CODE_STRING ) ; } catch ( Exception e ) { Console . WriteLine ( CODE_STRING + e . Message ) ; } throw new Exception ( CODE_STRING ) ; } static void MyHandler ( object sender , UnhandledExceptionEventArgs args ) { Exception e = ( Exception ) args . ExceptionObject ; Console . WriteLine ( CODE_STRING + e . Message ) ; } public static void Main ( ) { Example ( ) ; } } <EOF>
MongoDatabase db = MdbServer . GetDatabase ( strDbName ) ; MongoCollection < BsonDocument > collection = db . GetCollection ( strCollectionName ) ; foreach ( var document in collection . Find ( query ) . SetFields ( Fields . Include ( includeFields ) . Exclude ( CODE_STRING ) ) ) { foreach ( string name in document . Names ) { BsonElement element = document . GetElement ( name ) ; BsonValue value = document . GetElement ( name ) . Value ; bsonDoc . Add ( element . Name , value ) ; } } <EOF>
Response . AddHeader ( CODE_STRING , CODE_STRING ) ; <EOF>
cmdmysql . Parameters . AddWithValue ( CODE_STRING , words [ CODE_INTEGER ] ) ; <EOF>
DataGridViewLinkCell linkCell = dcell as DataGridViewLinkCell if ( linkCell != null ) <EOF>
var span = ( DateTime . UtcNow - new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) . TotalSeconds ; return span ; <EOF>
if ( ( FileSystemRights . Write & fsar . FileSystemRights ) != FileSystemRights . Write ) return false ; return true ; <EOF>
class MyClass { System . Timers . Timer m_ConnectTimer = null ; . . . . void ConnecToServer ( ) { if ( m_ConnectTimer != null ) { m_ConnectTimer . Enabled = false ; m_ConnectTimer . Dispose ( ) ; m_ConnectTimer = null ; } if ( bConnectedToTheServer ) { } else { m_ConnectTimer = new Timer ( CODE_INTEGER * CODE_INTEGER * CODE_INTEGER ) ; m_ConnectTimer . Elapsed += new ElapsedEventHandler ( TimerHandler ) m_ConnectTimer . Enabled = true ; } } void TimerHandler ( object sender , ElapsedEventArgs e ) { ConnectToServer ( ) ; } } <EOF>
foreach ( SPFeatureDefinition feature in SPFarm . Local . FeatureDefinitions ) { if ( feature . Scope = CODE_STRING ) { string featureName = feature . DisplayName ; if ( featureName != null ) { XElement newItem = new XElement ( CODE_STRING , featureName ) ; infoTree . Add ( newItem ) ; } } <EOF>
public class BankAccount < T > where T : BankAccount < T > , new ( ) { public T SomeFactoryMethod ( ) { return new T ( ) ; } } public class SavingsAccount : BankAccount < SavingsAccount > { } <EOF>
HorizontalScrollView scrollView1 = new HorizontalScrollView ( this ) ; var handler = new Handler ( ) ; handler . PostDelayed ( ( ) = > scrollView1 . FullScroll ( FocusSearchDirection . Right ) , CODE_INTEGER ) ; <EOF>
Application . ActiveWindow <EOF>
void input_completed ( object sender , PopUpEventArgs < string , PopUpResult > e ) { string result = e . Result ; } <EOF>
private static Call AddLog ( NewCallEventArgs ev , Call previousCall ) { var newCall = new Call { } return newCall ; } <EOF>
using System ; using System . Collections . Generic ; using System . Linq ; using System . Text ; using System . Threading . Tasks ; namespace Payments { class Program { static void Main ( string [ ] args ) { Payment p1 = new Payment ( ) ; Payment p2 = new Payment ( ) ; Payment p3 = new Payment ( ) ; Payment Sorted = SortPayments ( p1 , p2 , p3 ) ; } static private Payment SortPayments ( params Payment [ ] payments ) { if ( payments . Length == CODE_INTEGER ) { return null ; } Payment FirstPayment = payments [ CODE_INTEGER ] ; Payment current = FirstPayment ; for ( int i = CODE_INTEGER ; i < payments . Length ; i ++ ) { current . SupplementalPayment = payments [ i ] ; current = current . SupplementalPayment ; } return FirstPayment ; } } } <EOF>
var removed = s . Remove ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
class MyList < T > : List < T > where T : myObjectBase , IDisposable , IClonable { } <EOF>
TimeSpan . TryParseExact ( CODE_STRING , CODE_STRING , CultureInfo . InvariantCulture , out testCaseData . duration ) ; <EOF>
var link = CODE_STRING var result = confirm ( CODE_STRING + link + CODE_STRING ) ; if ( result ) { window . location = link ; } <EOF>
void Application_Start ( object sender , EventArgs e ) { Application [ CODE_STRING ] = CODE_INTEGER ; } void Session_Start ( object sender , EventArgs e ) { Application . Lock ( ) ; Application [ CODE_STRING ] = ( int ) Application [ CODE_STRING ] + CODE_INTEGER ; Application . UnLock ( ) ; } void Session_End ( object sender , EventArgs e ) { Application . Lock ( ) ; Application [ CODE_STRING ] = ( int ) Application [ CODE_STRING ] - CODE_INTEGER ; Application . UnLock ( ) ; } <EOF>
copy to output directory <EOF>
public static Dictionary < int , int > GetPair ( List < Token > data ) { var pair = new Dictionary < int , int > ( ) ; var stack = new Stack < Token > ( ) ; foreach ( var item in token ) { if ( item . TokenValue == CODE_STRING ) { stack . Push ( item ) ; continue ; } if ( item . TokenValue == CODE_STRING ) { var starting = stack . Pop ( ) ; pair . Add ( starting . TokenId , item . TokenId ) ; } } return pair ; } <EOF>
yyyy - MM - ddTHH : mm : ss . fffzzz <EOF>
XElement . Parse ( CODE_STRING + myValue + CODE_STRING ) . Value <EOF>
string myString = null ; string isNullString = myString == null ? CODE_STRING : myString ; <EOF>
int T = CODE_INTEGER ; res . rows = new List < User > ( ) ; int cnt = CODE_INTEGER ; while ( reader . Read ( ) ) { { User u = new users ( ) ; res . rows . Add ( u ) ; res . rows [ T ] . age = ( String ) reader [ CODE_STRING ] ; res . rows [ T ] . height = ( String ) reader [ CODE_STRING ] ; T = T + CODE_INTEGER ; } cnt = cnt + CODE_INTEGER ; } return res ; <EOF>
BOOL WINAPI MoveFileWithProgress ( __in LPCTSTR lpExistingFileName , __in_opt LPCTSTR lpNewFileName , __in_opt LPPROGRESS_ROUTINE lpProgressRoutine , __in_opt LPVOID lpData , __in DWORD dwFlags ) ; <EOF>
var s = ( from p in dv orderby p . YourColumn select p . YourColumn . ToUpper ( ) ) . Distinct ( ) ; <EOF>
SqlCommand execute = new SqlCommand ( ' SELECT Pernr from View_PhoneBook where DisplayName = @text ' , conn ) ; execute . Parameters . Add ( CODE_STRING , SqlDbType . Text ) . Value = Textbox1 . text ; <EOF>
var nextTwo = yourTable . Take ( CODE_INTEGER ) . ToArray ( ) ; var res = nextTwo [ CODE_INTEGER ] . status == nextTwo [ CODE_INTEGER ] . status ? nextTwo . Take ( CODE_INTEGER ) : nextTwo . Take ( CODE_INTEGER ) ; <EOF>
protected int GetPageIndex ( ) { int output = CODE_INTEGER ; Int32 . TryParse ( Request . QueryString [ CODE_STRING ] , out output ) ; return output ; } <EOF>
if ( GlobalClass . BlocksPositions . All ( x = > ! DoesIntersect ( Position , x ) ) Position . X += speed ; <EOF>
List < LineElement > Lines = Elements . OfType < LineElement > . ToList ( ) ; <EOF>
# Three points are a counter - clockwise turn if ccw > CODE_INTEGER , clockwise if # ccw < CODE_INTEGER , and collinear if ccw = CODE_INTEGER because ccw is a determinant that # gives the signed area of the triangle formed by p1 , p2 and p3 . function ccw ( p1 , p2 , p3 ) : return ( p2 . x - p1 . x ) * ( p3 . y - p1 . y ) - ( p2 . y - p1 . y ) * ( p3 . x - p1 . x ) <EOF>
string strFullPath = CODE_STRING ; string strDirName ; int intLocation , intLength ; intLength = strFullPath . Length ; intLocation = strFullPath . IndexOf ( CODE_STRING ) ; strDirName = strFullPath . Substring ( CODE_INTEGER , intLocation ) ; textBox2 . Text = strDirName ; <EOF>
var myList = Enumerable . Repeat ( false , CODE_INTEGER ) . ToList ( ) ; <EOF>
double [ ] doubleArray = Array . ConvertAll ( decimalArray , x = > ( double ) x ) ; <EOF>
DateTime today = DateTime . Now ; int year = today . Year ; int month = today . Month int day = today . Day ; <EOF>
Expression < Func < T , bool > > falsePredicate = x = > false ; <EOF>
Page tempPage = new Views . Blog . BlogDetail ( ) ; tempPage . PageIntro = intro ; tempPage . PageContent = content ; StringWriter sw = new StringWriter ( ) ; HttpContext . Current . Server . Execute ( tempPage , sw , false ) ; if ( ! String . IsNullOrEmpty ( sw . ToString ( ) ) ) { return sw . ToString ( ) ; } <EOF>
public class MyTesterContext : DbContext { public MyTesterContext ( ) : base ( CODE_STRING ) { } public DbSet < Trip > Trips { get ; set ; } public DbSet < Location > Locations { get ; set ; } protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { modelBuilder . Entity < Trip > ( ) . HasMany ( t = > t . Itinerary ) . WithMany ( l = > l . Trips ) . Map ( m = > { m . MapLeftKey ( CODE_STRING ) ; m . MapRightKey ( CODE_STRING ) ; m . ToTable ( CODE_STRING ) ; } ) ; } } <EOF>
DispatcherTimer tgtTimer = new DispatcherTimer ( ) ; DispatcherTimer txbTimer2 = new DispatcherTimer ( ) ; DispatcherTimer rt = new DispatcherTimer ( ) ; public void Window_MouseLeftButtonDown ( object sender , MouseButtonEventArgs e ) { tgtTimer . Tick += new EventHandler ( tgtTimer_tick ) ; tgtTimer . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; tgtTimer . Start ( ) ; txbTimer2 . Tick += new EventHandler ( txbTimer2_tick ) ; txbTimer2 . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; txbTimer2 . Start ( ) ; rt . Tick += new EventHandler ( rt_tick ) ; rt . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; rt . Start ( ) ; } <EOF>
FileStream fs = new FileStream ( fileName , FileMode . Open , FileAccess . Read ) ; BinaryReader br = new BinaryReader ( fs ) ; int numBytes = new FileInfo ( fileName ) . Length ; byte [ ] buff = br . ReadBytes ( numBytes ) ; <EOF>
private void Form1_Load ( object sender , EventArgs e ) { comboBoxAdminVisit . DataSource = be . Events ; comboBoxAdminVisit . DisplayMember = CODE_STRING ; } private void comboBoxAdminVisit_SelectedIndexChanged ( object sender , EventArgs e ) { if ( comboBoxAdminVisit . SelectedItem != null ) { Event selectedEvent = ( Event ) comboBoxAdminVisit . SelectedItem ; var visitors = ( from cc in be . Visitors where cc . Attending . Events . Contains ( x = > x . EnventId = selectedEvent . Id ) select cc ) ; comboBoxAdminName . DataSource = visitors ; comboBoxAdminName . DisplayMember = CODE_STRING ; } } <EOF>
RedColorYouWant = Offset * CODE_REAL + ( CODE_INTEGER - Offset ) * CODE_REAL GreenColorYouWant = Offset * CODE_INTEGER + ( CODE_INTEGER - Offset ) * FD BlueColorYouWant = Offset * F9 + ( CODE_INTEGER - Offset ) * FD <EOF>
net start <EOF>
DataTable dt = new DataTable ( ) ; dt . Columns . Add ( CODE_STRING ) ; dt . Columns . Add ( CODE_STRING ) ; dt . Rows . Add ( CODE_STRING , CODE_INTEGER ) ; dt . Rows . Add ( CODE_STRING , CODE_INTEGER ) ; bindingSource1 . DataSource = dt ; gridControl1 . DataSource = bindingSource1 ; gridView1 . RefreshData ( ) ; gridView1 . Columns . Add ( new DevExpress . XtraGrid . Columns . GridColumn ( ) { Caption = CODE_STRING , ColumnEdit = new RepositoryItemCheckEdit ( ) { } , VisibleIndex = CODE_INTEGER , UnboundType = DevExpress . Data . UnboundColumnType . Boolean } ) ; <EOF>
var app = Application . Current ; <EOF>
public class FooWrapper < T1 , T2 > { public Foo < Bar < T1 , T2 > > FooObj ; public FooWrapper ( ) { FooObj = new Foo < Bar < T1 , T2 > > ( ) ; } public class Foo < T > : IFoo < T1 , T2 > where T : Bar < T1 , T2 > { public void Baz ( ) { Type t1 = typeof ( T1 ) ; Type t2 = typeof ( T2 ) ; } } } <EOF>
return ( T ) _values [ value ] ; <EOF>
Expression < Func < T , object > > original = Expression < Func < T , TResult > > converted = Expression . Lambda < Func < T , TResult > > ( Expression . Convert ( original . Body , typeof ( TResult ) ) , original . Parameters ) ; <EOF>
var checksum = memStream . GetBuffer ( ) . Skip ( CODE_INTEGER ) . Take ( memStream . Length - CODE_INTEGER ) . Aggregate ( CODE_INTEGER , ( p , v ) = > p ^ v ) ; <EOF>
static void Main ( string [ ] args ) { using ( TextWriter streamWriter = new StreamWriter ( CODE_STRING ) ) { String s = String . Empty ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { s += i . ToString ( ) . Substring ( CODE_INTEGER , CODE_INTEGER ) ; } streamWriter . Write ( s ) ; streamWriter . Close ( ) ; } using ( TextReader streamReader = new StreamReader ( CODE_STRING ) ) { String s = streamReader . ReadToEnd ( ) ; streamReader . Close ( ) ; Console . Out . Write ( s . Length ) ; } } <EOF>
public byte [ ] GetJPGFromImageControl ( BitmapImage imageC ) { MemoryStream memStream = new MemoryStream ( ) ; JpegBitmapEncoder encoder = new JpegBitmapEncoder ( ) ; encoder . Frames . Add ( BitmapFrame . Create ( imageC ) ) ; encoder . Save ( memStream ) ; return memStream . GetBuffer ( ) ; } <EOF>
IQueryable < T > <EOF>
ID userID permissionID -- -- -- -- -- -- - -- -- -- -- -- -- - CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER CODE_INTEGER <EOF>
private int [ ] xLoc = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; private int k = CODE_INTEGER ; private void panel1_Click ( object sender , EventArgs e ) { int yLoc = CODE_INTEGER ; foreach ( MusKey mk in this . panel2 . Controls ) { if ( sender == mk ) { textBox1 . Text = CODE_STRING + mk . musicNote . ToString ( ) + CODE_STRING ; MusicNote musNote = new MusicNote ( mk . musicNote , CODE_STRING ) ; musNote . PlaySound ( ) ; this . panel3 . Controls . Add ( musNote ) ; musNote . ShowNote ( CODE_STRING , xLoc [ k ] , yLoc ) ; k = k >= xLoc . Length - CODE_INTEGER ? xLoc . Length : k ++ ; textBox2 . Text = Convert . ToString ( k ) ; musNote . BringToFront ( ) ; } } } <EOF>
dataGridView1 . Columns [ CODE_STRING ] . HeaderText = CODE_STRING ; or dataGridView1 . Columns [ column_index ] . HeaderText = CODE_STRING ; <EOF>
protected override void OnCreateControl ( ) { base . OnCreateControl ( ) ; if ( Items . Count == CODE_INTEGER ) { Items . Add ( CODE_STRING ) ; Items . Add ( CODE_STRING ) ; } } <EOF>
public class WebServiceController : ApiController { [ HttpGet ] [ Route ( CODE_STRING ) ] public IHttpActionResult Post ( MyRequest request ) { return StatusCode ( HttpStatusCode . OK ) ; } } public class MyRequest { public string FirstName { get ; set ; } public string Surname { get ; set ; } } <EOF>
string path = System . IO . Path . Combine ( CODE_STRING , textBox1 . Text + CODE_STRING ) ; System . IO . File . WriteAllLines ( path , contents ) ; <EOF>
public Func < double > ReturnExpression ( Func < double > a , Func < double > b ) { return ( ) = > a ( ) * b ( ) ; } <EOF>
listof . Select ( c = > c . surename ) . ToArray ( ) ; <EOF>
String [ ] test = { CODE_STRING , CODE_STRING } ; object o = test ; if ( o is string [ ] ) { Console . WriteLine ( CODE_STRING ) ; } <EOF>
partial class Window2 : Window { . . . private Window1 _otherWindow ; private void OnClick ( object sender , RoutedEventArgs e ) { _otherWindow . image . Visibility = Visibility . Collapsed ; } } <EOF>
public MyDestinationType ( MySourceType source ) { Mapper . Map < MySourceType , MyDestinationType > ( source , this ) ; } <EOF>
string fileSpec = CODE_STRING ; var wb = new XLWorkbook ( fileSpec ) ; var ws = wb . Worksheet ( CODE_STRING ) ; MessageBox . Show ( ws . RowCount ( ) . ToString ( ) ) ; <EOF>
[ TestMethod ] public void MyIntegratonTestLikeUnitTest ( ) { AssertScenarioA ( ) ; AssertScenarioB ( ) ; . . . . } private void AssertScenarioA ( ) { } private void AssertScenarioB ( ) { } <EOF>
[ DllImport ( CODE_STRING , CharSet = CharSet . Ansi ) ] static extern IntPtr AMTgetLocks ( string password ) ; public RECORD [ ] GetLocks ( string password ) { var channels = new RECORD [ MAXCHANS + CODE_INTEGER ] ; try { var c = AMTgetLocks ( password ) ; var crSize = Marshal . SizeOf ( typeof ( RECORD ) ) ; for ( int i = CODE_INTEGER ; i < MAXCHANS + CODE_INTEGER ; i ++ ) { channels [ i ] = ( CHANNELRECORD ) Marshal . PtrToStructure ( c , typeof ( RECORD ) ) ; c = new IntPtr ( c . ToInt64 ( ) + crSize ) ; } } catch ( Exception ) { throw new Exception ( ) ; } if ( channels . Length == CODE_INTEGER ) { throw new Exception ( ) ; } return channels ; } <EOF>
public class ChildOne : Parent { public new int PropertyOne { get { return base . PropertyOne ; } set { base . PropertyOne = value ; } } } public class ChildTwo : Parent { public new int PropertyTwo { get { return base . PropertyTwo ; } set { base . PropertyTwo = value ; } } } <EOF>
myImageImage . ImageUrl = CODE_STRING + Convert . ToBase64String ( myImage . Jpeg ) ; <EOF>
Db . Templates . Add ( newItem ) ; foreach ( var record in variable . Where ( record = > record . Name == newItem . Name ) ) { record . Templates . Add ( newItem ) ; } } Db . SaveChanges ( ) ; <EOF>
DateTime . Now <EOF>
public Task < HttpResponseMessage > PostFile ( ) { HttpRequestMessage request = this . Request ; if ( ! request . Content . IsMimeMultipartContent ( ) ) { throw new HttpResponseException ( HttpStatusCode . UnsupportedMediaType ) ; } string root = System . Web . HttpContext . Current . Server . MapPath ( CODE_STRING ) ; var provider = new MultipartFormDataStreamProvider ( root ) ; var task = request . Content . ReadAsMultipartAsync ( provider ) . ContinueWith < HttpResponseMessage > ( o = > { string file1 = provider . BodyPartFileNames . First ( ) . Value ; return new HttpResponseMessage ( ) { Content = new StringContent ( CODE_STRING ) } ; } ) ; return task ; } <EOF>
private static Regex oClearHtmlScript = new Regex ( CODE_STRING , RegexOptions . Compiled ) ; public static string RemoveAllHTMLTags ( string sHtml ) { if ( string . IsNullOrEmpty ( sHtml ) ) return string . Empty ; return oClearHtmlScript . Replace ( sHtml , string . Empty ) ; } <EOF>
using System ; using System . Text ; class Program { static void Main ( string [ ] args ) { string input = CODE_STRING ; Console . WriteLine ( EncodeTwit ( input ) ) ; Console . ReadLine ( ) ; } public static string EncodeTwit ( string txt ) { var enc = Encoding . GetEncoding ( CODE_STRING ) ; byte [ ] bytes = enc . GetBytes ( txt ) ; char [ ] chars = new char [ ( bytes . Length * CODE_INTEGER + CODE_INTEGER ) / CODE_INTEGER ] ; int len = Convert . ToBase64CharArray ( bytes , CODE_INTEGER , bytes . Length , chars , CODE_INTEGER ) ; return CODE_STRING + new string ( chars , CODE_INTEGER , len ) + CODE_STRING ; } } <EOF>
var myEvidence = new Evidence ( new object [ ] { SecurityZone . Internet } ) ; var newDomain = AppDomain . CreateDomain ( CODE_STRING ) ; myDomain . Load ( CODE_STRING , myEvidence ) ; myDomain . CreateInstanceAndUnwrap ( CODE_STRING , CODE_STRING ) ; AppDomain . Unload ( myDomain ) ; <EOF>
associativeEntity [ ] AdditionalAttributes = new associativeEntity [ CODE_INTEGER ] ; associativeEntity isMemoAdditionalAttribute = new associativeEntity ( ) ; associativeEntity aaaAdditionalAttribute = new associativeEntity ( ) ; isMemoAdditionalAttribute . key = CODE_STRING ; isMemoAdditionalAttribute . value = CODE_STRING ; AdditionalAttributes [ CODE_INTEGER ] = isMemoAdditionalAttribute ; aaaAdditionalAttribute . key = CODE_STRING ; aaaAdditionalAttribute . value = CODE_STRING ; AdditionalAttributes [ CODE_INTEGER ] = aaaAdditionalAttribute ; > catalogProductAdditionalAttributesEntity AdditionalAttributesEntity = new catalogProductAdditionalAttributesEntity ( ) ; AdditionalAttributesEntity . single_data = AdditionalAttributes ; mageProduct . additional_attributes = AdditionalAttributesEntity ; <EOF>
decimal up = Convert . ToDecimal ( unitprice . Text ) ; decimal calories = Convert . ToDecimal ( gizlikalori . Text ) ; decimal tot , totCalories ; if ( pepper . Checked ) { up = up + pepperprice ; calories = calories + pepperkalori ; } tot = up * numberofunit . Value ; totCalories = calories * numberofunit . Value ; unitprice . Text = up . ToString ( ) ; total . Text = tot . ToString ( ) ; gizlikalori . Text = calories . ToString ( ) ; amountofcalorie . Text = totCalories . ToString ( ) ; <EOF>
var grouped = SomeList . GroupBy ( item = > item . Bar ) . OrderBy ( gr = > gr . Key ) ; foreach ( var item in grouped ) { } <EOF>
public IntExp GetExpression ( int value ) { return GetIntExp ( value ) ; } public StringExp GetExpression ( string value ) { return GetStringExp ( value ) ; } <EOF>
var exp = from log in db . Places where log . IsActive == true select new { logId = log . Id , , experiences = from exp in log . Experiences where ( log1 . LanguageId == CODE_INTEGER ) select new { id = log1 . Id , title = log1 . Title } } ; <EOF>
public void ProcessRequest ( HttpContext context ) { Byte [ ] yourImage = context . Response . BinaryWrite ( yourImage ) ; context . Request . ContentType = CODE_STRING ; context . Response . AddHeader ( CODE_STRING , CODE_STRING ) ; context . Response . AddHeader ( CODE_STRING , ( yourImage ) . LongLength . ToString ( ) ) ; con . Close ( ) ; context . Response . End ( ) ; context . Response . Close ( ) ; } <EOF>
File . Delete <EOF>
public void TestMethod ( ) { DataTemplate dt = FlipView5Horizontal . ItemTemplate ; DependencyObject dio = dt . LoadContent ( ) ; foreach ( var timeLine in FindVisualChildren < TextBlock > ( dio ) ) { if ( timeLine . Name == CODE_STRING ) { } } } <EOF>
private const int MAX_DISPLAYLENGTH_IN_LIST = CODE_INTEGER ; <EOF>
TreeView . Nodes . Insert ( CODE_INTEGER , . . . ) <EOF>
public object GetDefaultValue ( Type t ) { if ( t . IsValueType ) { return Activator . CreateInstance ( t ) ; } else { return null ; } <EOF>
foreach ( AClass i in AClassCollection ) { AClass anotherI = i ; listOfLambdaFunctions . AddLast ( ( ) = > { PrintLine ( anotherI . name ) ; } ) ; } <EOF>
<EOF>
Array [ ] array = new Array [ dataGrid . SelectedItems . Count ] ; dataGrid . SelectedItems . CopyTo ( array , CODE_INTEGER ) ; asyncUpload . BeginInvoke ( array . ToList ( ) , out tt , new AsyncCallback ( test ) , null ) ; <EOF>
for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { Guid g = Guid . NewGuid ( ) ; s . Children . Add ( new ComboBox ( ) { Tag = g } ) ; s . Children . Add ( new Label ( ) { Tag = g } ) ; } <EOF>
bool equal = collection1 . SequenceEqual ( collection2 ) ; <EOF>
private void dataGridView1_SelectionChanged ( object sender , EventArgs e ) { if ( dataGridView1 . SelectedRows . Count > CODE_INTEGER ) { for ( int i = CODE_INTEGER ; i < dataGridView1 . SelectedRows . Count ; i ++ ) { dataGridView1 . SelectedRows [ i ] . Selected = false ; } } } <EOF>
YourProject / bin / Debug / YourProject . dll YourProject / bin / Release / YourProject . dll <EOF>
manager . Employees [ CODE_INTEGER ] <EOF>
properties - events <EOF>
[ STAThread ] static void Main ( ) { using ( Mutex mutex = new Mutex ( false , CODE_STRING + appGuid ) ) { if ( ! mutex . WaitOne ( CODE_INTEGER , false ) ) { MessageBox . Show ( CODE_STRING ) ; return ; } Application . Run ( new Form1 ( ) ) ; } } <EOF>
string value = Interaction . InputBox ( CODE_STRING , CODE_STRING ) ; int array = CODE_INTEGER ; if ( int . TryParse ( value , out array ) ) { int [ ] size = new int [ array ] ; txtOutput . Text = CODE_STRING + " \ r " ; for ( int i = CODE_INTEGER ; i < size . Length ; i ++ ) { string prompt = Interaction . InputBox ( CODE_STRING + ( i + CODE_INTEGER ) , CODE_STRING ) ; int num = CODE_INTEGER ; if ( int . TryParse ( prompt , out num ) ) { size [ i ] = num ; txtOutput . Text += size [ i ] + CODE_STRING ; } } } <EOF>
public void OnTagsReported ( ) { if ( dgvScanResult . InvokeRequired ) { dgvScanResult . Invoke ( new MethodInvoker ( OnTagsReported ) , null ) ; return ; } for ( var i = dgvScanResult . Rows . Count - CODE_INTEGER ; i >= CODE_INTEGER ; i -- ) { var row = dgvScan . Rows [ i ] ; . . . } . . . } <EOF>
var uri = new Uri ( CODE_STRING , UriKind . Relative ) ; FlowDocument doc = App . LoadComponent ( uri ) as FlowDocument ; var content = new TextRange ( doc . ContentStart , doc . ContentEnd ) ; if ( content . CanSave ( DataFormats . Rtf ) ) { using ( var stream = new FileStream ( CODE_STRING , FileMode . OpenOrCreate ) ) { content . Save ( stream , DataFormats . Rtf ) ; } } <EOF>
SqlParameter [ ] myparm = new SqlParameter [ CODE_INTEGER ] ; myparm [ CODE_INTEGER ] = new SqlParameter ( CODE_STRING , user ) ; myparm [ CODE_INTEGER ] = new SqlParameter ( CODE_STRING , password ) ; string comando = CODE_STRING ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { String [ ] r1 = MyParser ( CODE_STRING ) ; String [ ] r2 = MyParser ( CODE_STRING ) ; String [ ] r3 = MyParser ( CODE_STRING ) ; } string [ ] MyParser ( String Input ) { String [ ] RawResult ; RawResult = Input . Split ( new char [ ] { CODE_CHAR , CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; List < string > Results = new List < string > ( ) ; foreach ( String S in RawResult ) { if ( String . IsNullOrWhiteSpace ( S ) == false ) Results . Add ( S . Trim ( ) ) ; } return Results . ToArray ( ) ; } <EOF>
if ( treeView1 . SelectedNode != null ) { if ( treeView1 . SelectedNode . Parent == null ) { treeView1 . Nodes . Remove ( treeView1 . SelectedNode ) ; } else { treeView1 . SelectedNode . Parent . Nodes . Remove ( treeView1 . SelectedNode ) ; } } <EOF>
private void timer1_Tick ( object sender , EventArgs e ) { if ( port . IsOpen ) { string s = port . ReadExisting ( ) ; if ( s . Contains ( " \ r RING \ r " ) ) { incall_status . Text = CODE_STRING ; incall_status . Visible = true ; } else if ( s . Contains ( " \ r NO CARRIER \ r " ) ) { incall_status . Text = CODE_STRING ; bgwrkr_calldisconect . RunWorkerAsync ( ) ; } } } <EOF>
public static bool IsKeyAChar ( Keys key ) { return key >= Keys . A && key <= Keys . Z ; } public static bool IsKeyADigit ( Keys key ) { return ( key >= Keys . D0 && key <= Keys . D9 ) || ( key >= Keys . NumPad0 && key <= Keys . NumPad9 ) ; } <EOF>
Console . CancelKeyPress <EOF>
lbl_users . DataSource = users ; lbl_users . DataValueField = CODE_STRING ; lbl_users . DataTextField = CODE_STRING ; lbl_users . DataBind ( ) ; <EOF>
int sum = CODE_INTEGER ; private void TextBox_TextChanged ( object sender , TextChangedEventArgs e ) { sum = sum + Convert . ToInt32 ( _1 . Text ) ; Add . Text = sum . ToString ( ) ; } private void TextBox_TextChanged_1 ( object sender , TextChangedEventArgs e ) { sum = sum + Convert . ToInt32 ( _2 . Text ) ; Add . Text = sum . ToString ( ) ; } <EOF>
XElement root = XElement . Load ( CODE_STRING ) ; var file1 = root . Descendants ( ) . Where ( elem = > elem . Attribute ( CODE_STRING ) . Value == CODE_STRING ) . Single ( ) ; var mainFolder = file1 . Parent . Parent ; foreach ( var folder in mainFolder . Elements ( ) ) { Console . WriteLine ( folder . Attribute ( CODE_STRING ) . Value ) ; foreach ( var file in folder . Elements ( ) ) { Console . WriteLine ( CODE_STRING + file . Attribute ( CODE_STRING ) . Value ) ; } Console . WriteLine ( ) ; } <EOF>
_context . Database . ExecuteSqlCommand ( CODE_STRING , new SqlParameter ( CODE_STRING , DateTime . Now . Date ) , new SqlParameter ( CODE_STRING , teamId ) ) ; spGetSchedule @theDate , @teamId . <EOF>
system . web <EOF>
switch ( personType ) { case CODE_INTEGER : { Employee emp = new Employee ( ) ; emp . ExperienceInfo ( ) ; break ; } case CODE_INTEGER : { Employee emp = new Employee ( ) ; emp . ManagementInfo ( ) ; break ; } case CODE_INTEGER : { Student st = new Student ( ) ; st . EducationInfo ( ) ; break ; } . . . } <EOF>
for each pixel if pixel is not green pixel < - black <EOF>
using ( SqlConnection connection = new SqlConnection ( CODE_STRING ) ) { connection . Open ( ) ; using ( SqlCommand command = connection . CreateCommand ( ) ) { command . CommandText = CODE_STRING ; command . ExecuteNonQuery ( ) ; } } using ( SqlConnection connection = new SqlConnection ( CODE_STRING ) ) { connection . Open ( ) ; using ( SqlCommand command = connection . CreateCommand ( ) ) { command . CommandText = CODE_STRING ; . . . } } <EOF>
public partial class myLinqClass { public string fullFilePath { get { return this . filepath + this . filename ; } } } <EOF>
UserControl1 . xaml < -- move here UserControl2 . xaml < -- move here <EOF>
private DataSet FilterData ( ) { DataSet filteredData = new DataSet ( CODE_STRING ) ; DataView viewAccount = new DataView ( global65DataSet . SET_ACCOUNT_TABLE ) ; viewAccount . Sort = CODE_STRING ; viewAccount . RowFilter = CODE_STRING + beginningAcct + CODE_STRING + endAcct + CODE_STRING ; DataView viewTrans = new DataView ( global65DataSet . SET_TRANSACTION_TABLE ) ; viewTrans . Sort = CODE_STRING ; viewTrans . RowFilter = CODE_STRING + beginningDate . ToShortDateString ( ) + CODE_STRING + endDate . ToShortDateString ( ) + CODE_STRING ; filteredData . Tables . Add ( viewAccount . ToTable ( ) ) ; filteredData . Tables . Add ( viewTrans . ToTable ( ) ) ; filteredData . Tables [ CODE_INTEGER ] . TableName = CODE_STRING ; filteredData . Tables [ CODE_INTEGER ] . TableName = CODE_STRING ; return filteredData ; } <EOF>
DateTime dateBase = DateTime . Parse ( odDate ) ; foreach ( DataGridViewRow row in dataGridView1 . Rows ) { DateTime dateRow = DateTime . Parse ( row . Cells [ CODE_INTEGER ] . Value . ToString ( ) ) ; row . Visible = ( dateRow >= dateBase ) ; } <EOF>
for ( int i = CODE_INTEGER ; i < person_list . Count ; i ++ ) { string name = person_list [ i ] . FirstName ; string email = person_list [ i ] . Email ; string daysLeft = person_list [ i ] . DaysLeft ; } <EOF>
System . IO . Path . Combine <EOF>
string myFileName = CODE_STRING ; using ( WebClient wc = new WebClient ( ) ) { wc . Proxy = null ; wc . DownloadFile ( CODE_STRING , myFileName ) ; } <EOF>
public TreeNode Search ( TreeView treeView , string text ) { return SearchNodes ( treeView . Nodes , text ) ; } private TreeNode SearchNodes ( TreeNodeCollection nodes , string text ) { foreach ( TreeNode node in nodes ) { if ( node . Text . Contains ( text ) ) return node ; var subSearchHit = SearchNodes ( node . Nodes , text ) ; if ( subSearchHit != null ) return subSearchHit ; } return null ; } <EOF>
myexternalexe . StartInfo . Arguments = CODE_STRING ; <EOF>
[ DllImport ( CODE_STRING , CharSet = CharSet . Unicode , SetLastError = true ) ] public static extern int DrawTextExW ( HandleRef hDC , string lpszString , int nCount , ref RECT lpRect , int nFormat , [ In , Out ] DRAWTEXTPARAMS lpDTParams ) ; [ StructLayout ( LayoutKind . Sequential ) ] public struct RECT { public int left ; public int top ; public int right ; public int bottom ; } [ StructLayout ( LayoutKind . Sequential ) ] public class DRAWTEXTPARAMS { public int iTabLength ; public int iLeftMargin ; public int iRightMargin ; public int uiLengthDrawn ; } <EOF>
public static byte [ ] StringToAscii ( string s ) { byte [ ] retval = new byte [ s . Length ] ; for ( int ix = CODE_INTEGER ; ix < s . Length ; ++ ix ) { char ch = s [ ix ] ; if ( ch <= CODE_INTEGER ) retval [ ix ] = ( byte ) ch ; else retval [ ix ] = ( byte ) CODE_CHAR ; } return retval ; } <EOF>
foreach ( ICodec codec in file . Properties . Codecs ) { Mpeg . AudioHeader header = ( Mpeg . AudioHeader ) codec ; if ( header == null ) return ; if ( header . XingHeader != Mpeg . XingHeader . Unknown ) { /* CODE HERE */ } if ( header . VBRIHeader != VBRIHeader . Unknown ) { /* CODE HERE */ } } <EOF>
config . Routes . MapHttpRoute ( name : CODE_STRING , routeTemplate : CODE_STRING ) ; config . MapODataServiceRoute ( routeName : CODE_STRING , routePrefix : CODE_STRING , model : GetEdmModel ( ) ) ; <EOF>
var l = list . Split ( CODE_CHAR ) . Skip ( CODE_INTEGER ) ; <EOF>
[ DllImport ( CODE_STRING ) ] static extern bool SetForegroundWindow ( IntPtr hWnd ) ; private void BringToFront ( Process pTemp ) { SetForegroundWindow ( pTemp . MainWindowHandle ) ; } <EOF>
richTextBox1 . Text = reader . GetString ( CODE_INTEGER ) <EOF>
. . . from r in DataItems . Include ( di = > di . Business . Businessunit . Level1 ) . . . <EOF>
private void Form1_Load ( object sender , EventArgs e ) { DataSet DSg = ACC_Data . Get_DT ( File_Path . Text . ToString ( ) ) ; var t = new DataTable ( ) ; for ( int c = CODE_INTEGER ; c < DSg . Tables [ CODE_INTEGER ] . Columns . Count ; c ++ ) t . Columns . Add ( ) ; for ( int r = CODE_INTEGER ; r < DSg . Tables [ CODE_INTEGER ] . Rows . Count ; r ++ ) { string [ ] Dr = new string [ DSg . Tables [ CODE_INTEGER ] . Columns . Count ] ; int i = CODE_INTEGER ; foreach ( DataColumn C in DSg . Tables [ CODE_INTEGER ] . Columns ) { Dr [ i ] = DSg . Tables [ CODE_INTEGER ] . Rows [ r ] [ C ] . ToString ( ) ; i ++ ; } var row = t . Rows . Add ( Dr ) ; } dataGridView1 . DataSource = t ; } <EOF>
protected void Step03SubmitButton_Click ( object sender , EventArgs e ) { List < string > selections = Session [ CODE_STRING ] as List < string > ; if ( selections != null ) { if ( selections . Contains ( CODE_STRING ) || selections . Contains ( CODE_STRING ) ) { Response . Redirect ( CODE_STRING ) ; } else { Response . Redirect ( CODE_STRING ) ; } } } <EOF>
var aspxmemo1 = CODE_STRING ; var aspxmemo2 = CODE_STRING ; var collection1 = aspxmemo1 . Split ( CODE_CHAR ) ; var collection2 = aspxmemo2 . Split ( CODE_CHAR ) ; if ( collection1 . Intersect ( collection2 ) . Any ( ) ) { } foreach ( var item in collection1 . Intersect ( collection2 ) ) { Console . WriteLine ( item + CODE_STRING ) ; } <EOF>
public class NameComparer : IEqualityComparer < FileInfo > { public bool Equals ( FileInfo x , FileInfo y ) { if ( x == y ) { return true ; } if ( x == null || y == null ) { return false ; } return string . Equals ( x . Name , y . Name , StringComparison . OrdinalIgnoreCase ) ; } public int GetHashCode ( FileInfo obj ) { return obj . Name . GetHashCode ( ) ; } } <EOF>
public class GenericRepository < T > : where T : class { internal YourConext context ; internal DbSet < T > dbSet ; public GenericRepository ( YourContext context ) { this . context = context ; this . dbSet = context . Set < T > ( ) ; } public virtual void Insert ( T entity ) { dbSet . Add ( entity ) ; context . SaveChanges ( ) ; } } <EOF>
var one = new [ ] { CODE_STRING , CODE_STRING } ; var two = new [ ] { CODE_STRING , CODE_STRING } ; var three = new [ ] { CODE_STRING , CODE_STRING } ; List < string [ ] > list = new List < string [ ] > ( ) { one , two , three } ; var i = list . Select ( l = > new { Key = String . Join ( CODE_STRING , l ) , Values = l } ) . GroupBy ( l = > l . Key ) . Select ( l = > l . First ( ) . Values ) . ToArray ( ) ; <EOF>
public class TestEntity : Entity { public virtual uint Unsigned { get ; set ; } public virtual ushort UnsignedShort { get ; set ; } } public class TestEntityMap : ClassMap < TestEntity > { public TestEntityMap ( ) { Map ( x = > x . Unsigned ) . CustomSqlType ( CODE_STRING ) ; Map ( x = > x . UnsignedShort ) . CustomSqlType ( CODE_STRING ) ; } } <EOF>
var linkButton = ContentPlaceHolder1 . FindControl ( CODE_STRING ) as LinkButton ; linkButton . Text = CODE_STRING ; <EOF>
mySerial . println ( temperature ) ; <EOF>
while ( PeulaRashit ( ) ) { } <EOF>
using ( StreamReader sr = new StreamReader ( CODE_STRING ) ) { int i = CODE_INTEGER ; string text = CODE_STRING ; do { i ++ ; string line = sr . ReadLine ( ) ; if ( line != CODE_STRING ) { line = line . Replace ( CODE_STRING , CODE_STRING + i + CODE_STRING ) ; text = text + line + Environment . NewLine ; } } while ( sr . EndOfStream == false ) ; } File . WriteAllText ( " C : \\ Users \\ Donavon \\ Desktop \ ew . sql " , text ) ; <EOF>
System . Collections . IEnumerable temp = yourGrid . ItemsSource ; yourGrid . ItemsSource = null ; yourGrid . ItemsSource = temp ; <EOF>
Connect ( ) <EOF>
/// <summary> /// Processes Windows messages. /// </summary> /// <param name="m">The Windows <see cref="T:System.Windows.Forms.Message" /> to process.</param> [ SecurityPermission ( SecurityAction . LinkDemand , Flags = SecurityPermissionFlag . UnmanagedCode ) ] protected override void WndProc ( ref Message m ) { if ( m . Msg == ( NativeMethods . WM_COMMAND + NativeMethods . WM_REFLECT ) && NativeMethods . HIWORD ( m . WParam ) == NativeMethods . CBN_DROPDOWN ) { BeginInvoke ( new MethodInvoker ( ShowDropDown ) ) ; return ; } base . WndProc ( ref m ) ; } <EOF>
string [ ] names = Enum . GetNames ( typeof ( Fruits ) ) ; <EOF>
var list1 = multiValueList . Select ( t = > Tuple . Create ( t . Item1 , t . Item2 ) ) . ToList ( ) ; var list2 = multiValueList . Select ( t = > t . Item3 ) . ToList ( ) ; <EOF>
private void ModifyTable ( DataTable toModify ) { DataColumn col = toModify . Columns . Add ( CODE_STRING , typeof ( int ) ) ; col . DefaultValue = CODE_INTEGER ; } private void SetDummyColumnValue ( DataRow dr , int value ) { dr [ CODE_STRING ] = value ; } private DataTable GetSortedTable ( DataTable modifiedTable ) { DataView dv = new DataView ( modifiedTable ) ; dv . Sort = CODE_STRING ; return dv . ToTable ( ) ; } <EOF>
private void RemoveOldLabels ( ) { List < Label > LabelsToRemove = new List < Label > ( ) ; foreach ( var x in this . picNodes . Controls ) { if ( x . GetType ( ) == typeof ( System . Windows . Forms . Label ) ) { LabelsToRemove . Add ( ( Label ) x ) ; } } foreach ( var label in LabelsToRemove ) { this . picNodes . Controls . Remove ( label ) ; label . Dispose ( ) ; } } <EOF>
XmlDocument xDoc = new XmlDocument ( ) ; string path = Directory . GetCurrentDirectory ( ) ; foreach ( string file in Directory . EnumerateFiles ( path , CODE_STRING ) ) { xDoc . Load ( System . IO . Path . Combine ( System . IO . Directory . GetCurrentDirectory ( ) , file ) ) ; string strpath = xDoc . BaseURI ; } <EOF>
public partial class MainPage : PhoneApplicationPage { public MainPage ( ) { InitializeComponent ( ) ; People . Loaded += People_Loaded ; } void People_Loaded ( object sender , System . Windows . RoutedEventArgs e ) { for ( int i = CODE_INTEGER ; i < People . Items . Count ; i ++ ) { var container = People . ItemContainerGenerator . ContainerFromIndex ( i ) ; container . SetValue ( SlideInEffect . LineIndexProperty , i ) ; } } } <EOF>
StorageFile file ; StorageFolder InstallationFolder = Windows . ApplicationModel . Package . Current . InstalledLocation ; string filePath = CODE_STRING ; file = await InstallationFolder . GetFileAsync ( filePath ) ; IRandomAccessStream dockpic = await file . OpenAsync ( CODE_INTEGER ) ; BitmapImage dockimage = new BitmapImage ( ) ; dockimage . SetSource ( dockpic ) ; Rectangle blueRectangle = new Rectangle ( ) ; blueRectangle . Height = CODE_INTEGER ; blueRectangle . Width = CODE_INTEGER ; ImageBrush imgBrush = new ImageBrush ( ) ; imgBrush . ImageSource = dockimage ; blueRectangle . Fill = imgBrush ; paintCanvas . Children . Add ( blueRectangle ) ; <EOF>
var dt = new DataTable ( ) ; . . . set up dt . . . par = new SqlParameter ( CODE_STRING , SqlDbType . Structured , dt ) <EOF>
var integers = Enum . GetValues ( typeof ( Status ) ) . Cast < Status > ( ) . Where ( status = > status . ToString ( ) . Contains ( CODE_STRING ) ) . Select ( status = > ( int ) status ) ; <EOF>
switch ( variable ) { case CODE_STRING : OneMethod ( ) ; break ; case CODE_STRING : OtherMethod ( ) ; break ; } <EOF>
MgProcess . CorProcess . Stop ( CODE_INTEGER ) ; MgProcess . Detach ( ) ; <EOF>
var values = gvtest . Rows . Cast < GridViewRow > ( ) . Select ( x = > x . Cells [ CODE_INTEGER ] . Text ) ; var sector1 = values . Count ( x = > Convert . ToInt32 ( x ) >= CODE_INTEGER && Convert . ToInt32 ( x ) < CODE_INTEGER ) ; <EOF>
public void LoadPageFromDisk ( string filePath ) { Uri targetPage = null ; string workingPageURI = filePath . Trim ( ) ; workingPageURI = Path . GetFullPath ( workingPageURI ) ; if ( Uri . TryCreate ( workingPageURI , UriKind . RelativeOrAbsolute , out targetPage ) == true ) { webBrowserControl . Navigate ( targetPage ) ; } } <EOF>
public static MyInterfaceExtensions { public T Create < T > ( this IMyInterface target ) { return ( T ) target . Create ( typeof ( T ) ) ; } } <EOF>
var productCategory = await db . ProductCategories . Include ( p = > p . Categories . Select ( c = > c . Products ) ) . FirstOrDefaultAsync ( category = > category . Id == Id ) ; <EOF>
private static int FindStudentPosition ( string name , string [ ] array ) { int intLocation = - CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < array . Length ; i ++ ; ) { if ( array [ i ] == name ) { Console . WriteLine ( CODE_STRING + i ) ; intLocation = i ; break ; } } return intLocation ; } <EOF>
static Expression < Func < T , bool > > BuildWhere < T > ( int deviceId ) { var id = Expression . Constant ( deviceId , typeof ( int ) ) ; var arg = Expression . Parameter ( typeof ( T ) , CODE_STRING ) ; var prop = Expression . Property ( arg , CODE_STRING ) ; return Expression . Lambda < Func < T , bool > > ( Expression . Equal ( prop , id ) , arg ) ; } <EOF>
( [ \ S \ s ] * \ " ] ) \ " UDF5 \ " : \ " [ \ S \ s ] * ? \ " , ( [ \ S \ s ] * ) <EOF>
protected override void OnLoad ( EventArgs e ) { base . OnLoad ( e ) ; Page . ClientScript . RegisterOnSubmitStatement ( GetType ( ) , CODE_STRING , CODE_STRING ) ; } <EOF>
string input = CODE_STRING ; string final = string . Join ( CODE_STRING , input . Split ( CODE_CHAR ) . Select ( ( s , i ) = > ( i > CODE_INTEGER && i % CODE_INTEGER == CODE_INTEGER ) ? CODE_STRING + s : s ) ) ; <EOF>
[ assembly : InternalsVisibleTo ( CODE_STRING ) ] <EOF>
string s = CODE_STRING ; SecureString ss = new SecureString ( ) ; foreach ( char c in s ) ss . AppendChar ( c ) ; <EOF>
private void TxtName_Tapped ( object sender , TappedRoutedEventArgs e ) { clickedElementName = ( ( TextBlock ) sender ) . Name ; if ( clickedElementName == CODE_STRING ) { } } <EOF>
DateTime dateValue ; string dateString = CODE_STRING ; try { dateValue = DateTime . Parse ( dateString ) ; Console . WriteLine ( CODE_STRING , dateString , dateValue ) ; } catch ( FormatException ) { Console . WriteLine ( CODE_STRING , dateString ) ; } <EOF>
List < ContentType > contentTypes = new List < ContentType > ( ) ; foreach ( ContentType contentType in contentTypes ) { _uow . ContentTypes . Add ( contentType ) ; } <EOF>
mhpList = new List < MHP > ( ) ; mhpList . Add ( new MHP { MHP_Name = something , MHP_AC = a number } ) ; mhpList [ CODE_INTEGER ] . MHP_ParId = CODE_STRING ; <EOF>
Dictionary < int , string > <EOF>
public delegate void ReportProgressDelegate ( Double ^ completionPercentage ) ; <EOF>
process . StartInfo . Arguments = CODE_STRING ; <EOF>
Interface IFoo { [ Required ] string Bar { get ; set ; } } Interface IBar { string Bar { get ; set ; } } Class Foo : IFoo , IBar { string Bar { get ; set ; } } <EOF>
public IQueryable < Clam > getAllClams ( int clamTypeID , int ? parentClamID ) { return from clam in Clams where clam . ClamTypeID == clamTypeID && object . Equals ( clam . ParentClamID , parentClamID ) select clam ; } <EOF>
public static async string Save ( . . . ) { List < Controller > lstControllers = Controller . Get ( ) ; List < Task < returnValueType > > controllerTasks = lstControllers . Select ( controller = > { DeviceControllerAsync caller = new DeviceControllerAsync ( ArubaBL . RegisterDevice ) ; return Task . Factory . FromAsync < returnValueType > ( caller . BeginInvoke , caller . EndInvoke , null ) ; } ) . ToList ( ) ; await Task . WhenAll ( controllerTasks ) ; } <EOF>
int i = booleans [ CODE_INTEGER ] ? CODE_INTEGER : CODE_INTEGER + CODE_INTEGER * ( booleans [ CODE_INTEGER ] ? CODE_INTEGER : CODE_INTEGER ) + CODE_INTEGER * ( booleans [ CODE_INTEGER ] ? CODE_INTEGER : CODE_INTEGER ) + CODE_INTEGER * ( booleans [ CODE_INTEGER ] ? CODE_INTEGER : CODE_INTEGER ) ; switch ( i ) { case CODE_INTEGER : case CODE_INTEGER : case CODE_INTEGER : case CODE_INTEGER : } <EOF>
private static Type GetTypeFromHandle ( IntPtr handle ) { var method = typeof ( Type ) . GetMethod ( CODE_STRING , BindingFlags . Static | BindingFlags . NonPublic ) ; return ( Type ) method . Invoke ( null , new object [ ] { handle } ) ; } private static void Main ( string [ ] args ) { IntPtr handle = typeof ( string ) . TypeHandle . Value ; Type type = GetTypeFromHandle ( handle ) ; } <EOF>
var lst = new List < int > ( ) ; lst . Sum ( ) ; <EOF>
object calcInstance = Activator . CreateInstance ( calcType ) ; or Assembly testAssembly = Assembly . LoadFile ( CODE_STRING ) ; <EOF>
using System ; using System . Text . RegularExpressions ; class Program { static void Main ( ) { string input = CODE_STRING ; string column = CODE_STRING ; string pattern = CODE_STRING + Regex . Escape ( column ) + CODE_STRING + Regex . Escape ( column ) + CODE_STRING ; string output = Regex . Replace ( input , pattern , CODE_STRING , RegexOptions . IgnoreCase ) ; Console . WriteLine ( output ) ; } } <EOF>
private string ReadSignature ( ) { string appDataDir = Environment . GetFolderPath ( Environment . SpecialFolder . ApplicationData ) + CODE_STRING ; string signature = string . Empty ; DirectoryInfo diInfo = new DirectoryInfo ( appDataDir ) ; if ( diInfo . Exists ) { FileInfo [ ] fiSignature = diInfo . GetFiles ( CODE_STRING ) ; if ( fiSignature . Length > CODE_INTEGER ) { StreamReader sr = new StreamReader ( fiSignature [ CODE_INTEGER ] . FullName , Encoding . Default ) ; signature = sr . ReadToEnd ( ) ; if ( ! string . IsNullOrEmpty ( signature ) ) { string fileName = fiSignature [ CODE_INTEGER ] . Name . Replace ( fiSignature [ CODE_INTEGER ] . Extension , string . Empty ) ; signature = signature . Replace ( fileName + CODE_STRING , appDataDir + CODE_STRING + fileName + CODE_STRING ) ; } } } return signature ; } <EOF>
private void _txtPath_KeyDown ( object sender , KeyEventArgs e ) { if ( ( e . Key < Key . A ) || ( e . Key > Key . Z ) ) e . Handled = true ; } <EOF>
Web . Webs WebService = new Web . Webs ( ) ; WebService . Credentials = new NetworkCredential ( CODE_STRING , CODE_STRING ) ; XmlNode list = WebService . GetContentTypes ( ) ; <EOF>
var dtableDemo = new DataTable ( ) ; dtableDemo = this . dgvDemo . DataSource as DataTable ; //// Getting the datatable of datagridview datasource if ( dtableDemo != null ) { dtableDemo . Columns . RemoveAt ( CODE_INTEGER ) ; //// Removing the first column of derived table dtableDemo . Rows . Cast < DataRow > ( ) . Where ( row = > row . ItemArray . Contains ( CODE_STRING ) ) . ToList ( ) . ForEach ( row = > row . Delete ( ) ) ; //// Remove the row if it contains the given value dtableDemo . AcceptChanges ( ) ; //// Finalize the delete } <EOF>
public class Item { public int Id { get ; set ; } public string Text { get ; set ; } } var data = List < Item > { new Item { Id = CODE_INTEGER , Text = CODE_STRING } , new Item { Id = CODE_INTEGER , Text = CODE_STRING } , new Item { Id = CODE_INTEGER , Text = CODE_STRING } } ; comboBox1 . DataSource = data ; comboBox1 . ValueMember = CODE_STRING ; comboBox1 . DisplayMember = CODE_STRING ; private void comboBox1_SelectedIndexChanged ( object sender , EventArgs e ) { var selectedValue = comboBox1 . SelectedValue ; } <EOF>
openFileDialog1 . Filter = CODE_STRING ; <EOF>
wspart . Worksheet . Save ( ) ; document . WorkbookPart . Workbook . Save ( ) ; <EOF>
string Img1 , unq1 ; string filepath = CODE_STRING ; img1 = System . IO . Path . GetFileName ( gridusers . SelectedRow . Cells [ CODE_INTEGER ] . ImageName ) ; unq1 = filepath + img1 ; <EOF>
/ FileTypeAssociation ? fileToken = CODE_INTEGER B9F681 - CODE_REAL - CODE_INTEGER B01 - B33F - FAFF70760D25 <EOF>
foreach ( var day in days ) { ListBoxItem lbi = new ListBoxItem ( ) ; TextBlock tb = new TextBlock ( ) ; tb . Text = day . ToString ( ) ; lbi . Content = tb ; lbi . VerticalContentAlignment = System . Windows . VerticalAlignment . Center ; lbi . IsSelected = AlarmMod . AlarmData . SelectedDays . Contains ( day ) ; this . listBox . Items . Add ( lbi ) ; } List < DayOfWeek > iDays = new List < DayOfWeek > ( ) ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { if ( ( this . listBox . Items [ i ] as ListBoxItem ) . IsSelected ) { iDays . Add ( ( DayOfWeek ) i ) ; } } <EOF>
public class ScheduleThread { private readonly TimeSpan _timeSpan ; private readonly Timer _timer ; public bool IsRunning { get ; protected set ; } public ScheduleThread ( ) { IsRunning = false ; _timeSpan = new TimeSpan ( ) ; } public void Start ( ) { if ( IsRunning == false ) { IsRunning = true ; StartTimer ( ) ; } } private void StartTimer ( ) { _timer = new Timer ( CallBack ) ; _timer . Change ( _timeSpan , TimeSpan . Zero ) ; } public void Stop ( ) { if ( IsRunning ) { _timer . Dispose ( ) ; IsRunning = false ; } } private void CallBack ( object obj ) { } } <EOF>
public class AirportClass { private string connectionString ; private SqlConnection connection ; private SqlCommand command ; private List < string > items ; public AirportClass ( ) { connectionString = CODE_STRING ; } public List < string > getListItems ( ) { items = new List < string > ( ) ; connection = new SqlConnection ( connectionString ) ; command = new SqlCommand ( CODE_STRING ) ; command . Connection = connection ; connection . Open ( ) ; SqlDataReader dataReader = command . ExecuteReader ( ) ; while ( dataReader . Read ( ) ) { string data = dataReader . GetValue ( CODE_INTEGER ) . ToString ( ) ; items . Add ( data ) ; } connection . Close ( ) ; return items ; } } <EOF>
testesiteEntities db = new testesiteEntities ( ) ; rblCategoria . DataValueField = CODE_STRING ; rblCategoria . DataTextField = CODE_STRING ; rblCategoria . DataSource = db . categoria . Select ( ) . ToList ( ) ; rblCategoria . DataBind ( ) ; <EOF>
foreach ( var account in sortedAccounts ) { var outputLine = account . accountholder + CODE_STRING + account . accountnumber + CODE_STRING + account . accounttype . Substring ( CODE_INTEGER , CODE_INTEGER ) + CODE_STRING + account . amount + CODE_STRING + account . date . ToShortDateString ( ) ; File . WriteAllText ( text , outputLine ) ; } <EOF>
foreach ( ListItem li in dropdownlist1 . Items ) { if ( li . Value == textBox1 . text ) { } } <EOF>
secondTree . HideSelection = false ; <EOF>
namespace Different { public class Class1 { public static int [ ] Function1 ( ) { } } } namespace MyNamespace { class Program { static void Main ( string [ ] args ) { var arr = Class1 . Function ( ) ; var arr = Different . Class1 . Function ( ) ; } } } <EOF>
string pattern = CODE_STRING ; string replacement = CODE_STRING ; Regex rgx = new Regex ( pattern ) ; string result = rgx . Replace ( input , replacement ) ; <EOF>
string [ ] ASIA = new [ ] { Taiwan , Vietnam , Korea , China , Japan } . SelectMany ( s = > s ) . ToArray ( ) ; <EOF>
function vehicleSelected ( ) { var autoSelect = document . getElementById ( ' vehicleSelect ' ) ; var strAuto = autoSelect . options [ autoSelect . selectedIndex ] . value ; var rows = document . getElementById ( ' tableList ' ) . getElementsByClassName ( ' TR ' ) ; for ( var i = CODE_INTEGER ; i < rows . length ; i ++ ) { rows [ i ] . style . display = ' none ' ; } var selectedRow = document . getElementById ( strAuto ) ; selectedRow . style . display = ' ' ; } <EOF>
secpol . msc <EOF>
List < string > items = XDocument . Parse ( CODE_STRING ) . Descendants ( CODE_STRING ) . Select ( item = > item . Attribute ( CODE_STRING ) . Value ) . ToList ( ) ; <EOF>
public sealed class Singleton { private static readonly Singleton instance = new Singleton ( ) ; static Singleton ( ) { } private Singleton ( ) { } public static Singleton Instance { get { return instance ; } } <EOF>
[ DllImport ( CODE_STRING , EntryPoint = CODE_STRING ) ] private static extern void SetCallback ( Callback fn ) ; <EOF>
void Start ( ) { ClickToMove = FindObjectOfType < ClickToMoveScript > ( ) ; ClickToMove . PlayWoodCuttingAnim ( ) ; } <EOF>
internal class Test { public Enumerator GetEnumerator ( ) { return new Enumerator ( ) ; } public struct Enumerator { public bool MoveNext ( ) { return false ; } public object Current { get { return null ; } } } } <EOF>
for ( int v = CODE_INTEGER ; v < dataGrid1 . Rows . Count ; v ++ ) { if ( string . Equals ( dataGrid1 [ CODE_INTEGER , v ] . Value as string , CODE_STRING ) ) { dataGrid1 . Rows . RemoveAt ( v ) ; v -- ; } } <EOF>
-- declare input - could be the input parameter of a stored procedure or something DECLARE @input XML = ' < Employees > < Employee > < ID > CODE_INTEGER < / ID > < Vorname > Dieter < / Vorname > < Nachname > Mueller < / Nachname > < / Employee > < / Employees > ' -- INSERT INTO your table INSERT INTO dbo . Employee ( ID , Vorname , Nachname ) -- shred the incoming XML into rows of data , based on the XPath / Employees / Employee SELECT XEmp . value ( ' ( ID ) [ CODE_INTEGER ] ' , ' int ' ) , XEmp . value ( ' ( Vorname ) [ CODE_INTEGER ] ' , ' varchar ( CODE_INTEGER ) ' ) , XEmp . value ( ' ( Nachname ) [ CODE_INTEGER ] ' , ' varchar ( CODE_INTEGER ) ' ) FROM @input . nodes ( ' / Employees / Employee ' ) AS XTbl ( XEmp ) <EOF>
IObservable < bool > ValidateAsync ( Row item ) { return Observable . Start ( ( ) = > { return true ; } , Scheduler . TaskPoolScheduler ) ; } myBigDataTable . ToObservable ( ) . Select ( x = > ValidateAsync ( x ) . Select ( y = > new { Row = x , IsValid = y } ) ) . Merge ( CODE_INTEGER /* rows concurrently */ ) . ObserveOn ( SynchronizationContext . Current /*assuming WinForms */ ) . Subscribe ( x = > { Console . WriteLine ( CODE_STRING , x . Row , x . IsValid ) ; } ) ; <EOF>
CancellationTokenSource source = new CancellationTokenSource ( ) ; previouslyProvidedToken = source . Token ; . . . source . Cancel ( ) ; <EOF>
DataTable dtFinal = dtOriginal . Clone ( ) ; for ( int i = CODE_INTEGER ; i < dtOriginal . Rows . Count ; i ++ ) { bool isDupe = false ; for ( int j = CODE_INTEGER ; j < dtFinal . Rows . Count ; j ++ ) { if ( dtOriginal . Rows [ i ] [ CODE_INTEGER ] . ToString ( ) == dtFinal . Rows [ j ] [ CODE_INTEGER ] . ToString ( ) && dtOriginal . Rows [ i ] [ CODE_INTEGER ] . ToString ( ) == dtFinal . Rows [ j ] [ CODE_INTEGER ] . ToString ( ) && dtOriginal . Rows [ i ] [ CODE_INTEGER ] . ToString ( ) == dtFinal . Rows [ j ] [ CODE_INTEGER ] . ToString ( ) ) { dtFinal . Rows [ j ] [ CODE_INTEGER ] = int . Parse ( dtFinal . Rows [ j ] [ CODE_INTEGER ] . ToString ( ) ) + int . Parse ( dtOriginal . Rows [ i ] [ CODE_INTEGER ] . ToString ( ) ) ; isDupe = true ; break ; } } if ( ! isDupe ) { dtFinal . ImportRow ( table . Rows [ i ] ) ; } } <EOF>
Split ( CODE_CHAR ) <EOF>
using ( var streamReader = new StreamReader ( jsonStream , Encoding . GetEncoding ( CODE_STRING ) ) ) <EOF>
protected void txtDate_TextChanged ( object sender , EventArgs e ) { SqlDataSource2 . SelectCommand = CODE_STRING ; DropDownList1 . DataSourceID = CODE_STRING ; } <EOF>
System . IO . File . WriteAllLines ( Server . MapPath ( CODE_STRING ) ) <EOF>
SqlCommand command = new SqlCommand ( ) ; command . Connection = someConnectionObj ; command . CommandText = CODE_STRING ; command . Parameters . Add ( CODE_STRING , SqlDbType . DateTime ) . Value = someDate ; command . ExecuteNonQuery ( ) ; <EOF>
string s = . . . ; s = s . TrimEnd ( CODE_CHAR ) ; <EOF>
Device . BeginInvokeOnMainThread ( ( ) = > { App . Locator . TaggingPageVM . ImageSrc = sender . Result [ CODE_INTEGER ] . Source ; } ) ; <EOF>
dt = GetNetworkTime ( ) . AddDays ( CODE_INTEGER ) ; <EOF>
string input = CODE_STRING ; string first = listFO . FirstOrDefault ( x = > input . StartsWith ( x ) ) ; string second = listFN . FirstOrDefault ( x = > input . EndsWith ( x ) ) ; if ( first != null && second != null ) <EOF>
. . . using ( var dr = cmd . ExecuteReader ( ) ) { while ( dr . Read ( ) ) { dr . GetString ( CODE_INTEGER ) ; } } <EOF>
class PsudoStream { public virtual bool CanRead { get { return false ; } } public virtual bool CanWrite { get { return false ; } } } class WritableStream : PsudoStream { public override bool CanWrite { get { return true ; } } } class ReadableStream : PsudoStream { public override bool CanRead { get { return true ; } } } <EOF>
if ( o . NodeType == NodeType . Element && o is GeckoInputElement ) { GeckoInputElement asd = ( GeckoInputElement ) o ; if ( asd . Checked ) . . . . } <EOF>
public static class IDbConnectionExtensions { public static void MyExtension ( this IDbConnection connection ) { Console . WriteLine ( CODE_STRING ) ; } } <EOF>
private void DataGrid_CopyingRowClipboardContent ( object sender , DataGridRowClipboardEventArgs e ) { var currentCell = e . ClipboardRowContent [ dataGrid . CurrentCell . Column . DisplayIndex ] ; e . ClipboardRowContent . Clear ( ) ; e . ClipboardRowContent . Add ( currentCell ) ; } <EOF>
var dupeNumbers = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var dupes = dupeNumbers . GroupBy ( n = > n ) . Where ( g = > g . Count ( ) > CODE_INTEGER ) . Select ( g = > g . Key ) ; var rageNumbers = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var fullRange = Enumerable . Range ( rageNumbers . Min ( ) , rageNumbers . Max ( ) ) ; var missing = fullRange . GroupJoin ( rageNumbers , n = > n , full = > full , ( full , n ) = > new { full , n } ) . SelectMany ( joined = > joined . n . DefaultIfEmpty ( ) , ( full , n ) = > new { Full = full . full , n } ) . Where ( joined = > joined . Full != joined . n ) . Select ( n = > n . Full ) ; <EOF>
public static void GetSubnetMask ( ) { foreach ( NetworkInterface adapter in NetworkInterface . GetAllNetworkInterfaces ( ) ) { foreach ( UnicastIPAddressInformation unicastIPAddressInformation in adapter . GetIPProperties ( ) . UnicastAddresses ) { if ( unicastIPAddressInformation . Address . AddressFamily == AddressFamily . InterNetwork ) { Console . WriteLine ( unicastIPAddressInformation . IPv4Mask ) ; } } } } <EOF>
var credentials = new X509CertificateCredentials ( cert , new SecurityKeyIdentifier ( new NamedKeySecurityKeyIdentifierClause ( CODE_STRING , CODE_STRING ) ) ) ; <EOF>
seriesSmall . YAxisType = AxisType . Secondary ; <EOF>
foreach ( Results result in _results ) { int examID = _theDisplay . userInputAsInteger ( CODE_STRING ) ; _findExamIndex ( examID , _exams ) ; int studentID = _theDisplay . userInputAsInteger ( CODE_STRING ) ; _findStudentIndex ( studentID , _students ) ; exam [ ] exams = FindExamByTopic ( CODE_STRING , _exams ) } private Exam [ ] FindExamByTopic ( string topic , Exam [ ] _exams ) { return _exams . Where ( ex = > ex . Topic == topic ) . ToArray ( ) ; } private Exam [ ] FindExamByTopicSimple ( string topic , Exam [ ] _exams ) { List < Exam > exams = new List < Exam > ( ) ; for ( int i = CODE_INTEGER ; i < _exams . Length ; i ++ ) { if ( _exams [ i ] . Topic == topic ) { exams . Add ( _exams [ i ] ) ; } } return exams . ToArray ( ) ; } <EOF>
public partial class RecComparer : Window { public BaselineEntity _blEnty { get ; set } public List < RecComparisionData > _compData { get ; set } public RecComparer ( BaselineEntity blEnty ) { InitializeComponent ( ) ; DataContext = this ; _blEnty = blEnty ; _compData = blEnty . ComparisionData ; } } <EOF>
SqlConnection . ClearPool <EOF>
public string UserName { get { return textBoxUserName . Text ; } } <EOF>
Type implementationType = typeof ( T ) . Assembly . GetTypes ( ) . Where ( t = > t . IsSubclassOf ( typeof ( T ) ) . Single ( ) ; return ( T ) Activator . CreateInstance ( implementationType ) ; <EOF>
public ActionResult BlogEntry ( int year , int month , int day , string title ) using System ; using System . Collections . Generic ; using System . Linq ; using System . Web ; using System . Web . Mvc ; namespace OurAttributes { public class PopulateTitleDandDateAttribute : ActionFilterAttribute { public override void OnActionExecuting ( ActionExecutingContext filterContext ) { string [ ] url = filterContext . HttpContext . Request . Uri . split ( CODE_CHAR ) ; DateTime d = new Date ( url [ CODE_INTEGER ] , url [ CODE_INTEGER ] , url [ CODE_INTEGER ] ) ; if ( filterContext . ActionParameters . ContainsKey ( CODE_STRING ) ) { filterContext . ActionParameters [ CODE_STRING ] = d ; } if ( filterContext . ActionParameters . ContainsKey ( CODE_STRING ) ) { filterContext . ActionParameters [ CODE_STRING ] = url [ CODE_INTEGER ] ; } base . OnActionExecuting ( filterContext ) ; } } } <EOF>
double dateDouble = CODE_INTEGER ; DateTime dt = DateTime . FromOADate ( dateDouble ) ; string dateString = dt . ToString ( ) ; <EOF>
private string createTable ( string [ ] cols , string [ ] [ ] values ) { StringBuilder sb = new StringBuilder ( ) ; sb . AppendLine ( CODE_STRING ) ; sb . AppendLine ( CODE_STRING ) ; sb . AppendLine ( CODE_STRING ) ; sb . AppendLine ( CODE_STRING ) ; bool first = true ; foreach ( string col in cols ) { if ( ! first ) sb . Append ( CODE_STRING ) ; sb . Append ( col ) ; first = false ; } sb . AppendLine ( ) ; sb . AppendLine ( CODE_STRING ) ; foreach ( string [ ] rowCells in values ) { first = true ; foreach ( string cell in rowCells ) { if ( ! first ) sb . Append ( CODE_STRING ) ; sb . Append ( cell ) ; first = false ; } sb . AppendLine ( CODE_STRING ) ; } sb . AppendLine ( CODE_STRING ) ; sb . AppendLine ( CODE_STRING ) ; sb . AppendLine ( CODE_STRING ) ; return sb . ToString ( ) ; } <EOF>
var finalValue = . . . var possibleValues = . . . var appliedFlags = possibleValues . Where ( x = > x & finalValue == x ) . ToList ( ) ; <EOF>
gvMessageList . Columns [ CODE_INTEGER ] . HeaderStyle . Width = New Unit ( CODE_INTEGER , UnitType . Percentage ) ; <EOF>
while ( rdr . Read ( ) ) { for ( int y = CODE_INTEGER ; y <= numberColumns ; y ++ ) { string childData = rdr [ y ] . ToString ( ) ; treeView1 . Nodes [ y ] . Nodes . Add ( childData ) ; } } <EOF>
if ( ! user . Activated ) { yield return new ValidationResult ( CODE_STRING , Resources . UserNotActivated ) ; yield break ; } <EOF>
clientsList [ dataFromClient ] <EOF>
using UnityEngine ; using UnityEngine . UI ; public class FlappyScore : MonoBehaviour { public Text MyScore ; void Start ( ) { /* if Having difficulty with the above instruction. Un comment this comment block. MyScore = GameObject.Find("text").GetComponent<Text>(); */ MyScore . text = CODE_STRING ; } <EOF>
if RecordNumber mod CODE_INTEGER = CODE_INTEGER then Color ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) else crNoColor <EOF>
List < ListItem > list = new List < ListItem > ( lbxCustomers . Items . Cast < ListItem > ( ) ) ; list = list . OrderBy ( li = > li . Text ) . ToList < ListItem > ( ) ; lbxCustomers . Items . Clear ( ) ; lbxCustomers . Items . AddRange ( list . ToArray < ListItem > ( ) ) ; <EOF>
Application word = new Application ( ) ; Document doc = new Document ( ) ; object fileName = path ; object missing = System . Type . Missing ; doc = word . Documents . Open ( ref fileName , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing , ref missing ) ; String read = string . Empty ; List < string > data = new List < string > ( ) ; for ( int i = CODE_INTEGER ; i < doc . Paragraphs . Count ; i ++ ) { string temp = doc . Paragraphs [ i + CODE_INTEGER ] . Range . Text . Trim ( ) ; if ( temp != string . Empty ) data . Add ( temp ) ; } ( ( _Document ) doc ) . Close ( ) ; ( ( _Application ) word ) . Quit ( ) ; GridView1 . DataSource = data ; GridView1 . DataBind ( ) ; <EOF>
ArrayList a = new ArrayList ( ) ; a . Add ( CODE_INTEGER ) ; a . Add ( CODE_INTEGER ) ; for ( int i = CODE_INTEGER ; i < DataList1 . Items . Count ; i ++ ) { if ( a . Contains ( Convert . ToInt32 ( DataList1 . DataKeys [ i ] ) ) ) { ( DataList1 . Items [ i ] . FindControl ( CODE_STRING ) as CheckBox ) . Checked = true ; } } <EOF>
System . Environment . NewLine <EOF>
static Expression < Func < T , bool > > Munge < T > ( Expression < Func < T > > selector ) { var memberInit = selector . Body as MemberInitExpression ; if ( memberInit == null ) throw new InvalidOperationException ( CODE_STRING ) ; var p = Expression . Parameter ( typeof ( T ) , CODE_STRING ) ; Expression body = null ; foreach ( MemberAssignment binding in memberInit . Bindings ) { var comparer = Expression . Equal ( Expression . MakeMemberAccess ( p , binding . Member ) , binding . Expression ) ; body = body == null ? comparer : Expression . AndAlso ( body , comparer ) ; } if ( body == null ) body = Expression . Constant ( true ) ; return Expression . Lambda < Func < T , bool > > ( body , p ) ; } <EOF>
var matches = from p in points from r in rectangles where r . Contains ( p ) select new { r , p } ; <EOF>
flashvars = ' id_video = < % # ( Request . QueryString [ CODE_STRING ] != null ) ? Request . QueryString [ CODE_STRING ] . ToString ( ) : CODE_STRING % > ' <EOF>
if ( ! File . Exists ( CODE_STRING ) ) File . Create ( CODE_STRING ) ; using ( StreamWriter sw = new StreamWriter ( CODE_STRING , true ) ) { sw . WriteLine ( CODE_STRING ) ; } <EOF>
static class Program { [ STAThread ] static void Main ( ) { Application . EnableVisualStyles ( ) ; Application . SetCompatibleTextRenderingDefault ( false ) ; var thread = new Thread ( ThreadStart ) ; thread . TrySetApartmentState ( ApartmentState . STA ) ; thread . Start ( ) ; Application . Run ( new frmOne ( ) ) ; } private static void ThreadStart ( ) { Application . Run ( new frmTwo ( ) ) ; } } <EOF>
data : JSON . stringify ( { login : { id : CODE_INTEGER , CODE_STRING : CODE_STRING , CODE_STRING : CODE_STRING } } ) , <EOF>
event . OriginalSource . DataContext <EOF>
List < MapLocation > locations ; ReverseGeocodeQuery query = new ReverseGeocodeQuery ( ) ; query . GeoCoordinate = new GeoCoordinate ( CODE_REAL , - CODE_REAL ) ; query . QueryCompleted += ( s , e ) = > { if ( e . Error == null && e . Result . Count > CODE_INTEGER ) { locations = e . Result as List < MapLocation > ; } } ; query . QueryAsync ( ) ; <EOF>
private void PopulateTreeView ( ) { treeView1 . Nodes . Add ( AddSubNode ( CODE_INTEGER , new TreeNode ( CODE_STRING ) ) ) ; } private TreeNode AddSubNode ( int level , TreeNode hierarchy ) { if ( level == StructureArray . Length ) { return hierarchy ; } foreach ( string s in StructureData [ StructureArray [ i ] ] ) { tn . Nodes . Add ( AddSubNode ( level + CODE_INTEGER , new TreeNode ( s ) ) ) ; } return tn ; } <EOF>
private Label label ; private void checkBox1_CheckedChanged ( object sender , EventArgs e ) { if ( checkBox1 . Checked ) { label = new Label ( ) ; label . Name = CODE_STRING ; label . AutoSize = true ; label . Text = CODE_STRING ; label . Location = new Point ( CODE_INTEGER , CODE_INTEGER ) ; label . BringToFront ( ) ; this . Controls . Add ( label ) ; } else { if ( label != null ) { this . Controls . Remove ( label ) ; label = null ; } } } <EOF>
WebClient . UploadData <EOF>
StrongNameKeyPair kp ; using ( stream = GetStreamForKeyPair ( ) ) { kp = new StrongNameKeyPair ( fs ) ; } AssemblyName an = new AssemblyName ( ) ; an . KeyPair = kp ; AssemblyBuilder ab = AppDomain . CurrentDomain . DefineDynamicAssembly ( an , AssemblyBuilderAccess . RunAndSave ) ; <EOF>
public static class Foo { private static Dictionary < string , string > m_Constants = new Dictionary < string , string > ( ) ; static Foo ( ) { m_Constants [ CODE_STRING ] = CODE_STRING ; } public static string GetConstant ( string key ) { return m_Constants [ key ] ; } } public string Bar ( string constName ) { return Foo . GetConstant ( constName ) ; } <EOF>
pointsOfList = pointsOfList . OrderByDescending ( p = > p . X ) . ToList ( ) ; <EOF>
Process . WaitForExit ( ) <EOF>
public Form1 ( ) { InitializeComponent ( ) ; toolStripButton1 . MouseDown += toolStripButton_MouseDown ; toolStripButton2 . MouseDown += toolStripButton_MouseDown ; panel1 . DragEnter += panel1_DragEnter ; panel1 . DragDrop += panel1_DragDrop ; } void toolStripButton_MouseDown ( object sender , MouseEventArgs e ) { this . DoDragDrop ( sender , DragDropEffects . Copy ) ; } void panel1_DragEnter ( object sender , DragEventArgs e ) { e . Effect = DragDropEffects . Copy ; } void panel1_DragDrop ( object sender , DragEventArgs e ) { ToolStripButton button = e . Data . GetData ( typeof ( ToolStripButton ) ) as ToolStripButton ; if ( button != null ) { if ( button . Equals ( toolStripButton1 ) ) { MessageBox . Show ( CODE_STRING ) ; } else if ( button . Equals ( toolStripButton2 ) ) { MessageBox . Show ( CODE_STRING ) ; } } } <EOF>
Dictionary < string , List < string > dictionaryOfLists = new Dictionary < string , List < string > ( ) ; public List < string > FindListByName ( string stringListName ) { if ( ! dictionaryOfLists . ContainsKey ( stringListName ) ) dictionaryOfLists . Add ( stringListName , new List < string > ( ) ) ; return dictionaryOfLists [ stringListName ] ; } <EOF>
var additionalCompressionArgument = CODE_INTEGER ; using ( FileStream input = File . OpenRead ( CODE_STRING ) ) using ( FileStream output = File . OpenWrite ( CODE_STRING ) ) using ( StreamPipeline pipeline = new StreamPipeline ( ( input , output ) = > Compress ( input , output , additionalCompressionArgument ) , Encrypt ) ) { pipeline . Run ( input , output ) ; } static void Compress ( Stream input , Stream output , int additionalCompressionParameter ) { using ( GZipStream compressor = new GZipStream ( output , CompressionMode . Compress , true ) ) CopyStream ( input , compressor ) ; } <EOF>
string stFloat = String . Format ( CODE_STRING , FLOAT_VALUE ) ; <EOF>
public class PanelEx : Panel { protected override Point ScrollToControl ( Control activeControl ) { return this . AutoScrollPosition ; } } <EOF>
public partial class SmoothScrollPanel : UserControl { public SmoothScrollPanel ( ) { InitializeComponent ( ) ; } private const int WM_HSCROLL = CODE_INTEGER ; private const int WM_VSCROLL = CODE_INTEGER ; protected override void WndProc ( ref Message m ) { if ( ( m . Msg == WM_HSCROLL || m . Msg == WM_VSCROLL ) && ( ( ( int ) m . WParam & CODE_INTEGER ) == CODE_INTEGER ) ) { m . WParam = ( IntPtr ) ( ( ( int ) m . WParam & ~ CODE_INTEGER ) | CODE_INTEGER ) ; } base . WndProc ( ref m ) ; } protected override CreateParams CreateParams { get { var cp = base . CreateParams ; cp . ExStyle |= CODE_INTEGER ; return cp ; } } } <EOF>
string s = CODE_STRING ; string [ ] s = data . Split ( CODE_CHAR ) ; List < int32 > li = new List < int32 > ( ) ; foreach ( String sout in s ) { int i ; if ( Int32 . TryParse ( sout , out i ) ) li . Add ( i ) ; } <EOF>
string orderBy = CODE_STRING ; string whereClause = CODE_STRING ; string sql = CODE_STRING ; switch ( Request [ CODE_STRING ] ) { case CODE_STRING : orderBy = CODE_STRING ; break ; case CODE_STRING : orderBy = CODE_STRING ; break ; default : orderBy = CODE_STRING ; break ; } if ( ! string . IsNullOrEmpty ( Request [ CODE_STRING ] ) ) { whereClause = string . Format ( CODE_STRING , Request [ CODE_STRING ] ) ; } sql = string . Format ( CODE_STRING , whereClause , orderBy ) ; @foreach ( var row in db . Query ( sql ) ) { } <EOF>
string year = CODE_STRING ; protected List < string > GetPersons ( string year ) { XElement company = XElement . Load ( Server . MapPath ( XMLfil ) ) ; var persons = ( from a in company . Elements ( CODE_STRING ) . Elements ( CODE_STRING ) . Elements ( CODE_STRING ) where ( string ) a . Element ( CODE_STRING ) . Value == ' male ' && ( string ) a . Element ( CODE_STRING ) . Value . StartsWith ( year ) select ( string ) ( a . Element ( CODE_STRING ) ) ) . ToList < string > ( ) ; return persons ; } <EOF>
var st = new StackTrace ( ex , true ) ; var frame = st . GetFrame ( CODE_INTEGER ) ; var line = frame . GetFileLineNumber ( ) ; <EOF>
Console . WriteLine ( CODE_STRING ) ; NetworkInterface [ ] adapters = NetworkInterface . GetAllNetworkInterfaces ( ) ; foreach ( NetworkInterface adapter in adapters ) { IPInterfaceProperties adapterProperties = adapter . GetIPProperties ( ) ; IPAddressCollection addresses = adapterProperties . DhcpServerAddresses ; if ( addresses . Count > CODE_INTEGER ) { Console . WriteLine ( adapter . Description ) ; foreach ( IPAddress address in addresses ) { Console . WriteLine ( CODE_STRING , address . ToString ( ) ) ; } Console . WriteLine ( ) ; } } <EOF>
var d = new List < Tuple < string , double > > ( ) ; . . . while ( ( line = file . ReadLine ( ) ) != null ) { d . Add ( Tuple . Create ( line , p . calculate_CS ( line , document ) ) ) ; } . . . foreach ( double item in d . OrderByDescending ( t = > t . Item2 ) ) { fileW . WriteLine ( CODE_STRING , item . Item2 , item . Item1 ) ; } <EOF>
AND apptDate = thepassedindate <EOF>
[ Authorize ] <EOF>
string [ ] filea = File . ReadAllLines ( CODE_STRING ) ; foreach ( var s in filea ) { string [ ] parts = s . Split ( CODE_CHAR ) ; if ( parts . Length == CODE_INTEGER ) { if ( parts [ CODE_INTEGER ] . Contains ( CODE_STRING ) ) richTextBox1 . AppendText ( parts [ CODE_INTEGER ] . Trim ( ) ) ; if ( parts [ CODE_INTEGER ] . Contains ( CODE_STRING ) ) richTextBox1 . AppendText ( CODE_STRING + parts [ CODE_INTEGER ] . Trim ( ) + Environment . NewLine ) ; } } <EOF>
this . label . BorderStyle = System . Windows . Forms . BorderStyle . None <EOF>
string getfile = CODE_STRING ; foeach ( string f in Directory . GetFiles ( Server . MapPath ( CODE_STRING + str + CODE_STRING ) ) { getfiles = getfiles + f + CODE_STRING ; } <EOF>
Regex regex = new Regex ( CODE_STRING ) ; var v = regex . Match ( CODE_STRING ) ; string s = v . Groups [ CODE_INTEGER ] . ToString ( ) ; <EOF>
if ( Directory . Exists ( path ) ) { Console . WriteLine ( CODE_STRING ) ; return ; } DirectoryInfo di = Directory . CreateDirectory ( path ) ; Console . WriteLine ( CODE_STRING , Directory . GetCreationTime ( path ) ) ; <EOF>
create table students ( id varchar ( CODE_INTEGER ) primary key not null , Department varchar ( CODE_INTEGER ) , Name varchar ( CODE_INTEGER ) ) go create trigger students_insert_PK on students INSTEAD OF INSERT as declare @id int ; declare @dept varchar ( CODE_INTEGER ) ; select @dept = Department from INSERTED ; select @id = cast ( max ( right ( id , CODE_INTEGER ) ) as int ) from students where Department = @dept ; set @id = isnull ( @id , CODE_INTEGER ) + CODE_INTEGER ; insert into students select Department + right ( ' CODE_INTEGER ' + cast ( @id as varchar ( CODE_INTEGER ) ) , CODE_INTEGER ) , Department , name from INSERTED ; go insert into students ( Department , Name ) values ( ' CS CODE_CHAR John ' ) ; insert into students ( Department , Name ) values ( ' CS CODE_CHAR Pat ' ) ; insert into students ( Department , Name ) values ( ' CS CODE_CHAR Sheryl ' ) ; insert into students ( Department , Name ) values ( ' IT CODE_CHAR Phil ' ) ; insert into students ( Department , Name ) values ( ' EE CODE_CHAR Frank ' ) ; insert into students ( Department , Name ) values ( ' EE CODE_CHAR Amy ' ) ; insert into students ( Department , Name ) values ( ' EE CODE_CHAR Stu ' ) ; go select * from students ; go <EOF>
html = html . Replace ( ItemMatch . Value , CODE_STRING ) ; <EOF>
String test = DateTime . Now . ToString ( CODE_STRING ) ; <EOF>
var project = accounts . Select ( a = > a . AccountProjects ) . Where ( x = > x . AccountProjectID == accountProjectId ) ; <EOF>
myList . ForEach ( x = > x . IsUnread = ( x . UnreadCount > CODE_INTEGER ) ) ; <EOF>
public class CreateArtistViewModel { public string ArtistName { get ; set ; } public int ? Genres { get ; set ; } public string GenresName { get ; set ; } public string GenresDecription { get ; set ; } public IList < Genre > Genres { get ; set ; } } <EOF>
int i = CODE_INTEGER , flag = CODE_INTEGER ; var uiScheduler = TaskScheduler . FromCurrentSynchronizationContext ( ) ; Task . Factory . StartNew ( ( ) = > { while ( i < flag ) { Task . Factory . StartNew ( ( ) = > { this . Text = i . ToString ( ) ; } , System . Threading . CancellationToken . None , TaskCreationOptions . None , uiScheduler ) ; i ++ ; System . Threading . Thread . Sleep ( CODE_INTEGER ) ; } } ) ; <EOF>
con . Open ( ) ; String queryStr = CODE_STRING ; SqlCommand com = new SqlCommand ( queryStr , con ) ; SqlDataReader sdr = com . ExecuteReader ( ) ; while ( sdr . Read ( ) ) { this . textbox2 . Text = sdr . GetValue ( CODE_INTEGER ) . ToString ( ) ; } <EOF>
string xml = CODE_STRING ; var doc = XDocument . Parse ( xml ) ; var settings = doc . Descendants ( CODE_STRING ) . Where ( x = > ( string ) x . Attribute ( CODE_STRING ) == CODE_STRING ) . Descendants ( CODE_STRING ) . Elements ( ) . ToDictionary ( x = > x . Name . ToString ( ) , x = > ( string ) x ) ; <EOF>
double price = CODE_REAL ; foreach ( ListViewItem item in breakfast ) { price += Double . Parse ( item . SubItems [ CODE_INTEGER ] . Text ) ; } <EOF>
string pattern = " \ b ( ? < protocol > https ? | ftp | gopher | telnet | file | notes | ms - help ) : <EOF>
public static T To < T > ( this object value ) { Type t = typeof ( T ) ; Type valueType = Nullable . GetUnderlyingType ( typeof ( T ) ) ; if ( valueType != null ) { if ( value == null ) { return default ( T ) ; } else { object result = Convert . ChangeType ( value , valueType ) ; return ( T ) result ; } } else { return ( T ) Convert . ChangeType ( value , typeof ( T ) ) ; } } <EOF>
int now = DateTime . Now . Month ; string month ; if ( now < CODE_INTEGER ) { month = CODE_STRING + now . ToString ( ) ; } else { month = now . ToString ( ) ; } mySearcher . Filter = ( CODE_STRING + month + CODE_STRING + month + CODE_STRING ) ; <EOF>
openFileDialog1 . FileNames . Length <EOF>
Microsoft . Office . Interop . Outlook . Inspector oInspector = oMsg . GetInspector ; <EOF>
int i = CODE_INTEGER ; foreach ( DataRow dgvr in _ds . Tables [ CODE_INTEGER ] . Rows ) { grvPackList . Rows [ i ] . Cells [ CODE_STRING ] . Value = dgvr [ CODE_STRING ] . ToString ( ) ; i ++ ; } <EOF>
string me_setFormatValue ( Match m ) { string key = m . Groups [ CODE_INTEGER ] . Value ; return SomeFunctionToGetValueFromKey ( key ) ; } void testMethod ( ) { string format_string = CODE_STRING ; string formatted = Regex . Replace ( CODE_STRING , format_string , me_SetFormatValue ) ; } <EOF>
foreach ( var item in Items . Select ( ( elem , index ) = > new { Item = elem , Index = index } ) ) { DoStuff ( item . Item , item . Index ) ; } <EOF>
var result1 = new { draw = Draw , recordsTotal = persons . Count ( ) , recordsFiltered = ( iDisplayLength - iDisplayStart ) , data = persons . Where ( p = > InString ( p . FName ) || InString ( p . LName ) || InString ( p . Id . ToString ( ) ) || InString ( p . Email ) ) . Select ( p = > new { Email = p . Email } ) . Skip ( iDisplayStart ) . Take ( iDisplayLength ) . ToList ( ) } ; public bool InString ( string prop , string search ) { return prop . Contains ( search , StringComparison . OrdinalIgnoreCase ) } <EOF>
GL . VertexAttribPointer ( ( int ) GLKVertexAttrib . Color , CODE_INTEGER , VertexAttribPointerType . Float , false , CODE_INTEGER , CODE_INTEGER ) ; <EOF>
List < string > namesCollection = new List < string > ( ) ; SqlConnection conn = new SqlConnection ( ) ; conn . ConnectionString = ' Connexion String or From File ' SqlCommand cmd = new SqlCommand ( ) ; cmd . Connection = conn ; cmd . CommandType = CommandType . Text ; cmd . CommandText = CODE_STRING ; conn . Open ( ) ; SqlDataReader dReader = cmd . ExecuteReader ( ) ; if ( dReader . HasRows == true ) { while ( dReader . Read ( ) ) namesCollection . Add ( dReader [ CODE_STRING ] . ToString ( ) ) ; } dReader . Close ( ) ; txtName . AutoCompleteMode = AutoCompleteMode . Suggest ; txtName . AutoCompleteSource = AutoCompleteSource . CustomSource ; txtName . AutoCompleteCustomSource = namesCollection ; <EOF>
using ( var context = new PrincipalContext ( ContextType . Domain ) ) { using ( var user = UserPrincipal . FindByIdentity ( context , IdentityType . SamAccountName , userName ) ) { user . SetPassword ( CODE_STRING ) ; user . ChangePassword ( CODE_STRING , CODE_STRING ) ; } } <EOF>
SyncNotification = true <EOF>
m_oEnum = m_oEnum . Select ( s = > s == CODE_STRING ? CODE_STRING : s ) . ToArray ( ) ; <EOF>
myGrid . NotifyCurrentCellDirty ( true ) ; <EOF>
MainForm . Invoke ( helperMethod ) <EOF>
File . Copy ( CODE_STRING , CODE_STRING ) ; <EOF>
- Create new cache ( bottom up , top down ) - Foreach CachedObject - Check if items exist ( both parent and child ) : yes -> select node : no -> create node and insert it in the new cache - add child to parent node <EOF>
[ Table ( CODE_STRING ) ] public class WEBNews_in : AbsNews { private DateTime _inDateTimeAdded = DateTime . MinValue ; public string InDateTimeAdded { get { return Format ( _inDateTimeAdded , CODE_STRING ) ; } set { _inDateTimeAdded = DateTime . Parse ( value ) ; } } private DateTime _inDateTimeUpdated = DateTime . MinValue ; public string InDateTimeUpdated { get { return Format ( _inDateTimeUpdated , CODE_STRING ) ; } set { _inDateTimeUpdated = DateTime . Parse ( value ) ; } } } <EOF>
var myFile = MyApp . Resources . AppResources . myFile ; StringReader sr = new StringReader ( myFile ) ; var xmlSerializer = new XmlSerializer ( typeof ( Foo ) ) ; var classInstance = xmlSerializer . Deserialize ( sr ) ; <EOF>
declare @string varchar ( CODE_INTEGER ) set @string = ' abcdefghijklmnop ' SELECT LEFT ( @string , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) , RIGHT ( LEFT ( @string , CODE_INTEGER ) , CODE_INTEGER ) <EOF>
public class Student { public int StudentId { get ; set ; } public int StudentName { get ; set ; } public int StudentRoll { get ; set ; } public int DepartmentId { get ; set ; } public virtual Department Department { get ; set ; } } public class Department { public int DepartmentId { get ; set ; } public int DepartmentName { get ; set ; } public virtual ICollection < Student > Students { get ; set ; } } <EOF>
ToolStripComboBox1 . ComboBox . ValueMember = CODE_STRING ; <EOF>
List < ListViewDataItem > lItems = fundingListView . Items . ToList ( ) ; foreach ( ListViewDataItem item in lItems ) { TextBox tb = item . FindControl ( CODE_STRING ) as TextBox ; string addToDatabase = tt . Text ; } <EOF>
using System ; using System . Text . RegularExpressions ; public class Program { public static void Main ( ) { Regex regex = new Regex ( CODE_STRING ) ; Match match = regex . Match ( CODE_STRING ) ; if ( match . Success ) { Console . WriteLine ( match . Value ) ; } } } <EOF>
using ( System . IO . UnmanagedMemoryStream memoryStream = new UnmanagedMemoryStream ( pointer , length , length , FileAccess . Read ) ) { byte [ ] imageBytes = new byte [ length ] ; memoryStream . Read ( imageBytes , CODE_INTEGER , length ) ; } <EOF>
public static DependencyProperty Thickness = DependencyProperty . Register ( CODE_STRING , typeof ( double ) , typeof ( Test ) ) ; <EOF>
mnuLogin_Click ( ) { FrmLogin frmLogin = new FrmLogin ( ) ; if ( frmLogin . ShowDialog ( ) == DialogResult . OK ) { } } <EOF>
toolTip . PlacementTarget = yourSelectedItem ; toolTip . Placement = PlacementMode . Right ; toolTip . Content = { place whatever you need to display here } ; <EOF>
foreach ( var entry in json [ CODE_STRING ] [ CODE_STRING ] ) { var title = ( string ) entry . SelectToken ( CODE_STRING ) ; } <EOF>
public static bool isTrue = true ; <EOF>
static void Main ( string [ ] args ) { bool a = true ; bool b = true ; bool c = true ; string x = CODE_STRING ; string Test = x + ( a ? CODE_STRING : CODE_STRING ) + ( b ? CODE_STRING : CODE_STRING ) + ( c ? CODE_STRING : CODE_STRING ) ; Console . WriteLine ( Test ) ; Console . ReadLine ( ) ; } <EOF>
var str = CODE_STRING + CODE_STRING + CODE_STRING ; var template = ( ControlTemplate ) XamlReader . Load ( str ) ; HyperlinkButton hyperlinkButton = new HyperlinkButton ( ) { Content = CODE_STRING , HorizontalAlignment = HorizontalAlignment . Left , NavigateUri = new Uri ( CODE_STRING , UriKind . Absolute ) , Template = template } ; <EOF>
private Rectangle lastBounds ; private void contextMenuStrip1_Opened ( object sender , EventArgs e ) { lastBounds = contextMenuStrip1 . Bounds ; } private void contextMenuStrip1_SizeChanged ( object sender , EventArgs e ) { Rectangle rc = contextMenuStrip1 . Bounds ; int diff = lastBounds . Height - rc . Height ; if ( diff > CODE_INTEGER ) { contextMenuStrip1 . Bounds = new Rectangle ( new Point ( rc . X , rc . Y + diff ) , rc . Size ) ; lastBounds = contextMenuStrip1 . Bounds ; } else { contextMenuStrip1 . Bounds = new Rectangle ( new Point ( rc . X , rc . Y - diff ) , rc . Size ) ; lastBounds = contextMenuStrip1 . Bounds ; } } <EOF>
protected void Page_PreRender ( object sender , EventArgs e ) { Literal1 . Text = CODE_STRING ; } <EOF>
string name = SomeUserObject != null ? SomeUserObject . Username : string . Empty ; <EOF>
System . Media . SystemSounds . Beep . Play ( ) ; <EOF>
try { var hwndSource = PresentationSource . FromVisual ( this ) as HwndSource ; var hwndTarget = hwndSource . CompositionTarget ; hwndTarget . RenderMode = RenderMode . SoftwareOnly ; } catch ( Exception ex ) { Log . ErrorException ( ex . Message , ex ) ; } <EOF>
g . DrawImage ( res , p ) ; g . FillRectangle ( Brushes . Black , new Rectangle ( CODE_INTEGER , CODE_INTEGER , p . X , dest_size . Height ) ) ; g . FillRectangle ( Brushes . Black , new Rectangle ( p . X + act_size . Width , CODE_INTEGER , p . X , dest_size . Height ) ) ; g . FillRectangle ( Brushes . Black , new Rectangle ( CODE_INTEGER , CODE_INTEGER , dest_size . Width , p . Y ) ) ; g . FillRectangle ( Brushes . Black , new Rectangle ( CODE_INTEGER , p . Y + act_size . Width , dest_size . Width , p . Y ) ) ; <EOF>
( \ * | [ CODE_INTEGER - CODE_INTEGER ] ) \ s + ( \ * | [ CODE_INTEGER - CODE_INTEGER ] \ d | CODE_INTEGER [ CODE_INTEGER ] ) \ s + ( [ CODE_INTEGER ] \ d | CODE_INTEGER [ CODE_INTEGER - CODE_INTEGER ] ) \ s + ( CODE_INTEGER | CODE_INTEGER | CODE_INTEGER | CODE_INTEGER ) <EOF>
Workbook workbook = new Workbook ( CODE_STRING ) ; Worksheet sheet = workbook . Worksheets [ CODE_INTEGER ] ; ImageOrPrintOptions imgOptions = new ImageOrPrintOptions ( ) ; imgOptions . ImageFormat = System . Drawing . Imaging . ImageFormat . Jpeg ; imgOptions . OnePagePerSheet = true ; SheetRender sr = new SheetRender ( sheet , imgOptions ) ; Bitmap bitmap = sr . ToImage ( CODE_INTEGER ) ; bitmap . Save ( CODE_STRING ) ; <EOF>
XmlElement itemTitle = ( XmlElement ) doc . SelectSingleNode ( CODE_STRING + var_x + CODE_STRING ) ; XmlNode itemUrl = doc . SelectSingleNode ( CODE_STRING + var_x + CODE_STRING ) ; itemTitle . Attributes [ CODE_STRING ] . Value = texbox_title . Text ; itemUrl . InnerText = textbox_url . Text ; <EOF>
private void ProcessSelectedObject ( System . Collections . IList list ) { foreach ( object obj in list ) { if ( obj is Contact ) { if ( ( ( Contact ) obj ) . Sector == null ) { ( ( Contact ) ( obj ) ) . Sector = CODE_STRING ; } } } } <EOF>
DispatcherTimer dt = new DispatcherTimer ( ) ; dt . Interval = TimeSpan . FromMilliseconds ( CODE_INTEGER ) ; dt . Tick += ( s , e ) = > { currentTime . Text = DateTime . Now . ToShortTimeString ( ) ; } ; dt . Start ( ) ; <EOF>
items = items . OrderBy ( x = > x . GetType ( ) . Name ) . ToList ( ) ; <EOF>
public bool IsDefaultPrice { get { return price1 == CODE_INTEGER && price2 == CODE_INTEGER ; } } <EOF>
produseDataGridView . Rows ( Index + CODE_INTEGER ) . Selected = True ; produse_magazinDataGridView . Rows ( Index1 + CODE_INTEGER ) . Selected = True ; <EOF>
var doc = new XDocument ( new XElement ( CODE_STRING , from o in apiCall . ApiResponse . OrderArray . ToArray ( ) select new XElement ( CODE_STRING , new XElement ( CODE_STRING , o . OrderID ) ) ) ) ; <EOF>
SqlCommand com = new SqlCommand ( CODE_STRING , connection ) ; com . Parameters . Add ( new SqlParameter ( CODE_STRING , value ) ) ; SqlDataAdapter cidadeTableAdapter = new SqlDataAdapter ( ) ; cidadeTableAdapter . SelectCommand = this . com ; DataSet set = new DataSet ( CODE_STRING ) ; cidadeTableAdapter . Fill ( set ) ; this . com . Connection . Close ( ) ; return set ; <EOF>
private void button_addTab_Click ( object sender , EventArgs e ) { TabPage addedTabPage = new TabPage ( CODE_STRING ) ; tabControl_webBrowsers . TabPages . Add ( addedTabPage ) ; WebBrowser addedWebBrowser = new WebBrowser ( ) { Parent = addedTabPage , Dock = DockStyle . Fill } ; addedWebBrowser . NewWindow += specificWebBrowser_NewWindow ; addedWebBrowser . Navigate ( CODE_STRING ) ; } <EOF>
var methodInfo = Type . GetType ( CODE_STRING ) . GetTypeInfo ( ) . DeclaredMethods . Where ( ( method ) = > method . Name == CODE_STRING && method . GetParameters ( ) . Length == CODE_INTEGER ) . First ( ) ; int token = ( int ) methodInfo . Invoke ( _moduleBuilder , new object [ ] { closedGenericMethod , null , false } ) ; <EOF>
SqlDataAdapter dba = new SqlDataAdapter ( CODE_STRING , connection ) ; dba . Fill ( ds ) ; drpNonAfricanCountries . DataSource = ds ; <EOF>
if ( Input . GetMouseButtonDown ( CODE_INTEGER ) ) { target = Camera . main . ScreenToWorldPoint ( Input . mousePosition ) ; target . z = transform . position . z ; if ( target . x > transform . position . x ) transform . localScale = new Vector3 ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; else if ( target . x < transform . position . x ) transform . localScale = new Vector3 ( - CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; anim . SetInteger ( CODE_STRING , CODE_INTEGER ) ; } transform . position = Vector3 . MoveTowards ( transform . position , target , speed * Time . deltaTime ) ; <EOF>
PagedDataSource objPds = new PagedDataSource ( ) ; objPds . DataSource = Items . Tables [ CODE_INTEGER ] . DefaultView ; objPds . AllowPaging = true ; objPds . PageSize = CODE_INTEGER ; objPds . CurrentPageIndex = CurrentPage - CODE_INTEGER ; repeaterItems . DataSource = objPds ; repeaterItems . DataBind ( ) ; <EOF>
DataSet1TableAdapters . PersonTableAdapter adapter = new DataSet1TableAdapters . PersonTableAdapter ; adapter . InsertQuery ( . . . ) <EOF>
var tmpItems = comboBoxKey . Items . Cast < Object > ( ) . ToArray ( ) ; comboBoxKey . Items . Clear ( ) ; String tmp2 = textBoxSearchKey . Text ; var filteredItems = tmpItems . Where ( x = > x . ToString ( ) . Contains ( tmp2 ) ) . ToArray ( ) ; comboBoxKey . Items . AddRange ( filteredItems ) ; <EOF>
string output = input . Substring ( input . IndexOf ( CODE_CHAR ) + CODE_INTEGER , input . LastIndexOf ( CODE_CHAR ) - input . IndexOf ( CODE_CHAR ) - CODE_INTEGER ) ; <EOF>
string url = ' http : WebClient client = new WebClient ( ) ; string content = client . DownloadString ( url ) ; if ( content . Contains ( CODE_STRING ) ) { . . . } <EOF>
item . Imported <EOF>
using ( UdpClient udpLink = new UdpClient ( ipAddress , CODE_INTEGER ) ) { udpLink . Send ( rawMsg , rawMsg . Length ) ; } <EOF>
public long RecursivePLINQ ( long factor , long total ) { if ( total == CODE_INTEGER ) { total = CODE_INTEGER ; } if ( factor > CODE_INTEGER ) { Parallel . For < long > ( CODE_INTEGER , CODE_INTEGER , ( ) = > factor , ( j , loop , factorial ) = > { Thread . Sleep ( CODE_INTEGER ) ; /*Simulate Moderate Operation*/ total = factorial * RecursivePLINQ ( -- factorial , total ) ; return total ; } , ( i ) = > { return ; } ) ; } return total ; } <EOF>
MethodInfo mi = typeof ( Example ) . GetMethod ( CODE_STRING ) ; MethodBody mb = mi . GetMethodBody ( ) ; Console . WriteLine ( " \ r Method : { CODE_INTEGER } " , mi ) ; Console . WriteLine ( CODE_STRING , mb . InitLocals ) ; foreach ( LocalVariableInfo lvi in mb . LocalVariables ) { Console . WriteLine ( CODE_STRING , lvi ) ; } <EOF>
public class MyClass { public MyClass ( ) { Foo = CODE_INTEGER ; } public int Foo { get ; set ; } } <EOF>
string path = CODE_STRING ; oXL = new Microsoft . Office . Interop . Excel . Application ( ) ; oXL . Visible = true ; oXL . DisplayAlerts = false ; mWorkBook = oXL . Workbooks . Open ( path , CODE_INTEGER , false , CODE_INTEGER , CODE_STRING , CODE_STRING , false , Microsoft . Office . Interop . Excel . XlPlatform . xlWindows , CODE_STRING , true , false , CODE_INTEGER , true , false , false ) ; mWorkSheets = mWorkBook . Worksheets ; mWSheet1 = ( Microsoft . Office . Interop . Excel . Worksheet ) mWorkSheets . get_Item ( CODE_STRING ) ; Microsoft . Office . Interop . Excel . Range range = mWSheet1 . UsedRange ; mWSheet1 . Cells [ CODE_INTEGER , CODE_INTEGER ] = CODE_STRING ; <EOF>
char * short_to_byteArr ( short value ) { static char byte_arr [ ] = { } ; byte_arr [ CODE_INTEGER ] = value & CODE_INTEGER ; byte_arr [ CODE_INTEGER ] = ( value > > CODE_INTEGER ) & CODE_INTEGER ; return byte_arr ; } <EOF>
Request . Url . AbsolutePath <EOF>
foreach ( var item in records ) { string category = item . Description . Split ( new char [ ] { CODE_CHAR } ) [ CODE_INTEGER ] . Trim ( new char [ ] { CODE_CHAR , CODE_CHAR ) ; FieldItem fi = new FieldItem { Category = category } ; if ( ! dict . Keys . Contains ( category ) ) dict . Add ( category , new List < FieldItem > ( ) ) ; dict [ category ] . Add ( fi ) ; } <EOF>
WebClient webC = new WebClient ( ) ; webC . Encoding = Encoding . UTF8 ; string jsonStr = webC . DownloadString ( CODE_STRING ) ; <EOF>
public abstract class MyBaseClass { protected string _status ; public virtual string Status { get { return _status ; } set { _status = value ; } } } public class MySpecificClass : MyBaseClass { public override string Status { get { if ( _status == CODE_STRING ) return CODE_STRING ; else return CODE_STRING ; } set { _status = value ; } } } <EOF>
using System ; using System . Diagnostics ; using System . Windows . Forms ; namespace VirtualKeyboard { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } private void Open_Click ( object sender , EventArgs e ) { Process . Start ( CODE_STRING ) ; } private void Close_Click ( object sender , EventArgs e ) { Process [ ] processlist = Process . GetProcesses ( ) ; foreach ( Process process in processlist ) { if ( process . ProcessName == CODE_STRING ) { process . Kill ( ) ; break ; } } } } } <EOF>
using System . Net ; using System . Net . Mail ; SmtpClient smtpClient = new SmtpClient ( ) ; NetworkCredential basicCredential = new NetworkCredential ( CODE_STRING , CODE_STRING ) ; MailMessage message = new MailMessage ( ) ; MailAddress fromAddress = new MailAddress ( CODE_STRING ) ; smtpClient . Host = CODE_STRING ; smtpClient . UseDefaultCredentials = false ; smtpClient . Credentials = basicCredential ; message . From = fromAddress ; message . Subject = CODE_STRING ; message . IsBodyHtml = true ; message . Body = CODE_STRING ; message . To . Add ( CODE_STRING ) ; try { smtpClient . Send ( message ) ; } catch ( Exception ex ) { Response . Write ( ex . Message ) ; } <EOF>
Type t = typeof ( x ) for fields : t . GetFields ( ) . Where ( p = > ! p . Attributes . HasFlag ( FieldAttributes . NotSerialized ) ) ; for type t . Attributes . HasFlag ( TypeAttributes . Serializable ) ; <EOF>
public void SetColor ( DataGridViewRow row , string columnName , int cellIndex ) { var data = ( GridViewRow ) row . DataItem ; int number = Convert . ToInt32 ( data [ columnName ] ) ; if ( number > CODE_INTEGER ) return ; row . Cells [ cellIndex ] . BackColor = Color . Red ; } protected void gv1_RowDataBound ( object sender , GridViewRowEventArgs e ) { if ( e . Row . RowType != DataRowType . DataRow ) return ; SetColor ( e , CODE_STRING , CODE_INTEGER ) ; } <EOF>
if ( e . Row . RowType == DataControlRowType . DataRow ) { ( e . Row . FindControl ( CODE_STRING ) as DropDownList ) . ForeColor = System . Drawing . Color . LightBlue ; } <EOF>
ISpatialReferenceFactory srFactory = new SpatialReferenceEnvironmentClass ( ) ; IGeographicCoordinateSystem gcs = srFactory . CreateGeographicCoordinateSystem ( ( int ) esriSRGeoCSType . esriSRGeoCS_WGS1984 ) ; ISpatialReference sr1 = gcs ; IPoint point = new PointClass ( ) as IPoint ; point . PutCoords ( - CODE_REAL , CODE_REAL ) ; IGeometry geometryShape ; geometryShape = point ; geometryShape . SpatialReference = sr1 ; geometryShape . Project ( mapControl . SpatialReference ) ; mapControl . DrawShape ( geometryShape ) ; <EOF>
CREATE PROC dbo . RBARBane ( @tvp dbo . MyUserDefinedTableType ) AS BEGIN UPDATE T SET col1 = TVP . col1 -- all the columns that need updated FROM dbo . Table T INNER JOIN @tvp TVP ON TVP . key1 = T . key1 END <EOF>
#if WIN64 return Document . IdToObject ( ObjectID . ToInt64 ( ) ) ; #else return Document . IdToObject ( ObjectID . ToInt32 ( ) ) ; # endif <EOF>
root . Elements ( CODE_STRING ) . Select ( e = > e . Elements ( CODE_STRING ) . Average ( f = > ( int ) f . Attribute ( CODE_STRING ) ) ) <EOF>
MessageBox . Show ( ) <EOF>
private void Button_Click ( object sender , RoutedEventArgs e ) { MoveGrid ( ) ; } private void MoveGrid ( ) { var sb = new Storyboard ( ) ; var animation = new DoubleAnimation ( ) { To = CODE_INTEGER , From = content1 . ActualWidth , EnableDependentAnimation = true } ; Storyboard . SetTargetProperty ( animation , CODE_STRING ) ; Storyboard . SetTarget ( animation , content1 ) ; sb . Children . Add ( animation ) ; sb . Begin ( ) ; } <EOF>
Program Files <EOF>
ImageAnnotation logo = new ImageAnnotation ( ) ; logo . X = CODE_INTEGER ; logo . Y = CODE_INTEGER ; logo . Image = CODE_STRING ; chart . Annotations . Add ( logo ) ; <EOF>
class CellInfo < T > { public string Title { get ; set ; } public string FormatString { get ; set ; } public Func < T , object > Selector { get ; set ; } } Dictionary < string , CellInfo < Person > > dict = new Dictionary < string , CellInfo < Person > > ( ) ; dict . Add ( CODE_STRING , new CellInfo < Person > { Selector = p = > p . LastName } ) ; dict . Add ( CODE_STRING , new CellInfo < Person > { Selector = p = > p . Age } ) ; foreach ( Person p in someCollection ) { foreach ( var cellInfo in dict ) { object value = cellInfo . Value . Selector ( p ) ; } } <EOF>
_contextProvider . BeforeSaveEntitiesDelegate = BeforeSaveEntities ; private Dictionary < Type , List < EntityInfo > > BeforeSaveEntities ( Dictionary < Type , List < EntityInfo > > arg ) { var resultToReturn = new Dictionary < Type , List < EntityInfo > > ( ) ; foreach ( var type in arg . Keys ) { var entityName = type . FullName ; var list = arg [ type ] ; if ( entityName == CODE_STRING && list [ CODE_INTEGER ] . EntityState != CODE_STRING ) { resultToReturn . Add ( type , list ) ; } } return arg ; } <EOF>
public ActionResult Index ( string jobType ) { return ( jobType . ToLower ( ) == CODE_STRING ) ? RedirectToAction ( CODE_STRING ) : RedirectToAction ( CODE_STRING ) ; } private ActionResult CandidateResults ( ) { var model = return View ( model ) ; } private ActionResult JobResults ( ) { var model = return View ( model ) ; } <EOF>
var certificateStore = new CmsSignedData ( new FileStream ( CODE_STRING , FileMode . Open ) ) ; IX509Store x509Certs = certificateStore . GetCertificates ( CODE_STRING ) ; ArrayList a = new ArrayList ( x509Certs . GetMatches ( null ) ) ; X509Certificate signerCert = ( X509Certificate ) a [ CODE_INTEGER ] ; var gen = new CmsSignedDataGenerator ( ) ; gen . AddCertificates ( x509Certs ) ; gen . AddSigner ( _privateKey , signerCert , CmsSignedGenerator . DigestSha1 ) ; CmsProcessable msg = new CmsProcessableByteArray ( Encoding . ASCII . GetBytes ( FullUnsignedMessage ) ) ; CmsSignedData signedData = gen . Generate ( msg , true ) ; <EOF>
var p = new System . Diagnostics . Process ( ) ; p . StartInfo = new ProcessStartInfo ( arguments ) { FileName = CODE_STRING , Arguments = CODE_STRING + arguments , CreateNoWindow = true , UseShellExecute = false , RedirectStandardOutput = true , RedirectStandardInput = true , RedirectStandardError = true } ; p . Start ( ) ; <EOF>
class nac { public decimal nr_zbor . . . public string airport . . . public string company . . . } List < nac > nacs = new List < nac > ( ) ; <EOF>
private static int RandomNumberEven ( int min , int max ) { Random random = new Random ( ) ; int ans = random . Next ( min , max ) ; if ( ans % CODE_INTEGER == CODE_INTEGER ) return ans ; else { if ( ans + CODE_INTEGER <= max ) return ans + CODE_INTEGER ; else if ( ans - CODE_INTEGER >= min ) return ans - CODE_INTEGER ; else return CODE_INTEGER ; } } private static int RandomNumberOdd ( int min , int max ) { Random random = new Random ( ) ; int ans = random . Next ( min , max ) ; if ( ans % CODE_INTEGER == CODE_INTEGER ) return ans ; else { if ( ans + CODE_INTEGER <= max ) return ans + CODE_INTEGER ; else if ( ans - CODE_INTEGER >= min ) return ans - CODE_INTEGER ; else return CODE_INTEGER ; } } <EOF>
msWordApp . Quit ( ) <EOF>
var SQL1 = ( from i in ESE . viw_kisiler select i ) ; DataTable DT = LINQToDataTable ( SQL1 ) ; var SQL2 = ( from t in DT . AsEnumerable ( ) where t . Field < string > ( ColumnName ) . Contains ( Word ) select t ) ; <EOF>
XmlNodeList searchResultNodes = searchResult . ChildNodes ; foreach ( XmlNode node in searchResultNodes ) { XmlElement nodeXml = GetElement ( node . OuterXml ) ; ProcessList . DocumentElement . AppendChild ( ProcessList . ImportNode ( nodeXml , false ) ) ; } <EOF>
" C : \ Program Files ( x86 ) \ MiKeSoft \ PCG Tools \ PcgTools . exe CODE_STRING % CODE_INTEGER " <EOF>
submit N jobs ( where N is your max in flight ) Wait for a job to complete , and if queue is not empty , submit next job . <EOF>
webbrowser1 . Document . getElementById ( CODE_STRING ) . SetAttribute ( CODE_STRING , CODE_STRING ) ; <EOF>
var cellValues = from cell in row . Descendants < Cell > ( ) select cell ; foreach ( var cell in cellValues ) { if ( cell . DataType != null && cell . DataType . HasValue && cell . DataType == CellValues . SharedString && int . Parse ( cell . CellValue . InnerText ) < sharedString . ChildElements . Count ) { DoSomething ( sharedString . ChildElements [ int . Parse ( cell . CellValue . InnerText ) ] . InnerText ) ; } else { DoSomething ( cell . CellValue . InnerText ) ; } } <EOF>
You can try something like this you have to reference System . Drawing . dll from the projects -- > Reference -- > Add PrintDocument printDoc = new PrintDocument ( ) ; PaperSize oPS = new PaperSize ( ) ; oPS . RawKind = ( int ) PaperKind . A4 ; PaperSource oPSource = new PaperSource ( ) ; oPSource . RawKind = ( int ) PaperSourceKind . Upper ; printDoc . PrinterSettings = new PrinterSettings ( ) ; printDoc . PrinterSettings . PrinterName = sPrinterName ; printDoc . DefaultPageSettings . PaperSize = oPS ; printDoc . DefaultPageSettings . PaperSource = oPSource ; printDoc . PrintPage += new PrintPageEventHandler ( printDoc_PrintPage ) ; printDoc . Print ( ) ; printDoc . Dispose ( ) ; <EOF>
var date = DateTime . Now . ToString ( CODE_STRING , CultureInfo . InvariantCulture ) ; <EOF>
using ( ZipFile zip = new ZipFile ( ) ) { string [ ] files = Directory . GetFiles ( path ) ; zip . AddFiles ( files , CODE_STRING ) ; zip . Save ( path + CODE_STRING ) ; } <EOF>
List < int > list = new List < int > ( arr ) ; <EOF>
IList < MenuItem > itemsToRemove = Items . Cast < object > ( ) . Where ( mi = > mi is MenuItem && ( ( MenuItem ) mi ) . Tag == CODE_STRING ) . ToList ( ) ; foreach ( MenuItem item in itemsToRemove ) { Items . Remove ( item ) ; } <EOF>
public static class TreeNodeExtensions { public static int Level ( this TreeNode value ) { if ( Object . ReferenceEquals ( null , value ) ) throw new ArgumentNullException ( CODE_STRING ) ; int result = CODE_INTEGER ; for ( TreeNode node = value ; node != null ; node = node . Parent ) result += CODE_INTEGER ; return result ; } } . . . TreeNode node1 = . . . TreeNode node2 = . . . if ( node1 . Level ( ) != node2 . Level ( ) ) { . . . } <EOF>
string [ ] CCindividual = Regex . Split ( CCstring , CODE_STRING ) . Where ( x = > x != CODE_STRING ) . Select ( x = > x . Trim ( ) ) . ToArray < String > ( ) ; <EOF>
using ( var streamReader = new StreamReader ( CODE_STRING ) ) { string json = streamReader . ReadToEnd ( ) ; var deserializedObject = JsonConvert . DeserializeObject < SomeClass > ( json ) ; } <EOF>
if ( e . Row . RowType == DataControlRowType . DataRow ) { <EOF>
private void ImageForm_Load ( object sender , EventArgs e ) { var f1 = GetLatestWritenFileFileInDirectory ( new DirectoryInfo ( CODE_STRING ) ) ; pictureBox1 . ImageLocation = f1 . FullName ; } private List < FileInfo > GetLastUpdatedFileInDirectory ( DirectoryInfo directoryInfo ) { FileInfo [ ] files = directoryInfo . GetFiles ( ) ; List < FileInfo > lastUpdatedFile = new List < FileInfo > ( ) ; DateTime lastUpdate = DateTime . MinValue ; foreach ( FileInfo file in files ) { if ( file . LastAccessTime > lastUpdate ) { lastUpdatedFile . Add ( file ) ; lastUpdate = file . LastAccessTime ; } } return lastUpdatedFile ; } <EOF>
private void GetRepliesStats_Load ( object sender , EventArgs e ) { WebBrowser bro = new WebBrowser ( ) ; bro . Navigate ( CODE_STRING ) ; bro . DocumentCompleted += new WebBrowserDocumentCompletedEventHandler ( BrowsingCompleted ) ; } private void BrowsingCompleted ( object sender , WebBrowserDocumentCompletedEventArgs e ) { WebBrowser browser = sender as WebBrowser ; Stream documentStream = browser . DocumentStream ; StreamReader streamReader = new StreamReader ( documentStream , Encoding . GetEncoding ( CODE_STRING ) ) ; documentStream . Position = CODE_INTEGER ; String My_Result = streamReader . ReadToEnd ( ) ; } <EOF>
IEnumerable < Member > searchResults = members . ToList ( ) . Where ( m = > keywords . Any ( k = > m . Summary . Contains ( k ) ) ) <EOF>
string usr = Request . QueryString [ CODE_STRING ] ; <EOF>
public static bool IsValidLogin ( string user , string password ) { XDocument doc = XDocument . Load ( CODE_STRING ) ; return doc . Descendants ( CODE_STRING ) . Where ( id = > id . Attribute ( CODE_STRING ) . Value == user && id . Attribute ( CODE_STRING ) . Value == password ) . Any ( ) ; } <EOF>
if ( ( AxiomSubSet . Select ( x = > x . CC ) . Distinct ( ) . ToList ( ) ) . Count > CODE_INTEGER ) <EOF>
var id = Session [ CODE_STRING ] ; Session [ CODE_STRING ] = id ; <EOF>
var index = List . FindIndex ( x = > x . ID == CODE_INTEGER ) ; <EOF>
panel1 . Dock = DockStyle . Fill ; panel1 . Margin = new Padding ( CODE_INTEGER ) ; <EOF>
this . ObjectDataSource1 . TypeName = CODE_STRING ; this . ObjectDataSource1 . SelectMethod = CODE_STRING ; this . ObjectDataSource1 . InsertMethod = CODE_STRING ; <EOF>
playlists = new List ( ) for line in file if line is blank continue if line starts with CODE_STRING playslists . add ( playlist ) playlist = new Playlist ( ) song = parse song playlist . add ( song ) <EOF>
cmd . Parameters . AddWithValue ( CODE_STRING , txtFirstName . Text ) ; cmd . Parameters . AddWithValue ( CODE_STRING , txtLastName . Text ) ; cmd . Parameters . AddWithValue ( CODE_STRING , txtFamDOB . Text ) ; cmd . Parameters . AddWithValue ( CODE_STRING , txtMedical . Text ) ; cmd . Parameters . AddWithValue ( CODE_STRING , txtFamID . Text ) ; <EOF>
\ [ ( [ A - Za - z ] + ) ? # ( \ d ) + \ ] <EOF>
private void printPreviewToolStripMenuItem_Click ( object sender , EventArgs e ) { if ( PrintPreviewIcon != null ) { PrintPreviewTimer . Enabled = true ; } PlotChart . Printing . PrintPreview ( ) ; } private void PrintPreviewTimer_Tick ( object sender , EventArgs e ) { foreach ( Form f in Application . OpenForms ) { if ( f is PrintPreviewDialog ) { f . Icon = PrintPreviewIcon ; PrintPreviewTimer . Enabled = false ; } } } <EOF>
def gen_command_string ( path , url ) : cmd = path + ' TortoiseProc . exe / command : ignore / path : \ " % s \ " / closeonend : CODE_INTEGER ' % url return cmd SVN_PATH = ' C : / Program Files / TortoiseSVN / bin ' HG_PATH = ' C : / Program Files / TortoiseHg / bin / ' cmd = gen_command_string ( SVN_PATH , ' http : call ( cmd ) <EOF>
using System . IO . Ports ; public void TestSerialPort ( ) { SerialPort serialPort = new SerialPort ( CODE_STRING , CODE_INTEGER , Parity . None , CODE_INTEGER , StopBits . One ) ; serialPort . Open ( ) ; byte [ ] data = new byte [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; serialPort . Write ( data , CODE_INTEGER , data . Length ) ; serialPort . Close ( ) ; } <EOF>
class FooTextBox : TextBox { public FooTextBox ( ) { margin = new Panel ( ) ; margin . Enabled = false ; margin . BackColor = Color . LightGray ; margin . Top = CODE_INTEGER ; margin . Height = ClientSize . Height ; margin . Left = < whatever > ; margin . Width = CODE_INTEGER ; Controls . Add ( margin ) ; } Panel margin ; } <EOF>
CREATE UNIQUE INDEX uix ON PERSON ( NAME , LASTNAME ) WHERE ACTIVE = CODE_INTEGER ; <EOF>
int distance ; if ( int . TryParse ( txtEvDistance . Text , out distance ) ) { } <EOF>
private void webBrowser1_DocumentCompleted ( object sender , WebBrowserDocumentCompletedEventArgs e ) { if ( e . Url . Equals ( webBrowser1 . Url ) ) { foreach ( HtmlElement ele in webBrowser1 . Document . GetElementsByTagName ( CODE_STRING ) ) { ele . AttachEventHandler ( CODE_STRING , Document_Click ) ; } } } <EOF>
void Main ( ) { string text = CODE_STRING ; string result = Regex . Replace ( text , CODE_STRING , ReplaceMatched ) ; Console . WriteLine ( result ) ; } private string ReplaceMatched ( Match match ) { if ( match . Success ) { switch ( match . Value ) { case CODE_STRING : return DateTime . Now . Day . ToString ( ) ; case CODE_STRING : return DateTime . Now . Year . ToString ( ) ; default : break ; } } Console . WriteLine ( CODE_STRING + match . Value + CODE_STRING ) ; return match . Value ; } <EOF>
( data - [ a - z ] [ ^= ] * ) = ( CODE_STRING # ] [ ^= ] * " ) <EOF>
List < Project > projects = null ; var weeksAndHours = projects . Select ( p = > new { Id = p . Id , Name = p . Name , Weeks = p . SubProjects . SelectMany ( sp = > sp . Weeks ) . Where ( w = > w . Week >= CODE_INTEGER && w . Week <= CODE_INTEGER ) . GroupBy ( w = > w . Week ) . Select ( g = > new { week = g . Key , hours = g . Sum ( w = > w . Hours ) } ) } ) ; <EOF>
( e . OriginalSource as Border ) . DataContext as Hour <EOF>
DataGridView . AutoGenerateColumns = true ; DataGridView . DataSource = dbconnection . getDataReader ( ) ; DataGridView . DataBind ( ) ; int result ; for ( int i = CODE_INTEGER ; i < DataGridView . Rows . Count ; i ++ ) { foreach ( TableCell c in DataGridView . Rows [ i ] . Cells ) { if ( int . TryParse ( c . Text , out result ) ) { c . Text = String . Format ( CODE_STRING , result ) ; } } } <EOF>
var myBrush = new LinearGradientBrush ( Color . Red , Color . Black , myAngle ) ; myBrush . StartPoint = new Point ( myRectangle . X , myRectangle . Y ) ; myBrush . EndPoint = new Point ( myRectangle . X + myRectangle . Width , myRectangle . Y + myRectangle . height ) ; <EOF>
var zero_counts = piks . Select ( p = > p . Count ( c = > c == CODE_INTEGER ) ) ; <EOF>
var a = new A ( ) ; Console . WriteLine ( a . GetType ( ) . BaseType ) ; <EOF>
var clientOffers = ( from cli in dbContext . Clients join cli_ofr in dbContext . ClientOffer on cli . ClientId equals cli_ofr . ClientId join ofr in dbContext . Offers on cli_ofr . OfferId equals ofr . OfferId select new { Client = new Client { Guid = cli . Guid . . . } , Offer = new Offer { Guid = ofr . Guid . . . } } ) . toList ( ) ; <EOF>
Image tappedImage = new Image ( ) ; tappedImage = e . OriginalSource as Image ; textbox . Text = tappedImage . DataContext . ToString ( ) ; <EOF>
public void AddEmailToDB ( string email ) { bool isDuplicate = . . . ; if ( isDuplicate ) return ; } <EOF>
AddNumber method = r = > { Console . WriteLine ( r + r ) ; Console . Read ( ) ; } ; <EOF>
result = string . Format ( CODE_STRING , Math . Truncate ( value * CODE_INTEGER ) / CODE_INTEGER ) ; <EOF>
SmtpClient smtpClient = new SmtpClient ( CODE_STRING , CODE_INTEGER ) ; smtpClient . Credentials = new System . Net . NetworkCredential ( CODE_STRING , CODE_STRING ) ; smtpClient . UseDefaultCredentials = true ; smtpClient . DeliveryMethod = SmtpDeliveryMethod . Network ; smtpClient . EnableSsl = true ; MailMessage mail = new MailMessage ( ) ; mail . From = new MailAddress ( CODE_STRING , CODE_STRING ) ; mail . To . Add ( new MailAddress ( CODE_STRING ) ) ; mail . CC . Add ( new MailAddress ( CODE_STRING ) ) ; smtpClient . Send ( mail ) ; <EOF>
var files = Directory . GetFiles ( CODE_STRING , CODE_STRING ) . Where ( file = > Regex . IsMatch ( Path . GetFileName ( file ) , CODE_STRING ) ) ; <EOF>
TableCell tblCell = ( TableCell ) button . Parent ; <EOF>
private object RefineResults ( ResultList < Result > results ) { var refined = results . Select ( x = > new { x . ID , x . FirstName , x . LastName } ) ; return new { Results = refined , Summary = results . Summary , QueryDuration = results . QueryDuration } ; } <EOF>
use XmlDocument . OuterXml to get the XmlDocument as a string . ie : XmlDocument doc1 = new XmlDocument ( ) ; doc . LoadXml ( CODE_STRING ) ; XmlDocument doc2 = new XmlDocument ( ) ; doc2 . LoadXml ( CODE_STRING ) ; StringBuilder sb = new StringBuilder ( ) ; sb . Append ( doc1 . OuterXml ) ; sb . Append ( doc2 . OuterXml ) ; <EOF>
string text = GetLongText ( ) ; byte [ ] ba = Encoding . UTF8 . GetBytes ( text ) ; using ( MemoryStream ms = new MemoryStream ( ) ) { using ( ZipStorer zip = ZipStorer . Create ( ms , CODE_STRING ) ) { zip . AddStream ( ZipStorer . Compression . Deflate , CODE_STRING , new MemoryStream ( ba ) , DateTime . Now , CODE_STRING ) ; } Response . AppendHeader ( CODE_STRING , CODE_STRING ) ; Response . ContentType = CODE_STRING ; Response . BinaryWrite ( ms . ToArray ( ) ) ; Response . End ( ) ; } } <EOF>
doc . Load ( AppDomain . CurrentDomain . BaseDirectory + CODE_STRING ) ; <EOF>
" data source = localhost \ sqlexpress ; initial catalog = Halloween ; integrated security = True ; MultipleActiveResultSets = True ; " <EOF>
System . Web . Hosting . HostingEnvironment . MapPath ( CODE_STRING ) <EOF>
return myList . Any ( item = > item . InstanceName == CODE_STRING ) ; <EOF>
var integer = rnd1 . Next ( ( int ) numericUpDown_RandomMin . Value , ( int ) numericUpDown_RandomMax . Value ) ; <EOF>
decimal index = SeriesList . Select ( i = > i . Childs . Where ( j = > j . key == CODE_STRING ) ) . FirstOrDefault ( ) . FirstOrDefault ( ) . Value ; <EOF>
ColumnClickEventArgs args = new ColumnClickEventArgs ( CODE_INTEGER ) ; listView1_ColumnClick ( this , args ) ; <EOF>
LHS = RHS1 RHS2 . . . RHSn ; <EOF>
IUnknown * pUnk = reinterpret_cast < IUnknown * > ( buff ) ; IBufferByteAccess * pBufferByteAccess = nullptr ; HRESULT hr = pUnk -> QueryInterface ( IID_PPV_ARGS ( pBufferByteAccess ) ; byte * pbytes = nullptr ; hr = pBufferByteAccess -> Buffer ( & pbytes ) ; <EOF>
DataTable _newTable = new DataTable ( ) ; foreach ( DataRow _row in _dataTable ) { } <EOF>
. If ( t = > t . Name . EndsWith ( CODE_STRING ) ) <EOF>
int password = random . Next ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
PrivateType myTypeAccessor = new PrivateType ( typeof ( TypeToAccess ) ) ; myTypeAccessor . SetStaticFieldOrProperty ( CODE_STRING , false ) ; <EOF>
var xml = new StreamReader ( CODE_STRING ) ; var t = new XmlSerializer ( typeof ( Boolean ) , CODE_STRING ) ; var o = t . Deserialize ( xml ) ; <EOF>
var pageText = page . PageText . Replace ( CODE_STRING , " \ r Corporate Trade Payment CODE_STRING Preauthorized ACH Credit CODE_STRING \ r Preauthorized ACH Credit " ) ; <EOF>
subst z : c : \ windows \ assembly <EOF>
public class FileLog : ILog { public void Log ( string text ) { } } public class DatabaseLog : ILog { public void Log ( string text ) { } } public interface ILog { void Log ( string text ) ; } public class SomeOtherClass { private ILog _logger ; public SomeOtherClass ( ILog logger ) { this . _logger = logger ; logger . Log ( CODE_STRING ) ; } } <EOF>
public int DoSomething ( ) { CheckValid ( ) ; return CODE_INTEGER ; } <EOF>
public interface IValidationHandle { bool Validate ( ) ; } public class IsTrulyValidValidator : IValidationHandle ; public class IsValidValitor : IValidationHandle ; public class EntirelyFilledValidator : IValidationHandle ; class Client { private IValidationHandle validator = null ; public void SetValidationHandler ( IValidationHandle validator ) { this . validator = validator ; } validator . Validate ( ) ; } <EOF>
Regex . Split ( sentence , CODE_STRING ) <EOF>
FileStream fo = new FileStream ( CODE_STRING , FileMode . Open ) ; StreamReader sr = new StreamReader ( fo ) ; <EOF>
Image img1 = Image . FromFile ( file . FullName ) ; <EOF>
string AMCStartDate = Convert . ToDateTime ( AMCStartDateTextBox . Text ) . ToShortDateString ( ) ; command . Parameters . Add ( new OracleParameter ( CODE_STRING , OracleDbType . Date ) ) ; command . Parameters [ CODE_STRING ] . Value = AMCStartDate ; <EOF>
INSERT INTO tblTeams ( TeamName , TeamTag ) VALUES ( @TEAMNAME , @TEAMTAG ) <EOF>
int precision = ( int ) Math . Max ( CODE_INTEGER , - Math . Floor ( Math . Log10 ( value ) ) ) ; <EOF>
[ Browsable ( true ) , EditorBrowsable ( EditorBrowsableState . Always ) ] public new event EventHandler TextChanged { add { base . TextChanged += value ; } remove { base . TextChanged -= value ; } } <EOF>
JSON . parse <EOF>
for ( int i = CODE_INTEGER ; i <= CODE_INTEGER ; ++ i ) { DateTime firstDate = new DateTime ( CODE_INTEGER , i , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; int daysInMonth = DateTime . DaysInMonth ( CODE_INTEGER , i ) ; DateTime endDate = new DateTime ( CODE_INTEGER , i , daysInMonth - CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; DateTime TransactionDate = new DateTime ( CODE_INTEGER , i , daysInMonth , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; Console . WriteLine ( firstDate . ToString ( ) + CODE_STRING + endDate . ToString ( ) + CODE_STRING + TransactionDate . ToString ( ) ) ; } <EOF>
StreamWriter Writer = new StreamWriter ( CODE_STRING ) ; string SQL = CODE_STRING ; SqlCommand Command = new SqlCommand ( SQL , Con ) ; SqlDataReader Reader = Command . ExecuteReader ( ) ; while ( Reader . Read ( ) ) Writer . WriteLine ( Reader [ CODE_STRING ] . ToString ( ) ) ; Reader . Close ( ) ; Writer . Close ( ) ; <EOF>
for ( int i = CODE_INTEGER ; i < dm . Count - CODE_INTEGER ; ++ i ) { mdmList . Add ( new ModifiedDefectMap ( ) { StartingPoint = dm [ i ] . Start , Length = dm [ i + CODE_INTEGER ] . Start - dm [ i ] . Start } ) ; } <EOF>
Random r = new Random ( ) ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { { { int distance = r . Next ( CODE_INTEGER , CODE_INTEGER ) ; var rv = r . Next ( CODE_INTEGER , CODE_INTEGER ) ; var x = Math . Sin ( rv * Math . PI / CODE_INTEGER ) * CODE_INTEGER ; rv = r . Next ( CODE_INTEGER , CODE_INTEGER ) ; var y = Math . Cos ( rv * Math . PI / CODE_INTEGER ) * CODE_INTEGER ; Ellipse e = new Ellipse ( ) ; e . Fill = new SolidColorBrush ( Color . FromArgb ( CODE_INTEGER , ( byte ) ( counter * CODE_INTEGER ) , ( byte ) ( counter * CODE_INTEGER ) , ( byte ) ( counter * CODE_INTEGER ) ) ) ; e . Margin = new Thickness ( y , - CODE_INTEGER + x , CODE_INTEGER , CODE_INTEGER ) ; e . Width = CODE_INTEGER ; e . Height = CODE_INTEGER ; counter ++ ; PointsGrid . Children . Add ( e ) ; } } } <EOF>
proCraneVertices [ CODE_INTEGER ] = realCraneVertices [ CODE_INTEGER ] . Clone ( ) ; <EOF>
public static Series GetIrregularTimeChartData ( ) { List < Series > Series = new List < Series > ( ) ; var chartSeries = db . Graphs . GroupBy ( x = > new { x . Name } ) . Select ( g = > new { Name = g . Key , Data = g . Select ( x = > x . Value ) . ToArray ( ) , Date = g . Select ( x = > x . Date ) . ToArray ( ) } ) . ToArray ( ) ; foreach ( var item in chartSeries ) { int lenght = item . Data . Count ( ) ; object [ , ] data = new object [ lenght , CODE_INTEGER ] ; for ( int i = CODE_INTEGER ; i < lenght ; i ++ ) { data [ i , CODE_INTEGER ] = item . Date [ i ] ; data [ i , CODE_INTEGER ] = item . Data [ i ] ; } Series localSeries = new Series { Name = item . Name , Data = new Data ( data ) } ; Series . Add ( localSeries ) ; } return Series ; } <EOF>
vertex1 = A vertex2 = point ( A . x , CODE_INTEGER ) vertex3 = B vertex4 = point ( B . x , CODE_INTEGER ) vertex5 = C vertex6 = point ( C . x , CODE_INTEGER ) vertex7 = D vertex8 = point ( D . x , CODE_INTEGER ) <EOF>
< StackPanel > < Button Click = CODE_STRING > Show Window < / Button > < Button Click = CODE_STRING > Garbage Collect < / Button > < / StackPanel > private void Button_Click ( object sender , RoutedEventArgs e ) { WindowB windowB = new WindowB ( this ) ; windowB . Show ( ) ; } private void Button_Click_1 ( object sender , RoutedEventArgs e ) { GC . Collect ( ) ; } public WindowB ( WindowA windowA ) { this . Owner = windowA ; InitializeComponent ( ) ; } ~ WindowB ( ) { Console . WriteLine ( CODE_STRING ) ; } <EOF>
protected void Application_BeginRequest ( Object sender , EventArgs e ) { HttpApplication app = ( HttpApplication ) sender ; if ( Request . RawUrl . StartsWith ( CODE_STRING ) ) { app . Response . Redirect ( Request . RawUrl . Replace ( CODE_STRING , CODE_STRING ) , true ) ; return ; } } <EOF>
List < List < int > > foo = new List < List < int > > { new List < int > { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , new List < int > { CODE_INTEGER , CODE_INTEGER } } ; var flat = foo . SelectMany ( x = > x ) . ToList ( ) ; <EOF>
public string GetData ( int typeOfData ) { string query = null ; switch ( typeOfData ) { case CODE_INTEGER : query = CODE_STRING ; break ; case CODE_INTEGER : query = CODE_STRING ; break ; } var results = from e in db . XPathSelectElements ( query ) select new { ID = e . Attribute ( CODE_STRING ) . Value , Name = e . Attribute ( CODE_STRING ) . Value } ; } <EOF>
for ( int i = CODE_INTEGER ; i < DataGrid . items . count - CODE_INTEGER ; i ++ ) { CheckBox chkBx = ( CheckBox ) DataGrid . items [ i ] . Cells [ CODE_INTEGER ] . FindControl ( CODE_STRING ) ; if ( chkBx != null && chkBx . Checked ) { Response . Write ( DataGrid . items [ i ] . Cells [ CODE_INTEGER ] . Text . ToString ( ) ) ; } } <EOF>
DataTable . AsEnumerable ( ) . Where ( r = > r . Field < int > ( CODE_STRING ) == CODE_INTEGER ) . OrderByDescending ( r = > r . Field < DateTime > ( CODE_STRING ) ) . FirstOrDefault ( r = > r . Field < DateTime > ( CODE_STRING ) < new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) <EOF>
foreach ( Block block in rtb . Blocks ) { if ( block is Paragraph ) { Paragraph paragraph = ( Paragraph ) block ; foreach ( Inline inline in paragraph . Inlines ) { if ( inline is InlineUIContainer ) { InlineUIContainer uiContainer = ( InlineUIContainer ) inline ; if ( uiContainer . Child is Image ) { Image image = ( Image ) uiContainer . Child ; } } } } <EOF>
BOXTRANSACTION boxTransaction = new BOXTRANSACTION ( ) ; { boxTransaction . BOXID = long . Parse ( dr [ CODE_STRING ] . ToString ( ) ) ; boxTransaction . BOXIDSpecified = true ; boxTransaction . TRANSACTIONDATE = DateTime . Parse ( dr [ CODE_STRING ] . ToString ( ) ) ; boxTransaction . TRANSACTIONDATESpecified = true ; <EOF>
PrivateObject . GetField ( ) <EOF>
private void numericUpDown1_KeyUp ( object sender , KeyEventArgs e ) { numericUpDown1 . Focus ( ) ; numericUpDown1 . Select ( desiredPosition , CODE_INTEGER ) } <EOF>
if ( source != null ) { var keys = ( from d in source from k in d . Keys select k ) . Distinct ( ) ; foreach ( var key in keys ) { var thisKey = key ; var valueNotNull = source . FirstOrDefault ( dictionary = > dictionary [ thisKey ] != null ) ; var colType = valueNotNull != null ? valueNotNull [ thisKey ] . GetType ( ) : typeof ( string ) ; dt . Columns . Add ( new DataColumn ( ) { ColumnName = thisKey , DataType = colType } ) ; } <EOF>
public static void forceSetForegroundWindow ( IntPtr hWnd , IntPtr mainThreadId ) { IntPtr foregroundThreadID = GetWindowThreadProcessId ( GetForegroundWindow ( ) , IntPtr . Zero ) ; if ( foregroundThreadID != mainThreadId ) { AttachThreadInput ( mainThreadId , foregroundThreadID , true ) ; SetForegroundWindow ( hWnd ) ; AttachThreadInput ( mainThreadId , foregroundThreadID , false ) ; } else SetForegroundWindow ( hWnd ) ; } <EOF>
SPUtility . GetLocalizedString ( . . . ) <EOF>
cmd . CommandText = CODE_STRING + word + CODE_STRING ; cmd . CommandType = CommandType . Text ; int RowCount = CODE_INTEGER ; RowCount = Convert . ToInt32 ( cmd . ExecuteScalar ( ) ) ; cmd . CommandText = CODE_STRING + word + CODE_STRING ; SQLiteDataReader reader = cmd . ExecuteReader ( ) ; <EOF>
IList < string > keys = parent . Properties ( ) . Select ( p = > p . Name ) . ToList ( ) ; <EOF>
public class ViewModel { public TypeOfYourModel MyModel1 { get ; set ; } public TypeOfYourModel MyModel2 { get ; set ; } } <EOF>
public static DateTime GetCurrentDate ( ) { return DateTime . Now . AddHours ( CODE_INTEGER ) ; } <EOF>
var xptos = new List < Xpto > ( ) { new Xpto ( ) { Sons = new List < Son > { new Son ( ) { Names = CODE_STRING } , new Son ( ) { Names = CODE_STRING } } } , new Xpto ( ) { Sons = new List < Son > { new Son ( ) { Names = CODE_STRING } } } } ; var names = xptos . SelectMany ( r = > r . Sons ) . Where ( k = > k . Names != null ) . Select ( r = > r . Names + CODE_STRING ) . ToList ( ) ; names . ForEach ( n = > Console . WriteLine ( n ) ) ; <EOF>
string fontsfolder = System . Environment . GetFolderPath ( System . Environment . SpecialFolder . Fonts ) ; <EOF>
ConfigurationManager . GetSection <EOF>
namespace System . Runtime . CompilerServices { [ AttributeUsage ( AttributeTargets . Method ) ] public sealed class ExtensionAttribute : Attribute { public ExtensionAttribute ( ) { } } } <EOF>
String path = System . Reflection . Assembly . GetExecutingAssembly ( ) . Location ; path = System . IO . Path . GetDirectoryName ( path ) ; Directory . SetCurrentDirectory ( path ) ; <EOF>
System . Net . NetworkInformation <EOF>
using ( PrincipalContext principalContext = new PrincipalContext ( ContextType . Domain , TargetDomain , TargetDomainUserName , TargetDomainPassword ) ) using ( var userPrincipal = UserPrincipal . FindByIdentity ( principalContext , IdentityType . SamAccountName , CODE_STRING ) ) { userPrincipal . SetPassword ( newPassword ) ; userPrincipal . Save ( ) ; } <EOF>
int i = e . RowIndex ; <EOF>
Fraction ( CODE_INTEGER , CODE_INTEGER ) <EOF>
_zoom = ( int ) Math . Round ( System . Convert . ToDouble ( zoom ) ) ; <EOF>
int serialNumber = CODE_INTEGER ; var query = from r0w1 in dt . AsEnumerable ( ) join r0w2 in ndt . AsEnumerable ( ) on r0w1 . Field < string > ( CODE_STRING ) equals r0w2 . Field < string > ( CODE_STRING ) select new string [ ] { serialNumber ++ . ToString ( ) } . Concat ( r0w2 . ItemArray . Skip ( CODE_INTEGER ) ) . Concat ( r0w1 . ItemArray ) . ToArray ( ) ; <EOF>
var x = Convert . ChangeType ( CODE_INTEGER , Enum . GetUnderlyingType ( typeof ( EmpType ) ) ) <EOF>
string list < T > ( IEnumerable < T > enumerable ) { List < T > list = new List < T > ( enumerable ) ; return string . Join ( CODE_STRING , list . ToArray ( ) ) ; } string sql = String . Format ( CODE_STRING , list ( fields . Keys ) , list ( fields . Values ) ) ; <EOF>
string url = CODE_STRING ; HttpWebRequest http = ( HttpWebRequest ) WebRequest . Create ( url ) ; http . CookieContainer = _cookieJar ; http . Connection = CODE_STRING ; http . Method = CODE_STRING ; http . ContentType = CODE_STRING ; string postData = CODE_STRING + username + CODE_STRING + password ; byte [ ] dataBytes = UTF8Encoding . UTF8 . GetBytes ( postData ) ; http . ContentLength = dataBytes . Length ; Stream postStream = http . GetRequestStream ( ) ; postStream . Write ( dataBytes , CODE_INTEGER , dataBytes . Length ) ; postStream . Close ( ) ; HttpWebResponse httpResponse = ( HttpWebResponse ) http . GetResponse ( ) ; <EOF>
private void Delay ( ) { DelayTimer dt = new DelayTimer ( CODE_INTEGER ) ; Thread thread = new Thread ( new ThreadStart ( dt . AddDelay ) ) ; thread . Start ( ) ; while ( thread . IsAlive ) { Application . DoEvents ( ) ; } } public class DelayTimer { private int _seconds ; public DelayTimer ( int time ) { _seconds = time ; } public void AddDelay ( ) { Thread . Sleep ( _seconds * CODE_INTEGER ) ; } } <EOF>
List < MyType > lstCloned = lstOriginal . Select ( i = > i . Clone ( ) ) . ToList ( ) ; <EOF>
var path = CODE_STRING ; var route = path . Split ( new [ ] { CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; XElement result = null ; foreach ( var node in route ) { if ( result == null ) { result = _xmlDocument . Element ( node ) ; } else { result = result . Element ( node ) ; } } return result ; <EOF>
INSERT . . . SELECT <EOF>
private Person aktuellPerson ; protected void Page_Load ( object sender , EventArgs e ) { ListBoxPersoner . DataSource = Databasfunktioner . getPersoner ( ) ; ListBoxPersoner . DataValueField = CODE_STRING ; ListBoxPersoner . DataTextField = CODE_STRING ; ListBoxPersoner . DataBind ( ) ; } protected void ListBoxPersoner_SelectedIndexChanged ( object sender , EventArgs ) { var temItem = sender as DropDownList ; TextBoxFornamn . Text = temItem . SelectedItem . Text ; } <EOF>
byte [ ] pdfFile = System . IO . File . ReadAllBytes ( ( string ) saveto ) ; <EOF>
String test1 = webKitBrowser1 . StringByEvaluatingJavaScriptFromString ( CODE_STRING ) ; <EOF>
public MyClass ( string description = null ) { . . . . } <EOF>
Font fontH1 = new Font ( Currier , CODE_INTEGER , Font . NORMAL ) ; PdfPTable table = new PdfPTable ( CODE_INTEGER ) ; table . AddCell ( new PdfPCell ( new Phrase ( yourDatabaseValue , fontH1 ) ) ) ; <EOF>
bool gotList ; List < string > files = new List < string > ( ) ; using ( SvnClient client = new SvnClient ( ) ) { Collection < SvnListEventArgs > list ; gotList = client . GetList ( projectPath , out list ) ; if ( gotList ) { foreach ( SvnListEventArgs item in list ) { files . Add ( item . Path ) ; } } } <EOF>
using Microsoft . Xna . Framework . Media . PhoneExtensions ; MediaLibrary m = new MediaLibrary ( ) ; for ( int j = CODE_INTEGER ; j < m . Pictures . Count ; j ++ ) { var r = m . Pictures [ j ] ; MessageBox . Show ( MediaLibraryExtensions . GetPath ( r ) ) ; } <EOF>
[ TestFixture ] <EOF>
if ( operator1 . equals ( CODE_STRING ) ) IsActive = value < jjj <EOF>
public partial class CustomTextBox : TextBox { public CustomTextBox ( ) { InitializeComponent ( ) ; } protected override void OnKeyDown ( KeyEventArgs e ) { base . OnKeyDown ( e ) ; if ( e . Key == Key . Return ) Keyboard . ClearFocus ( ) ; } } <EOF>
. Select ( ( v , i ) = > new { Name = v . Name , Score = v . Score , Position = players . Count ( p = > p . Score > v . Score ) + CODE_INTEGER } ) ; <EOF>
System . exit ( ) <EOF>
cb . MoveTo ( CODE_REAL , CODE_REAL ) ; cb . SetLineDash ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; cb . LineTo ( doc . PageSize . Width , CODE_REAL ) ; cb . Stroke ( ) ; var pos = writer . GetVerticalPosition ( false ) ; var p = new Paragraph ( CODE_STRING , _myFont ) { SpacingBefore = pos - CODE_REAL } ; doc . add ( p ) ; <EOF>
String charabia = CODE_STRING ; try { String utf8String = new String ( charabia . getBytes ( ) , CODE_STRING ) ; } catch ( UnsupportedEncodingException e ) { } <EOF>
object misValue = System . Reflection . Missing . Value ; Microsoft . Office . Interop . Word . Application wordApp = new Microsoft . Office . Interop . Word . Application ( ) ; object docPth = CODE_STRING ; Microsoft . Office . Interop . Word . Document aDoc = wordApp . Documents . Open ( ref docPth , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue , ref misValue ) ; wordApp . Visible = true ; foreach ( Microsoft . Office . Interop . Word . Paragraph aPar in aDoc . Paragraphs ) { Microsoft . Office . Interop . Word . Range parRng = aPar . Range ; string sText = parRng . Text ; string sList = parRng . ListFormat . ListString ; int nLevel = parRng . ListFormat . ListLevelNumber ; MessageBox . Show ( CODE_STRING + sText + CODE_STRING + sList + CODE_STRING + nLevel . ToString ( ) ) ; } <EOF>
dataGridView1 . CellFormatting += dataGridView1_CellFormatting ; void dataGridView1_CellFormatting ( object sender , DataGridViewCellFormattingEventArgs e ) { if ( dataGridView1 . Columns [ e . ColumnIndex ] . Name == CODE_STRING ) { if ( collection [ e . RowIndex ] . Result ) { e . Value = ( System . Drawing . Image ) Properties . Resources . Check ; } else { e . Value = ( System . Drawing . Image ) Properties . Resources . Cancel ; } } } <EOF>
public partial class UserControl1 : UserControl { public UserControl1 ( ) { InitializeComponent ( ) ; } public Planets Planet { get { return ( Planets ) GetValue ( PlanetProperty ) ; } set { SetValue ( PlanetProperty , value ) ; } } public static readonly DependencyProperty PlanetProperty = DependencyProperty . Register ( CODE_STRING , typeof ( Planets ) , typeof ( UserControl1 ) , new UIPropertyMetadata ( Planets . Mercury ) ) ; } public enum Planets { Mercury , Venus , Earth , Mars } <EOF>
bitmap . Save ( System . IO . Path . Combine ( Server . MapPath ( CODE_STRING ) , imageName + CODE_STRING ) ) ; <EOF>
string s = CODE_STRING ; string [ ] split = s . Split ( CODE_CHAR ) ; <EOF>
using ( FileStream inputStream = File . OpenRead ( aPackage ) ) { using ( GzipInputStream gzStream = new GzipInputStream ( inputStream ) ) { using ( TarInputStream tarStream = new TarInputStream ( gzStream ) ) { TarEntry entry = tarStream . GetNextEntry ( ) ; while ( entry != null ) { if ( entry == theOneIWant ) { tarStream . CopyEntryContents ( outputStream ) ; break ; } entry = tarStream . GetNextEntry ( ) ; } } } } <EOF>
int val = CODE_INTEGER ; if ( Conditions . A ) val = a . Value . ValueX ; else if ( Conditions . B ) val = a . Value . ValueY ; <EOF>
var userObj = new User ( ) { name = CODE_STRING } ; client . PostAsJsonAsync ( url , new { user = userObj } ) ; <EOF>
private void XmppCon_OnSaslStart ( object sender , SaslEventArgs args ) { args . Auto = false ; Mechanism . GetMechanismName ( MechanismType . ANONYMOUS ) ; } <EOF>
SET @query = ' SELECT empid , name , status , ' + @cols + ' FROM ( SELECT empid , name , status , doortime , date + ' CODE_CHAR ' + col AS col_names FROM ( SELECT k_userid AS [ empid ] , K_Name AS name , k_description1 as [ status ] , K_WorktimeUp1 AS [ IN ] , ktimeDown1 AS OUT , CONVERT ( char ( CODE_INTEGER ) , K_Date , CODE_INTEGER ) AS date FROM dbo . kq_report_analyze WHERE ( K_Date BETWEEN @dt AND @dt2 ) GROUP BY K_UserID , K_Name , k_description1 , K_Date , K_WorktimeUp1 , K_WorktimeDown1 ) src UNPIVOT ( doortime FOR col IN ( [ IN ] , [ OUT ] ) ) unpiv ) p PIVOT ( max ( doortime ) FOR col_names IN ( ' + @cols + ' ) ) piv ; ' EXEC sp_executesql @query , N ' @dt datetime , @dt2 datetime ' , @dt , @dt2 <EOF>
string str = CODE_STRING ; string [ ] Arr = str . Split ( new char [ ] { CODE_CHAR , CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; <EOF>
DateTime fileDate , closestDate ; ArrayList theDates ; int min = int . MaxValue ; foreach ( DateTime date in theDates ) if ( Math . Abs ( date . Ticks - fileDate . Ticks ) < min ) { min = date . Ticks - fileDate . Ticks ; closestDate = date ; } <EOF>
gv . AlternatingRowStyle . CssClass = CODE_STRING ; gv . HeaderStyle . CssClass = CODE_STRING ; gv . RowStyle . CssClass = CODE_STRING ; <EOF>
public override object ProvideValue ( IServiceProvider serviceProvider ) { var contextProvider = ( IXamlSchemaContextProvider ) serviceProvider . GetService ( typeof ( IXamlSchemaContextProvider ) ) ; var type = contextProvider . SchemaContext . GetType ( ) . Assembly . GetType ( CODE_STRING ) ; var property = type . GetProperty ( CODE_STRING , BindingFlags . Instance | BindingFlags . NonPublic ) ; var assembly = ( Assembly ) property . GetValue ( contextProvider , null ) ; . . . } <EOF>
ConventionRegistry . Register ( CODE_STRING , new ConventionPack { new MemberSerializationOptionsConvention ( typeof ( DateTime ) , new DateTimeSerializationOptions ( DateTimeKind . Utc , BsonType . Document ) ) , } , t = > true ) ; <EOF>
JToken . FromObject ( x . Concat ( x ) ) <EOF>
WITH CTE as ( SELECT RN = ROW_NUMBER ( ) OVER ( ORDER BY EmployeeID ) , * FROM HumanResources . Employee ) SELECT [ Previous Row ] . * , [ Current Row ] . * , [ Next Row ] . * FROM CTE [ Current Row ] LEFT JOIN CTE [ Previous Row ] ON [ Previous Row ] . RN = [ Current Row ] . RN - CODE_INTEGER LEFT JOIN CTE [ Next Row ] ON [ Next Row ] . RN = [ Current Row ] . RN + CODE_INTEGER WHERE [ Current Row ] . EmployeeID = CODE_INTEGER <EOF>
PicasaEntry entry = ( PicasaEntry ) service . Getstring . Format ( CODE_STRING + CODE_STRING , service . Credentials . Username , photo . GooglePhotoId <EOF>
[ DllImport ( CODE_STRING , CharSet = CharSet . Unicode ) ] static extern bool StrongNameSignatureVerificationEx ( string wszFilePath , bool fForceVerification , ref bool pfWasVerified ) ; <EOF>
using System . Windows . Threading ; namespace MyWPF App { /// <summary> /// Interaction logic for MainWindow.xaml /// </summary> public partial class MainWindow : Window { DateTime dt ; DispatcherTimer t ; public MainWindow ( ) { InitializeComponent ( ) ; t = new DispatcherTimer ( ) ; t . Tick += new EventHandler ( t_Tick ) ; } private void button1_MouseEnter ( object sender , MouseEventArgs e ) { dt = DateTime . Now ; t . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; t . IsEnabled = true ; } void t_Tick ( object sender , EventArgs e ) { if ( ( DateTime . Now - dt ) . Seconds >= CODE_INTEGER ) { MessageBox . Show ( CODE_STRING ) ; } } private void button1_MouseLeave ( object sender , MouseEventArgs e ) { t . IsEnabled = false ; } } } <EOF>
string [ ] output = Regex . Matches ( s , CODE_STRING ) . Cast < Match > ( ) . Select ( x = > x . Value ) . ToArray ( ) ; <EOF>
Data . Indications . IndexType indexType = ( Chatham . Web . Data . Indications . IndexType ) sm . FloatingComponent . IndexID . Value ; <EOF>
private Binding CreateBinding ( ) { Binding binding = new WebHttpBinding ( ) ; CustomBinding customBinding = new CustomBinding ( binding ) ; var transportElement = customBinding . Elements . Find < HttpTransportBindingElement > ( ) ; transportElement . KeepAliveEnabled = false ; return customBinding ; } <EOF>
foreach ( DataRow row in myDataSet . Tables [ CODE_STRING ] . Rows ) { string seriesName = row [ CODE_STRING ] . ToString ( ) ; Chart1 . Series . Add ( seriesName ) ; Chart1 . Series [ seriesName ] . ChartType = SeriesChartType . Line ; Chart1 . Series [ seriesName ] . BorderWidth = CODE_INTEGER ; for ( int colIndex = CODE_INTEGER ; colIndex < myDataSet . Tables [ CODE_STRING ] . Columns . Count ; colIndex ++ ) { string columnName = myDataSet . Tables [ CODE_STRING ] . Columns [ colIndex ] . ColumnName ; int YVal = ( int ) row [ columnName ] ; Chart1 . Series [ seriesName ] . Points . AddXY ( columnName , YVal ) ; } } <EOF>
ddlRolesList . Items . Insert ( CODE_INTEGER , new ListItem ( CODE_STRING , CODE_STRING ) ) ; <EOF>
foreach ( var batch in batches ) { using ( var ctx = new MyContext ( ) ) { foreach ( var entity in batch ) { ctx . Entities . Add ( entity ) ; } ctx . SaveChanges ( ) ; } } <EOF>
var pngEncoder = new PngBitmapEncoder ( ) ; pngEncoder . Frames . Add ( ApplyWatermark ( null , null ) ) ; MemoryStream stm = File . Create ( image ) ; pngEncoder . Save ( stm ) ; return stm ; <EOF>
private void box_Paid_CheckedChanged ( object sender , EventArgs e ) { if ( box_Paid . Checked == true ) { Purchaser p = Purchasers [ listDOF . SelectedIndex ] ; p . Paid = true ; } } <EOF>
using ( OleDbConnection c = new OleDbConnection ( con ) ) { c . Open ( ) ; string selectString = CODE_STRING ; using ( OleDbCommand cmd1 = new OleDbCommand ( selectString ) ) { cmd1 . Connection = c ; var result = cmd1 . ExecuteReader ( ) ; while ( result . Read ( ) ) { Console . WriteLine ( result [ CODE_INTEGER ] . ToString ( ) ) ; } } } <EOF>
List < decimal > monthsTotals = data . GroupBy ( d = > d [ CODE_STRING ] ) . Select ( d = > d . Sum ( r = > Convert . ToDecimal ( r [ CODE_STRING ] ) ) ) . ToList < decimal > ( ) ; <EOF>
public static string GetNextLetter ( string letter = null ) { if ( IsStringNullOrEmpty ( letter ) ) return CODE_STRING ; char lastLetter = letter . Last ( ) ; if ( lastLetter . ToString ( ) == CODE_STRING ) return GetNextLetter ( RemoveLastCharacter ( letter ) ) + CODE_STRING ; else return RemoveLastCharacter ( letter ) + ( char ) ( lastLetter + CODE_INTEGER ) ; } <EOF>
private string GetGroupsForUser ( string UserName ) { ManagementObjectSearcher searcher = new ManagementObjectSearcher ( CODE_STRING + UserName + CODE_STRING ) ; StringBuilder strGroups = new StringBuilder ( ) ; foreach ( ManagementObject mObject in searcher . Get ( ) ) { ManagementPath path = new ManagementPath ( mObject [ CODE_STRING ] . ToString ( ) ) ; if ( path . ClassName == CODE_STRING ) { String [ ] names = path . RelativePath . Split ( CODE_CHAR ) ; strGroups . Append ( names [ CODE_INTEGER ] . Substring ( names [ CODE_INTEGER ] . IndexOf ( CODE_STRING ) + CODE_INTEGER ) . Replace ( CODE_CHAR , CODE_CHAR ) . Trim ( ) + CODE_STRING ) ; } } return strGroups . ToString ( ) ; } <EOF>
public UserPrincipal CreateNewUser ( string sUserName , string sPassword ) { if ( GetUser ( sUserName ) == null ) { PrincipalContext oPrincipalContext = GetPrincipalContext ( ) ; UserPrincipal oUserPrincipal = new UserPrincipal ( oPrincipalContext ) ; oUserPrincipal . Name = sUserName ; oUserPrincipal . SetPassword ( sPassword ) ; oUserPrincipal . Save ( ) ; return oUserPrincipal ; } return GetUser ( sUserName ) ; } } <EOF>
BuildManager . GetGlobalAsaxType ( ) . BaseType . Assembly <EOF>
GraphicsPath clipPath = new GraphicsPath ( ) ; clipPath . AddEllipse ( graphBoundaries ) ; graphics . SetClip ( clipPath , CombineMode . Exclude ) ; graphics . ResetClip ( ) ; <EOF>
foreach ( var subview in scrollViewer . Subviews . Skip ( CODE_INTEGER ) ) { subview . RemoveFromSuperview ( ) ; } scrollViewer . AddSubview ( newView ) ; scrollViewer . ContentSize = new System . Drawing . SizeF ( newView . Frame . Width , newView . Frame . Height ) ; <EOF>
void Main ( ) { BsonSerializer . RegisterSerializationProvider ( new MyDecimalSerializer ( ) ) ; Console . WriteLine ( new Test ( ) . ToJson ( new JsonWriterSettings ( ) { Indent = true } ) ) ; } class MyDecimalSerializer : DecimalSerializer , IBsonSerializationProvider { private IBsonSerializationOptions _defaultSerializationOptions = new RepresentationSerializationOptions ( BsonType . Double ) ; public override void Serialize ( BsonWriter bsonWriter , Type nominalType , object value , IBsonSerializationOptions options ) { if ( options == null ) options = _defaultSerializationOptions ; base . Serialize ( bsonWriter , nominalType , value , options ) ; } public IBsonSerializer GetSerializer ( Type type ) { return type == typeof ( Decimal ) ? this : null ; } } <EOF>
window . Show <EOF>
private EntityReference GetCustomerFromCase ( Guid caseId ) { Entity Case = CRMCentralCRMServiceInstance . Retrieve ( CODE_STRING , caseId , new ColumnSet ( CODE_STRING ) ) ; return Case . GetAttributeValue < EntityReference > ( CODE_STRING ) ; } <EOF>
var xDoc = XDocument . Parse ( Resource1 . XMLFile1 ) ; var xmls = xDoc . Root . Elements ( ) . ToArray ( ) ; for ( int i = CODE_INTEGER ; i < xmls . Length ; i ++ ) { using ( var file = File . CreateText ( string . Format ( CODE_STRING , i + CODE_INTEGER ) ) ) { file . Write ( xmls [ i ] . ToString ( ) ) ; } } <EOF>
Get - Help PS1XML <EOF>
Public Function GetValues ( name As String ) As IEnumerable ( Of String ) <EOF>
private void panel1_Paint ( object sender , PaintEventArgs e ) { var hPadding = ( pictureBox1 . Width - pictureBox1 . BackgroundImage . Width ) / CODE_INTEGER ; var vPadding = ( pictureBox1 . Height - pictureBox1 . BackgroundImage . Height ) / CODE_INTEGER ; var imgRect = new Rectangle ( pictureBox1 . Left + hPadding , pictureBox1 . Top + vPadding , pictureBox1 . BackgroundImage . Width , pictureBox1 . BackgroundImage . Height ) ; e . Graphics . DrawImage ( pictureBox1 . BackgroundImage , imgRect ) ; } <EOF>
if ( groupBox1 . Controls . OfType < RadioButton > ( ) . Any ( x = > x . Checked ) ) { } <EOF>
public static void WriteFile ( ) { Car testCar = new Car ( ) ; string path = CODE_STRING ; XmlSerializer serializer = new XmlSerializer ( typeof ( Car ) ) ; StreamWriter file = new StreamWriter ( path ) ; serializer . Serialize ( file , testCar ) ; file . Close ( ) ; } public static void ReadFile ( ) { Car testCar ; string path = CODE_STRING ; XmlSerializer serializer = new XmlSerializer ( typeof ( Car ) ) ; StreamReader reader = new StreamReader ( path ) ; testCar = ( Car ) serializer . Deserialize ( reader ) ; reader . Close ( ) ; } <EOF>
Button btnDelete = new Button ( ) ; btnDelete . Click += new EventHandler ( button_Click ) ; protected void button_Click ( object sender , EventArgs e ) { Button button = sender as Button ; string buttonid = button . ID . ToString ( ) } <EOF>
ls = System :: Collections :: Generic :: List . of ( String ) . new ls . add ( CODE_STRING ) ls . add CODE_STRING <EOF>
var toggleButtonPosition = toggleButton . TranslatePoint ( new Point ( CODE_INTEGER , CODE_INTEGER ) , stackPanel ) ; var textBlockPosition = textBlock . TranslatePoint ( new Point ( CODE_INTEGER , CODE_INTEGER ) , stackPanel ) ; <EOF>
private void Window_Loaded ( object sender , RoutedEventArgs e ) { this . H1 . DataContext = new { H1 = CODE_INTEGER } ; } <EOF>
public partial class TheWebServiceSubClass : ExampleService { protected override WebRequest GetWebRequest ( Uri uri ) { HttpWebRequest webRequest = ( HttpWebRequest ) base . GetWebRequest ( uri ) ; ExampleService client = new ExampleService ( ) ; string auth_id = client . authenticate_get ( CODE_STRING , CODE_STRING ) ; string credentials = Convert . ToBase64String ( Encoding . ASCII . GetBytes ( CODE_STRING ) ) ; string credentials1 = Convert . ToBase64String ( Encoding . ASCII . GetBytes ( auth_id + CODE_STRING ) ) ; webRequest . Headers [ CODE_STRING ] = CODE_STRING + credentials1 ; return webRequest ; } } <EOF>
delegate void ASIOCallback ( IntPtr signal , int n ) ; <EOF>
private void button_Click ( object sender , EventArgs e ) { StringBuilder message = new StringBuilder ( ) ; foreach ( DataGridViewCell cell in this . dataGridView . SelectedCells ) { message . AppendLine ( CODE_STRING + cell . Value ) ; } MessageBox . Show ( message . ToString ( ) ) ; } <EOF>
CarsAttack . ch [ index ] ; <EOF>
private void DockingManager_DocumentClosing ( object sender , Xceed . Wpf . AvalonDock . DocumentClosingEventArgs e ) { e . Document . CanClose = false ; DocumentModel documentModel = e . Document . Content as DocumentModel ; if ( documentModel != null ) { Dispatcher . BeginInvoke ( new Action ( ( ) = > this . Model . DocumentItems . Remove ( documentModel ) ) , DispatcherPriority . Background ) ; } } <EOF>
int i = CODE_INTEGER ; foreach ( DataRowView rowView in chListBox . CheckedItems ) { phoneNumbers [ i ] = rowView [ CODE_STRING ] ; i ++ ; } <EOF>
string sql = CODE_STRING ; SqlCommand userSELECTcom = new SqlCommand ( sql , myConnection ) ; userSELECTcom . Parameters . AddWithValue ( @username , ReceivedUsername ) ; userSELECTcom . Parameters . AddWithValue ( @password , ReceivedPassword ) ; using ( SqlDataReader reader = userSELECTcom . ExecuteReader ( ) ) { ValidLogin = reader . HasRows ; } <EOF>
if ( stringdate [ CODE_INTEGER ] == CODE_CHAR ) stringdate = stringdate . Substring ( CODE_INTEGER ) ; <EOF>
private string GetCompressedString ( ) { byte [ ] byteArray = Encoding . UTF8 . GetBytes ( CODE_STRING ) ; using ( var ms = new MemoryStream ( ) ) { using ( var gz = new GZipStream ( ms , CompressionMode . Compress , true ) ) { ms . Write ( byteArray , CODE_INTEGER , byteArray . Length ) ; } ms . Position = CODE_INTEGER ; var compressedBytes = new byte [ ms . Length ] ; ms . Read ( compressedBytes , CODE_INTEGER , compressedBytes . Length ) ; return Convert . ToBase64String ( compressedBytes ) ; } } <EOF>
public class ControllerBase : Controller { public ControllerBase ( ) : base ( ) { this . VerifySession ( ) ; } /// <summary> /// Indicates whether the session must be active and contain a valid customer. /// </summary> protected virtual bool RequiresActiveSession { get { return true ; } } public void VerifySession ( ) { if ( this . RequiresActiveSession && Session [ CODE_STRING ] == null ) { Response . Redirect ( Url . Action ( CODE_STRING ) ) ; } } } public class HomeController : ControllerBase { protected override bool RequiresActiveSession { get { return true ; } } public ActionResult Index ( ) { return View ( ) ; } } <EOF>
srcRange . Copy ( destRange , PasteType . Values , PasteOperation . None , false , false ) ; <EOF>
pdfReader . Close ( ) ; <EOF>
string postCode = CODE_STRING . Replace ( CODE_STRING , CODE_STRING ) ; string firstPart = postCode . Substring ( CODE_INTEGER , postCode . Length - CODE_INTEGER ) ; <EOF>
private IMessage _next ; public void ReceiveMessage ( IMessage message ) { Interlocked . Exchange ( ref _next , message ) ; } public void Process ( ) { IMessage next = Interlocked . Exchange ( ref _next , null ) ; if ( next != null ) { } } <EOF>
string jScript ; jScript = CODE_STRING ; ClientScript . RegisterClientScriptBlock ( this . GetType ( ) , CODE_STRING , jScript ) ; <EOF>
var props = typeof ( Manufacturer ) . GetFields ( BindingFlags . Public | BindingFlags . Static ) ; var wantedProp = props . FirstOrDefault ( prop = > ( ushort ) prop . GetValue ( null ) == CODE_INTEGER ) ; <EOF>
ShellTile tile = ShellTile . ActiveTiles . FirstOrDefault ( ) ; if ( tile != null ) { FlipTileData data = new FlipTileData ( ) { SmallBackgroundImage = new Uri ( CODE_STRING + mediumTile , UriKind . RelativeOrAbsolute ) , BackgroundImage = new Uri ( CODE_STRING + mediumTile , UriKind . RelativeOrAbsolute ) , WideBackgroundImage = new Uri ( CODE_STRING + wideTile , UriKind . RelativeOrAbsolute ) } ; tile . Update ( data ) ; } NotifyComplete ( ) ; <EOF>
list = listOfList . SelectMany ( x = > x ) . ToList ( ) ; <EOF>
string connectionString ; connectionString = < EM > YourConnectionString < / EM > and Initial Catalog = TestSMODatabase " ; using ( SqlConnection connection = new SqlConnection ( connectionString ) ) { connection . Open ( ) ; using ( SqlBulkCopy bulkcopy = new SqlBulkCopy ( connection ) ) { bulkcopy . DestinationTableName = CODE_STRING ; try { bulkcopy . WriteToServer ( SourceTable ) ; } catch ( Exception ex ) { Console . WriteLine ( ex . Message ) ; } connection . Close ( ) ; } } <EOF>
string something = CODE_STRING ; Type type = something . GetType ( ) ; Type listType = typeof ( List < > ) . MakeGenericType ( new [ ] { type } ) ; IList list = ( IList ) Activator . CreateInstance ( listType ) ; <EOF>
protected void MyUI_MouseDown ( object inSender , MouseEventArgs inArgs ) { switch ( myState ) { case CreateBox : Rectangle rect = new Rectangle ( inArgs . X , inArgs . Y , CODE_INTEGER , CODE_INTEGER ) ; break ; } } protected void MyUI_MouseUp ( object inSender , MouseEventArgs inArgs ) { rect . Width = inArgs . X - rect . X ; rect . Height = inArgs . Y - rect . Y ; } <EOF>
someDateTime . ToString ( CODE_STRING ) ; <EOF>
var functions = ListFunctions ( CODE_INTEGER ) ; foreach ( var function in functions ) { Console . WriteLine ( CODE_STRING , function . ID , function . Description ) ; } <EOF>
TextBox_name . Text = loginEmail ; <EOF>
GetCustomAttributes ( ) <EOF>
public formCanvas ( ) { InitializeComponent ( ) ; lblUsed . Visible = false ; lblScore . Visible = false ; lblUsedLetters . Visible = false ; lblGuessWord . Visible = false ; lblUserChoice . Visible = false ; lblWord . Visible = true ; txtUserLetter . Visible = false ; txtUserWord . Visible = true ; btnSubmitWord . Visible = true ; btnSubmitLetter . Visible = false ; lblLives . Visible = false ; btnExit . Visible = false ; btnRestart . Visible = false ; } <EOF>
var client = new HttpClient ( ) ; var stream3 = new FileStream ( CODE_STRING , FileMode . Open ) ; var stream2 = new FileStream ( CODE_STRING , FileMode . Open ) ; var dic = new Dictionary < string , string > ( ) ; dic . Add ( CODE_STRING , CODE_STRING ) ; var addy = CODE_STRING ; using ( var content = new MultipartFormDataContent ( ) ) { content . Add ( new StreamContent ( stream2 ) , CODE_STRING , CODE_STRING ) ; content . Add ( new StreamContent ( stream3 ) , CODE_STRING , CODE_STRING ) ; var response = await client . PostAsync ( addy , content ) ; response . EnsureSuccessStatusCode ( ) ; string finalresults = await response . Content . ReadAsStringAsync ( ) ; } <EOF>
this . _Button1 . Attributes . Add ( CODE_STRING , CODE_STRING + _RadGrid1 . ClientID + CODE_STRING ) ; <EOF>
if ( ! Page . IsPostBack ) <EOF>
private void dataGridView1_CellClick ( object sender , DataGridViewCellEventArgs e ) { if ( e . RowIndex >= CODE_INTEGER && e . ColumnIndex >= CODE_INTEGER ) { } } <EOF>
System . Net . ServicePointManager . MaxServicePointIdleTime = CODE_INTEGER ; <EOF>
var arr = [ CODE_STRING , CODE_STRING , CODE_STRING ] ; var string_matched = CODE_STRING ; for ( var i = CODE_INTEGER ; i < arr . length ; i ++ ) { if ( / se / gi . test ( arr [ i ] ) ) { string_matched += CODE_STRING + arr [ i ] ; } } <EOF>
Application . Current . Resources . MergedDictionaries <EOF>
db . Database . SqlQuery < IEnumerable < string > > ( CODE_STRING ) ; db . Database . SqlQuery < MyEntity > ( CODE_STRING ) ; db . Database . SqlQuery < IEnumerable < Tuple < int , string > > > ( CODE_STRING ) ; <EOF>
RootElement [ ] root = new RootElement [ CODE_INTEGER ] ; root [ CODE_INTEGER ] = new RootElement ( CODE_STRING ) ; . . . root [ CODE_INTEGER ] = new RootElement ( CODE_STRING ) ; <EOF>
[ RunInstaller ( true ) ] public class ServiceInstall : Installer { public ServiceInstall ( ) { ServiceInstaller serviceInstaller = new ServiceInstaller ( ) ; ServiceProcessInstaller serviceProcessInstaller = new ServiceProcessInstaller ( ) ; serviceProcessInstaller . Account = ServiceAccount . User ; serviceProcessInstaller . Username = CODE_STRING ; serviceProcessInstaller . Password = CODE_STRING ; serviceInstaller . DisplayName = CODE_STRING ; serviceInstaller . StartType = ServiceStartMode . Automatic ; serviceInstaller . ServiceName = CODE_STRING ; this . Installers . Add ( serviceProcessInstaller ) ; this . Installers . Add ( serviceInstaller ) ; } } <EOF>
Mapper . CreateMap < Transaction , Transaction > ( ) ; var newtransact = new Transaction ( ) ; Mapper . Map ( transact , newtransact ) ; <EOF>
if ( IsKeyPushedDown ( CODE_CHAR ) && IskeyPushedDown ( VK_CONTROL ) ) <EOF>
int counter = CODE_INTEGER ; if ( textbox1 . ToString ( ) . Equals ( textbox2 . ToString ( ) ) ) { counter ++ ; } <EOF>
var trace = new System . Diagnostics . StackTrace ( exception ) ; <EOF>
var board = db . Boards . Select ( b = > new BoardViewModel { Title = b . Title } ) . FirstOrDefault ( b = > b . Id == id ) <EOF>
class NPC { static bool isBeingControlled = false ; public void OnUpdate ( ) { if ( isBeingControlled ) { } } <EOF>
foreach ( string key in Request . Form ) { Response . Write ( key + CODE_STRING + Request . Form [ key ] ) ; } <EOF>
string selectQuery = CODE_STRING ; MySqlConnection sqlCOnnect = new MySqlConnection ( RootDBConnection . myConnection ) ; MySqlCommand sqlCmd = new MySqlCommand ( selectQuery , sqlCOnnect ) ; sqlCmd . Parameters . AddWithValue ( CODE_STRING , cbox1 . Text . ToString ( ) ) ; try { sqlCOnnect . Open ( ) using ( sqlCOnnect ) { . . . . } } <EOF>
public class NodeMap : ClassMap < Node > { public NodeMap ( ) { HasMany ( x = > x . Links ) ; } } public class LinkMap : ClassMap < Link > { public LinkMap ( ) { References ( x = > x . StartNode ) ; References ( x = > x . EndNode ) ; } } <EOF>
if ( _mQuestions . Any ( q = > q . QuestionID == CODE_INTEGER ) ) { Question question14 = _mQuestions . FirstOrDefault ( q = > q . QuestionID == CODE_INTEGER ) ; if ( question14 != null ) question14 . QuestionAnswer = CODE_STRING ; } <EOF>
class Demo { public int Distance { get ; set ; } public int Frequency { get ; set ; } public override string ToString ( ) { return string . Format ( CODE_STRING , this . Distance , this . Frequency ) ; } } List < Demo > list = new List < Demo > { new Demo { Distance = CODE_INTEGER , Frequency = CODE_INTEGER } , new Demo { Distance = CODE_INTEGER , Frequency = CODE_INTEGER } , new Demo { Distance = CODE_INTEGER , Frequency = CODE_INTEGER } , } ; int [ ] weight = { CODE_INTEGER , CODE_INTEGER } ; var tmp = list . OrderByDescending ( x = > x . Distance * CODE_REAL + x . Frequency * CODE_REAL ) ; foreach ( var q in tmp ) { Console . WriteLine ( q ) ; } <EOF>
public static extern int XIJET_GetPrinterParameter ( IntPtr printerHandle , Uint16 parameterIndex , IntPtr pParameter , UInt16 headNumber ) ; <EOF>
using System . Collections . Generic ; namespace Test { class Program { static void Main ( string [ ] args ) { int [ ] vec0 = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int [ ] vec1 = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int [ ] vec2 = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int [ ] vec3 = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int [ ] vec4 = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; List < int > temp = new List < int > ( ) ; temp . AddRange ( vec0 ) ; temp . AddRange ( vec1 ) ; temp . AddRange ( vec2 ) ; temp . AddRange ( vec3 ) ; temp . AddRange ( vec4 ) ; int [ ] mainvec = temp . ToArray ( ) ; } } } <EOF>
public class Person { public string strFirstName ; . . . } public class Persons { List < Person > lstPersons = new List < Person > ( ) ; public void AddPerson ( string FirstName , . . . ) { Person person = new Person ( ) ; person . strFirstName = FirstName ; . . . lstPersons . Add ( person ) ; } } <EOF>
var WordsArray = Details . Split ( ) ; string Items = WordsArray [ CODE_INTEGER ] + CODE_CHAR + WordsArray [ CODE_INTEGER ] ; <EOF>
public static int valToInt ( string v ) { return ( int ) ( Decimal . Parse ( v , new System . Globalization . CultureInfo ( CODE_STRING ) ) * CODE_REAL ) ; } <EOF>
string fname = Path . Combine ( Environment . GetFolderPath ( Environment . SpecialFolder . LocalApplicatio ?? ?? ?? nData ) , CODE_STRING , CODE_STRING ) ; File . AppendAllText ( fname , CODE_STRING ) ; <EOF>
var selectedRows = dGV_model . SelectedCells . Cast < DataGridViewCell > ( ) . Select ( c = > c . RowIndex ) . Distinct ( ) . ToList ( ) ; <EOF>
var foo = File . ReadAllText ( Server . MapPath ( CODE_STRING ) ) ; <EOF>
sqlcomm . CommandText = CODE_STRING <EOF>
GridView grid = new GridView ( ) ; grid . ShowDialog ( ) ; if ( grid . dataGridView1 . CurrentRow . Cells [ CODE_INTEGER ] . Value . ToString ( ) == CODE_STRING ) { male_radiobtn . Checked = true ; female_radiobtn . Checked = false ; } else { female_radiobtn . Checked = true ; male_radiobtn . Checked = false ; } <EOF>
/ accepteula <EOF>
using NAudio . Wave ; . . . WaveFileReader reader = new WaveFileReader ( MyProject . Resource . AudioResource ) ; TimeSpan span = reader . TotalTime ; <EOF>
ListBox3 . DataSource = ds ; ListBox3 . DataTextField = CODE_STRING ; ListBox3 . DataValueField = CODE_STRING ; ListBox3 . DataBind ( ) ; <EOF>
Try Dim appFolder = Environment . GetFolderPath ( Environment . SpecialFolder . CommonApplicationData ) appFolder = Path . Combine ( appFolder , CODE_STRING ) If Not Directory . Exists ( appFolder ) Then Directory . CreateDirectory ( appFolder ) End If Dim myDB = Path . Combine ( appFolder , CODE_STRING ) If ( Not File . Exists ( myDB ) ) Then . . . . . End If Catch ex As Exception ' Throw ex Return False End Try <EOF>
pdftk folder1 / file1 . pdf folder1 / file2 . pdf folder2 / file1 . pdf cat output all_files . pdf <EOF>
string currentLabel = ( from s2f in stream2FieldTypesTable where s2f . s2fID == item . s2fID && ( s2f . s2fLabel != item . s2fLabel || s2f . s2fIsRequired != item . s2fIsRequired ) select s2f . s2fLabel ) . FirstOrDefault ( ) ; <EOF>
private BaseClass child ; public bool DomeSomethingSpecific ( int i ) { var c = { initialization to an instance - e . g . Child1 ( ) , Child2 ( ) , Child3 ( ) . . } ; if ( c is Child1 ) { ( ( Child1 ) c ) . DomeSomethingSpecificForChild1 ( i ) ; } } <EOF>
private void printDocument1_PrintPage ( object sender , System . Drawing . Printing . PrintPageEventArgs e ) { e . Graphics . DrawImage ( pictureBox1 . Image , CODE_INTEGER , CODE_INTEGER ) ; } <EOF>
orderedDates . SkipWhile ( x = > x . datetime1 < afterDateTime ) . TakeWhile ( x = > x . datetime2 > beforeDateTime ) <EOF>
void WriteLineKeepingIndent ( string format , params object [ ] args ) { int x = Console . CursorLeft ; Console . WriteLine ( format , args ) ; Console . CursorLeft = x ; } <EOF>
modelBuilder . Entity < Element > ( ) . HasMany ( e = > e . Parent ) . WithMany ( e = > e . Child ) . Map ( m = > { m . ToTable ( CODE_STRING ) ; m . MapLeftKey ( CODE_STRING ) ; m . MapRightKey ( CODE_STRING ) ; } ) ; <EOF>
var rowIndex = ( ( GridViewRow ) ( ( Control ) sender ) . NamingContainer ) . RowIndex ; <EOF>
protected void Button1_Click ( object sender , EventArgs e ) { wbRfrnc . TransactionPut obj = new wbRfrnc . TransactionPut ( ) ; string result = obj . GetPoint ( TextBox1 . Text , TextBox2 . Text ) ; var objGD = JsonConvert . DeserializeObject < GetData [ ] > ( result ) ; Response . Write ( objGD [ CODE_INTEGER ] . Response ) ; } <EOF>
string trimmedByLine = string . Join ( " " , temp2 . Split ( ' ' ) . Select ( s = > s . Trim ( ) ) ) ; <EOF>
using ( SqlTransaction transaction = destinationConnection . BeginTransaction ( ) ) { using ( SqlBulkCopy bulkCopy = new SqlBulkCopy ( destinationConnection , SqlBulkCopyOptions . KeepIdentity , transaction ) ) { bulkCopy . BatchSize = CODE_INTEGER ; bulkCopy . DestinationTableName = CODE_STRING ; try { bulkCopy . WriteToServer ( reader ) ; transaction . Commit ( ) ; } catch ( Exception ex ) { Console . WriteLine ( ex . Message ) ; transaction . Rollback ( ) ; } finally { reader . Close ( ) ; } } } <EOF>
xDoc . PreserveWhitespace = true ; xDoc . Save ( . . . ) ; <EOF>
String value = CODE_STRING ; String secondColumn = value . split ( CODE_STRING ) [ CODE_INTEGER ] ; <EOF>
XDocument x = ( XDocument ) HttpContext . Current . Cache [ ns + CODE_STRING ] ; if ( x == null ) { x = new XDocument ( new XElement ( ns + CODE_STRING , DateTime . Now ( ) ) ) ; HttpContext . Current . Cache . Insert ( ns + CODE_STRING , x , null , DateTime . Now . AddHours ( CODE_REAL ) , Cache . NoSlidingExpiration ) ; } <EOF>
[ Export ( CODE_STRING , typeof ( MyPlugin ) ) ] [ Export ( typeof ( MyPlugin ) ) ] [ Export ( CODE_STRING , typeof ( MyPlugin ) ) ] [ Export ( typeof ( MyPlugin ) ) ] class MyPlugin { } [ TestMethod ] public void mef ( ) { var catalog = new AssemblyCatalog ( this . GetType ( ) . Assembly ) ; var container = new CompositionContainer ( catalog ) ; Assert . AreEqual ( CODE_INTEGER , container . GetExportedValues < MyPlugin > ( ) . Count ( ) ) ; } <EOF>
byte [ ] imageBytes ; HttpWebRequest imageRequest = ( HttpWebRequest ) WebRequest . Create ( imageUrl ) ; WebResponse imageResponse = imageRequest . GetResponse ( ) ; Stream responseStream = imageResponse . GetResponseStream ( ) ; using ( BinaryReader br = new BinaryReader ( responseStream ) ) { imageBytes = br . ReadBytes ( CODE_INTEGER ) ; br . Close ( ) ; } responseStream . Close ( ) ; imageResponse . Close ( ) ; FileStream fs = new FileStream ( saveLocation , FileMode . Create ) ; BinaryWriter bw = new BinaryWriter ( fs ) ; try { bw . Write ( imageBytes ) ; } finally { fs . Close ( ) ; bw . Close ( ) ; } <EOF>
private void radGridView1_CellValidating ( object sender , CellValidatingEventArgs e ) { String [ ] Acceptable = new string [ ] { CODE_STRING , CODE_STRING } ; if ( e . Value != null && e . ColumnIndex == CODE_INTEGER ) { if ( e . Value != e . OldValue ) { if ( ! Acceptable . Contains ( e . Value ) ) { e . Cancel = true ; } } } } <EOF>
ServiceBase . RequestAdditionalTime ( CODE_INTEGER ) ; <EOF>
DECLARE @start_date DATETIME , @end_date DATETIME , @chosen_time DATETIME SELECT @start_date = ' CODE_INTEGER Jan CODE_INTEGER CODE_INTEGER : CODE_INTEGER ' , @end_date = ' CODE_INTEGER Jan CODE_INTEGER CODE_INTEGER : CODE_INTEGER ' , @chosen_time = ' CODE_INTEGER Jan CODE_INTEGER CODE_INTEGER : CODE_INTEGER ' -- ' CODE_INTEGER Jan CODE_INTEGER ' is day CODE_INTEGER SELECT < whatever > FROM WideHistory WHERE [ WideHistory ] . DateTime >= @start_date AND [ WideHistory ] . DateTime < @end_date AND DATEADD ( DAY , DATEDIFF ( MINUTE , CODE_INTEGER , [ WideHistory ] . DateTime ) , CODE_INTEGER ) = @chosen_time <EOF>
IPAddress ipAddress = Dns . GetHostEntry ( Dns . GetHostName ( ) ) . AddressList [ CODE_INTEGER ] ; IPEndPoint ipLocalEndPoint = new IPEndPoint ( ipAddress , clientPort ) ; TcpClient clientSocket = new TcpClient ( ipLocalEndPoint ) ; clientSocket . Connect ( remoteHost , remotePort ) ; <EOF>
DrawingBrush myBrush = new DrawingBrush ( ) ; GeometryDrawing backgroundSquare = new GeometryDrawing ( Brushes . Yellow , null , new RectangleGeometry ( new Rect ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ) ; GeometryGroup aGeometryGroup = new GeometryGroup ( ) ; aGeometryGroup . Children . Add ( new EllipseGeometry ( new Rect ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ) ; SolidColorBrush checkerBrush = new SolidColorBrush ( Colors . Black ) ; GeometryDrawing checkers = new GeometryDrawing ( checkerBrush , null , aGeometryGroup ) ; DrawingGroup checkersDrawingGroup = new DrawingGroup ( ) ; checkersDrawingGroup . Children . Add ( backgroundSquare ) ; checkersDrawingGroup . Children . Add ( checkers ) ; myBrush . Drawing = checkersDrawingGroup ; myBrush . Viewport = new Rect ( CODE_INTEGER , CODE_INTEGER , CODE_REAL , CODE_REAL ) ; myBrush . TileMode = TileMode . Tile ; yellowPolygon . Fill = myBrush ; <EOF>
object obj = collection [ CODE_STRING ] ; string str = obj == null ? null : obj . ToString ( ) ; <EOF>
void SaveUrl ( string sourceURL , string savepath ) { CookieContainer cookies = new CookieContainer ( ) ; HttpWebRequest webRequest = ( HttpWebRequest ) WebRequest . Create ( sourceURL ) ; webRequest . CookieContainer = cookies ; HttpWebResponse response = ( HttpWebResponse ) webRequest . GetResponse ( ) ; StreamReader responseReader = new StreamReader ( response . GetResponseStream ( ) ) ; string sResponseHTML = responseReader . ReadToEnd ( ) ; using ( StreamWriter sw = new StreamWriter ( savepath , false ) ) { sw . Write ( sResponseHTML ) ; } string [ ] ImageUrl = GetImgLinks ( sResponseHTML ) ; foreach ( string imagelink in ImageUrl ) { HttpWebRequest imgRequest = ( HttpWebRequest ) WebRequest . Create ( imagelink ) ; imgRequest . CookieContainer = cookies ; HttpWebResponse imgresponse = ( HttpWebResponse ) imgRequest . GetResponse ( ) ; } } <EOF>
IIS_APPPOOL \ mysite <EOF>
private void respondWithFile ( string filePath , string remoteFileName ) { if ( ! File . Exists ( filePath ) ) throw new FileNotFoundException ( string . Format ( CODE_STRING , filePath ) ) ; var fi = new FileInfo ( filePath ) ; Response . Clear ( ) ; Response . AddHeader ( CODE_STRING , String . Format ( CODE_STRING , remoteFileName ) ) ; Response . AddHeader ( CODE_STRING , fi . Length . ToString ( ) ) ; Response . ContentType = CODE_STRING ; Response . WriteFile ( fi . FullName ) ; Response . End ( ) ; } <EOF>
button . Click += ( sender , args ) = > { var intent = new Intent ( this , typeof ( Results ) ) ; intent . PutExtra ( CODE_STRING , new [ ] { cb1 . Checked , cb2 . Checked , cb3 . Checked , cb4 . Checked } ) ; intent . PutExtra ( CODE_STRING , new [ ] { cb1 . Text , cb2 . Text , cb3 . Text , cb4 . Text } ) ; this . StartActivity ( intent ) ; } ; } } [ Activity ( Label = CODE_STRING , MainLauncher = false , Icon = CODE_STRING ) ] public class Results : Activity { protected override void OnCreate ( Bundle bundle ) { base . OnCreate ( bundle ) ; var cbs = this . Intent . Extras . GetBooleanArray ( CODE_STRING ) ; var texts = this . Intent . Extras . GetStringArray ( CODE_STRING ) ; foreach ( var cb in cbs ) { System . Diagnostics . Debug . WriteLine ( cb ) ; } foreach ( var text in texts ) { System . Diagnostics . Debug . WriteLine ( text ) ; } } } <EOF>
string _time_One = CODE_STRING ; string _time_Two = CODE_STRING ; TimeSpan ts = DateTime . Parse ( _time_One ) - DateTime . Parse ( _time_Two ) ; MessageBox . Show ( String . Format ( CODE_STRING , ts . Hours , ts . Minutes ) ) ; <EOF>
string a = CODE_STRING ; string b = CODE_STRING ; a = a + b . Substring ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
public int WeekNumber ( DateTime date ) { CultureInfo ciCurr = CultureInfo . CurrentCulture ; int weekNum = ciCurr . Calendar . GetWeekOfYear ( date , CalendarWeekRule . FirstFourDayWeek , DayOfWeek . Monday ) ; return weekNum ; } <EOF>
public static string Foo < T > ( this IEnumerable < T > source ) { var list = source as IList < T > ; if ( list != null ) { } } <EOF>
public string RemoveSpaceAfter ( string inputString ) { try { string [ ] Split = inputString . Split ( new Char [ ] { CODE_CHAR } ) ; for ( int i = CODE_INTEGER ; i < Split . Length ; i ++ ) { fateh += Convert . ToString ( Split [ i ] ) ; } return fateh ; } catch ( Exception gg ) { return fateh ; } } <EOF>
string x = CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING ; int searchBeforeLocation = x . LastIndexOf ( CODE_STRING ) ; x = x . Substring ( CODE_INTEGER , searchBeforeLocation ) ; Regex r = new Regex ( CODE_STRING ) ; MatchCollection matches = r . Matches ( x ) ; int matchCount = matches . Count ; Console . WriteLine ( matches [ matches . Count - CODE_INTEGER ] . Value ) ; Console . Read ( ) ; <EOF>
comboBoxPlatypusId . SelectedIndex = comboBoxPlatypusId . Items . IndexOf ( DuckbillVals [ Duckbill_PlatypusID ] ) ; comboBoxPlatypusId . Tag = comboBoxPlatypusId . SelectedIndex ; . . . private void comboBoxFunnyMammals_SelectedValueChanged ( object sender , EventArgs e ) { var cb = sender as ComboBox ; if ( cb != null ) { int validSelection = Convert . ToInt32 ( cb . Tag ) ; if ( cb . SelectedIndex != validSelection ) { cb . SelectedIndex = validSelection ; } } } <EOF>
public static TEntity CopyTo < TEntity > ( this TEntity OriginalEntity , TEntity NewEntity ) { PropertyInfo [ ] oProperties = OriginalEntity . GetType ( ) . GetProperties ( ) ; foreach ( PropertyInfo CurrentProperty in oProperties . Where ( p = > p . CanWrite ) ) { if ( CurrentProperty . GetValue ( NewEntity , null ) != null ) { CurrentProperty . SetValue ( OriginalEntity , CurrentProperty . GetValue ( NewEntity , null ) , null ) ; } } return OriginalEntity ; } <EOF>
CreateItem [ ] array = new CreateItem [ CODE_INTEGER ] ; CreateItem item = new CreateItem ( ) ; item . name = CODE_STRING ; item . value = CODE_INTEGER ; array [ CODE_INTEGER ] = item ; Console . WriteLine ( array [ CODE_INTEGER ] . name ) ; <EOF>
createMSFile . Create ( CODE_STRING + sfdNewFile . FileName ) ; <EOF>
distance = acos ( cos ( lat1 * ( PI ( ) / CODE_INTEGER ) ) * cos ( lon1 * ( PI ( ) / CODE_INTEGER ) ) * cos ( lat2 * ( PI ( ) / CODE_INTEGER ) ) * cos ( lon2 * ( PI ( ) / CODE_INTEGER ) ) + cos ( lat1 * ( PI ( ) / CODE_INTEGER ) ) * sin ( lon1 * ( PI ( ) / CODE_INTEGER ) ) * cos ( lat2 * ( PI ( ) / CODE_INTEGER ) ) * sin ( lon2 * ( PI ( ) / CODE_INTEGER ) ) + sin ( lat1 * ( PI ( ) / CODE_INTEGER ) ) * sin ( lat2 * ( PI ( ) / CODE_INTEGER ) ) ) * CODE_INTEGER <EOF>
using SW = System . Windows ; SW . MessageBox . Show ( CODE_STRING ) ; <EOF>
PointD ^ GetPoint ( ) ; <EOF>
var reminderDate = DateTime . ParseExact ( CODE_STRING , CODE_STRING , null ) ; MessageBox . Show ( reminderDate . ToString ( CODE_STRING ) ) ; <EOF>
Application . Current . Resources . MergedDictionaries . Add ( new ResourceDictionary { Source = new Uri ( CODE_STRING ) } ) ; <EOF>
class TestShow { public string id { get ; set ; } public string IMDB_ID { get ; set ; } public string Language { get ; set ; } } [ XmlRoot ( CODE_STRING ) ] class Data { [ XmlElement ( CODE_STRING ) ] public TestShow TestShow { get ; set ; } } <EOF>
from p in products select new { _ = p . Titles . Select ( x = > CreateField ( CODE_STRING + x . Culture , x . Text ) ) , _ + = p . Descriptions . Select ( x = > CreateField ( CODE_STRING + x . Culture , x . Text ) ) , } <EOF>
Test . exe ^ % Temp ^ % <EOF>
list . Add ( new SqlParameter ( CODE_STRING , System . Data . SqlDbType . Bit ) { Value = ( print_sql != null ? print_sql : DBNull . Value ) } ) ; <EOF>
List < x > myList = GetList ( ) ; myGrid . DataSource = myList ; myGrid . DataBind ( ) ; <EOF>
var length = new System . IO . FileInfo ( Server . MapPath ( filePath ) ) . Length ; Response . BufferOutput = false ; Response . AddHeader ( CODE_STRING , length . ToString ( ) ) ; return File ( Server . MapPath ( filePath ) , System . Net . Mime . MediaTypeNames . Application . Octet , fileName ) ; <EOF>
public IEnumerable < T > Get < T > ( ) { return _vehicles . OfType < T > ( ) ; } <EOF>
yourString = Regex . Replace ( yourString , CODE_STRING , CODE_STRING ) ; <EOF>
var cookieContainer = new CookieContainer ( ) ; WebReq . CookieContainer = cookieContainer ; <EOF>
[ DllImport ( CODE_STRING ) ] [ return : MarshalAs ( UnmanagedType . Bool ) ] private static extern bool IsIconic ( IntPtr hWnd ) ; private List < IntPtr > windowsHandles = new List < IntPtr > ( ) ; for ( i = CODE_INTEGER ; i < windowsHandles . Count ; i ++ ) { if ( windowsHandles [ i ] != browserHandle && windowsHandles [ i ] != this . Handle && ! IsIconic ( windowsHandles [ i ] ) ) { SetWindowPos ( windowsHandles [ i ] , HWND_BOTTOM , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , SWP_NOMOVE | SWP_NOSIZE | SWP_NOACTIVATE ) ; } } <EOF>
Nullable < T > <EOF>
int count = CODE_INTEGER ; mySortedlist . FindAll ( delegate ( myclass tmp ) { return ( tmp . ID == CODE_INTEGER && ++ count <= CODE_INTEGER ) ; } ) ; <EOF>
webBrowser1 . ScriptErrorsSuppressed = true ; <EOF>
IObservable < T > fastest = slowObservables . Amb ( ) ; <EOF>
DataTable dt = bLStatus . GetStatusDetail ( ) ; if ( dt != null && dt . Rows . Count > CODE_INTEGER ) { dt . DefaultView . Sort = CODE_STRING ; DataTable dt2 = dt . DefaultView . ToTable ( ) ; DataRow row1 = dt2 . NewRow ( ) ; row1 [ CODE_STRING ] = CODE_STRING ; dt2 . Rows . InsertAt ( row1 , CODE_INTEGER ) ; cmbCurrentStatus . DataSource = dt2 ; cmbCurrentStatus . ValueMember = CODE_STRING ; cmbCurrentStatus . DisplayMember = CODE_STRING ; } <EOF>
if ( saveFileDialog1 . ShowDialog ( ) == DialogResult . OK ) { System . Net . WebClient web = new WebClient ( ) ; web . DownloadFile ( url , saveFileDialog1 . FileName ) ; web . Dispose ( ) ; } <EOF>
var filteredData = _repository . GetAll ( ) ; if ( keyWordTextBox . Text != CODE_STRING ) filteredData = filteredData . Where ( m = > m . Keyword . Contains ( keyWordTextBox . Text ) ) ; if ( LocationDropDown . SelectedValue != CODE_STRING ) filteredData = filteredData . Where ( m = > m . Location == LocationDropDown . SelectedValue ) ) ; . . . etc . . . . <EOF>
string Data = CODE_STRING ; IEnumerable < dynamic > d = ( dynamic ) JsonConvert . DeserializeObject ( Data ) ; var dates = d . Select ( x = > DateTime . ParseExact ( x . created_at . ToString ( ) , CODE_STRING , CultureInfo . InvariantCulture ) ) . Cast < DateTime > ( ) . ToList ( ) ; var maxDate = dates . Max ( ) ; var minDate = dates . Min ( ) ; <EOF>
FileShare . ReadWrite | FileShare . Delete <EOF>
XElement tweet = XElement . Parse ( e . Result ) ; var thisTweet = new Tweet ( ) { created_at = tweet . Element ( CODE_STRING ) . Value , text = tweet . Element ( CODE_STRING ) . Value , name = tweet . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value , profile_image_url = tweet . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value , screen_name = tweet . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value , user_id = tweet . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value } ; <EOF>
public class BlockingQueue < T > { private Queue < Cell < T > > m_queue = new Queue < Cell < T > > ( ) ; public void Enqueue ( T obj ) { Cell < T > c = new Cell < T > ( obj ) ; lock ( m_queue ) { m_queue . Enqueue ( c ) ; Monitor . Pulse ( m_queue ) ; } } public T Dequeue ( ) { Cell < T > c ; lock ( m_queue ) { while ( m_queue . Count == CODE_INTEGER ) Monitor . Wait ( m_queue ) ; c = m_queue . Dequeue ( ) ; } return c . m_obj ; } } class Cell < T > { internal T m_obj ; internal Cell ( T obj ) { m_obj = obj ; } } <EOF>
private void LoadImageToMemory ( ) { openFileDialog1 . Filter = CODE_STRING ; openFileDialog1 . Multiselect = false ; openFileDialog1 . InitialDirectory = CODE_STRING ; openFileDialog1 . Title = CODE_STRING ; if ( openFileDialog1 . ShowDialog ( ) == DialogResult . OK ) { txtFileName . Text = openFileDialog1 . FileName ; } } <EOF>
Type . GetAllBaseClassesAndInterfaces <EOF>
public void Process ( string param1 , List < string > param2 = null ) { param2 = param2 ?? new List < String > ( ) ; } <EOF>
public partial class Student : IUniversityPerson { . . . } <EOF>
using ( MemoryStream m = new MemoryStream ( ) ) { m . Position = CODE_INTEGER ; bmp . Save ( m , ImageFormat . Png ) ; bmp . Dispose ( ) ; data = m . ToArray ( ) ; MemoryStream ms = new MemoryStream ( data ) ; } <EOF>
var centralTime = centralTimeZone . AtLeniently ( localDateTime ) ; var easternTime = centralTime . InZone ( easternTimeZone ) ; <EOF>
String text = File . ReadAllText ( CODE_STRING ) ; int startIndex = text . IndexOf ( CODE_CHAR , Regex . Match ( text , CODE_STRING ) . Index ) ; int stopIndex = text . IndexOf ( CODE_CHAR , startIndex ) ; , , CODE_CHAR ) removed String message = text . Substring ( startIndex + CODE_INTEGER , stopIndex - startIndex - CODE_INTEGER ) . Trim ( CODE_CHAR , CODE_CHAR , ' ' ) ; <EOF>
Process notePad = new Process ( ) ; notePad . StartInfo . FileName = CODE_STRING ; notePad . StartInfo . Arguments = CODE_STRING ; notePad . Start ( ) ; <EOF>
public void CountRowColor ( ) { int red = CODE_INTEGER , yellow = CODE_INTEGER ; foreach ( DataGridViewRow row in dataGridView1 . Rows ) { if ( row . DefaultCellStyle . BackColor == Color . Red ) red ++ ; if ( row . DefaultCellStyle . BackColor == Color . Yellow ) yellow ++ ; } this . label14 . Text = yellow . ToString ( ) ; this . label16 . Text = red . ToString ( ) ; } <EOF>
GetRequestType ( database . SomeThirdParty . RequestTypeEnumValue ) <EOF>
var argsDeleteWebUserXref1 = new DbParameter [ ] { new SqlParameter { ParameterName = CODE_STRING , Value = user . WebUserId } var argsDeleteWebUserXref2 = new DbParameter [ ] { new SqlParameter { ParameterName = CODE_STRING , Value = user . WebUserId } rowsAffectedDeleteWebUserXref += base . context . ExecuteStoreCommand ( sqlDeleteWebUserGreen , argsDeleteWebUserXref1 ) ; rowsAffectedDeleteWebUserXref += base . context . ExecuteStoreCommand ( sqlDeleteWebUserBlue , argsDeleteWebUserXref2 ) ; <EOF>
string username = User . Identity . Name ; bool isadmin = select admin from db where user == username ; if ( isadmin ) { return View ( ) ; } else { return HttpNotFound ( ) ; } <EOF>
var v = new { Amount = CODE_INTEGER , Message = CODE_STRING } ; Console . WriteLine ( v . Amount + v . Message ) ; <EOF>
System . Configuration . Configuration config = ConfigurationManager . OpenExeConfiguration ( ConfigurationUserLevel . None ) ; config . AppSettings . Settings . Add ( CODE_STRING , CODE_STRING providerName = CODE_STRING ) ; config . Save ( ConfigurationSaveMode . Modified ) ; ConfigurationManager . RefreshSection ( CODE_STRING ) ; <EOF>
var existingShifts = ( from os in db . OperatorShifts where os . OperatorId == model . Id select os ) . ToList ( ) ; IEnumerable < Guid > newShiftIds = ? ; var shiftsToRemove = existingShifts . Where ( e = > newShiftIds . All ( id = > e . Id != id ) ) . ToList ( ) ; var shiftIdsToAppend = newShiftIds . Where ( id = > exising . All ( e = > e . Id != id ) ) . ToList ( ) ; foreach ( var shift in shiftsToRemove ) { db . OperatorShifts . Remove ( shift ) ; } foreach ( var shiftId in shiftIdsToAppend ) { db . OperatorShifts . Add ( new OperatorShift { OperatorId = model . Id , ShiftId = shiftId } ) ; } <EOF>
public interface IRepository < T > { T Get ( int id ) ; void Add ( T entity ) ; void Update ( T entity ) ; void Remove ( T entity ) ; void Save ( ) ; } <EOF>
string . Format ( CODE_STRING , CODE_STRING ) <EOF>
tesseract - CODE_REAL . eng . tar . gz <EOF>
var session = . . . ; var sql = CODE_STRING ; var result = session . CreateSQLQuery ( sql ) . UniqueResult < string > ( ) ; <EOF>
public class Orders { public int OrderID { get ; set ; } public decimal Total { get ; set ; } public DateTime Date { get ; set ; } public virtual Clients Clients { get ; set ; } public string ClientsName { if ( Clients != null ) { return Clients . Name } return string . Empty ; } } <EOF>
private void DeleteSdtBlockAndKeepContent ( MainDocumentPart mainDocumentPart , string sdtBlockTag ) { List < SdtBlock > sdtList = mainDocumentPart . Document . Descendants < SdtBlock > ( ) . ToList ( ) ; SdtBlock sdtA = null ; foreach ( SdtBlock sdt in sdtList ) { if ( sdt . SdtProperties . GetFirstChild < Tag > ( ) . Val . Value == sdtBlockTag ) { sdtA = sdt ; break ; } } OpenXmlElement sdtc = sdtA . GetFirstChild < SdtContentBlock > ( ) ; OpenXmlElement parent = sdtA . Parent ; OpenXmlElementList elements = sdtc . ChildElements ; var mySdtc = new SdtContentBlock ( sdtc . OuterXml ) ; foreach ( OpenXmlElement elem in elements ) { string text = parent . FirstChild . InnerText ; parent . Append ( ( OpenXmlElement ) elem . Clone ( ) ) ; } sdtA . Remove ( ) ; } <EOF>
var task = Task . Run ( ( ) = > { var req = new HttpClient ( ) . GetAsync ( CODE_STRING ) ; if ( ! req . Wait ( CODE_INTEGER ) ) throw new TaskCanceledException ( req ) ; } ) ; task . Wait ( ) ; <EOF>
_Element . Measure ( new Size ( Double . MaxValue , Double . MaxValue ) ) ; Size visualSize = _Element . DesiredSize ; _Element . Arrange ( new Rect ( new Point ( CODE_INTEGER , CODE_INTEGER ) , visualSize ) ) ; _Element . UpdateLayout ( ) ; <EOF>
Expect . Once . On ( mockSqlDao ) . Method ( CODE_STRING ) . With ( CODE_STRING , Has . Property ( CODE_STRING ) . EqualTo ( CODE_STRING ) & Has . Property ( CODE_STRING ) . EqualTo ( CODE_INTEGER ) ) ; <EOF>
string propertyFile = CODE_STRING ; string propertyFolder = propertyFile . Substring ( CODE_INTEGER , propertyFile . LastIndexOf ( CODE_STRING ) + CODE_INTEGER ) ; string newXML = propertyFolder + CODE_STRING ; doc . Save ( newXML ) ; ?? ? <EOF>
string yourString = CODE_STRING ; string newString = CODE_STRING ; string [ ] array = yourString . Split ( CODE_CHAR ) ; foreach ( string s in array ) { newString += s ; } Console . WriteLine ( newString ) ; <EOF>
loanStatusUpdater . Stub ( x = > x . TryUpdateStatus ( loan ) ) . WhenCalled ( call = > ( ( Loan ) call . Arguments [ CODE_INTEGER ] ) . LOAN_STATUS = CODE_STRING ) ; . Return ( true ) ; <EOF>
void Main ( ) { Outlook . _Application oApp ; oApp = new Outlook . Application ( ) ; Outlook . _MailItem oMsg ; oMsg = oApp . CreateItem ( Outlook . OlItemType . olMailItem ) ; oMsg . Subject = CODE_STRING ; oMsg . Body = CODE_STRING + vbCr + vbCr ; oMsg . To = CODE_STRING ; string sSource = CODE_STRING ; string sDisplayName = CODE_STRING ; string sBodyLen = oMsg . Body . Length ; Outlook . Attachments oAttachs = oMsg . Attachments ; Outlook . Attachment oAttach ; oAttach = oAttachs . Add ( sSource , , sBodyLen + CODE_INTEGER , sDisplayName ) ; oMsg . Send ( ) ; oApp = null ; oMsg = null ; oAttach = null ; oAttachs = null ; } <EOF>
public partial class Form1 : Form { Button lastButton = null ; int buttoncount ; public Form1 ( ) { InitializeComponent ( ) ; button1 . Tag = CODE_STRING ; button2 . Tag = CODE_STRING ; button3 . Tag = CODE_STRING ; button4 . Tag = CODE_STRING ; button1 . Click += button_Click ; button2 . Click += button_Click ; button3 . Click += button_Click ; button4 . Click += button_Click ; } void button_Click ( object sender , EventArgs e ) { if ( lastButton != null ) { SwitchTagWithText ( ) ; } lastButton = sender as Button ; SwitchTagWithText ( ) ; buttoncount ++ ; label2 . Text = buttoncount . ToString ( ) ; } void SwitchTagWithText ( ) { string text = lastButton . Text ; lastButton . Text = lastButton . Tag . ToString ( ) ; lastButton . Tag = text ; } } <EOF>
private void Save ( ) { List < Element > elementList = new List < Element > ( ) ; elementList = Root [ CODE_INTEGER ] . Elements ; foreach ( Element element in elementList ) { RootElement radioElement = ( RootElement ) element ; user . Title = radioElement [ CODE_INTEGER ] . Elements [ radioElement . RadioSelected ] . Caption ; } user . Save ( ) ; } <EOF>
ddlCity . Items . FindByValue ( CityID . ToString ( ) ) . Selected = true <EOF>
var fileName = FileUpload1 . PostedFile . FileName ; <EOF>
XmlWriterSettings settings = new XmlWriterSettings ( ) ; settings . Indent = true ; XmlWriter xmlWriter = XmlWriter . Create ( exportFile , settings ) ; <EOF>
dtData . Select ( CODE_STRING ) ; <EOF>
combobox1 . datasource = null ; combobox1 . items . clear ( ) ; <EOF>
( outVect . X - a1 . X ) , ( outVect . Y - a1 . Y ) <EOF>
XDocument xml = XDocument . Load ( CODE_STRING ) ; <EOF>
<EOF>
HtmlNodeCollection OneHome = document . DocumentNode . SelectNodes ( CODE_STRING ) ; var OneHomelinks = OneHome . Descendants ( CODE_STRING ) . Select ( a = > a . OuterHtml ) . ToList ( ) ; var headerCount = CODE_INTEGER ; foreach ( string link in OneHomelinks ) { var prevCounter = headerCount ; if ( link . Contains ( CODE_CHAR ) ) { headerCount ++ ; if ( headerCount != CODE_INTEGER && headerCount > prevCounter ) { Response . Write ( CODE_STRING ) ; Response . Write ( CODE_STRING ) ; Response . Write ( CODE_STRING ) ; } Response . Write ( CODE_STRING ) ; Response . Write ( CODE_STRING + link + CODE_STRING ) ; Response . Write ( CODE_STRING ) ; Response . Write ( CODE_STRING ) ; } else { Response . Write ( CODE_STRING + link + CODE_STRING ) ; } } Response . Write ( CODE_STRING ) ; Response . Write ( CODE_STRING ) ; Response . Write ( CODE_STRING ) ; <EOF>
protected void list_Sorting ( object sender , ListViewSortEventArgs e ) { . . . list . Sort ( sortColumn , sortDirection ) ; . . . } <EOF>
public List < string > [ ] SomeClientBuilsenessLogicMethod ( ) { var serviceClient = GetServiceClientInstance ( ) ; string [ ] [ ] serviceData = serviceClient . MyMethod ( ) ; List < string > [ ] mutableDataList = serviceData . Select ( x = > x . ToList ( ) ) . ToArray ( ) ; return mutableDataList ; } <EOF>
public ObservableCollection < efcFixtureMode > Modes { get ; set ; } <EOF>
SPWeb web = SPContext . Current . Web ; SPGroup oGroup = web . Groups . GetByID ( oFieldUserValue . LookupId ) ; SPPrincipal principal = ( SPPrincipal ) oGroup ; SPRoleAssignment roleAssignment = new SPRoleAssignment ( principal ) ; permFolder . Item . BreakRoleInheritance ( true ) ; roleAssignment . RoleDefinitionBindings . Add ( web . RoleDefinitions [ CODE_STRING ] ) ; permFolder . Item . RoleAssignments . Add ( roleAssignment ) ; permFolder . Item . Update ( ) ; finalItem . Update ( ) ; <EOF>
double avg = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < arr . Length ; i ++ ) { avg += arr [ i ] * ( i + MinRate ) ; } avg /= arr . length ; <EOF>
private string _GetXmlWithoutHeadersAndComments ( XmlDocument doc ) { string xml = null ; if ( doc . HasChildNodes ) { StringBuilder builder = new StringBuilder ( ) ; foreach ( XmlNode node in doc . ChildNodes ) if ( node . NodeType != XmlNodeType . XmlDeclaration && node . NodeType != XmlNodeType . Comment ) builder . Append ( node . OuterXml ) ; xml = builder . ToString ( ) ; } return xml ; } <EOF>
mail . Headers . Add ( CODE_STRING , CODE_STRING ) ; <EOF>
var words = text . Split ( CODE_STRING ) ; foreach ( var word in words ) if ( word . Contains ( CODE_STRING ) ) Console . WriteLine ( CODE_STRING ) ; <EOF>
newid ( ) <EOF>
var source = CODE_STRING ; var engine = Python . CreateEngine ( ) ; var scope = engine . CreateScope ( ) ; var ops = engine . Operations ; engine . Execute ( source , scope ) ; var pythonType = scope . GetVariable ( CODE_STRING ) ; dynamic instance = ops . CreateInstance ( pythonType ) ; var value = instance . add ( CODE_INTEGER , CODE_INTEGER ) ; Console . WriteLine ( value ) ; Console . WriteLine ( CODE_STRING ) ; Console . ReadLine ( ) ; <EOF>
DBcmd . CommandText = CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING ; <EOF>
var TRANSACTIONS = new XElement ( CODE_STRING ) ; TRANSACTIONS . Add ( new XElement ( CODE_STRING , new XElement ( CODE_STRING , CODE_INTEGER ) ) ) ; TRANSACTIONS . Add ( new XElement ( CODE_STRING , new XElement ( CODE_STRING , CODE_INTEGER ) ) ) ; TRANSACTIONS . Add ( new XElement ( CODE_STRING , new XElement ( CODE_STRING , CODE_INTEGER ) ) ) ; <EOF>
decimal mLon1 = CODE_INTEGER ; decimal mLat1 = CODE_INTEGER ; decimal mFactor = CODE_INTEGER ; decimal mRadius = CODE_INTEGER ; decimal mLat = ( decimal ) CODE_REAL ; decimal mLon = CODE_INTEGER ; mLon1 = mLon - mRadius / ( decimal ) Math . Abs ( Math . Cos ( ( ( Math . PI / CODE_INTEGER ) * ( double ) mLat ) ) * ( double ) mFactor ) ; mLat1 = mLat - ( mRadius / mFactor ) ; <EOF>
^ ( ( ? ! . * [ \ s ] ) ( ? = . * [ A - Z ] ) ( ? = . * \ d ) . { CODE_INTEGER , CODE_INTEGER } ) <EOF>
ISQLFunction sqlAdd = new VarArgsSQLFunction ( CODE_STRING , CODE_STRING , CODE_STRING ) ; var concat = Projections . SqlFunction ( sqlAdd , NHibernateUtil . String , Projections . Property ( CODE_STRING ) , Projections . Property ( CODE_STRING ) ) ; var sha1 = Projections . SqlFunction ( CODE_STRING , NHibernateUtil . String , concat ) ; . . . session . CreateCriteria < Car > ( ) . Add ( Expression . Eq ( sha1 , CODE_STRING ) ) ; <EOF>
SqlDataAdapter adpt = new SqlDataAdapter ( string . Format ( CODE_STRING , comboBox_Search . Text ) , sqlcon ) ; <EOF>
dbc . SetCommand ( CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING ) ; <EOF>
public class CustomControllerClass : Controller { public User CurrentUser ; protected override void Initialize ( System . Web . Routing . RequestContext requestContext ) { base . Initialize ( requestContext ) ; if ( requestContext . HttpContext . User . Identity . IsAuthenticated ) { string userName = requestContext . HttpContext . User . Identity . Name ; CurrentUser = UserRepository . GetUser ( userName ) ; ViewData [ CODE_STRING ] = CurrentUser ; } else ViewData [ CODE_STRING ] = null ; } } <EOF>
var properties = typeof ( customclass ) . GetProperties ( BindingFlags . Public | BindingFlags . Instance ) . OrderBy ( x = > x . Name ) . ToList ( ) ; List < customclass > BMrep = somefunction ( ) ; var retdata = new object [ BMrep . Count , properties . Count ] ; for ( int i = CODE_INTEGER ; i < BMrep . Count ; i ++ ) { for ( int j = CODE_INTEGER ; j < properties . Count ; j ++ ) { retdata [ i , j ] = properties [ j ] . GetValue ( BMrep [ i ] , null ) ; } } return retdata ; <EOF>
try { throw new CustomException ( CODE_STRING ) ; } catch ( Exception ex ) { if ( ex is CustomException ) { } } <EOF>
System . EventHandler < TEventArgs > <EOF>
CultureInfo c = CultureInfo . CreateSpecificCulture ( CultureInfo . CurrentCulture . Name ) ; c . NumberFormat . CurrencyNegativePattern = CODE_INTEGER ; c . NumberFormat . CurrencySymbol = CODE_STRING ; decimal d = Decimal . Parse ( CODE_STRING , NumberStyles . Currency , c ) ; <EOF>
Debug . WriteLine ( ) <EOF>
sql - server <EOF>
height : CODE_INTEGER % <EOF>
Request . QueryString ( CODE_STRING ) <EOF>
. . . int PageToAccess = CODE_INTEGER ; ( ( Control ) FindName ( CODE_STRING + PageToAccess ) ) . Height = CODE_INTEGER ; . . . <EOF>
public IEnumerable < DateTime > GetAllQuarters ( DateTime current , DateTime past ) { var curQ = ( int ) Math . Ceiling ( current . Month / CODE_REAL ) ; var lastQEndDate = new DateTime ( current . Year , curQ * CODE_INTEGER , CODE_INTEGER ) . AddMonths ( - CODE_INTEGER ) . AddDays ( - CODE_INTEGER ) ; do { yield return lastQEndDate ; lastQEndDate = lastQEndDate . AddMonths ( - CODE_INTEGER ) ; } while ( lastQEndDate > past ) ; } <EOF>
Trace . Flush <EOF>
internal static void Notify_SettingChange ( ) <EOF>
protected void Button_Click ( object sender , EventArgs e ) { int q1 = Convert . ToInt16 ( TextBox1 . Text ) ; string t1 = DropDownList1 . SelectedItem . ToString ( ) . Trim ( ) ; int start = CODE_INTEGER ; string checkBoxValue = string . Concat ( t1 , start ) ; while ( CheckBoxList1 . Items . Cointains ( new ListItem ( checkBoxValue ) ) ) { start ++ ; checkBoxValue = string . Concat ( t1 , start ) ; } for ( int i = start ; i <= start + q1 - CODE_INTEGER ; i ++ ) { CheckBoxList1 . Items . Add ( string . Concat ( t1 , i ) ) ; } TextBox1 . Text = CODE_STRING ; } <EOF>
Process vbsProcess = new Process ( ) ; vbsProcess . StartInfo . FileName = CODE_STRING ; vbsProcess . StartInfo . UseShellExecute = false ; vbsProcess . StartInfo . RedirectStandardOutput = true ; vbsProcess . OutputDataReceived += new DataReceivedEventHandler ( YourOutputHandler ) ; vbsProcess . Start ( ) ; vbsProcess . WaitForExit ( ) ; <EOF>
IntPtr hWnd ; WindowInteropHelper helper = new WindowInteropHelper ( wnd ) ; WindowState prevState = wnd . WindowState ; bool prevShowInTaskBar = wnd . ShowInTaskbar ; wnd . ShowInTaskbar = false ; wnd . WindowState = WindowState . Minimized ; wnd . Show ( ) ; hWnd = helper . Handle ; wnd . Hide ( ) ; wnd . ShowInTaskbar = prevShowInTaskBar ; wnd . WindowState = prevState ; <EOF>
XElement xelement = XElement . Load ( Server . MapPath ( CODE_STRING ) ) ; var urlList = xelement . Descendants ( ) . Attributes ( ) . Where ( x = > x . Name == CODE_STRING ) . Select ( x = > x . Value ) ; foreach ( string s in urlList ) { } <EOF>
private static <EOF>
DateTime dt = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) . AddTicks ( CODE_INTEGER ) ; <EOF>
foreach ( Control control in this . Controls ) { cName = control as ICustomerName ; if ( cName != null ) break ; } <EOF>
using Microsoft . Deployment . WindowsInstaller ; using ( Database database = new Database ( PATH_TO_MSI , DatabaseOpenMode . ReadOnly ) ) { Console . WriteLine ( database . SummaryInfo . Template ) ; } <EOF>
Mapper . CreateMap < Conference , Model > ( ) . ForMember ( c = > c . Id , op = > op . MapFrom ( v = > v . Id ) ) . ForMember ( c = > c . NumberOfTables , op = > op . MapFrom ( v = > v . NumberOfTables ) ) . ForMember ( c = > c . Peoples , op = > op . ResolveUsing < CustomConvert > ( ) . FromMember ( x = > x . Peoples ) ) ; <EOF>
AppDomain myDomain = AppDomain . CreateDomain ( CODE_STRING ) ; string pathToTheDll = CODE_STRING ; object obj = myDomain . CreateInstanceFromAndUnwrap ( pathToTheDll , CODE_STRING ) ; Type myType = obj . GetType ( ) ; myType . InvokeMember ( CODE_STRING , BindingFlags . InvokeMethod , null , obj , null ) ; AppDomain . Unload ( myDomain ) ; <EOF>
INSERT INTO [ Projects ] SELECT CODE_CHAR , ' None ' , CODE_CHAR , ' CODE_INTEGER / CODE_INTEGER / CODE_INTEGER CODE_INTEGER : CODE_INTEGER : CODE_INTEGER AM ' , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_CHAR , ' ' , ' n / a ' , ' no ' , ' n / a ' , ' None ' , CODE_INTEGER , ' n / a ' , ' n / a ' , ' no ' , ' A3 ' , ' no ' , ' Blnk ' , ' aa ' , status . statusID from status where name = ' STOPPED ' <EOF>
Dispatcher . RunAsync ( Windows . UI . Core . CoreDispatcherPriority . Normal , ( ) = > { if ( this . Frame != null ) { Frame . Navigate ( typeof ( NetworkDisconection ) ) ; } } ) ; <EOF>
text . Options = TextField . READ_ONLY ; <EOF>
public List < Appointment > GetAppointments ( ) { return dataEntities . Appointments . Where ( a = > a . PATIENTID == PatientId ) . Select ( a = > new OtherNamespace . Appointment { Id = a . Id , Name = a . Name , } ) . ToList ( ) ; } <EOF>
public overrride InnerMapArray this [ int x , int y ] { . . . } <EOF>
protected void Button3_Click ( object sender , EventArgs e ) { Button3 . Enabled = false ; } <EOF>
abstract class Rack { public abstract void GetData ( ) ; } class ChildRack1 : Rack { public override void GetData ( ) { } } class ChildRack2 : Rack { public override void GetData ( ) { } } class Channel { private Rack rack1 ; private Rack rack2 ; public Channel ( ) { } public Channel ( Rack h1 , Rack h2 ) { rack1 = h1 ; rack2 = h2 ; } public void send ( ) { rack1 . GetData ( ) ; } } <EOF>
List < string > words = Search . GetTags ( q ) ; using ( ShapesDataContext context = new ShapesDataContext ( ) ) { IQueryable < Shape > query = Enumerable . Empty < Shape > ( ) . AsQueryable ( ) ; foreach ( var word in words ) { query = query . Union ( context . Shapes . Where ( x = > x . Title . Contains ( word ) || x . Description . Contains ( word ) ) ) ; } <EOF>
listBox . Items . Add ( listBox . Items . Last ( ) ) ; listBox . Items [ listBox . Items . Count - CODE_INTEGER ] = new TextBox ( ) ; <EOF>
ffmpeg - i input . avi <EOF>
gv . DataSource = Enumerable . Range ( CODE_INTEGER , int . Parse ( txtCount . Value ) ) . Select ( e = > new { RTDetailID = CODE_STRING , AssyNo = CODE_STRING , Position = CODE_STRING } ) ; gv . DataBind ( ) ; <EOF>
var sample = ( from e in dataContext . tblA . Include ( CODE_STRING ) where e . Active == true && System . Data . Objects . EntityFunctions . CreateDateTime ( e . DateA . Year , e . DateA . Month , e . DateA . Day , e . DateB . Hour , e . DateB . Minute , e . DateB . Second ) >= DateTime . Now select new { . . . } ) . ToList ( ) ; <EOF>
ProcessStartInfo psi = new ProcessStartInfo ( ) ; psi . FileName = CODE_STRING ; psi . WorkingDirectory = IO . Path . GetDirectoryName ( psi . FileName ) ; Diagnostics . Process . Start ( psi ) ; <EOF>
IEnumerable < T > <EOF>
var ret = DoDragDrop ( . . . ) ; if ( ret == DragDropEffects . None ) else <EOF>
JArray jsonarray = JArray . Parse ( CODE_STRING ) ; var dict = ( JArray ) JsonConvert . DeserializeObject ( Convert . ToString ( jsonarray ) ) ; foreach ( var obj in dict [ CODE_INTEGER ] ) { Debug . WriteLine ( obj [ CODE_STRING ] ) ; } <EOF>
TextRange tr = new TextRange ( position , nextPosition ) ; var Br = new SolidColorBrush ( Color . FromScRgb ( alpha , CODE_REAL , CODE_REAL , CODE_REAL ) ) ; tr . ApplyPropertyValue ( TextElement . BackgroundProperty , Br ) ; <EOF>
foreach ( DataPoint pt in calCheckChart . Series [ CODE_INTEGER ] . Points ) { pt . MarkerStyle = MarkerStyle . None ; if ( pt . XValue > calCheckChart . ChartAreas [ CODE_INTEGER ] . CursorX . Position - CODE_REAL && pt . XValue < calCheckChart . ChartAreas [ CODE_INTEGER ] . CursorX . Position + CODE_REAL ) { pt . MarkerStyle = MarkerStyle . Circle ; pt . MarkerSize = CODE_INTEGER ; } } <EOF>
foreach ( byte b in System . Text . Encoding . UTF8 . GetBytes ( str . ToCharArray ( ) ) ) Console . Write ( b . ToString ( ) ) ; <EOF>
public class IntConverter : IValueConverter { public object Convert ( object value , Type targetType , object parameter , CultureInfo culture ) { if ( value is int ? ) { int ? intValue = ( int ? ) value ; if ( intValue . HasValue ) { return intValue . Value . ToString ( ) ; } } return Binding . DoNothing ; } public object ConvertBack ( object value , Type targetType , object parameter , CultureInfo culture ) { if ( value is string ) { int number ; if ( Int32 . TryParse ( ( string ) value , out number ) ) { return number ; } } return null ; } } <EOF>
StringWriter output = new StringWriter ( new StringBuilder ( ) ) ; XmlSerializer s = new XmlSerializer ( this . GetType ( ) ) ; s . Serialize ( output , this ) ; var result = output . ToString ( ) <EOF>
const string refString = CODE_STRING ; string aLine = CODE_STRING ; string orderNumb = aLine . Substring ( aLine . LastIndexOf ( refString ) + refString . Length ) . Trim ( ) ; <EOF>
#pragma strict public var myText : GameObject ; function Start ( ) { yield WaitForSeconds ( CODE_INTEGER ) ; myText . SetActive ( true ) ; yield WaitForSeconds ( CODE_INTEGER ) ; myText . SetActive ( false ) ; } <EOF>
using ( SqlConnection cn = new SqlConnection ( CODE_STRING ) ) { cn . Open ( ) ; SqlCommand cmd = new SqlCommand ( CODE_STRING , cn ) ; XmlReader xmlr = cmd . ExecuteXmlReader ( ) ; xmlr . Read ( ) ; while ( xmlr . ReadState != ReadState . EndOfFile ) { Console . WriteLine ( xmlr . ReadOuterXml ( ) ) ; } } <EOF>
using ( var stream = new StreamReader ( File . Open ( _file , FileMode . Open , FileAccess . Read , FileShare . ReadWrite ) ) ) { string str = stream . ReadToEnd ( ) ; int x = str . LastIndexOf ( ' ' ) ; string lastline = str . Substring ( x + CODE_INTEGER ) ; } <EOF>
var queryResult = from records in container . tableWhatever where records . Time >= DateTime . Today group records by tableWhatever . tableHeader . UserId into userRecords select new { UserID = userRecords . Key , Records = userRecords . OrderByDescending ( u = > u . Time ) } ; <EOF>
routes . MapRoute ( name : CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING , id = UrlParameter . Optional , bidId = UrlParameter . Optional } ) ; routes . MapRoute ( name : CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING , id = UrlParameter . Optional , templateId = UrlParameter . Optional } ) ; routes . MapRoute ( name : CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING , id = UrlParameter . Optional } ) ; <EOF>
Application app = new Application ( ) ; byte [ ] wordContent = GetBytesInSomeWay ( ) ; var tmpFile = Path . GetTempFileName ( ) ; var tmpFileStream = File . OpenWrite ( tmpFile ) ; tmpFileStream . Write ( wordContent , CODE_INTEGER , wordContent . Length ) ; tmpFileStream . Close ( ) ; app . Documents . Open ( tmpFile ) ; <EOF>
( from r in db . Restaurants where r . Restaurant_Name . StartsWith ( restName ) && r . any ( c = > test . contains ( r . Restaurant_Name ) ) select r . Restaurant_Name ) . Take ( matchingCount ) . toList ( ) ; <EOF>
void ( ) { var testWasTrue = false ; foreach ( ) { if ( ) { testWasTrue = true ; break ; } } if ( ! testWasTrue ) { } } <EOF>
string [ ] splits = Regex . Split ( txtfile , CODE_STRING ) ; <EOF>
new NHibernate . Tool . hbm2ddl . SchemaExport ( NHibernateConfiguration ) . Create ( false , true ) ; <EOF>
internal class Program { private static void Main ( string [ ] args ) { var c = Activator . CreateInstance ( typeof ( MyClass ) ) ; IMyClass iface = c . ActLike < IMyClass > ( ) ; iface . method1 ( ) ; Console . ReadKey ( ) ; } } public class MyClass { public void method1 ( ) { Console . WriteLine ( CODE_STRING ) ; } public void method2 ( ) { Console . WriteLine ( CODE_STRING ) ; } } public interface IMyClass { void method1 ( ) ; void method2 ( ) ; } <EOF>
using System ; using System . Linq ; using DocumentFormat . OpenXml . Packaging ; using DocumentFormat . OpenXml . Drawing ; namespace OpenXmlGetPowerpointTextInfo { class Program { static void Main ( string [ ] args ) { using ( PresentationDocument myPres = PresentationDocument . Open ( CODE_STRING , true ) ) { PresentationPart presPart = myPres . PresentationPart ; SlidePart [ ] slidePartList = presPart . SlideParts . ToArray ( ) ; foreach ( SlidePart part in slidePartList ) { RunProperties [ ] runProList = part . Slide . Descendants < RunProperties > ( ) . ToArray ( ) ; foreach ( RunProperties r in runProList ) { Console . WriteLine ( r . FontSize . Value ) ; } } } } } } <EOF>
var chart = new Highcharts . Chart ( { chart : { renderTo : ' container ' } , xAxis : { categories : [ ' CODE_INTEGER / CODE_INTEGER / CODE_INTEGER ' , ' CODE_INTEGER / CODE_INTEGER / CODE_INTEGER ' , ' CODE_INTEGER / CODE_INTEGER / CODE_INTEGER ' , ' CODE_INTEGER / CODE_INTEGER / CODE_INTEGER ' , ' CODE_INTEGER / CODE_INTEGER / CODE_INTEGER ' , ' CODE_INTEGER / CODE_INTEGER / CODE_INTEGER ' ] , labels : { formatter : function ( ) { var index = this . axis . categories . indexOf ( this . value ) ; var points = this . axis . series [ CODE_INTEGER ] . options . data ; return points [ index ] ; } } } , series : [ { data : [ CODE_REAL , CODE_REAL , CODE_REAL , CODE_REAL , CODE_REAL , CODE_REAL ] } ] } ) ; <EOF>
db . getCollection ( ' CODE_INTEGER ' ) . find ( ) ; <EOF>
using System . ServiceProcess ; ServiceController ctl = ServiceController . GetServices ( ) . FirstOrDefault ( s = > s . ServiceName == CODE_STRING ) ; if ( ctl == null ) Console . WriteLine ( CODE_STRING ) ; else Console . WriteLine ( ctl . Status ) ; <EOF>
public int TransactionSubcategoryId { get ; set ; } public int OwnerMemberId { get ; set ; } <EOF>
System . Diagnostics . Process . Start ( CODE_STRING , CODE_STRING ) <EOF>
PdfAppearance ap = newPage . CreateAppearance ( rect . Width , rect . Height ) ; annot . SetAppearance ( PdfAnnotation . APPEARANCE_NORMAL , ap ) ; annot . SetPage ( ) ; stamper . AddAnnotation ( annot , i ) ; sd . Dispose ( ) ; sd . Close ( ) ; <EOF>
if ( e . InnerException is DirectoryServicesCOMException ) { DirectoryServicesCOMException innerException = ( DirectoryServicesCOMException ) e . InnerException ; } <EOF>
var methods = typeof ( MyClass ) . GetMethods ( BindingFlags . Public ) ; foreach ( var method in methods ) { var attributes = method . GetCustomAttributes ( typeof ( MyAttribute ) , true ) ; if ( attributes != null && attributes . Length > CODE_INTEGER ) } <EOF>
using ( XmlWriter writer = XmlWriter . Create ( CODE_STRING ) ) { writer . WriteStartElement ( CODE_STRING ) ; writer . WriteStartElement ( CODE_STRING ) ; writer . WriteStartElement ( CODE_STRING ) ; writer . WriteString ( CODE_STRING ) ; writer . WriteEndElement ( ) ; writer . WriteStartElement ( CODE_STRING ) ; writer . WriteString ( CODE_STRING ) ; writer . WriteEndElement ( ) ; writer . WriteEndElement ( ) ; writer . WriteStartElement ( CODE_STRING ) ; writer . WriteStartElement ( CODE_STRING ) ; writer . WriteString ( CODE_STRING ) ; writer . WriteEndElement ( ) ; writer . WriteEndElement ( ) ; writer . WriteEndElement ( ) ; } <EOF>
var numbers = Enumerable . Range ( CODE_INTEGER , ( int ) ( CODE_INTEGER * ( Math . Log ( CODE_INTEGER ) + Math . Log ( System . Math . Log ( CODE_INTEGER ) ) - CODE_REAL ) ) ) . AsParallel ( ) . WithDegreeOfParallelism ( Environment . ProcessorCount ) . WithExecutionMode ( ParallelExecutionMode . ForceParallelism ) . WithMergeOptions ( ParallelMergeOptions . NotBuffered ) . Where ( x = > Enumerable . Range ( CODE_INTEGER , x - CODE_INTEGER ) . All ( y = > x % y != CODE_INTEGER ) ) . TakeWhile ( ( n , index ) = > index < CODE_INTEGER ) ; string result = String . Join ( CODE_STRING , numbers . OrderBy ( n = > n ) ) ; <EOF>
Certificate [ CODE_INTEGER ] . Thumbprint <EOF>
public IObservable < object > BindingList { get { return ( IObservable < object > ) base . GetValue ( BindingListProperty ) ; } set { base . SetValue ( BindingListProperty , value ) ; } } public static DependencyProperty BindingListProperty = DependencyProperty . Register ( CODE_STRING , typeof ( IObservable < object > ) , typeof ( CustomControl ) , new PropertyMetadata ( null ) ) ; <EOF>
BluetoothAddress addr = . . . Guid serviceClass ; serviceClass = BluetoothService . SerialPort ; var ep = new BluetoothEndPoint ( addr , serviceClass ) ; var cli = new BluetoothClient ( ) ; cli . Connect ( ep ) ; Stream peerStream = cli . GetStream ( ) ; peerStream . Write . . . <EOF>
static void Main ( string [ ] args ) { DB db = new DB ( ) ; DataTable dtServers = db . GetDataTable ( CODE_STRING ) ; string htmlCode ; var json = CODE_STRING ; using ( var webClient = new System . Net . WebClient ( ) ) { json = webClient . DownloadString ( CODE_STRING ) ; } RootObject myData = JsonConvert . DeserializeObject ( json , typeof ( RootObject ) ) as RootObject ; foreach ( var availability in myData . availability ) { } String x = CODE_STRING ; } public class Zone { public string availability { get ; set ; } public string zone { get ; set ; } } public class Availability { public string reference { get ; set ; } public Zone [ ] zones { get ; set ; } } public class RootObject { public Availability [ ] availability { get ; set ; } } <EOF>
Table tbl = new Table ( ) ; int columnsToAdd = CODE_INTEGER ; for ( int x = CODE_INTEGER ; x < columnsToAdd ; x ++ ) tbl . Columns . Add ( new TableColumn ( ) ) ; int columns = tbl . Columns . Count ; <EOF>
public class PaymentSection : ConfigurationSection { [ ConfigurationProperty ( CODE_STRING ) ] ] public String name { get { return this [ CODE_STRING ] ; } set { this [ CODE_STRING ] = value ; } } } <EOF>
var a = Directory . GetFiles ( path ) . OrderBy ( p = > Regex . Replace ( p , CODE_STRING , CODE_STRING ) ) <EOF>
var xmlItem = root . SelectSingleNode ( CODE_STRING ) ; <EOF>
var cleanString = new string ( dirtyString . Where ( Char . IsLetter ) . ToArray ( ) ) ; <EOF>
if ( info . Trim ( ) != String . Empty ) { string [ ] words = info . Split ( CODE_CHAR ) ; if ( words . Length == CODE_INTEGER ) { name = words [ CODE_INTEGER ] . Trim ( ) ; date = words [ CODE_INTEGER ] . Trim ( ) ; place = words [ CODE_INTEGER ] ; blood = words [ CODE_INTEGER ] ; num = words [ CODE_INTEGER ] ; address = words [ CODE_INTEGER ] ; } string cmdText = CODE_STRING + CODE_STRING + CODE_STRING ; using ( OleDbConnection cn = GetConnection ( ) ) { using ( OleDbCommand cmd = new OleDbCommand ( cmdText , cn ) ) { cmd . Parameters . AddWithValue ( CODE_STRING , name ) ; cmd . Parameters . AddWithValue ( CODE_STRING , date ) ; cmd . Parameters . AddWithValue ( CODE_STRING , place ) ; cmd . Parameters . AddWithValue ( CODE_STRING , blood ) ; cmd . Parameters . AddWithValue ( CODE_STRING , num ) ; cmd . Parameters . AddWithValue ( CODE_STRING , address ) ; cmd . ExecuteNonQuery ( ) ; } } } <EOF>
Uri address = OperationContext . Current . IncomingMessageHeaders . To ; <EOF>
List < int > customerIds = customerList . Select ( c = > c . Id ) . Distinct ( ) . ToList ( ) ; <EOF>
CREATE PROCEDURE Test @startdate DATETIME , @enddate DATETIME , @Userid INT , @Registerid INT AS BEGIN SELECT Count ( * ) FROM leave WHERE ( ( UserID = @userid ) AND ( ( @startdate BETWEEN StartDate AND EndDate ) AND ( @Registerid < > Registerid ) OR ( @enddate BETWEEN StartDate AND EndDate ) OR ( ( @startdate <= Startdate AND @enddate >= EndDate ) ) ) ) ; END <EOF>
foreach ( GridViewRow row in GridView1 . Rows ) { if ( row . RowType == DataControlRowType . DataRow ) { TextBox txtbx = row . FindControl ( CODE_STRING ) as TextBox ; } } <EOF>
System . IO . DirectoryInfo dir = new System . IO . DirectoryInfo ( CODE_STRING ) ; if ( dir . Exists ) dir . Delete ( true ) ; <EOF>
dataGridBasket . InvalidateRow ( row . Index ) <EOF>
public class CustomLabel : Label { public CustomLabel ( ) { } protected override void OnPaint ( PaintEventArgs e ) { e . Graphics . DrawString ( Text , Font , new SolidBrush ( ForeColor ) , CODE_INTEGER , CODE_INTEGER ) ; } } <EOF>
using Microsoft . VisualBasic ; private void button1_Click ( object sender , EventArgs e ) { string inputText = textBox1 . Text ; string singleByteString = Strings . StrConv ( inputText , VbStrConv . Narrow , CODE_INTEGER ) ; textBox2 . Text = singleByteString ; textBox3 . Text = inputText ; } <EOF>
photos / puppy . jpg ? AWSAccessKeyId = CODE_INTEGER PN5J17HBGZHT7JJ3X82 & Signature = rucSbH0yNEcP9oM2XNlouVI3BH4 % CODE_REAL & Expires = CODE_INTEGER <EOF>
var users = context . Messages . Where ( m = > m . Code == CODE_STRING ) . GroupBy ( m = > m . User ) . Where ( m = > m . All ( x = > x . Replied == false ) ) . Select ( p = > p . Key ) ; <EOF>
from a in ( from d in AllowanceDomains _ from t in AllowanceTypes _ where ( new integer ( ) { CODE_INTEGER , CODE_INTEGER } ) . contains ( t . AllowanceTypeID ) and t . active = true and d . active = true _ select t . allowancetypeid , tdescen = t . descen , d . allowancedomainid , ddescen = d . descen ) _ group join qqq in AllowanceQties on new with { . k1 = a . allowancetypeid , . k2 = a . allowancedomainid , . k3 = CODE_INTEGER } equals _ new with { . k1 = qqq . allowancetypeid , . k2 = qqq . allowancedomainid , . k3 = qqq . allowanceid } into qq = group _ from q in qq . DefaultIfEmpty _ join u in units on if ( object . equals ( q . unitid , nothing ) , CODE_INTEGER , q . unitid ) equals u . unitid _ select AllowanceID = if ( object . equals ( q . AllowanceID , nothing ) , CODE_INTEGER , q . AllowanceID ) , a . tdescen , a . ddescen , qty = if ( object . equals ( q . qty , nothing ) , CODE_INTEGER , q . qty ) , u . descen <EOF>
var assemblyName = CODE_STRING ; var assembly = AppDomain . CurrentDomain . GetAssemblies ( ) . FirstOrDefault ( a = > a . GetName ( ) . Name == assemblyName ) ; var attr = assembly . GetCustomAttributes ( false ) . OfType < GuidAttribute > ( ) . FirstOrDefault ( ) ; var guid = attr . Value ; <EOF>
[ - \ d . ] * , \ [ [ - \ d . ] * , [ - \ d . ] * , [ - \ d . ] * , [ - \ d . ] * , [ - \ d . ] * ] , \ [ [ - \ d . ] * , [ - \ d . ] * ] <EOF>
var groupedData = from DataRow row in dt . Rows let specimen = row [ CODE_STRING ] . ToString ( ) let batch = row [ CODE_STRING ] . ToString ( ) let position = row [ CODE_STRING ] . ToString ( ) group new { specimen , position } by batch ; foreach ( var dataGroup in groupedData ) { string fileName = string . Format ( CODE_STRING , dataGroup . Key ) ; using ( StreamWriter writer = new StreamWriter ( fileName ) ) { foreach ( var item in dataGroup ) { writer . WriteLine ( CODE_STRING , item . specimen , item . position ) ; } } } <EOF>
var filtered = HourList . GroupBy ( h = > h . id ) . Select ( g = > new { Id = g . Key , Hours = g . Sum ( h = > h . Hours ) } ) . Where ( h = > h . Hours >= CODE_INTEGER ) ; <EOF>
public class myCustomTextBox : TextBox { protected override void WndProc ( ref Message m ) { if ( m . Msg == CODE_INTEGER ) { string clipBoardData = Clipboard . GetDataObject ( ) . GetData ( DataFormats . Text ) . ToString ( ) ; handlePasteEvent ( clipBoardData ) ; } else { base . WndProc ( ref m ) ; } } private void handlePasteEvent ( string pasteData ) { } } <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( ! IsPostBack ) { this . DataBind ( ) ; } } protected void MyButton_Click ( object sender , EventArgs e ) { this . DataBind ( ) ; } public override void DataBind ( ) { } <EOF>
DateTime start = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; DateTime end = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; var dates = from year in Enumerable . Range ( start . Year , end . Year - start . Year + CODE_INTEGER ) let yearStart = new DateTime ( year , CODE_INTEGER , CODE_INTEGER ) let yearEnd = new DateTime ( year , CODE_INTEGER , CODE_INTEGER ) select Tuple . Create ( start > yearStart ? start : yearStart , end < yearEnd ? end : yearEnd ) ; IList < Tuple < DateTime , DateTime > > result = dates . ToList ( ) ; <EOF>
using System ; public class Test { static void Main ( ) { Console . WriteLine ( SameDayLastYear ( DateTime . Today ) ) ; Console . WriteLine ( SameDayLastYear ( new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ) ; } static DateTime SameDayLastYear ( DateTime original ) { DateTime sameDate = original . AddYears ( - CODE_INTEGER ) ; int daysDiff = original . DayOfWeek - sameDate . DayOfWeek ; return sameDate . AddDays ( daysDiff ) ; } } <EOF>
BEGIN TRANSACTION INSERT INTO members ( id , firstname , etc . ) VALUES ( tbMemberID . text , tbFirstName . text , etc ) INSERT INTO fees ( id , amount , etc . ) VALUES ( tbFeeID . text , tbAmount . text , etc ) INSERT INTO schedule ( id , session ) VALUES ( tbScheduleID . text , tbSession . text ) COMMIT TRANSACTION GO <EOF>
string inputMessage = CODE_STRING ; MatchCollection matches = Regex . Matches ( inputMessage , CODE_STRING ) ; foreach ( Match match in matches ) { string textformat = match . Groups [ CODE_INTEGER ] . Value ; string enclosedstring = match . Value ; } <EOF>
using System ; using Microsoft . Win32 ; namespace RegistryTestApp { class Program { static void Main ( string [ ] args ) { object mailClient = Registry . GetValue ( CODE_STRING , CODE_STRING , CODE_STRING ) ; Console . WriteLine ( mailClient . ToString ( ) ) ; } } } <EOF>
HasMany ( x = > x . EventCodes ) . Table ( CODE_STRING ) . KeyColumn ( CODE_STRING ) . Element ( CODE_STRING ) . AsSet ( ) . ReadOnly ( ) ; <EOF>
dgv . DataSource = ds ; dgv . DataBind ( ) ; combobox1 . ValueMember = CODE_STRING ; combobox1 . DisplayMember = CODE_STRING ; combobox1 . DataSource = ds ; combobox1 . DataBind ( ) ; <EOF>
protected override void OnInvoke ( ScheduledTask task ) { Deployment . Current . Dispatcher . BeginInvoke ( async ( ) = > { await DataLib . DataLib . Daten ( ) ; NotifyComplete ( ) ; } ) ; } <EOF>
public string SignalName { get { return _signalName ; } set { _signalName = value ; OnPropertyChanged ( CODE_STRING ) ; } } public string SignalValue { get { return _signalValue ; } set { _signalValue = value ; OnPropertyChanged ( CODE_STRING ) ; } } <EOF>
string height = CODE_STRING ; Regex r = new Regex ( CODE_STRING ) ; Match m = r . Match ( height ) ; if ( m . Success ) { ' Yes ! } <EOF>
" data source = sahil - pc \ sqlexpress ; database = abadakDb ; Integrated Security = true CODE_STRING System . Data . SqlClient " <EOF>
foreach ( string batch in Regex . Split ( script , " ^ GO \ " , RegexOptions . IgnoreCase | RegexOptions . Multiline ) ) { yield return batch ; } <EOF>
double value = double . Parse ( str ) ; Console . WriteLine ( value . ToString ( CODE_STRING ) ) ; <EOF>
List < string > result = new List < string > ( ) ; DateTime startDate = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; DateTime endDate = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; DateTime temp = startDate ; endDate = new DateTime ( endDate . Year , endDate . Month , DateTime . DaysInMonth ( endDate . Year , endDate . Month ) ) ; while ( temp <= endDate ) { Console . WriteLine ( ( string . Format ( CODE_STRING , temp . Month , temp . Year ) ) ; temp = temp . AddMonth ( CODE_INTEGER ) ; } <EOF>
[ ServiceContract ] IDestinationHelper { [ OperationContract ] IEnumerable < Waypoint > ReachDestination ( string transportationMode ) ; [ OperationContract ] IEnumerable < string > GetAvailabletransportationModes ( ) ; } IDestinationHelperService : IDestinationHelper { public IEnumerable < Waypoint > ReachDestination ( string transportationMode ) { } public IEnumerable < string > GetAvailabletransportationModes ( ) { } } <EOF>
DataTable dt = new DataTable ( ) ; dt . Columns . Add ( CODE_STRING ) ; dt . Columns . Add ( CODE_STRING ) ; int i = CODE_INTEGER ; while ( i < CODE_INTEGER ) { DataRow dr = dt . NewRow ( ) ; dr [ CODE_STRING ] = CODE_STRING ; dr [ CODE_STRING ] = CODE_STRING ; dt . Rows . Add ( dr ) ; i ++ ; } MyGrid . DataSource = dt ; MyGrid . DataBound ( ) ; <EOF>
for ( limit = CODE_INTEGER ; ; ++ limit ) { for ( i0 = CODE_INTEGER ; i0 <= limit ; ++ i0 ) { for ( i1 = CODE_INTEGER ; i1 <= limit - i0 ; ++ i1 ) { for ( i2 = CODE_INTEGER ; i2 <= limit - i0 - i1 , ++ i2 ) { for ( i3 = CODE_INTEGER ; i3 <= limit - i0 - i1 - i2 , ++ i3 ) { int i4 = limit - i0 - i1 - i2 - i3 ; } } } } } } <EOF>
( llat , llong ) -> ( x = llong * cos ( llat ) , y = llong ) <EOF>
[ XmlElement ( CODE_STRING ) ] public List < D > D { get ; set ; } <EOF>
String data = Regex . Match ( CODE_STRING , CODE_STRING , RegexOptions . IgnoreCase ) . Value ; <EOF>
{ var i = PhoneApplicationService . Current . State [ CODE_STRING ] ; iList1 = ( IList ) i ; lstpro . ItemsSource = iList1 ; } <EOF>
ServicePointManager . DefaultConnectionLimit = CODE_INTEGER ; <EOF>
DateTime d ; DateTime . TryParseExact ( target , CODE_STRING , CultureInfo . InvariantCulture , System . Globalization . DateTimeStyles . None , out d ) ; <EOF>
Task . WhenAny <EOF>
private List < string > LoadFirstNames ( string json ) { JObject o = JObject . Parse ( json ) ; List < string > firstNames = new List < string > ( ) ; foreach ( var token in o . GetPropertyValues ( ) ) { FindFirstName ( token , firstNames ) ; } return firstNames ; } private void FindFirstName ( JToken currentProperty , List < string > firstNamesCollection ) { if ( currentProperty == null ) { return ; } if ( currentProperty [ CODE_STRING ] != null ) { firstNamesCollection . Add ( currentProperty [ CODE_STRING ] ) ; } foreach ( var token into currentProperty . Values ( ) ) { FindFirstName ( token , firstNamesCollection ) ; } } <EOF>
DataSet . Tables [ CODE_INTEGER ] . Copy ( ) <EOF>
private void chkBuried_CheckedChanged ( object sender , EventArgs e ) { chkAboveGround . Checked = ! chkBuried . Checked ; } private void chkAboveGround_CheckedChanged ( object sender , EventArgs e ) { chkBuried . Checked = ! chkAboveGround . Checked ; } <EOF>
AgentsNotselected = AvaliableAgents . Where ( a = > ! AvailableAgentSelected . Contains ( a . Value ) ) ; <EOF>
using System . Collections . Generic ; using System . ComponentModel . DataAnnotations ; using System . Threading . Tasks ; using System . Web . Mvc ; namespace Checked . Entitites { public class BooleanRequiredAttribute : ValidationAttribute , IClientValidatable { public override bool IsValid ( object value ) { return value != null && ( bool ) value == true ; } public IEnumerable < ModelClientValidationRule > GetClientValidationRules ( ModelMetadata metadata , ControllerContext context ) { yield return new ModelClientValidationRule ( ) { ValidationType = CODE_STRING , ErrorMessage = this . ErrorMessageString } ; } } } <EOF>
foreach ( string id in list ) { var item = myitemcollection . Where ( x = > x . id == id ) ; myitemcollection . Remove ( item ) ; } <EOF>
CallMethod ( ( ) = > Foo ( ) ) ; . . . public void Foo ( bool x = true ) { . . . } public void CallMethod ( Action action ) { . . . } <EOF>
public Counter < T > GetCounter < T > ( string columnName ) { if ( columnName == CODE_STRING ) return new Counter < T > ( this . _table . IDs ) ; else if ( columnName == CODE_STRING ) return new Counter < T > ( this . _table . Names ) ; } <EOF>
[ XmlElement ( CODE_STRING ) ] public list < string > _AttributesCustomList ; [ CategoryAttribute ( CODE_STRING ) , ReadOnly ( false ) , Description ( CODE_STRING ) ] [ RulesCriteria ( CODE_STRING ) ] public list < string > AttributesCustomList { get { return _AttributesCustomList ; } set { _AttributesCustomList = value ; } } <EOF>
string sOut = Encoding . ASCII . GetString ( Encoding . ASCII . GetBytes ( s ) ) <EOF>
FileInfo logfileInfo = new FileInfo ( Path . GetDirectoryName ( Assembly . GetExecutingAssembly ( ) . GetName ( ) . CodeBase ) + CODE_STRING ) ; <EOF>
Sub ChangeColor Options . DefaultHighlightColorIndex = wdBrightGreen Selection . Find . ClearFormatting Selection . Find . Highlight = True Selection . Find . Replacement . ClearFormatting Selection . Find . Replacement . Highlight = True Selection . Find . Execute Replace : = wdReplaceAll Selection . Find . ClearFormatting Selection . Find . Font . Color = wdColorBrightGreen Selection . Find . Replacement . ClearFormatting Selection . Find . Replacement . Font . Color = wdColorRed With Selection . Find . Text = CODE_STRING . Replacement . Text = CODE_STRING . Forward = True . Wrap = wdFindContinue End With Selection . Find . Execute Replace : = wdReplaceAll End Sub <EOF>
[ XmlIgnore ] public int [ , , ] Data { get ; set ; } [ XmlElement ( CODE_STRING ) , Browsable ( false ) ] [ EditorBrowsable ( EditorBrowsableState . Never ) ] public int [ ] DataDto { get { /* flatten from Data */ } set { /* expand into Data */ } } <EOF>
private void listBox1_SelectedIndexChanged ( object sender , EventArgs e ) { if ( listBox2 . Items . Count >= listBox1 . SelectedIndex + CODE_INTEGER ) { listBox2 . SelectedIndex = listBox1 . SelectedIndex ; } } private void listBox2_SelectedIndexChanged ( object sender , EventArgs e ) { if ( listBox1 . Items . Count >= listBox2 . SelectedIndex + CODE_INTEGER ) { listBox1 . SelectedIndex = listBox2 . SelectedIndex ; } } <EOF>
drop table table1 ; create table table1 as select * from table2 ; <EOF>
Process [ ] processes = Process . GetProcessesByName ( processName ) ; foreach ( Process process in processes ) { process . Kill ( ) ; } <EOF>
if ( selectedCellRow != null ) { DataGridCellsPresenter presenter = GetVisualChild < DataGridCellsPresenter > ( selectedCellRow ) ; DataGridCell cell = ( DataGridCell ) presenter . ItemContainerGenerator . ContainerFromIndex ( column ) ; if ( cell == null ) { cell = ( DataGridCell ) presenter . ItemContainerGenerator . ContainerFromIndex ( column ) ; } } <EOF>
DateTime d = new DateTime ( year , CODE_INTEGER , CODE_INTEGER ) ; <EOF>
list = list . Select ( m = > m == CODE_STRING ? CODE_STRING : m ) . ToList ( ) ; <EOF>
public class ReportRequest { public DateTime StartTime { get ; set ; } public DateTime EndTime { get ; set ; } public string FileName { get ; set ; } public string UserName { get ; set ; } public string Password { get ; set ; } } <EOF>
public static bool DoesTypeSupportInterface ( Type type , Type inter ) { if ( inter . IsAssignableFrom ( type ) ) return true ; if ( type . GetInterfaces ( ) . Any ( i = > i . IsGenericType && i . GetGenericTypeDefinition ( ) == inter ) ) return true ; return false ; } public static IEnumerable < Type > TypesImplementingInterface ( Type desiredType ) { return AppDomain . CurrentDomain . GetAssemblies ( ) . SelectMany ( assembly = > assembly . GetTypes ( ) ) . Where ( type = > DoesTypeSupportInterface ( type , desiredType ) ) ; } <EOF>
List < FileHierarchy > mylist = GetList ( ) ; var selected = mylist . Where ( s = > s . NeedsShowing . HasValue && s . NeedsShowing . Value ) ; var children = mylist . Where ( c = > c . ParentID . HasValue && selected . Select ( s = > s . ID ) . Contains ( c . ParentID . Value ) ) ; var unselected = mylist . Except ( selected ) ; while ( children . Any ( ) ) { unselected = unselected . Except ( children ) ; var childChild = unselected . Where ( c = > c . ParentID . HasValue && children . Select ( s = > s . ID ) . Contains ( c . ParentID . Value ) ) ; selected = selected . Union ( children ) ; children = childChild ; } <EOF>
Map = locations = > from l in locations select new { _ = SpatialIndex . Generate ( l . Geo . Lat , l . Geo . Lon ) , AvgRating = l . Reviews . Average ( r = > r . Rating ) } ; <EOF>
static void Main ( ) { Process setupProcess = new Process ( ) ; string msiFilePath = CODE_STRING ; string targetDir = CODE_STRING ; setupProcess . StartInfo . FileName = CODE_STRING + msiFilePath + CODE_STRING + targetDir + CODE_STRING ; setupProcess . StartInfo . UseShellExecute = false ; setupProcess . Start ( ) ; } <EOF>
Regex test = new Regex ( CODE_STRING ) ; foreach ( string input in . . . ) { Match match = test . Match ( input ) ; if ( match . Success ) { string team = match . Groups [ CODE_STRING ] . Value ; string name = match . Groups [ CODE_STRING ] . Value ; } } <EOF>
string newValue = CODE_STRING ; XmlDocument doc ; var paths = new [ ] { CODE_STRING , CODE_STRING } ; paths . ToList ( ) . ForEach ( path = > { doc = new XmlDocument ( ) ; doc . Load ( path ) ; var nm = new XmlNamespaceManager ( doc . NameTable ) ; var a = doc . SelectSingleNode ( CODE_STRING , nm ) ; a . InnerText = newValue ; doc . Save ( path ) ; } ) ; <EOF>
public void AddPictureBox ( int x , int y ) { try { PictureBox _picBox = new PictureBox ( ) ; _picBox . Size = new Size ( CODE_INTEGER , CODE_INTEGER ) ; _picBox . SizeMode = PictureBoxSizeMode . StretchImage ; _picBox . BackColor = Color . Black ; _picBox . Location = new Point ( x , y ) ; _displayedImage . Add ( _picBox ) ; return _picBox ; } catch ( Exception e ) { Trace . WriteLine ( e . Message ) ; return null ; } } private void MouseDown ( object sender , MouseEventArgs e ) { if ( e . Button == MouseButtons . Left ) { PictureBox pic = _testImage . AddPictureBox ( e . X , e . Y ) ; if ( pic != null ) { this . Controls . Add ( pic ) ; Trace . WriteLine ( CODE_STRING ) ; } } Trace . WriteLine ( CODE_STRING ) ; } <EOF>
private void dateTimePicker1_KeyDown ( object sender , KeyEventArgs e ) { if ( e . KeyCode == Keys . Delete || e . KeyCode == Keys . Back ) { dateTimePicker1 . Format = DateTimePickerFormat . Custom ; dateTimePicker1 . CustomFormat = CODE_STRING ; } } private void dateTimePicker1_ValueChanged ( object sender , EventArgs e ) { dateTimePicker1 . Format = DateTimePickerFormat . Long ; } <EOF>
name . Age = CODE_INTEGER ; names [ i ] . Age = CODE_INTEGER ; <EOF>
else if ( state . IsKeyDown ( Keys . H ) ) { if ( ! help . Visible ) help . ShowDialog ( ) ; } <EOF>
comboBox . DataSource = new BindingSource ( list1 , null ) ; <EOF>
[ assembly : AssemblyVersion ( CODE_STRING ) ] <EOF>
SortedList < string , bool > l = new SortedList < string , bool > ( ) ; l . Add ( CODE_STRING , true ) ; l . Add ( CODE_STRING , false ) ; l . Add ( CODE_STRING , true ) ; l . Add ( CODE_STRING , false ) ; var orderByVal = l . OrderBy ( kvp = > kvp . Value ) ; <EOF>
Date d = new Date ( dt ) ; <EOF>
var result = listToPermutate . Permutations ( ) ; <EOF>
result = indexA < indexB ? Min ( indexA , indexC ) : Min ( indexB , indexC ) ; <EOF>
EnableDoubleBuffer ( myListVeiew ) ; <EOF>
INSERT INTO employee ( name , path ) SELECT ' sarju CODE_CHAR ~ / images / ' + CAST ( IDENT_CURRENT ( ' employee ' ) AS VARCHAR ( CODE_INTEGER ) ) + ' . jpg ' <EOF>
wspkcs11d . dll <EOF>
Canvas . SetLeft ( MousePos_Ellipse , MousePos_Point . X ) ; Canvas . SetTop ( MousePos_Ellipse , MousePos_Point . Y ) ; <EOF>
public class DataStore { private UnderlyingDataStore dataQueue = new UnderlyingDataStore ( ) ; public void addData ( object data ) { dataQueue . Add ( data ) ; } public object getLastData ( ) { dataQueue . getLastData ( ) ; } } <EOF>
var result = new { PWs = PWs , Files = Files } ; return Json ( result , JsonRequestBehavior . AllowGet ) ; <EOF>
protected void Page_PreRender ( object sender , EventArgs e ) { Label lblCreateDate = ( ( Label ) gvMainView . FooterRow . FindControl ( CODE_STRING ) ) . Text ; lblCreateDate . Text = AutoDate ; Label lblWebsite = ( ( Label ) gvMainView . FooterRow . FindControl ( CODE_STRING ) ) . Text ; lblWebsite . Text = Website ; } <EOF>
[ EmployeeField ] -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - EmployeeID EmployeeFieldName EmployeeFieldValue <EOF>
var res = Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) . Where ( n = > n % CODE_INTEGER == CODE_INTEGER ) ; <EOF>
private void Form1_Click ( object sender , EventArgs e ) { var p = PointToClient ( Cursor . Position ) ; var c = GetChildAtPoint ( p ) ; if ( c != null && c . Enabled == false ) System . Media . SystemSounds . Beep . Play ( ) ; } <EOF>
if ( ! IsPostback ) { this . TextBox1 . Text = FirstDayOfMonthDateTime . ToString ( dd / MM / yyyy ) ; this . TextBox2 . Text = LastDayOfPreviousMonthDateTime . ToString ( dd / MM / yyyy ) ; } <EOF>
var q = new Queue < string > ( new [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ) ; <EOF>
class CookieAwareWebClient : WebClient { public CookieContainer Cookies { get ; private set ; } public CookieAwareWebClient ( ) { Cookies = new CookieContainer ( ) ; } protected override WebRequest GetWebRequest ( Uri address ) { var request = base . GetWebRequest ( address ) as HttpWebRequest ; if ( request != null ) { request . CookieContainer = Cookies ; return request ; } return null ; } } <EOF>
builder . RegisterControllers ( typeof ( MvcApplication ) . Assembly ) . PropertiesAutowired ( ) ; <EOF>
[ DllImport ( CODE_STRING ) ] public static extern int GdipWindingModeOutline ( HandleRef path , IntPtr matrix , float flatness ) ; void someControl_Paint ( object sender , PaintEventArgs e ) { GraphicsPath path = new GraphicsPath ( ) ; path . AddRectangles ( rectangles . ToArray ( ) ) ; HandleRef handle = new HandleRef ( path , ( IntPtr ) path . GetType ( ) . GetField ( CODE_STRING , BindingFlags . NonPublic | BindingFlags . Instance ) . GetValue ( path ) ) ; GdipWindingModeOutline ( handle , IntPtr . Zero , CODE_REAL ) ; using ( Pen outlinePen = new Pen ( Color . FromArgb ( CODE_INTEGER , Color . Red ) , CODE_INTEGER ) ) { g . DrawPath ( outlinePen , path ) ; } } <EOF>
NumberFormatInfo info = ( NumberFormatInfo ) CultureInfo . InvariantCulture . NumberFormat . Clone ( ) ; info . NumberGroupSeparator = CODE_STRING ; Console . WriteLine ( 12345.ToString ( CODE_STRING , info ) ) ; <EOF>
private void LoadEditorTab ( ) { var editor = new PcmEditorForm ( ) ; var grid = new GridView ( ) ; grid . width = editor . width grid . Anchor = AnchorStyles . Left | AnchorStyles . Top | AnchorStyles . Right ; editor . Controls . Add ( grid ) ; tabEdit . Controls . Clear ( ) ; editor . TopLevel = false ; editor . Visible = true ; editor . dock = DockStyle . Fill ; tabEdit . Controls . Add ( editor ) ; } <EOF>
default ( T ) <EOF>
textBox1 . WordWrap = false ; <EOF>
EventLog . CreateEventSource <EOF>
foreach ( int T in ToolList ) { strToolList . add ( Enum . GetName ( typeof ( Tools ) , ( Tools ) T ) ) ; } <EOF>
var q = xdoc . Root . Attributes ( ) . Where ( x = > x . IsNamespaceDeclaration ) . Select ( x = > new { Prefixes = x . Name . LocalName , ns = x . Value } ) ; <EOF>
using ( FrmModal myForm = new FrmModal ( ) ) { DialogResult dr = myForm . ShowDialog ( ) ; if ( dr == DialogResult . OK ) { } else { } } <EOF>
XDocument xDoc = XDocument . Parse ( utf8Xml ) ; <EOF>
System . Net . WebRequest request = System . Net . WebRequest . Create ( YourURLString ) ; System . Net . WebResponse resp = request . GetResponse ( ) ; System . IO . Stream respStream = resp . GetResponseStream ( ) ; Bitmap bmp = new Bitmap ( respStream ) ; respStream . Dispose ( ) ; picturebox1 . Image = bmp ; <EOF>
-- CUSTOMER -- -- CustomerId -- QUOTE -- -- QuoteId CustomerId Data1Id -- QUOTEREVISION -- -- QuoteRevisionid QuoteId CreatedAt Data2Id Data3Id -- DATA1 -- -- Data1Id -- DATA2 -- -- Data2Id -- DATA3 -- -- Data3Id <EOF>
var orderedEntries = from entry in entries orderby entry . Length , entry select entry ; foreach ( var entry in orderedEntries ) { } <EOF>
var dict = . . . var keys = . . . var result = from key in keys from val in dict [ key ] select val ; <EOF>
DataTable dt = new DataTable ( CODE_STRING ) ; dt . Columns . Add ( CODE_STRING , typeof ( string ) ) ; dt . Columns . Add ( CODE_STRING , typeof ( string ) ) ; myDataGridView . DataSource = dt ; foreach ( SqlParameter parm in cmd . Parameters ) { if ( parm . Direction == ParameterDirection . Output ) { dt . Rows . Add ( new object [ ] { parm . ParameterName , Convert . ToString ( parm . Value ) } ) ; } } <EOF>
const int DaysInPeriod = CODE_INTEGER ; static IEnumerable < DateTime > GetPayPeriodsInRange ( DateTime start , DateTime end , bool isOdd ) { var epoch = isOdd ? new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) : new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; var periodsTilStart = Math . Floor ( ( ( start - epoch ) . TotalDays ) / DaysInPeriod ) ; var next = epoch . AddDays ( periodsTilStart * DaysInPeriod ) ; if ( next < start ) next = next . AddDays ( DaysInPeriod ) ; while ( next <= end ) { yield return next ; next = next . AddDays ( DaysInPeriod ) ; } yield break ; } static DateTime GetPayPeriodStartDate ( DateTime givenDate , bool isOdd ) { var candidatePeriods = GetPayPeriodsInRange ( givenDate . AddDays ( - DaysInPeriod ) , givenDate . AddDays ( DaysInPeriod ) , isOdd ) ; var period = from p in candidatePeriods where ( p <= givenDate ) && ( givenDate < p . AddDays ( DaysInPeriod ) ) select p ; return period . First ( ) ; } <EOF>
dynamic item = cbo . SelectedItem ; String text = item . Text ; Int32 value = item . Value ; <EOF>
path = New Uri ( Assembly . GetExecutingAssembly ( ) . CodeBase ) . LocalPath ; path = IO . Path . GetDirectoryName ( path ) ; <EOF>
private static void Word2003 ( ChartPart importedChartPart , MainDocumentPart mainDocumentPart , Stream fileStream ) { ExternalData ext = new ExternalData { Id = CODE_STRING + CODE_INTEGER } ; AutoUpdate autoUpdate = new AutoUpdate { Val = false } ; ext . Append ( autoUpdate ) ; importedChartPart . ChartSpace . Append ( ext ) ; var fi = new FileInfo ( CODE_STRING ) ; importedChartPart . AddExternalRelationship ( CODE_STRING , new Uri ( fi . Name , UriKind . Relative ) , CODE_STRING ) ; EmbeddedPackagePart embeddedObjectPart = mainDocumentPart . AddEmbeddedPackagePart ( CODE_STRING ) ; Stream copyStream = new MemoryStream ( ) ; fileStream . CopyTo ( copyStream ) ; embeddedObjectPart . FeedData ( copyStream ) ; } <EOF>
int currRow = CODE_INTEGER ; currRow = dataGridView1 . CurrentRow . Index ; dataGridView1 . ClearSelection ( ) ; dataGridView1 . Rows [ currRow ] . Selected = true ; <EOF>
var writer = new BarcodeWriter { Format = BarcodeFormat . PDF_417 , Options = new EncodingOptions { Width = CODE_INTEGER , Height = CODE_INTEGER } } ; var imgBitmap = writer . Write ( value ) ; <EOF>
For Each tInterface As NetworkInterface in NetworkInterface . GetAllNetworkInterfaces ( ) If ( tInterface . Supports ( NetworkInterfaceComponent . IPv4 ) ) Or ( tInterface . Supports ( NetworkInterfaceComponent . IPv6 ) ) Then ' ' Do something with tInterface . GetPhysicalAddress ( ) ' End If Next <EOF>
SPWeb thisWeb = thisSite . RootWeb ; string toField = CODE_STRING ; string subject = CODE_STRING ; string body = CODE_STRING ; HttpContext oldContext = HttpContext . Current ; HttpContext . Current = null ; bool success = SPUtility . SendEmail ( thisWeb , true , true , toField , subject , body ) ; HttpContext . Current = oldContext ; <EOF>
data . AcceptChanges ( ) <EOF>
document . activeElement <EOF>
protected void SendErrorMessageToClient ( string strErrorType , string strErrorMessage , Page page ) { string strMessageToClient = CODE_STRING ; strErrorMessage = strErrorMessage . Replace ( CODE_STRING , CODE_STRING ) ; strMessageToClient = CODE_STRING + strErrorType + " \ \ CODE_STRING ' ) ; < / script > " ; page . ClientScript . RegisterStartupScript ( this . GetType ( ) , CODE_STRING , strMessageToClient ) ; } <EOF>
Uri uri = new Uri ( CODE_STRING + resourceFile , UriKind . Relative ) ; <EOF>
var result = from r in dt . AsEnumerable ( ) join c in dt2 . AsEnumerable ( ) on r . Field < string > ( CODE_STRING ) equals c . Field < string > ( CODE_STRING ) select r ; <EOF>
request = ( HttpWebRequest ) WebRequest . Create ( uri ) ; request . PreAuthenticate = true ; request . Credentials = new NetworkCredential ( user , password ) ; request . Method = WebRequestMethods . Http . Post ; <EOF>
private Point mouseDownPos ; private void dataGridView1_CellMouseDown ( object sender , DataGridViewCellMouseEventArgs e ) { mouseDownPos = e . Location ; } private void dataGridView1_CellMouseMove ( object sender , DataGridViewCellMouseEventArgs e ) { if ( ( e . Button & MouseButtons . Left ) == MouseButtons . Left ) { if ( Math . Abs ( e . X - mouseDownPos . X ) >= SystemInformation . DoubleClickSize . Width || Math . Abs ( e . Y - mouseDownPos . Y ) >= SystemInformation . DoubleClickSize . Height ) { } } } <EOF>
Imports System . ComponentModel Public Class ctlA Private _LabelText As String = CODE_STRING < Localizable ( True ) > Public Property LabelText ( ) As String Get Return _LabelText End Get Set ( ByVal value As String ) _LabelText = value Label1 . Text = value End Set End Property End Class <EOF>
using System ; using System . Collections . Generic ; using System . Net ; using System . IO ; using System . Linq ; using Newtonsoft . Json ; public class Program { public static void Main ( ) { WebClient client = new WebClient ( ) ; using ( Stream stream = client . OpenRead ( CODE_STRING ) ) using ( StreamReader reader = new StreamReader ( stream ) ) { JsonSerializer ser = new JsonSerializer ( ) ; Result result = ser . Deserialize < Result > ( new JsonTextReader ( reader ) ) ; foreach ( Page page in result . query . pages . Values ) Console . WriteLine ( page . extract ) ; } } } public class Result { public Query query { get ; set ; } } public class Query { public Dictionary < string , Page > pages { get ; set ; } } public class Page { public string extract { get ; set ; } } <EOF>
namespace MyCompany . Data . Repositories { public class User { public int Id { get ; set ; } public string Username { get ; set ; } public string Name { get ; set ; } public bool Locked { get ; private set ; } } public class UserRepository { public User GetAll ( ) { } public User GetById ( ) { } } } <EOF>
var data = ( List < YourType ) myComboBox . DataSource ; myComboBox . SelectedIndex = data . FindIndex ( p = > p . Text == CODE_STRING ) ; <EOF>
public abstract class YourClass { public abstract void DoSomething ( int x , int y ) ; public void DoSomethingElse ( int a , string b ) { } } <EOF>
workbook . Save ( HttpContext . Current . Response , CODE_STRING , ContentDisposition . Attachment , new XlsSaveOptions ( SaveFormat . Excel97To2003 ) ) ; <EOF>
int i = CODE_INTEGER ; foreach ( Control ctl in myForm . FindControl ( CODE_STRING ) . Controls ) { if ( ctl is CheckBox ) { if ( ( ( CheckBox ) ctl ) . Checked ) i ++ ; } } <EOF>
Point locationFromWindow = this . textBox . TransformToVisual ( this ) . Transform ( new Point ( CODE_INTEGER , CODE_INTEGER ) ) ; Point point = this . textBox . PointToScreen ( new Point ( CODE_INTEGER , CODE_INTEGER ) ) ; Rect rect = new Rect ( CODE_INTEGER , CODE_INTEGER , SystemParameters . PrimaryScreenWidth , SystemParameters . PrimaryScreenHeight ) ; if ( ! rect . Contains ( point ) ) { } <EOF>
using ( SqlConnection . . . ) { } <EOF>
Action < string ^ , string ^ > ^ <EOF>
var n = ( int ) Math . Sqrt ( pads . Length ) ; int i = CODE_INTEGER , j = CODE_INTEGER , k = CODE_INTEGER ; for ( i = CODE_INTEGER ; i < n ; i ++ ) { k = i ; AnimatePad ( ref beginMs , spd , pads [ k ] , toColor ) ; for ( j = CODE_INTEGER ; j < i ; j ++ ) { k += n - CODE_INTEGER ; AnimatePad ( ref beginMs , spd , pads [ k ] , toColor ) ; } beginMs += interval ; } for ( i = n - CODE_INTEGER ; i >= CODE_INTEGER ; i -- ) { k = ( n - i ) * n - CODE_INTEGER ; AnimatePad ( ref beginMs , spd , pads [ k ] , toColor ) ; for ( j = CODE_INTEGER ; j < i ; j ++ ) { k += n - CODE_INTEGER ; AnimatePad ( ref beginMs , spd , pads [ k ] , toColor ) ; } beginMs += interval ; } <EOF>
public override void SetLength ( long value ) <EOF>
db . Entry ( entidade ) = EntityState . Modified ; db . SaveChanges ( ) ; <EOF>
private void panel1_Paint ( object sender , PaintEventArgs e ) { GraphicsPath path = new GraphicsPath ( ) ; path . AddArc ( CODE_INTEGER , CODE_INTEGER , ( this . Width / CODE_INTEGER ) , ( this . Height / CODE_INTEGER ) , CODE_INTEGER , CODE_INTEGER ) ; path . AddArc ( ( this . Width / CODE_INTEGER ) , CODE_INTEGER , ( this . Width / CODE_INTEGER ) , ( this . Height / CODE_INTEGER ) , CODE_INTEGER , CODE_INTEGER ) ; path . AddLine ( ( this . Width / CODE_INTEGER ) , this . Height , ( this . Width / CODE_INTEGER ) , this . Height ) ; GraphicsPath path2 = new GraphicsPath ( ) ; path2 . AddRectangle ( new Rectangle ( new Point ( CODE_INTEGER , CODE_INTEGER ) , panel1 . Size ) ) ; path2 . AddPath ( path , false ) ; e . Graphics . FillPath ( Brushes . Black , path2 ) ; } <EOF>
public static int [ ] threeIntegers ( int [ ] numbers ) { int max = CODE_INTEGER int [ ] maxArray = new int [ CODE_INTEGER ] ; for ( int j = CODE_INTEGER ; j < numbers . length - CODE_INTEGER ; ++ j ) { int sum = CODE_INTEGER ; int [ ] newArray = new int [ CODE_INTEGER ] ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { sum += numbers [ i + j ] ; newArray [ i ] = numbers [ i + j ] ; } if ( sum > max ) { max = sum ; maxArray = newArray ; } } return maxArray ; } <EOF>
public class CustomMsSql2008Dialect : MsSql2008Dialect { public override string PrimaryKeyString { get { return CODE_STRING ; } } } <EOF>
countReader = command7 . ExecuteReader ( ) ; string countName = String . Empty ; while ( countReader . Read ( ) ) { countName = countReader [ CODE_STRING ] . ToString ( ) ; } <EOF>
List < List < int > > <EOF>
var credits = from credit in this . test . WorksheetNoHeader ( ) . ToList ( ) join debit in this . test . WorksheetNoHeader ( ) . ToList ( ) on credit [ CODE_INTEGER ] equals debit [ CODE_INTEGER ] where debit [ CODE_INTEGER ] != CODE_STRING where debit [ CODE_INTEGER ] == credit [ CODE_INTEGER ] select credit <EOF>
webBrowser1 . Document . GetElementById ( CODE_STRING ) . PerformClick ( ) ; <EOF>
DataTable _table = new DataTable ( ) DataRow _row = _table . NewRow ( ) _table . Rows . Add ( _row ) <EOF>
objSlide = objSlides [ CODE_INTEGER ] <EOF>
[ XmlRoot ( CODE_STRING ) ] public class TermData { public TermData ( ) { terms = new List < Term > ( ) ; } [ XmlElement ( CODE_STRING ) ] public List < Term > terms { get ; set ; } } public class Term { [ XmlElement ( CODE_STRING ) ] public string id { get ; set ; } [ XmlElement ( CODE_STRING ) ] public string desc { get ; set ; } } <EOF>
XmlNamespaceManager nsmgr = new XmlNamespaceManager ( xdoc . NameTable ) ; nsmgr . AddNamespace ( CODE_STRING , xdoc . DocumentElement . NamespaceURI ) ; XmlNodeList pits = dStr . SelectNodes ( CODE_STRING ) ; <EOF>
List < Fruit > fruits = new List < Fruit > ( ) ; while ( reader . Read ( ) ) { Fruit f = new Fruit ( ) ; f . aID = ( string ) reader [ CODE_STRING ] ; f . bID = ( string ) reader [ CODE_STRING ] ; f . name = ( string ) reader [ CODE_STRING ] ; fruits . Add ( f ) ; } <EOF>
string [ ] replaces = { CODE_STRING , CODE_STRING , CODE_STRING } ; Regex regEx = new Regex ( CODE_STRING ) ; int index = CODE_INTEGER ; string result = regEx . Replace ( input , delegate ( Match match ) { return replaces [ index ] ; } ) ; <EOF>
public void NewsLetterHtmlAdd ( NewsLetterHtmlAdd newsLetterHtmlAdd ) { string url = CODE_STRING + newsLetterHtmlAdd . ID + CODE_STRING ; url . PostToUrl ( newsLetterHtmlAdd . Data , CODE_STRING , request = > { request . Credentials = new NetworkCredential ( _apiKey , _secretKey ) ; request . ContentType = CODE_STRING ; } ) ; } <EOF>
string total_req = CODE_STRING + d2 . ToString ( ) + CODE_STRING ; <EOF>
using ( SqlCommand cmd = new SqlCommand ( CODE_STRING , conn ) ) { cmd . Parameters . Add ( CODE_STRING , SqlDbType . VarBinary , myarray . length ) . Value = myarray ; cmd . ExecuteNonQuery ( ) ; } <EOF>
MyUserControl . ItsDropdown . SelectedIndex <EOF>
locked = ! locked ; <EOF>
JObject obj = JObject . Parse ( json ) ; double [ , ] array = obj [ CODE_STRING ] . ToObject < double [ , ] > ( ) ; <EOF>
int [ ] theData = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; dataGridView1 . DataSource = theData . Where ( x = > x > CODE_INTEGER ) . Select ( ( x , index ) = > new { RecNo = index + CODE_INTEGER , ColumnName = x } ) . OrderByDescending ( x = > x . ColumnName ) . ToList ( ) ; <EOF>
Referenced from AbbydonKrafts System . Drawing . Imaging . PropertyItem propertyItem = image . PropertyItems . FirstOrDefault ( i = > i . Id == CODE_INTEGER ) ; if ( propItem != null ) { System . Text . ASCIIEncoding encoding = new System . Text . ASCIIEncoding ( ) ; string text = encoding . GetString ( propertyItem . Value , CODE_INTEGER , propertyItem . Len - CODE_INTEGER ) ; System . Globalization . CultureInfo provider = CultureInfo . InvariantCulture ; DateTime dateCreated = DateTime . ParseExact ( text , CODE_STRING , provider ) ; } <EOF>
protected void parentRep_ItemDataBound ( object sender , RepeaterItemEventArgs e ) { if ( args . Item . ItemType == ListItemType . Item || args . Item . ItemType == ListItemType . AlternatingItem ) { Repeater childRepeater = ( Repeater ) e . Item . FindControl ( CODE_STRING ) ; childRepeater . ItemDataBound += new RepeaterItemEventHandler ( childRepeater_ItemDataBound ) ; childRepeater . ItemCommand += new RepeaterCommandEventHandler ( childRepeater_ItemCommand ) ; childRepeater . DataSource = dt3 ; childRepeater . DataBind ( ) ; } } <EOF>
Path . GetFullPath <EOF>
Car selectedCar = cars . Where ( x = > x . Location * direction > location * direction ) . Aggregate ( ( a , b ) = > ( a . Location * direction < b . Location * direction ) ? a : b ) ; <EOF>
dynamic d = JObject . Parse ( json ) ; <EOF>
PictureBox [ ] pictureBoxes = { PictureBox1 , PictureBox2 , PictureBox3 , PictureBox4 } ; Image [ ] images = { ImageHere1 , ImageHere2 , ImageHere3 , ImageHere4 } ; for ( int i = CODE_INTEGER ; i < pictureBoxes . Length ; i ++ ) { pictureBoxes [ i ] . Image = images [ i ] ; } <EOF>
MyModelEntities . Refresh ( System . Data . Objects . RefreshMode . StoreWins , TbMyRecord ) ; <EOF>
int incrementValue ( int i ) { i ++ ; if ( i == CODE_INTEGER * CODE_INTEGER * CODE_INTEGER ) i = CODE_INTEGER ; return i ; } string formatValue ( int i ) { var result = new StringBuilder ( ) ; result . Insert ( CODE_INTEGER , ( char ) ( CODE_CHAR + ( i % CODE_INTEGER ) ) ) ; i /= CODE_INTEGER ; result . Insert ( CODE_INTEGER , ( char ) ( CODE_CHAR + ( i % CODE_INTEGER ) ) ) ; i /= CODE_INTEGER ; result . Insert ( CODE_INTEGER , ( char ) ( CODE_CHAR + ( i % CODE_INTEGER ) ) ) ; return result . ToString ( ) ; } <EOF>
return CODE_STRING + Convert . ToBase64String ( p . Trunk ) ; <EOF>
if ( ( letter & Letters . AB ) != CODE_INTEGER ) { } else { } <EOF>
If e . ColumnIndex = CODE_INTEGER Then Dim c As DataGridViewComboBoxColumn Dim cmd2 As New SqlCommand ( CODE_STRING , con . connect ) cmd2 . CommandType = CommandType . Text Dim objdataadapter As New SqlDataAdapter ( cmd2 ) Dim results As New DataSet objdataadapter . Fill ( results , CODE_STRING ) c = DGVEmployee . Columns ( CODE_INTEGER ) c . DataSource = results . Tables ( CODE_STRING ) c . ValueMember = CODE_STRING c . DisplayMember = CODE_STRING con . disconnect ( ) end if <EOF>
private int xSpeed ; private int ySpeedMod ; private int ySpeed { get { return Form . trackBarValue * ySpeedMod ; } } <EOF>
using System . Linq ; if ( portBuffer . SequenceEqual ( ret_bytes ) ) status = CODE_INTEGER ; <EOF>
AboutWindow aboutWindow = new AboutWindow ( ) ; Nullable < bool > dialogResult = aboutWindow . ShowDialog ( ) ; <EOF>
CODE_STRING <EOF>
void PrintReport ( string header , params int [ ] numbers ) { Console . WriteLine ( header ) ; foreach ( int number in numbers ) Console . WriteLine ( number ) ; } <EOF>
public static bool DoesKeyExists ( string containerName ) { var cspParams = new CspParameters { Flags = CspProviderFlags . UseExistingKey , KeyContainerName = containerName } ; try { var provider = new RSACryptoServiceProvider ( cspParams ) ; } catch ( Exception e ) { return false ; } return true ; } <EOF>
System . Windows . Forms <EOF>
var convertDecimal = Convert . ToDecimal ( CODE_STRING ) convertDecimal = Math . Round ( convertDecimal , CODE_INTEGER ) ; <EOF>
Word . Application app = ( Word . Application ) System . Runtime . InteropServices . Marshal . GetActiveObject ( CODE_STRING ) ; if ( app == null ) return true ; foreach ( Word . Document d in app . Documents ) { if ( d . FullName . ToLower ( ) == osPath . ToLower ( ) ) { object saveOption = Word . WdSaveOptions . wdDoNotSaveChanges ; object originalFormat = Word . WdOriginalFormat . wdOriginalDocumentFormat ; object routeDocument = false ; d . Close ( ref saveOption , ref originalFormat , ref routeDocument ) ; return true ; } } return true ; <EOF>
int [ ] array = new int [ CODE_INTEGER ] ; for ( int val = CODE_INTEGER ; val < CODE_INTEGER ; val ++ ) { if ( array [ val ] > CODE_INTEGER ) array [ val ] = CODE_INTEGER ; } <EOF>
public class ExtendedReportController : BaseReportController { public override ReportExecution GetReportExecution ( BaseReportModel model ) { var castedModel = ( ExtendedFromBaseReportModel ) model ; ReportExecution exec = new ReportExecution ( ) ; exec . AddOptionalParameter ( CODE_STRING , castedModel . SomeID1 ) ; exec . AddOptionalParameter ( CODE_STRING , castedModel . SomeID2 ) ; return exec ; } } <EOF>
private void Form1_Load ( object sender , EventArgs e ) { DateTime LastCreatedDate = Properties . Settings . Default [ CODE_STRING ] . ToDateTime ( ) ; var filePaths = Directory . GetFiles ( CODE_STRING , CODE_STRING ) . Select ( p = > new { Path = p , Date = System . IO . File . GetLastWriteTime ( p ) } ) . OrderBy ( x = > x . Date ) . Where ( x = > x . Date >= LastCreatedDate ) ; } <EOF>
myBindingSource . Position = myBindingSource . Find ( CODE_STRING , textBox1 . Text ) ; <EOF>
n & ( n - CODE_INTEGER ) != CODE_INTEGER <EOF>
public class Target : Page { protected override void Page_Load ( object sender , EventArgs e ) { Response . Write ( CODE_STRING ) ; Response . Write ( CODE_STRING ) ; foreach ( var key in Request . Form . AllKeys ) { Response . Write ( string . Format ( CODE_STRING , key , Request . Form [ key ] ) ) ; } Response . Write ( CODE_STRING ) ; Response . Flush ( ) ; } } <EOF>
private void _dgwMain_MouseDown ( object sender , MouseEventArgs e ) { if ( e . Button == MouseButtons . Right ) { DataGridView . HitTestInfo info = _dgwMain . HitTest ( e . X , e . Y ) ; } } <EOF>
public class CompareCustomDataType : IComparer < Student > { public int Compare ( Student x , Student y ) { if ( x == y ) return CODE_INTEGER ; if ( x == null ) return - CODE_INTEGER ; if ( y == null ) return CODE_INTEGER ; return String . Compare ( x . Surname , y . Surname ) ; } . . . } <EOF>
dynamic data = JsonConvert . DeserializeObject < dynamic > ( json_siteResp ) ; foreach ( dynamic d in data ) { var x = d . DoSomeThing ; } <EOF>
double . Parse ( CODE_STRING , CultureInfo . InvariantCulture ) <EOF>
( Application . Current . RootVisual as PhoneApplicationFrame ) . Navigate ( new Uri ( CODE_STRING , UriKind . Relative ) ) ; <EOF>
{ Binding ElementName = grid } <EOF>
face1 . Location . X = new_X ; face1 . Location . Y = new_Y ; <EOF>
Console . Write ( new Uri ( CODE_STRING ) . PathAndQuery ) ; <EOF>
async Task <EOF>
MainWindow . UserClickedButtonXEvent += ProjectB . ClassB . UserClickedButtonXFunction ; <EOF>
private void MenuItem_Click ( object sender , RoutedEventArgs e ) { App . Current . MainWindow = this ; Window1 secondWindow = new Window1 ( ) ; secondWindow . ShowDialog ( ) ; } <EOF>
string solutiondir = Directory . GetParent ( Directory . GetCurrentDirectory ( ) ) . Parent . FullName ; return XDocument . Load ( solutiondir + CODE_STRING \ Mock \ myDoc . html " ) ; <EOF>
string sr = a . Replace ( CODE_CHAR , CODE_CHAR ) . Replace ( CODE_CHAR , CODE_CHAR ) ; <EOF>
txtRichTextBox . Select ( txtRichTextBox . Text . IndexOf ( CODE_STRING ) , CODE_STRING . Length ) ; txtRichTextBox . SelectionColor = YourColor ; txtRichTextBox . SelectionFont = new Font ( CODE_STRING , FontStyle . Bold ) ; <EOF>
int idToEdit = CODE_INTEGER ; string newCommentValue = CODE_STRING ; XmlDocument doc = new XmlDocument ( ) ; doc . LoadXml ( xml ) ; XmlNode commentsElement = doc . SelectSingleNode ( String . Format ( CODE_STRING , idToEdit ) ) ; commentsElement . InnerText = newCommentValue ; doc . Save ( Console . Out ) ; <EOF>
using System ; using PaymentPlanLogic ; namespace PaymentPlanStoreLogic { public class Class1 { Logger myLog = new Logger ( ) ; void YouForgotThisMethod ( ) { myLog . createLog ( ) ; } } } <EOF>
string str = CODE_STRING char [ ] arr = str . ToCharArray ( ) ; foreach ( char c in arr ) { Console . WriteLine ( c ) ; } <EOF>
var cookieAwareWebClient = var db = new ServiceReference . MyEntities ( new Uri ( CODE_STRING ) ) ; db . SendingRequest += ( s , arg ) = > { HttpWebRequest httpRequest = arg . Request as HttpWebRequest ; httpRequest . CookieContainer = cookieAwareWebClient . CookieContainer ; } ; var myUsers = db . Users . ToList ( ) ; <EOF>
HtmlDocument doc = new HtmlWeb ( ) . Load ( CODE_STRING ) ; IEnumerable < HtmlNode > linkedPages = doc . DocumentNode . Descendants ( CODE_STRING ) ; foreach ( var item in linkedPages ) { Console . WriteLine ( CODE_STRING + item . GetAttributeValue ( CODE_STRING , string . Empty ) + CODE_STRING + item . GetAttributeValue ( CODE_STRING , string . Empty ) + CODE_STRING + item . GetAttributeValue ( CODE_STRING , string . Empty ) ) ; } <EOF>
string tempVar = test . Substring ( CODE_INTEGER , test . IndexOf ( separator [ CODE_INTEGER ] . ToString ( ) ) ) ; <EOF>
DateTime buildDate = new FileInfo ( Assembly . GetExecutingAssembly ( ) . Location ) . LastWriteTime ; <EOF>
MemoryStream ms = new MemoryStream ( ) ; XmlWriterSettings xws = new XmlWriterSettings ( ) ; xws . OmitXmlDeclaration = true ; xws . Indent = true ; XDocument xDoc = XDocument . Parse ( utf8Xml ) ; xDoc . Declaration . Encoding = CODE_STRING ; using ( XmlWriter xw = XmlWriter . Create ( ms , xws ) ) { xDoc . WriteTo ( xw ) ; } Encoding ut8 = Encoding . UTF8 ; Encoding ut116 = Encoding . Unicode ; byte [ ] utf16XmlArray = Encoding . Convert ( ut8 , ut116 , ms . ToArray ( ) ) ; var utf16Xml = Encoding . Unicode . GetString ( utf16XmlArray ) ; <EOF>
private int _age ; public int Age { get { return _age ; } set { if ( _age > CODE_INTEGER ) _age = value ; else { } } } <EOF>
var onlyTheseFlagsSet = ( value [ CODE_INTEGER ] | value [ CODE_INTEGER ] ) == input ; <EOF>
RegistryKey rkApp = Registry . CurrentUser . OpenSubKey ( CODE_STRING , true ) ; rkApp . SetValue ( CODE_STRING , Application . ExecutablePath . ToString ( ) ) ; <EOF>
var result = from cat in Categories where cat . Id == CODE_INTEGER select cat . Name + CODE_STRING + String . Join ( CODE_STRING , cat . Products . Select ( product = > product . Name ) ) ; <EOF>
DropDownList ddl = ( DropDownList ) e . Row . FindControl ( CODE_STRING ) ; ddl . SelectedValue = DataBinder . Eval ( e . Row . DataItem , CODE_STRING ) . ToString ( ) ; if ( DataBinder . Eval ( e . Row . DataItem , CODE_STRING ) . ToString ( ) != CODE_STRING ) { DropDownList ddl1 = ( DropDownList ) e . Row . FindControl ( CODE_STRING ) ; ddl1 . SelectedValue = DataBinder . Eval ( e . Row . DataItem , CODE_STRING ) . ToString ( ) ; } <EOF>
static public ObservableCollection < GetDrive > RootDrive = new ObservableCollection < GetDrive > ( ) ; public MainWindow ( ) { InitializeComponent ( ) ; foreach ( DriveInfo di in DriveInfo . GetDrives ( ) ) { ObservableCollection < GetDirectory > directories = new ObservableCollection < GetDirectory > ( ) ; try { foreach ( string s in Directory . GetDirectories ( di . Name ) ) { directories . Add ( new GetDirectory ( s ) ) ; } } catch ( IOException ) { } RootDrive . Add ( new GetDrive ( di . Name , directories ) ) ; } } <EOF>
/// <summary> /// Creates a new user account. /// </summary> /// <param name="model">Object containing the basic information about the user.</param> /// <returns>User with the basic data and the JWT token.</returns> /// <exception cref="BusinessLogicException"> /// Throws business exception if the user that is being created contains invalid data, such as invalid email, username and so on. /// </exception> public async Task < ResponseMessage < UserLogin > > Post ( PostUserModel model ) { . . . } <EOF>
if ( Screen . AllScreens . Length > CODE_INTEGER ) { } <EOF>
[ HttpPost ] [ Route ( CODE_STRING ) ] public AdminAccountGenericResponse UpdateRoles ( [ FromBody ] RoleStatusUserModel model ) { <EOF>
Product firstNewProduct = ( Product ) e . NewItems [ CODE_INTEGER ] ; <EOF>
public static DependencyProperty SomeObjectsProperty = DependencyProperty . Register ( CODE_STRING , typeof ( ObservableCollection < Entities > ) , typeof ( ObjectTemplate ) , new PropertyMetadata ( new ObservableCollection < Entities > ( ) , new PropertyChangedCallback ( OnSomeObjectsPropertyChanged ) ) ; private static void OnSomeObjectsPropertyChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { ( d as ObjectTemplate ) . UpdateSomeObjects ( e . NewValue as SomeObjects ) ; } public void UpdateSomeObjects ( SomeObjects value ) { if ( value != null && value . Count > CODE_INTEGER ) { foreach ( SomeObject eLink in value ) { } } } <EOF>
CELL_WIDTH = W / CODE_INTEGER - M CELL_HEIGHT = H / CODE_INTEGER - M <EOF>
V . Speak ( CODE_STRING , SpeechVoiceSpeakFlags . SVSFlagsAsync | SpeechVoiceSpeakFlags . SVSFIsXML ) ; <EOF>
[ DllImport ( CODE_STRING , CallingConvention = CallingConvention . Cdecl ) ] public static extern void process ( int high , int low ) ; <EOF>
var whateverName = new Date ( year , month , day ) ; <EOF>
IList objectList = obj as IList ; <EOF>
var str1 = document . getElementById ( CODE_STRING ) . value ; var str2 = document . getElementById ( CODE_STRING ) . value ; document . getElementById ( CODE_STRING ) . value = str1 ; document . getElementById ( CODE_STRING ) . value = str2 ; <EOF>
TPDataContext db = new TPDataContext ( connStr ) ; <EOF>
namespace Mailer { public partial class Mailer : ServiceBase { System . Timers . Timer createOrderTimer ; public Mailer ( ) { InitializeComponent ( ) ; } protected override void OnStart ( string [ ] args ) { createOrderTimer = new System . Timers . Timer ( ) ; createOrderTimer . Elapsed += new System . Timers . ElapsedEventHandler ( sendmail ) ; createOrderTimer . Interval = CODE_INTEGER ; createOrderTimer . Enabled = true ; createOrderTimer . AutoReset = true ; createOrderTimer . Start ( ) ; } protected void sendmail ( object sender , System . Timers . ElapsedEventArgs args ) { } protected override void OnStop ( ) { } } } <EOF>
tabControl . SelectedItem = tabControl . Items . OfType < TabItem > ( ) . SingleOrDefault ( n = > n . Name == selectedTabItem ) ; <EOF>
string selectCommand = CODE_STRING ; . . . var data = DB . Query ( selectCommand , CODE_STRING , CODE_STRING ) ; <EOF>
' Create an instance of Image and load an existing image Using image As Aspose . Imaging . Image = Aspose . Imaging . Image . Load ( CODE_STRING ) ' Create and initialize an instance of the Graphics class Dim graphics As New Aspose . Imaging . Graphics ( image ) ' Creates an instance of Font Dim font As New Aspose . Imaging . Font ( CODE_STRING , CODE_INTEGER , Aspose . Imaging . FontStyle . Bold ) ' Create an instance of SolidBrush and set its various properties Dim brush As New Aspose . Imaging . Brushes . SolidBrush ( ) brush . Color = Aspose . Imaging . Color . Black brush . Opacity = CODE_INTEGER ' Draw a String using the SolidBrush object and Font , at specific Point graphics . DrawString ( CODE_STRING , font , brush , New Aspose . Imaging . PointF ( image . Width / CODE_INTEGER , image . Height / CODE_INTEGER ) ) ' Export to PNG file format using default options . image . Save ( CODE_STRING , New Aspose . Imaging . ImageOptions . PngOptions ( ) ) End Using <EOF>
public class CompanyContext : DbContext { public CompanyContext ( ) : base ( CODE_STRING ) { } public DbSet < Collaborator > Collaborators { get ; set ; } public DbSet < Department > Departments { get ; set ; } public DbSet < Manager > Managers { get ; set ; } } <EOF>
taggings . Clear ( ) ; <EOF>
typeof ( T ) . GetProperties ( ) <EOF>
[ DataContract ] [ KnownType ( typeof ( int [ ] ) ) ] [ KnownType ( typeof ( bool [ ] ) ) ] public class CompositeType { [ DataMember ] public object UsedForKnownTypeSerializationObject ; [ DataMember ] public string StringValue { get ; set ; } [ DataMember ] public Dictionary < string , object > Parameters { get ; set ; } } <EOF>
public abstract class AbstractClass { protected static void Method < T > ( ) where T : AbstractClass { Type t = typeof ( T ) ; } } public class CurrentClass : AbstractClass { public void DoStuff ( ) { Method < CurrentClass > ( ) ; } } <EOF>
using Microsoft . TeamFoundation . WorkItemTracking . Client ; Query query = new Query ( workItemStore , CODE_STRING , new Dictionary < string , string > ( ) { { CODE_STRING , project . Name } } ) ; var workItemCollection = query . RunQuery ( ) ; foreach ( var workItem in workItemCollection ) { /*Get work item properties you are interested in*/ foreach ( var field in workItem . Fields ) { /*Get field value*/ info += String . Format ( " Field name : { CODE_INTEGER } Value : { CODE_INTEGER } " , field . name , field . Value ) ; } } <EOF>
struct TimeStamp { CODE_INTEGER : i16 year CODE_INTEGER : byte month CODE_INTEGER : byte day CODE_INTEGER : byte hour = CODE_INTEGER CODE_INTEGER : byte minute = CODE_INTEGER CODE_INTEGER : i16 second = CODE_INTEGER CODE_INTEGER : double fraction = CODE_INTEGER } <EOF>
Console . WriteLine ( string . Format ( CODE_STRING , CODE_INTEGER ) ) ; <EOF>
int idx = CODE_INTEGER ; return items . Skip ( idx ) . Union ( items . Take ( idx ) ) . ToList ( ) ; <EOF>
string root = Path . GetDirectoryName ( Application . ExecutablePath ) ; List < string > FullFileList = Directory . GetFiles ( root , CODE_STRING , SearchOption . AllDirectories ) . Where ( name = > { return ! ( name . EndsWith ( CODE_STRING ) || name . EndsWith ( CODE_STRING ) ) ; } ) . Select ( file = > file . Replace ( root , CODE_STRING ) . ToList ( ) ; <EOF>
var i = ( IBaseInterface ) ( new ChildClass ( ) ) ; <EOF>
string input = value . ToString ( ) . Replace ( CODE_STRING , CODE_STRING ) , System . Globalization . CultureInfo . InvariantCulture ) ; double number ; bool result = Double . TryParse ( input , out number ) ; if ( result ) { return number ; } else { return input ; } <EOF>
private bool DisplayErrorMessages ( String [ ] array1 , String [ ] array2 ) <EOF>
Collection x = new DerivedClass ( ) <EOF>
var followers = service . ListFollowersOf ( user_id ) ; while ( followers . NextCursor != null ) { followers = service . ListFollowersOf ( user_id , followers . NextCursor ) ; } <EOF>
int wordCount = line . Split ( new string [ ] { CODE_STRING } , StringSplitOptions . RemoveEmptyEntries ) . Length ; string [ ] wordsArr = line . Split ( new string [ ] { CODE_STRING } , StringSplitOptions . None ) ; <EOF>
var languages = TextBoxLanguagesKnown . Text . Split ( ' ' ) ; var deletedLanguages = objUser . LanguageDetails . Where ( ld = > ! languages . Any ( l = > ld . Language == l . Trim ( ) ) ) . ToArray ( ) ; foreach ( var deletedLanguage in deletedLanguages ) { objUser . LanguageDetails . Remove ( deletedLanguage ) ; Context . LanguageDetails . DeleteOnSubmit ( deletedLanguage ) ; } var newLanguages = languages . Where ( l = > ! objUser . LanguageDetails . Any ( ld = > ld . Language == l . Trim ( ) ) ) . ToArray ( ) ; foreach ( string newLanguage in newLanguages ) { var languageDetail = new LanguageDetail { Emp_Id = objUser . Emp_Id , Language = newLanguage . Trim ( ) } ; objUser . LanguageDetails . Add ( languageDetail ) ; } Context . SubmitChanges ( ) ; <EOF>
public class User { public string id { get ; set ; } public string username { get ; set ; } public string full_name { get ; set ; } public string profile_picture { get ; set ; } } public class RootObject { public string access_token { get ; set ; } public User user { get ; set ; } } <EOF>
class CarOptions { public SunroofKind Sunroof { get ; set ; } public SpoilerKind Spoiler { get ; set ; } public TintedWindowKind TintedWindow { get ; set ; } public TintedWindowColor TintedWindowColor { get ; set ; } } enum SunroofKind { None , Electrical , Mechanical } enum SpoilerKind { None , Standard } enum TintedWindowKind { None , Standard } enum TintedWindowColor { Black , Blue } <EOF>
Dim FObj As CrystalDecisions . CrystalReports . Engine . TextObject = rpt . ReportDefinition . ReportObjects ( CODE_STRING ) FObj . Text = beginDate . ToString <EOF>
public class Service < TEntity > where TEntity : IEntity { public virtual void Insert ( TEntity entity ) { entity . Created = DateTime . Now ; } } <EOF>
private void interestms_SelectionChanged ( object sender , SelectionChangedEventArgs e ) { if ( interestms . SelectedIndex == - CODE_INTEGER ) return ; var listcommon = ( cast as your type ) interestms . SelectedItems ; interestms . SelectedIndex = - CODE_INTEGER ; } <EOF>
DateTime d1 = DateTime . ParseExact ( myJames , CODE_STRING ) ; <EOF>
ServerManager manager = new ServerManager ( ) ; Site site = manager . Sites [ siteName ] ; foreach ( XElement bindingNode in bindingsNode . Elements ( CODE_STRING ) ) { Binding binding = site . Bindings . CreateElement ( ) ; binding . BindingInformation = String . Format ( CODE_STRING , bindingNode . Attribute ( CODE_STRING ) . Value , bindingNode . Value , bindingNode . Attribute ( CODE_STRING ) . Value ) ; site . Bindings . Add ( binding ) ; } manager . CommitChanges ( ) ; <EOF>
private void Window_Loaded ( object sender , RoutedEventArgs e ) { DispatcherTimer dispatcherTimer = new DispatcherTimer ( ) ; dispatcherTimer . Tick += new EventHandler ( dispatcherTimer_Tick ) ; dispatcherTimer . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; dispatcherTimer . Start ( ) ; } private void dispatcherTimer_Tick ( object sender , EventArgs e ) { this . label17 . Text = ( DateTime . Now . Hour . ToString ( ) + CODE_STRING + DateTime . Now . Second . ToString ( ) ) ; } <EOF>
string str = CODE_STRING ; foreach ( string item in list ) { TextBox txt = ( TextBox ) Form . FindControl ( item ) ; if ( txt != null ) { str += item + CODE_STRING + txt . Text + CODE_STRING ; } } Response . Write ( str ) ; <EOF>
~ YourClass <EOF>
Microsoft . Office . Interop . Word . Application appVersion = new Microsoft . Office . Interop . Word . Application ( ) ; <EOF>
NavigationService . Navigate ( new Uri ( CODE_STRING , UriKind . Relative ) ) ; <EOF>
var s = new StringBuilder ( ) ; s . AppendFormat ( CODE_STRING , CODE_STRING , CODE_STRING ) ; for ( var i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { s . AppendFormat ( CODE_STRING , CODE_STRING ) ; } <EOF>
From the drop down above select Basic Syntax . If { TableName . FeeUnit } = { TableName . Percent } Then formula = ( { TableName . Fee } / CODE_INTEGER ) * { TableName . Patients } Else formula = { TableName . Fee } * { TableName . Patients } End If <EOF>
var xpCollection = new XPCollection < Person > ( ) ; gridControl1 . DataSource = xpCollection ; Person person = ( Person ) gridView1 . GetRow ( rowHandle ) ; <EOF>
Button1 . Attributes . Add ( CODE_STRING , CODE_STRING ) ; <EOF>
StreamWriter myStreamWriter = myProcess . StandardInput ; myStreamWriter . Writeline ( CODE_STRING ) ; myStreamWriter . Close ( ) ; <EOF>
List < object > Response = new List < object > ( ) ; Parallel . ForEach ( Response , o = > { Response . Add ( callMethod ( ) ) ; } ) ; <EOF>
client . Encoding = System . Text . Encoding . UTF8 ; <EOF>
var data = XDocument . Parse ( xml ) . Root . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Elements ( CODE_STRING ) . Select ( row = > new { Id = Int32 . Parse ( row . Element ( CODE_STRING ) . Value ) , Parameters = new { IpAddress = row . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value , port = Int32 . Parse ( row . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value ) , } , Status = new { MemFree = Int32 . Parse ( row . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value ) , } , } ) ; <EOF>
file = file . Where ( line = > line . Contains ( CODE_STRING ) ) . GroupBy ( line = > line . Substring ( CODE_INTEGER , line . IndexOf ( CODE_CHAR ) ) ) . Where ( g = > g . Count ( ) == CODE_INTEGER ) . Select ( g = > g . First ( ) ) . ToArray ( ) ; <EOF>
CheckBox . IsChecked <EOF>
Task . Factory . StartNew ( ( ) = > { System . Threading . Thread . Sleep ( Interval ) ; TheMethod ( ) ; } ) ; <EOF>
ddlStateLegalRes . Items . FindByValue ( sdr [ CODE_STRING ] . ToString ( ) ) . Selected = true ; <EOF>
builder . Register ( ( c , p ) = > new CustomRobotService ( p . TypedAs < Uri > ( ) , c . Resolve < IWebDownloader > ( ) ) ) . As < IRobot > ( ) . InstancePerDependency ( ) ; <EOF>
DataSet a = DataSet b = DataSet c = a . Copy ( ) ; c . Merge ( b ) ; <EOF>
public Dictionary < int , Variation > Variations { get { var json = this . VariationsJson . ToString ( ) ; if ( json . RemoveWhiteSpace ( ) == EmptyJsonArray ) { return new Dictionary < int , Variation > ( ) ; } else { return JsonConvert . DeserializeObject < Dictionary < int , Variation > > ( json ) ; } } } [ JsonProperty ( PropertyName = CODE_STRING ) ] public object VariationsJson { get ; set ; } <EOF>
string regex = CODE_STRING <EOF>
var resultString = String . Join ( CODE_STRING , new [ ] { aLength . ToString ( CODE_STRING ) , anAngle . ToString ( CODE_STRING ) , aHeight . ToString ( CODE_STRING ) , a2DPoint . X . ToString ( CODE_STRING ) , a2DPoint . Y . ToString ( CODE_STRING ) , anID . ToString ( ) , anInt . ToString ( ) , anotherInt . ToString ( ) , } . Concat ( aListOfInt . Select ( x = > x . ToString ( ) ) ) ) ; <EOF>
Dictionary < int , int [ ] > <EOF>
ContentPlaceHolder MainContent = Page . Master . FindControl ( CODE_STRING ) as ContentPlaceHolder ; DropDownList myControl1 = ( DropDownList ) MainContent . FindControl ( CODE_STRING ) ; <EOF>
new TestClass ( ) <EOF>
var author = _ctx . Authors . SqlQuery ( CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING , new SqlParameter ( CODE_STRING , command . Author ) ) . Single ( ) ; var book = new Book { Isbn = command . Id , Title = command . Title , Stock = command . Count , Author = author } ; _ctx . Books . Add ( book ) ; await _ctx . SaveChangesAsync ( ) ; <EOF>
strCellData = strCellData . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
IEnumerable < Book > books = new List < Book > ( ) ; <EOF>
public static void SavePersons ( List < Person > Persons , String path ) { } <EOF>
Process myProcess = null ; myProcess = Process . Start ( CODE_STRING ) ; myProcess . WaitForExit ( CODE_INTEGER ) ; Console . WriteLine ( CODE_STRING , myProcess . ExitCode ) ; <EOF>
List < Actor > <EOF>
System . Web . Security . FormsAuthentication <EOF>
System . Windows . Forms . Screen . AllScreens <EOF>
sc . Credentials = netCred ; try { sc . Send ( message ) ; } catch ( Exception ex ) { MessageBox ( ex . ToString ( ) ) ; } MessageBox . Show ( CODE_STRING ) ; <EOF>
Application . AutoRecover . Path <EOF>
abstract class AnimalProcessor < T > where T : Animal { public abstract IList < T > ProcessResults ( ) ; } class GiraffeProcessor : AnimalProcessor < Giraffe > { public override IList < Giraffe > ProcessResults ( ) { return new List < Giraffe > ( ) ; } } class LionProcessor : AnimalProcessor < Lion > { public override IList < Lion > ProcessResults ( ) { return new List < Lion > ( ) ; } } <EOF>
Process . Start ( CODE_STRING ) ; <EOF>
selectedWidth * CODE_INTEGER / CODE_REAL <EOF>
public SqlConnection Conectar ( string remoteMachine ) { SqlConnection con = new SqlConnection ( string . Format ( CODE_STRING , remoteMachine ) ) ; return con ; } <EOF>
string unc_server_name = new Uri ( CODE_STRING ) . Host ; <EOF>
from c in accounts from p in accounts where c . Account != p . Account <EOF>
var search = new SearchBox ( ) ; var cust = new CustomerList ( ) ; search . SearchSubmitted += ( s , e ) = > { cust . Update ( e . Term ) ; } <EOF>
BaseFont title = BaseFont . CreateFont ( BaseFont . HELVETICA_BOLD , BaseFont . WINANSI , BaseFont . EMBEDDED ) ; Font titleFont = new Font ( title , CODE_INTEGER , Font . BOLD , Color . BLACK ) ; p = new Paragraph ( text , titleFont ) ; <EOF>
using ( var wc = new System . Net . WebClient ( ) ) { wc . DownloadFile ( Url , FileName ) ; } <EOF>
var firstDays = dates . Where ( d = > d . Day == CODE_INTEGER ) ; <EOF>
NetworkCredential networkCredential = new NetworkCredential ( CODE_STRING , CODE_STRING ) ; WebRequest webRequest = HttpWebRequest . Create ( CODE_STRING ) ; webRequest . Credentials = networkCredential ; CredentialCache credentialCache = new CredentialCache ( ) ; credentialCache . Add ( new Uri ( CODE_STRING ) , CODE_STRING , networkCredential ) ; credentialCache . Add ( new Uri ( CODE_STRING ) , CODE_STRING , networkCredential ) ; webRequest . Credentials = credentialCache ; <EOF>
foreach ( Object obj in list ) { Type type = obj . GetType ( ) ; foreach ( var f in type . GetFields ( ) . Where ( f = > f . IsPublic ) ) { Console . WriteLine ( String . Format ( CODE_STRING , f . Name , f . GetValue ( obj ) ) ; } } <EOF>
process1 . StartInfo . Arguments = CODE_STRING ; <EOF>
var child = Expression . Property ( parameter , CODE_STRING ) ; var jobNumber = Expression . Property ( child , propertyName ) ; var lambda = Expression . Lambda < Func < ParentObject , bool > > ( comparisonMethod ( jobNumber , Expression . Constant ( propertyValue ) ) , parameter ) ; <EOF>
empty . txt <EOF>
using ( var cmd = new OleDbCommand ( CODE_STRING , myConnection ) ) { cmd . Parameters . AddWithValue ( CODE_STRING , txt_name . Text ) ; cmd . Parameters . AddWithValue ( CODE_STRING , txt_id . Text ) ; cmd . ExecuteNonQuery ( ) ; } <EOF>
Console . WriteLine ( CODE_STRING ) ; <EOF>
private void btnSearchByGender_Click ( object sender , EventArgs e ) { DataView data = new DataView ( pID2dbDataSet . customer ) ; string gender ; if ( rdoMale . Checked ) gender = CODE_STRING else gender = CODE_STRING data . RowFilter = CODE_STRING + gender + CODE_STRING ; customerDataGridView . DataSource = data ; } <EOF>
Group Policy <EOF>
foreach ( var control in controls ) Debug . Assert ( ( control is TextBox ) || ( control is ComboBox ) ) ; <EOF>
public abstract class DrilldownBase < W > : IDrilldown where W : class , <EOF>
public static int [ ] ToBuffer ( int [ , , ] buffer3D , int w , int h ) { int [ ] buffer = new int [ w * h * CODE_INTEGER ] ; Buffer . BlockCopy ( buffer3D , CODE_INTEGER , buffer , CODE_INTEGER , w * h * sizeof ( int ) ) ; return buffer ; } <EOF>
SendKeys . Send ( . . . ) await Task . Delay ( CODE_INTEGER ) SendKeys . Send ( . . . ) await Task . Delay ( CODE_INTEGER ) <EOF>
public class Appointment { [ XmlIgnore ( ) ] public Person MyPerson { get ; set ; } public int MyPersonId { get { return MyPerson . Id ; } set { MyPerson = new Person ( value ) } } } <EOF>
BlobCounterBase bc = new BlobCounter ( ) ; bc . FilterBlobs = true ; bc . MinHeight = CODE_INTEGER ; bc . MinWidth = CODE_INTEGER ; bc . ProcessImage ( numberplate ) ; Blob [ ] blobs = bc . GetObjectsInformation ( ) ; MessageBox . Show ( bc . ObjectsCount . ToString ( ) ) ; for ( int i = CODE_INTEGER , n = blobs . Length ; i < n ; i ++ ) { if ( blobs . Length > CODE_INTEGER ) { bc . ExtractBlobsImage ( numberplate , blobs [ i ] , true ) ; Bitmap copy = blobs [ i ] . Image . ToManagedImage ( ) ; pictureBox2 . Image = numberplate ; pictureBox2 . Refresh ( ) ; } } <EOF>
string xml = myXmlElement . OuterXml ; byte [ ] bytes = Encoding . UTF8 . GetBytes ( xml ) ; Stream requestStream = request . GetRequestStream ( ) ; requestStream . Write ( bytes , CODE_INTEGER , bytes . Length ) ; requestStream . Close ( ) ; <EOF>
const string message = CODE_STRING ; const string caption = CODE_STRING ; var result = MessageBox . Show ( message , caption , MessageBoxButtons . YesNo , MessageBoxIcon . Question ) ; if ( result == DialogResult . No ) { e . Cancel = true ; } <EOF>
int x = CODE_INTEGER ; int j = CODE_INTEGER ; int k = CODE_INTEGER ; while ( j > CODE_INTEGER ) { if ( k <= j ) { Console . Write ( CODE_STRING ) ; } if ( j >= CODE_INTEGER ) { int temp = x ; while ( temp >= CODE_INTEGER ) { Console . Write ( CODE_STRING ) ; temp -- ; } x = x + CODE_INTEGER ; Console . Write ( CODE_STRING ) ; } Console . WriteLine ( ) ; j -- ; } Console . WriteLine ( ) ; double f = Math . Round ( x * CODE_REAL ) ; while ( f != CODE_INTEGER ) { Console . Write ( CODE_STRING ) ; f -- ; } <EOF>
ProcessStartInfo startInfo = new ProcessStartInfo ( ) ; startInfo . FileName = CODE_STRING ; startInfo . Arguments = CODE_STRING ; Process . Start ( startInfo ) ; <EOF>
public class job { public string title { get ; set ; } public string company { get ; set ; } public string companywebsite { get ; set ; } [ XmlArray ( CODE_STRING ) ] [ XmlArrayItem ( CODE_STRING ) ] public string [ ] locations { get ; set ; } } <EOF>
public class ItemEx : Item { public byte [ ] IconData { get { return icon ; } set { icon = value ; Icon = null ; } } public ImageSource Icon { get { return ToImageSource ( IconData ) ; } set { RaisePropertyChanged ( CODE_STRING ) ; } } } public static ImageSource ToImageSource ( byte [ ] icon ) { if ( icon != null ) { BitmapImage biImg = new BitmapImage ( ) ; MemoryStream ms = new MemoryStream ( icon ) ; biImg . BeginInit ( ) ; biImg . StreamSource = ms ; biImg . EndInit ( ) ; return biImg ; } return null ; } <EOF>
if ( s != CODE_STRING && s != CODE_STRING ) <EOF>
public static bool CheckInvite ( string fromId , string toId ) { var fb = new FacebookClient ( APP_ID + CODE_STRING + SECRET_ID ) ; fb . AppId = APP_ID ; fb . AppSecret = SECRET_ID ; dynamic result = fb . Get ( string . Format ( CODE_STRING , toId ) ) ; foreach ( var el in result . data ) if ( ( string ) el . from . id == fromId ) { DateTime dateTime = DateTime . Parse ( ( string ) el . created_time , CultureInfo . InvariantCulture ) ; if ( ( DateTime . Now - dateTime ) . TotalMinutes < CODE_INTEGER ) { return true ; } } return false ; } <EOF>
string inputFile = Path . Combine ( Environment . GetFolderPath ( Environment . SpecialFolder . MyDocuments ) , CODE_STRING ) ; string outputFile = Path . Combine ( Environment . GetFolderPath ( Environment . SpecialFolder . MyDocuments ) , CODE_STRING ) ; using ( StreamReader input = File . OpenText ( inputFile ) ) using ( Stream output = File . OpenWrite ( outputFile ) ) using ( StreamWriter writer = new StreamWriter ( output ) ) { while ( ! input . EndOfStream ) { string line = input . ReadLine ( ) ; writer . WriteLine ( line ) ; } } File . Delete ( inputFile ) ; File . Move ( outputFile , inputFile ) ; <EOF>
var timesAsString = times . Select ( s = > s . ToString ( CODE_STRING ) ) . ToArray ( ) <EOF>
const string settingsAppLaunched = CODE_STRING ; public static bool IsFirstLaunch ( ) { IsolatedStorageSettings settings = IsolatedStorageSettings . ApplicationSettings ; return ! ( settings . Contains ( settingsAppLaunched ) && settings [ settingsAppLaunched ] ) ; } public static bool Launched ( ) { if ( IsFirstLaunch ( ) ) { IsolatedStorageSettings settings = IsolatedStorageSettings . ApplicationSettings ; settings . Add ( settingsAppLaunched , true ) ; settings . Save ( ) ; } } if ( IsFirstLaunch ( ) ) { showTheFrameToTheGuyBecauseHeLaunchedTheAppForTheFirstTime ( ) ; Launched ( ) ; } <EOF>
aspnet_isapi . dll <EOF>
Image First = new Image ( ) ; First = ( Image ) ( Page . Master . FindControl ( CODE_STRING ) ) ; if ( First != null ) { First . ImageUrl = CODE_STRING ; } <EOF>
foreach ( tDerived < T > lGen in myList . OfType < tDerived < T > > ( ) ) { Console . WriteLine ( CODE_STRING ) ; } foreach ( aDerived lDerived in myList . OfType < aDerived > ( ) ) { Console . WriteLine ( CODE_STRING ) ; } <EOF>
private void display_SelectionChanged ( object sender , SelectionChangedEventArgs e ) { Dispatcher . BeginInvoke ( new Action ( ( ) = > { var editwindow = new EditWindow ( ) ; editwindow . Show ( ) ; } ) ) ; } <EOF>
Content - Type : Application / octet - stream Content - Description : The fixed length records Content - Transfer - Encoding : base64 Content - ID : < 950120.aaCB @XIson . com > T2xkIE1hY0RvbmFsZCBoYWQgYSBmYXJtCkUgSS BFIEkgTwpBbmQgb24gaGlzIGZhcm0gaGUgaGFk IHNvbWUgZHVja3MKRSBJIEUgSSBPCldpdGggYS BxdWFjayBxdWFjayBoZXJlLAphIHF1YWNrIHF1 YWNrIHRoZXJlLApldmVyeSB3aGVyZSBhIHF1YW NrIHF1YWNrCkUgSSBFIEkgTwo = <EOF>
var builder = new StringBuilder ( ) foreach ( var row in dataSet . Tables . First ( ) . Rows ) { foreach ( var cell in row . ItemArray ) { builder . Append ( cell . ToString ( ) ) ; if ( cell != row . Cells . Last ( ) ) builder . Append ( CODE_STRING ) ; } builder . Append ( Environment . NewLine ) ; } var file = new FileStream ( filePath ) ; var writer = new StreamWriter ( file ) ; writer . Write ( builder . ToString ( ) ) ; writer . Flush ( ) ; writer . Close ( ) ; <EOF>
from c in allCompanies group c by c . Company into departments select new { Company = departments . Key , Departments = from d in departments group d by d . Department into employees select new { Department = employees . Key , Employees = employees . Select ( e = > e . Employees ) . Distinct ( ) } } <EOF>
string filename = reportName + CODE_STRING ; Response . AddHeader ( CODE_STRING , CODE_STRING + filename + CODE_STRING ) ; <EOF>
Process exeProcess = new Process ( ) ; exeProcess . StartInfo . FileName = CODE_STRING ; exeProcess . StartInfo . UseShellExecute = false ; exeProcess . StartInfo . RedirectStandardError = true ; exeProcess . StartInfo . RedirectStandardInput = true ; exeProcess . StartInfo . RedirectStandardOutput = true ; exeProcess . Start ( ) ; exeProcess . StandardInput . WriteLine ( Path . GetFileName ( filePath ) ) ; exeProcess . StandardInput . WriteLine ( CODE_STRING ) ; exeProcess . WaitForExit ( ) ; <EOF>
public async Task < string > httpPOST ( string url , FormUrlEncodedContent content ) { var httpClient = new HttpClient ( new HttpClientHandler ( ) ) ; string resp = CODE_STRING ; HttpResponseMessage response = new HttpResponseMessage ( ) ; response = await httpClient . PostAsync ( url , content ) ; try { response . EnsureSuccessStatusCode ( ) ; Task < string > getStringAsync = response . Content . ReadAsStringAsync ( ) ; resp = await getStringAsync ; } catch ( HttpRequestException ) { resp = CODE_STRING ; } return resp ; } <EOF>
static void Main ( string [ ] args ) { int ? i = GetValueOrNull < int > ( null , string . Empty ) ; } public static Nullable < T > GetValueOrNull < T > ( DbDataRecord reader , string columnName ) where T : struct { object columnValue = reader [ columnName ] ; if ( ! ( columnValue is DBNull ) ) return ( T ) columnValue ; return null ; } <EOF>
object obj = new object ( ) ; PropertyInfo [ ] properties = obj . GetType ( ) . GetProperties ( ) ; foreach ( var p in properties ) { var myVal = p . GetValue ( obj ) ; } <EOF>
public string emailLink ( string emailAddress ) { Regex emailRegex = new Regex ( CODE_STRING ; if ( emailRegex . IsMatch ( emailAddress ) { return string . Format ( CODE_STRING , emailAddress ) ; } return CODE_STRING ; } <EOF>
public class MyCustomResolver : CamelCasePropertyNamesContractResolver { protected override string ResolvePropertyName ( string propertyName ) { return propertyName == CODE_STRING ? CODE_STRING : base . ResolvePropertyName ( propertyName ) ; } } <EOF>
private void btnSubmit_Click ( object sender , EventArgs e ) { var formFields = * * formFieldCollection * * ; var firstName = MyUserControl . FirstName . Text ; var lastName = MyUserControl . LastName . Text ; } <EOF>
public static string GetNetStates ( ) { var info = Microsoft . Phone . Net . NetworkInformation . NetworkInterface . NetworkInterfaceType ; switch ( info ) { case NetworkInterfaceType . MobileBroadbandCdma : return CODE_STRING ; case NetworkInterfaceType . MobileBroadbandGsm : return CODE_STRING ; case NetworkInterfaceType . Wireless80211 : return CODE_STRING ; case NetworkInterfaceType . Ethernet : return CODE_STRING ; case NetworkInterfaceType . None : return CODE_STRING ; default : return CODE_STRING ; } } <EOF>
using ( var myStream = new MemoryStream ( ) ) { using ( var myWriter = new BinaryWriter ( myStream ) ) { } using ( var myReader = new BinaryReader ( myStream ) ) { } var myBuffer = myStream . ToArray ( ) ; var myBytesList = myStream . ToArray ( ) . ToList ( ) ; } <EOF>
dbContext . Exams . Include ( e = > e . Questions ) <EOF>
public Wsp GetFullWsp ( Guid id ) { var wsp = wspCollection . AsQueryable ( ) . FirstOrDefault ( w = > w . WspId == id ) ; var sits = sitCollection . AsQueryable ( ) . Where ( sit = > sit . WspId == id ) ; wsp . SitList = new List < Sit > ( sits ) ; } <EOF>
context . Request . ParentRequest . ParentRequest . Target . Member . DeclaringType <EOF>
Properties -> Copy to output folder -> Copy Always <EOF>
[ HttpGet ] public List < Category > FunctionWithParam ( long id ) { } <EOF>
int sequence = CODE_INTEGER ; private void timer1_Tick ( object sender , EventArgs e ) { using ( var still = new Bitmap ( form . Width , form . Height ) ) { form . DrawToBitmap ( still , new Rectangle ( new Point ( CODE_INTEGER , CODE_INTEGER ) , still . Size ) ) ; still . Save ( String . Format ( CODE_STRING , sequence ++ ) , ImageFormat . Gif ) ; } } <EOF>
XAttribute xmlLang = new XAttribute ( XNamespace . Xml + CODE_STRING , CODE_STRING ) ; <EOF>
var testString = CODE_STRING ; var splitString = testString . Split ( CODE_CHAR ) ; var year = int . Parse ( splitString [ CODE_INTEGER ] [ CODE_INTEGER ] . ToString ( CultureInfo . InvariantCulture ) ) ; var month = int . Parse ( splitString [ CODE_INTEGER ] [ CODE_INTEGER ] . ToString ( CultureInfo . InvariantCulture ) ) ; var day = int . Parse ( splitString [ CODE_INTEGER ] [ CODE_INTEGER ] . ToString ( CultureInfo . InvariantCulture ) ) ; var totalSeconds = ( DateTime . Now . AddYears ( year ) . AddMonths ( month ) . AddDays ( day ) - DateTime . Now ) . TotalSeconds ; <EOF>
foreach ( DataRow dr in dt . Rows ) { lstweeks . Add ( { new GetData { week = dr [ CODE_STRING ] . ToString ( ) } ) ; } <EOF>
dim ds as new dataset <EOF>
SPGroupCollection collGroups = SPContext . Current . Web . Groups ; foreach ( SPGroup oGroup in collGroups ) { foreach ( SPUser oUser in oGroup . Users ) { Response . Write ( oUser . Name ) ; Label l = new Label ( ) ; l . Text = oUser . Name ; PlaceHolderContents . Controls . Add ( l ) ; PlaceHolderContents . Controls . Add ( new LiteralControl ( CODE_STRING ) ) ; } } <EOF>
ItemType items = default ( ItemType ) ; switch ( sortColumn ) { case CODE_STRING : { items = ctxModel . Items . Where ( i = > i . ItemID == vId ) . OrderBy ( i = > i . Title ) ; } break ; } <EOF>
Textbox . Text <EOF>
private static List < HashMap < String , Object > > manipulatePdfBookMarkUtil ( SortedMap < Integer , String > pgTtl , Rectangle rct ) { List < HashMap < String , Object > > mpBkMrkLst = null ; int itrCnt = CODE_INTEGER ; if ( pgTtl != null && ! pgTtl . isEmpty ( ) ) { mpBkMrkLst = new ArrayList < HashMap < String , Object > > ( ) ; for ( Map . Entry < Integer , String > itrTtlPg : pgTtl . entrySet ( ) ) { HashMap < String , Object > retMap = new HashMap < String , Object > ( ) ; retMap . put ( CODE_STRING , itrTtlPg . getValue ( ) ) ; retMap . put ( CODE_STRING , CODE_STRING ) ; retMap . put ( CODE_STRING , itrTtlPg . getKey ( ) + CODE_STRING + rct . getTop ( ) ) ; mpBkMrkLst . add ( itrCnt , retMap ) ; itrCnt ++ ; } } return mpBkMrkLst ; } <EOF>
Num = num - ( num % CODE_INTEGER ) ; list < int > stuff ; for ( int i = CODE_INTEGER ; i == ( num / CODE_INTEGER ) ; i ++ ) stuff . add ( ( i * CODE_INTEGER ) ) ; <EOF>
var query = doc . Root . Descendants ( CODE_STRING ) . Select ( e = > new XElement ( CODE_STRING , e . Parent . Element ( CODE_STRING ) , e . Parent . Element ( CODE_STRING ) , e . Parent . Element ( CODE_STRING ) , e ) ) ; <EOF>
public static IEnumerable < string > SplitString ( this string sInput , char search , int maxlength ) { var result = new List < string > ( ) ; var count = CODE_INTEGER ; var lastSplit = CODE_INTEGER ; foreach ( char c in sInput ) { if ( c == search || count - lastSplit == maxlength ) { result . Add ( sInput . Substring ( lastSplit , count - lastSplit ) ) ; lastSplit = count ; } count ++ ; } result . Add ( sInput . Substring ( lastSplit , count - lastSplit ) ) ; return result ; } <EOF>
static void Main ( ) { File . WriteAllText ( CODE_STRING , CODE_STRING ) ; using ( Stream s = new BufferedStream ( File . OpenRead ( CODE_STRING ) ) ) { int rows = ReadInt32 ( s ) , cols = ReadInt32 ( s ) ; int [ , ] arr = new int [ rows , cols ] ; for ( int y = CODE_INTEGER ; y < rows ; y ++ ) for ( int x = CODE_INTEGER ; x < cols ; x ++ ) { arr [ y , x ] = ReadInt32 ( s ) ; } } } private static int ReadInt32 ( Stream s ) { int b ; while ( ( b = s . ReadByte ( ) ) >= CODE_INTEGER && ( b < CODE_CHAR || b > CODE_CHAR ) ) { } if ( b < CODE_INTEGER ) throw new EndOfStreamException ( ) ; int result = b - CODE_CHAR ; while ( ( b = s . ReadByte ( ) ) >= CODE_CHAR && b <= CODE_CHAR ) { result = result * CODE_INTEGER + ( b - CODE_CHAR ) ; } return result ; } <EOF>
dgProducts . Columns [ CODE_STRING ] . DefaultCellStyle . Format = CODE_STRING ; dgProducts . Columns [ CODE_STRING ] . DefaultCellStyle . FormatProvider = new CultureInfo ( CODE_STRING ) ; <EOF>
INetFwRule firewallRule = ( INetFwRule ) Activator . CreateInstance ( Type . GetTypeFromProgID ( CODE_STRING ) ) ; INetFwPolicy2 firewallPolicy = ( INetFwPolicy2 ) Activator . CreateInstance ( Type . GetTypeFromProgID ( CODE_STRING ) ) ; firewallRule . ApplicationName = CODE_STRING ; firewallRule . Action = NET_FW_ACTION_ . NET_FW_ACTION_ALLOW ; firewallRule . Description = CODE_STRING ; firewallRule . Enabled = true ; firewallRule . InterfaceTypes = CODE_STRING ; firewallRule . Name = CODE_STRING ; firewallPolicy . Rules . Add ( firewallRule ) ; <EOF>
sheet . Range [ CODE_STRING ] . IsWrapText = true ; <EOF>
DateTime targetDate = . . . ; long secondsTilRefresh = Math . Floor ( ( targetDate - DateTime . Now ) . TotalSeconds ) ; <EOF>
try { command . CommandText = CODE_STRING ; command . Parameters . Add ( new SqlParameter ( CODE_STRING , CODE_INTEGER ) ) ; command . Parameters . Add ( new SqlParameter ( CODE_STRING , CODE_STRING ) ) ; foreach ( var itemIDs in this . SelectedItemIds ) { command . Parameters [ CODE_STRING ] . Value = batchID ; command . Parameters [ CODE_STRING ] . Value = itemIDs ; command . ExecuteNonQuery ( ) ; } transaction . Commit ( ) ; } <EOF>
public interface IUserRepository : IRepository < User > { void Authenticate ( Useruser ) ; } public class UserRepository : BaseRepository < User > , IUserRepository { public void Authenticate ( User user ) { } } <EOF>
while ( true ) { parent = current ; if ( i < current . Data ) <EOF>
byte [ ] binaryData = Convert . FromBase64String ( bgImage64 ) ; BitmapImage bi = new BitmapImage ; bi . BeginInit ( ) ; bi . StreamSource = new MemoryStream ( binaryData ) ; bi . EndInit ( ) ; Image img = new Image ( ) ; img . Source = bi ; <EOF>
var lastBalance = decimal . MaxValue ; foreach ( DataRow dr in dt . Rows ) { if ( ! string . IsNullOrEmpty ( dr [ CODE_INTEGER ] . ToString ( ) ) ) { var currentBalance = Convert . ToDecimal ( dr [ CODE_INTEGER ] ) ; if ( currentBalance < lastBalance ) { lastBalance = currentBalance ; balances . Add ( dr [ CODE_INTEGER ] . ToString ( ) ) ; } else { break ; } } } <EOF>
try { using ( SqlConnection connect = new SqlConnection ( . . . . ) ) using ( SqlCommand command = new SqlCommand ( CODE_STRING , connect ) ) { connect . Open ( ) ; using ( SqlDataReader reader = command . ExecuteReader ( ) ) { while ( reader . Read ( ) ) { Console . WriteLine ( reader [ CODE_STRING ] . ToString ( ) ) ; Console . WriteLine ( reader [ CODE_STRING ] . ToString ( ) ) ; } } } } catch ( Exception e ) { Console . WriteLine ( e . ToString ( ) ) ; } <EOF>
public class Foo < T > { public static string MyMethod ( ) { return CODE_STRING + typeof ( T ) . ToString ( ) ; } } class Program { static void Main ( ) { Type myType = typeof ( string ) ; var fooType = typeof ( Foo < > ) . MakeGenericType ( myType ) ; var myMethod = fooType . GetMethod ( CODE_STRING , BindingFlags . Static | BindingFlags . Public ) ; var result = ( string ) myMethod . Invoke ( null , null ) ; Console . WriteLine ( result ) ; } } <EOF>
EmpInfoDS = new DataSet ( ) ; con . Open ( ) ; string sqlRecords = CODE_STRING ; EmpInfoDA = new OleDbDataAdapter ( sqlRecords , con ) ; EmpInfoDA . Fill ( EmpInfoDS , CODE_STRING ) ; con . Close ( ) ; <EOF>
BULK INSERT MyTable FROM ' c : \ myfile . txt ' WITH ( FIELDTERMINATOR = CODE_CHAR , ROWTERMINATOR = ' ' ) <EOF>
this . menuMain . Items . Add ( new ToolStripSeparator ( ) ) ; <EOF>
var dir = new DirectoryInfo ( CODE_STRING ) ; foreach ( var file in dir . EnumerateFiles ( CODE_STRING , SearchOption . AllDirectories ) ) { } <EOF>
c3 = c1 . CombineLatest ( c2 , ( a , b ) = > a && b ) . DistinctUntilChanged ( ) <EOF>
private static void FileCleanup ( string directoryName ) { try { string [ ] filenames = Directory . GetFiles ( directoryName ) ; foreach ( string filename in filenames ) { File . Delete ( filename ) ; } if ( Directory . Exists ( directoryName ) ) { Directory . Delete ( directoryName ) ; } } catch ( Exception ex ) { } } <EOF>
ListBox listBox1 = new ListBox ( ) ; listBox1 . SetValue ( ScrollViewer . HorizontalScrollBarVisibilityProperty , ScrollBarVisibility . Disabled ) ; listBox1 . SetValue ( ScrollViewer . VerticalScrollBarVisibilityProperty , ScrollBarVisibility . Disabled ) ; listBox1 . SetValue ( ScrollViewer . CanContentScrollProperty , false ) ; listBox1 . SetValue ( ScrollViewer . IsDeferredScrollingEnabledProperty , true ) ; <EOF>
var downStream = statusStream . Aggregate < WebsiteStatus , IEnumerable < string > > ( new string [ CODE_INTEGER ] , ( down , newStatus ) = > { if ( newStatus . IsUp ) return down . Where ( uri = > uri != newStatus . Uri ) ; else if ( ! down . Contains ( newStatus . Uri ) ) return down . Concat ( new string [ ] { newStatus . Uri } ) ; else return down ; } ) ; var upStream = statusStream . Aggregate < WebsiteStatus , IEnumerable < string > > ( new string [ CODE_INTEGER ] , ( up , newStatus ) = > { if ( ! newStatus . IsUp ) return up . Where ( uri = > uri != newStatus . Uri ) ; else if ( ! up . Contains ( newStatus . Uri ) ) return down . Concat ( new string [ ] { newStatus . Uri } ) ; else return up ; } ) ; var allDown = upStream . Select ( up = > ! up . Any ( ) ) ; <EOF>
int row = dgvHardware . CurrentCell . RowIndex ; <EOF>
/* add current samples to totals */ total_u += u_dcbus_pv_act [ i ] ; total_p += p_dcbus_pv_act [ i ] ; /* every fourth tick, calc average and reset totals */ if ( i % CODE_INTEGER == CODE_INTEGER ) { average_u = total_u / CODE_INTEGER ; average_p = total_p / CODE_INTEGER ; total_u = CODE_INTEGER ; total_p = CODE_INTEGER ; } u_dcbus_target = average_u ; p_dcbus_pv_avg = average_p ; i ++ ; <EOF>
var tabBarItem = new UITabBarItem ( CODE_STRING , null , CODE_INTEGER ) ; tabBarItem . SetFinishedImages ( UIImage . FromBundle ( CODE_STRING ) , UIImage . FromBundle ( CODE_STRING ) ) ; var controllerToAdd = new UIViewController ( ) { TabBarItem = tabBarItem } ; tabBarController . SetViewControllers ( new UIViewController [ ] { controllerToAdd } ; <EOF>
public int ? NullableInt ( string str ) { int i ; if ( int . TryParse ( str , out i ) ) return i ; return null ; } <EOF>
private ManualResetEvent mre = new ManualResetEvent ( false ) ; private void OpenForm ( ) { if ( FormThread == null ) { FormThread = new Thread ( FormStub ) ; FormThread . SetApartmentState ( ApartmentState . STA ) ; FormThread . Start ( ) ; mre . WaitOne ( ) ; } } private void FormStub ( ) { Form = new ConnectorForm ( ) ; mre . Set ( ) ; Application . Run ( Form ) ; } <EOF>
string selectedItemMouthColumn = listView . SelectedItems [ CODE_INTEGER ] . SubItems [ listView . Columns . IndexOf ( MOUTH ) ] . Text ; <EOF>
client . DefaultRequestHeaders . Authorization = new AuthenticationHeaderValue ( CODE_STRING , CODE_STRING + apiKey ) ; <EOF>
List < SavedOption > finalSavedOptions = savedOptions . Where ( x = > itemOptions . Any ( y = > OptionTextDoesMatch ( y , x ) && y . SomeID == x . SomeID ) ) . ToList ( ) ; <EOF>
public NewOne ( ) { InitializeComponent ( ) ; LoginWindow login = new LoginWindow ( ) ; bool ? result = login . ShowDialog ( ) ; if ( ! result . HasValue || result . Value == false ) this . Close ( ) ; } <EOF>
private void dataGridView2_CellValueChanged ( object sender , DataGridViewCellEventArgs e ) { if ( e . ColumnIndex == CODE_INTEGER ) textBox9 . Text = CellSum ( ) . ToString ( ) ; } private double CellSum ( ) { double sum = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < dataGridView2 . Rows . Count ; ++ i ) { double d = CODE_INTEGER ; Double . TryParse ( dataGridView2 . Rows [ i ] . Cells [ CODE_INTEGER ] . Value . ToString ( ) , out d ) ; sum += d ; } return sum ; } <EOF>
txt_netamount . Text = decimalValue . ToString ( CODE_STRING ) ; <EOF>
Path path = XamlReader . Load ( CODE_STRING ) as Path ; <EOF>
for ( DateTime date = StartDate . AddDays ( nrOfDaysToLoopBy - CODE_INTEGER ) ; date . Date <= EndDate . Date ; date = date . AddDays ( nrOfDaysToLoopBy ) ) { } <EOF>
var query = Points . GroupBy ( p = > new { p . X , p . Y } ) . Where ( g = > g . Count ( ) == CODE_INTEGER ) . Select ( g = > g . Single ( ) ) ; <EOF>
private static void Main ( ) { Regex pattern = new Regex ( CODE_STRING ) ; string sample = CODE_STRING ; string result = pattern . Replace ( sample , m = > String . Format ( CODE_STRING , m . Groups [ CODE_STRING ] . Value , Char . ToUpper ( m . Groups [ CODE_STRING ] . Value [ CODE_INTEGER ] ) , m . Groups [ CODE_STRING ] . Value . Substring ( CODE_INTEGER ) ) ) ; Console . WriteLine ( result ) ; } <EOF>
public class Team { private IList < Player > _players . . . } public class Player { public string Name { get ; set ; } public abstract Influence { get ; } } public class Forward : Player { public override Influence { get { return } } <EOF>
panelNew . Style [ HtmlTextWriterStyle . Position ] = ' absolute ' ; panelNew . Style [ HtmlTextWriterStyle . ZIndex ] = ' CODE_INTEGER ' ; <EOF>
string s = CODE_STRING ; int count = CODE_INTEGER ; string s2 = Regex . Replace ( s , CODE_STRING , match = > { count ++ ; return count > CODE_INTEGER ? CODE_STRING : CODE_STRING ; } ) ; <EOF>
using System . Linq ; if ( ! array2 . Except ( array1 ) . Any ( ) ) { . . . validated ! } <EOF>
BitmapImage bimg = new BitmapImage ( ) ; bimg . CreateOptions = BitmapCreateOptions . BackgroundCreation | BitmapCreateOptions . IgnoreImageCache <EOF>
Graphics . DrawImage <EOF>
var myTAccomtypes = from d in connection . Get < ALocal . proptype > ( ) . ToList ( ) where sTypes . Contains ( d . proptype_id . ToString ( ) ) select new { d . proptype_id , d . proptype_name } ; DataTable AcomType = LINQToDataTable ( myTAccomtypes ) ; StringBuilder sb = new StringBuilder ( ) ; foreach ( var row in AcomType . Rows . OfType < DataRow > ( ) . Take ( CODE_INTEGER ) ) { sb . Append ( CODE_STRING ) ; sb . Append ( row [ CODE_STRING ] . ToString ( ) ) ; sb . Append ( CODE_STRING ) ; } HldUserSet . TuAccomtypes = sb . ToString ( ) ; <EOF>
class Program { static void Main ( string [ ] args ) { var list = new List < MyObject > ( new [ ] { new MyObject { Name = CODE_STRING , Age = CODE_INTEGER } , new MyObject { Name = CODE_STRING , Age = CODE_INTEGER } , new MyObject { Name = CODE_STRING , Age = CODE_INTEGER } , } ) ; var sortedList = from element in list orderby element . Name orderby element . Age select element ; foreach ( var item in sortedList ) { Console . WriteLine ( CODE_STRING , item . Name , item . Age ) ; } } } <EOF>
if ( ! Page . IsPostBack ) { GridView1 . DataSourceID = CODE_STRING ; GridView1 . DataBind ( ) ; } <EOF>
object HandleEvent ( object [ ] parameters ) <EOF>
SmtpClient mailer = new SmtpClient ( ) ; mailer . Host = CODE_STRING ; mailer . Credentials = new System . Net . NetworkCredential ( CODE_STRING , CODE_STRING ) ; <EOF>
private void Populate ( object sender , EventArgs e ) { listView1 . Items . Add ( CODE_STRING ) ; listView1 . Items . Add ( CODE_STRING ) ; listView1 . Items . Add ( CODE_STRING ) ; listView1 . Items . Add ( CODE_STRING ) ; } private void SelectFirst ( object sender , EventArgs e ) { listView1 . Items [ CODE_INTEGER ] . Selected = true ; listView1 . Select ( ) ; } private void SortAndSelect ( object sender , EventArgs e ) { listView1 . Sorting = SortOrder . Ascending ; listView1 . Sort ( ) ; listView1 . Items [ CODE_INTEGER ] . Selected = true ; listView1 . Select ( ) ; } <EOF>
if ( a != b ) { a ^= b ; b ^= a ; a ^= b ; } <EOF>
public ActionResult Create ( Job job ) { if ( job . TargetDateSurvey . Value < DateTime . Today ) { ModelState . AddModelError ( CODE_STRING , CODE_STRING ) ; } if ( ModelState . IsValid ) . . . } <EOF>
GameSchedulingEntities db = new GameSchedulingEntities ( ) ; Group obj = db . Groups . Find ( Id ) ; obj . Name = somethingelse ; db . SaveChanges ( ) ; <EOF>
XNamespace ns = CODE_STRING ; var xdoc = XDocument . Load ( CODE_STRING ) ; var names = new [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ; var someCubes = xdoc . Root . Element ( ns + CODE_STRING ) . Elements ( ) . Select ( x = > x . Elements ( ) . Where ( y = > names . Contains ( y . Attribute ( CODE_STRING ) . Value ) ) ) . Select ( x = > { return x . Select ( y = > { return new { datum = ( DateTime ) y . Parent . Attribute ( CODE_STRING ) , currency = ( string ) y . Attribute ( CODE_STRING ) , rate = ( string ) y . Attribute ( CODE_STRING ) } ; } ) ; } ) ; <EOF>
string input = " [ PC ( name = \ " PC1 \ " , ip = \ " CODE_REAL CODE_REAL CODE_REAL \ " , subnet = \ " CODE_REAL CODE_REAL CODE_REAL \ " , gateway = \ " CODE_REAL CODE_REAL CODE_REAL \ " ) ] [ PC ( name = \ CODE_STRING ; MatchCollection matches = Regex . Matches ( input , CODE_STRING ) ; object [ ] [ ] values = matches . OfType < Match > ( ) . Select ( m = > new object [ ] { m . Groups [ CODE_INTEGER ] , m . Groups [ CODE_INTEGER ] , m . Groups [ CODE_INTEGER ] , m . Groups [ CODE_INTEGER ] } ) . ToArray ( ) ; <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( ! IsPostBack ) { InstanceData = ( DataSet ) ( Session [ CODE_STRING ] ) ; id1 . DataSource = InstanceData . tables [ CODE_INTEGER ] ; id1 . DataTextField = CODE_STRING ; id1 . DataValueField = CODE_STRING ; id1 . DataBind ( ) ; } } protected void Button1_Click ( object sender , EventArgs e ) { string DataBase = id1 . SelectedValue ; } <EOF>
var regex = new Regex ( CODE_STRING ) ; var file = Directory . GetFiles ( path , CODE_STRING ) . Where ( f = > regex . IsMatch ( File . GetFileNameWithoutExtension ( f ) ) ) . OrderBy ( f = > f ) . FirstOrDefault ( ) ; <EOF>
MessageBox . Show ( CODE_STRING , CODE_STRING , MessageBoxButtons . OK , ( MessageBoxIcon ) Enum . Parse ( typeof ( MessageBoxIcon ) , ComboBox . Text . ToString ( ) ) ; <EOF>
Group Policy Settings Reference for Windows and Windows Server <EOF>
[ OperationContract ( Action = CODE_STRING , ReplyAction = CODE_STRING ) ] System . ServiceModel . Channels . Message ProcessMessage ( System . ServiceModel . Channels . Message msg ) ; } <EOF>
myObject . Image = new Binary ( imageByteArray ) ; <EOF>
XNamespace ns = CODE_STRING ; var courses = from e in doc . Descendants ( ns + CODE_STRING ) let lowname = e . Value . ToLowerInvariant ( ) where lowname . Contains ( CODE_STRING ) orderby e . Value select e . Value ; <EOF>
?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ? ?? ?? ? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ? ?? ?? ? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? ?? <EOF>
using System ; using System . IO ; using System . Linq ; using System . Windows . Media . Imaging ; class Program { static void Main ( ) { using ( var stream = File . OpenRead ( CODE_STRING ) ) { var decoder = BitmapDecoder . Create ( stream , BitmapCreateOptions . None , BitmapCacheOption . None ) ; var frame = decoder . Frames . First ( ) ; Console . WriteLine ( CODE_STRING , frame . PixelWidth , frame . PixelHeight ) ; } } } <EOF>
public class StationProperty < T > : StationProperty { public StationProperty ( ) { } public StationProperty ( int id , T val , string desc = CODE_STRING ) { Id = id ; Desc = desc ; Value = val ; } public int Id { get ; set ; } public string Desc { get ; set ; } public T Value { get ; set ; } object StationProperty . Value { get { return Value ; } } public Type ValueType { get { return typeof ( T ) ; } } } public interface StationProperty { int Id { get ; set ; } string Desc { get ; set ; } object Value { get ; } Type ValueType { get ; } } <EOF>
public class VendorClass { public int VendorID { get ; set ; } private string _vendorName ; public string VendorName { get { return _vendorName ; } set { if ( value . Length > CODE_INTEGER ) { _vendorName = value . Substring ( CODE_INTEGER , CODE_INTEGER ) ; } else { _vendorName = value ; } } } } <EOF>
var onlyLetters = new String ( fileName . Name . TakeWhile ( Char . IsLetter ) . ToArray ( ) ) ; <EOF>
Keyboard . ClearFocus ( ) ; <EOF>
class Program { private const int CONST_INT = CODE_INTEGER ; static void Main ( string [ ] args ) { Console . WriteLine ( CONST_INT == CODE_INTEGER ) ; } } <EOF>
. . . var rg = new TableRowGroup ( ) ; rg . Rows . Add ( row ) ; t . RowGroups . Add ( rg ) ; _doc2 . Blocks . Add ( t ) ; <EOF>
#if DEBUG RunMyDEBUGRoutine ( ) ; #else RunMyRELEASERoutine ( ) ; # endif <EOF>
Excel . Range dataRange = ( Excel . Range ) excelWorksheet . get_Range ( CODE_STRING , CODE_STRING ) ; dataRange . Value2 = " This is the first line " + " This is the second line " + thirdLineString ; <EOF>
IList < IWebElement > row = date . FindElements ( By . TagName ( CODE_STRING ) ) ; IList < IWebElement > col = date . FindElements ( By . TagName ( CODE_STRING ) ) ; foreach ( IWebElement cell in col ) { if ( cell . Text . Equals ( CODE_STRING ) ) { cell . Click ( ) ; break ; } } <EOF>
using ( new NetworkConnection ( CODE_STRING , readCredentials ) ) using ( new NetworkConnection ( CODE_STRING , writeCredentials ) ) { File . Copy ( CODE_STRING , CODE_STRING ) ; } <EOF>
netsh http show urlacl <EOF>
using ( DataShemeDataContext context = new DataShemeDataContext ( CODE_STRING ) ) { if ( ! context . DatabaseExists ( ) ) context . CreateDatabase ( ) ; } Console . ReadLine ( ) ; <EOF>
private void Kill_IE ( ) { Process [ ] ps = Process . GetProcessesByName ( CODE_STRING ) ; foreach ( Process p in ps ) { try { if ( ! p . HasExited ) { p . Kill ( ) ; } } catch ( Exception ex ) { Console . WriteLine ( String . Format ( CODE_STRING , p . ToString ( ) , ex . ToString ( ) ) ) ; } } } <EOF>
string format = CODE_STRING ; <EOF>
using ( var client = new HttpClient ( ) ) { var resp = await client . PostAsJsonAsync ( CODE_STRING , new { username = CODE_STRING , password = CODE_STRING } ) ; var str = await resp . Content . ReadAsStringAsync ( ) ; } <EOF>
private void comboBox1_KeyDown ( object sender , KeyEventArgs e ) { if ( e . Key == Key . Return ) { } else { } } <EOF>
InContext inContext = new InContext ( cnStr ) ; BatchPINDetail entity = inContext . BatchDetailsRecords . OrderByDescending ( x = > x . Number ) . First ( ) ; BatchPINDetail entities = inContext . BatchDetailsRecords . Where ( x = > x . Number == x . Max ( x = > x . Number ) ) . ToArray ( ) ; int num = inContext . BatchDetailsRecords . Max ( x = > x . Number ) ; entity . Number += CODE_INTEGER ; inContext . SaveChanges ( ) ; <EOF>
PrintDialog printDialog = new PrintDialog ( ) ; if ( printDialog . ShowDialog ( ) . GetValueOrDefault ( false ) ) { printDialog . PrintVisual ( this , this . Title ) ; } <EOF>
ssh . Write ( command ) ; string response = ssh . ReadResponse ( ) ; <EOF>
string imagepath = Server . MapPath ( CODE_STRING ) ; string [ ] images = Directory . GetFiles ( imagepath , CODE_STRING , SearchOption . TopDirectoryOnly ) ; foreach ( string filepath in images ) { Image te = new Image ( ) ; string fileurl = Path . GetFileName ( filepath . ToString ( ) ) ; te . ImageUrl = CODE_STRING + fileurl ; te . Height = CODE_INTEGER ; te . Width = CODE_INTEGER ; te . CssClass = CODE_STRING ; myimages . Controls . Add ( te ) ; } <EOF>
List < UserData > userData = new List < UserData > ( ) ; Ektron . Cms . API . User . User user = new Ektron . Cms . API . User . User ( ) ; long groupId = Id ; foreach ( UserData u in user . GetUsers ( groupId , CODE_STRING ) ) { userData . Add ( user . GetUser ( u . Id ) ) ; } return userData ; <EOF>
List < ContactEvent > <EOF>
private static void A ( Object sender , EventArgs e ) { Console . Out . Write ( CODE_CHAR ) ; } private static void B ( Object sender , EventArgs e ) { Console . Out . Write ( CODE_CHAR ) ; } . . . EventHandler eh = null ; eh += A ; eh += A ; eh += B ; eh += A ; eh -= A ; eh ( null , EventArgs . Empty ) ; <EOF>
[ ForeignKey ( CODE_STRING ) ] public VirtualTerminal VirtualTerminal { get ; set ; } <EOF>
using ( var file = File . OpenWrite ( localFileName ) ) <EOF>
BindingList < T > <EOF>
public ActionResult Index ( int id = CODE_INTEGER , string name = CODE_STRING ) { . . . } <EOF>
List < string > logLineElements = line . Split ( CODE_CHAR ) . Select ( e = > e . Trim ( ) ) . ToList ( ) ; <EOF>
stream . ReadTimeOut = CODE_INTEGER * CODE_INTEGER ; BinaryFormatter deserializer = new BinaryFormatter ( ) ; try { while ( ! interrupted ) { System . Diagnostics . Debug . WriteLine ( CODE_STRING ) ; AbstractMessage msg = ( AbstractMessage ) deserializer . Deserialize ( stream ) ; System . Diagnostics . Debug . WriteLine ( CODE_STRING + msg . GetType ( ) ) ; if ( msg == ConnectionEndsMessage ) break ; raiseEvent ( msg ) ; } } catch ( IOException ex ) { . . . handle timeout and other IOExceptions here . . . } <EOF>
private void Media_Ended ( object sender , EventArgs e ) { media . Position = TimeSpan . Zero ; media . Play ( ) ; } <EOF>
using System ; using System . Windows . Forms ; namespace DelayedShow { public partial class Form1 : Form { private bool _canShow = false ; private Timer _timer ; public Form1 ( ) { InitializeComponent ( ) ; _timer = new Timer ( ) ; _timer . Interval = CODE_INTEGER ; _timer . Tick += new EventHandler ( timer_Tick ) ; _timer . Enabled = true ; } void timer_Tick ( object sender , EventArgs e ) { _canShow = true ; Visible = true ; } protected override void SetVisibleCore ( bool value ) { if ( _canShow ) { base . SetVisibleCore ( value ) ; } else { base . SetVisibleCore ( false ) ; } } } } <EOF>
var checkinNoteFieldValues = new [ ] { new CheckinNoteFieldValue ( CODE_STRING , CODE_STRING ) , new CheckinNoteFieldValue ( CODE_STRING , CODE_STRING ) } ; var checkinNote = new CheckinNote ( checkinNoteFieldValues ) ; var pendingChanges = workspace . GetPendingChanges ( ) ; workspace . CheckIn ( pendingChanges , CODE_STRING , checkinNote , null , null ) ; <EOF>
DateTime MyDateTime = ( ( DateTime ) MyDatePicker . Value ) . Date . Add ( ( ( DateTime ) MyTimePicker . Value ) . TimeOfDay ) ; <EOF>
Template . Find ( CODE_STRING ) <EOF>
{ CODE_STRING : { CODE_STRING : CODE_STRING , CODE_STRING : CODE_STRING , CODE_STRING : CODE_INTEGER } } <EOF>
double dist = Math . Sqrt ( Math . Pow ( x2 - x1 , CODE_INTEGER ) + Math . Pow ( y2 - y1 , CODE_INTEGER ) ) ; <EOF>
var firstN = dict . ToDictionary ( kvp = > kvp . Key , kvp = > kvp . Value . Take ( CONST_MAX ) . ToList ( ) ) ; <EOF>
foreach ( var ctrl in panels . SelectMany ( x = > x . Cast < Control > ( ) ) ) { } <EOF>
System . Collections . Generic . Dictionary < string , string > hashTable = new System . Collections . Generic . Dictionary < string , string > ( ) ; string myString = CODE_STRING ; string pattern = CODE_STRING ; System . Text . RegularExpressions . MatchCollection matches = System . Text . RegularExpressions . Regex . Matches ( myString , pattern ) ; foreach ( System . Text . RegularExpressions . Match m in matches ) { string key = m . Groups [ CODE_INTEGER ] . Value ; string value = m . Groups [ CODE_INTEGER ] . Value ; hashTable [ key ] = value ; } <EOF>
if ( string . IsNullOrEmpty ( sbcId ) ) Parameters . Add ( new OleDbParameter ( CODE_STRING , DBNull . Value ) ) ; else Parameters . Add ( new OleDbParameter ( CODE_STRING , sbcId ) ) ; <EOF>
IEnumerable < KeyValuePair < Filter , string > > DoIt ( Dictionary < Filter , string > dict , Filter f ) { return dict . Where ( d = > ( f . A == null || d . Key . A == f . A ) && ( f . B == null || d . Key . B == f . B ) && ( f . Start == null || f . Start < d . Key . Start ) /* && Condition for End */ ) ; } <EOF>
foreach ( DataGridViewRow dgRow in dgvPatList . Rows ) { if ( dgRow . Cells [ CODE_INTEGER ] . Value == null ) continue ; dgRow . Cells [ CODE_STRING ] . Value = dgRow . Cells [ CODE_INTEGER ] . Value . ToString ( ) == CODE_STRING ? Properties . Resources . Tick_Green : Properties . Resources . no_results ; } <EOF>
foreach ( object item in row . ItemArray ) { DateTime parsed ; if ( DateTime . TryParse ( item . ToString ( ) , out parsed ) ) { writer . Write ( String . Format ( CODE_STRING , parsed . ToString ( CODE_STRING ) + CODE_STRING ) ) ; } else { writer . Write ( String . Format ( CODE_STRING , item . ToString ( ) + CODE_STRING ) ) ; } } foreach ( DataColumn col in jackTDataSet . Tables [ CODE_INTEGER ] . Columns ) { if ( col . ColumnName == CODE_STRING ) { writer . Write ( String . Format ( CODE_STRING , ( ( DateTime ) row [ col . ColumnName ] ) . ToString ( CODE_STRING ) + CODE_STRING ) ) ; } else { writer . Write ( String . Format ( CODE_STRING , row [ col . ColumnName ] . ToString ( ) + CODE_STRING ) ) ; } } <EOF>
while ( panel . Controls . Count > CODE_INTEGER ) { panel . Controls [ CODE_INTEGER ] . Dispose ( ) ; } <EOF>
Option1 : IL_0000 : newobj UserQuery + SomeObjectModel . . ctor IL_0005 : stloc CODE_REAL IL_0006 : ldloc CODE_REAL IL_0007 : callvirt UserQuery + SomeObjectModel . SomeMethod IL_000C : ret Option2 : IL_0000 : newobj UserQuery + SomeObjectModel . . ctor IL_0005 : call UserQuery + SomeObjectModel . SomeMethod IL_000A : ret <EOF>
Query < T > SqlQuery < T > ( string query , T sample ) { } SqlQuery ( CODE_STRING , new { Abc = CODE_INTEGER , Def = CODE_INTEGER } ) <EOF>
btn . Style = Application . Current . Resources [ CODE_STRING ] as Style ; <EOF>
points = pixels * CODE_INTEGER / CODE_INTEGER <EOF>
public void processinThreads ( ) { for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { int local = i ; Thread t = new Thread ( new ThreadStart ( ( ) = > DoSomething ( local , processCallback ) ) ) ; t . Start ( ) ; } } <EOF>
string [ ] foo = nonLetters . Select ( c = > c . ToString ( ) ) . ToArray ( ) ; <EOF>
using ( System . Transacation . TransactionScope myScope = new TransactionScope ( ) ) { myScope . Complete ( ) ; } <EOF>
string folder = System . Web . HttpContext . Current != null ? System . IO . Path . Combine ( AppDomain . CurrentDomain . BaseDirectory , CODE_STRING ) : System . IO . Path . GetDirectoryName ( System . Reflection . Assembly . GetExecutingAssembly ( ) . Location ) ; <EOF>
Fishes_FulltextSearch ( CODE_STRING ) <EOF>
string format = CODE_STRING ; while ( list . GroupBy ( x = > x . ToString ( format ) ) . Any ( g = > g . Count ( ) > CODE_INTEGER ) ) { format += CODE_STRING ; } <EOF>
{ \ rtf1 \ ansi \ ansicpg1252 \ deff0 \ deflang6153 { \ fonttbl { \ f0 \ fnil \ fcharset0 Calibri ; } } { \ colortbl ; \ red255 \ green0 \ blue0 ; } { \ * \ generator Msftedit CODE_REAL CODE_REAL CODE_REAL ; } \ viewkind4 \ uc1 \ pard \ sa200 \ sl276 \ slmult1 \ lang9 \ b \ f0 \ fs22 Datetime \ b0 - \ cf1 Event Type \ cf0 - Event Details \ par } <EOF>
arg . Name <EOF>
public bool DetectBall ( List < GameObject > Within ) { foreach ( GameObject go in Within ) { if ( go is Ball ) return true ; } return false ; } <EOF>
private DateTime _LastExecution = DateTime . MinValue ; public void UserControl_KeyDown ( object sender , EventArgs ea ) { if ( ( DateTime . Now - _LastExecution ) . TotalMilliSeconds > CODE_INTEGER ) { /* do you stuff */ _LastExecution = DateTime . Now ; } } <EOF>
var container = new CompositionContainer ( /* your container .ctor here */ ) ; var type = typeof ( IYourType ) ; var export = container . GetExports ( type , null , null ) . FirstOrDefault ( ) ; var obj = export . Value as YourCostingHere ; <EOF>
public bool GetElectricalStatus ( string printName ) { List < object > eGoodList = new List < object > ( ) ; var eGoodCountQuery = from row in singulationOne . Table . AsEnumerable ( ) where row . Field < String > ( CODE_STRING ) == printName select row . Field < String > ( CODE_STRING ) ; foreach ( var eCode in eGoodCountQuery ) { if ( ! string . IsNullOrEmpty ( eCode . ToString ( ) ) ) { int ? eCodeInt = Convert . ToInt32 ( eCode ) ; if ( eCodeInt != null && ( eCodeInt >= CODE_INTEGER && eCodeInt <= CODE_INTEGER ) || eCodeInt == CODE_INTEGER ) { eGoodList . Add ( eCode ) ; } } } if ( eGoodList . Count ( ) > CODE_INTEGER ) { return false ; } else { return true ; } } <EOF>
using namespace SomeNamespace ; <EOF>
public Form1 ( ) { InitializeComponent ( ) ; Rectangle rect = new Rectangle ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; Click += Form1_Click ; } private void Form1_Click ( object sender , EventArgs e ) { Rectangle rect = new Rectangle ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; Point cursorPos = this . PointToClient ( Cursor . Position ) ; if ( rect . Contains ( cursorPos ) ) { MessageBox . Show ( CODE_STRING ) ; } } <EOF>
ToolStripItem [ ] newItems = { new ToolStripMenuItem ( CODE_STRING , null , DoThis ) , new ToolStripMenuItem ( CODE_STRING , null , DoThis ) } ; this . contextMenuStrip1 . Items . Add ( new ToolStripMenuItem ( CODE_STRING , null , newItems ) { Name = CODE_STRING } ) ; var clearItem = this . contextMenuStrip1 . Items [ CODE_STRING ] as ToolStripMenuItem ; <EOF>
aDict . Clear ( ) ; <EOF>
using System ; using System . Collections . Generic ; using System . ComponentModel ; using System . Data ; using System . Drawing ; using System . Linq ; using System . Text ; using System . Windows . Forms ; using System . Runtime . InteropServices ; namespace WindowsFormsApplication1 { public partial class Form1 : Form { [ DllImport ( CODE_STRING ) ] public static extern short GetAsyncKeyState ( int vKey ) ; public Form1 ( ) { InitializeComponent ( ) ; } } } <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( ! IsPostBack ) { string frameURL = Request . UrlReferrer . ToString ( ) ?? CODE_STRING ; if ( ( frameURL != null ) && ( frameURL != CODE_STRING ) ) { Uri frameURI = new Uri ( frameURL ) ; NameValueCollection queryVars = HttpUtility . ParseQueryString ( frameURI . Query ) ; if ( queryVars [ CODE_STRING ] == CODE_STRING || queryVars [ CODE_STRING ] == CODE_STRING ) { SelectCanceller . SelectedValue = CODE_STRING ; primaryStandby = false ; } } <EOF>
Child Find ( Parent parent , object criteria ) { return parent . Childs . Select ( c = > c . Match ( criteria ) ? c : this . Find ( c , criteria ) ) . FirstOrDefault ( ) ; } <EOF>
public void videoImage ( Image image ) { if ( this . InvokeRequired ) { this . Invoke ( new MethodInvoker ( delegate { videoImage ( image ) ; } ) ) ; } this . VideoViewer . Image = image ; } <EOF>
myPageViewModel . ColourList = Enum . GetNames ( typeof ( Colors ) ) . Select ( c = > new SelectListItem ( ) { Text = c , Value = c } ) . ToArray ( ) ; <EOF>
public class DatabaseConnector < TConnection > where TConnection : DbConnection , new ( ) { <EOF>
private void textBox1_TextChanged ( object sender , EventArgs e ) { this . textBox2 . TextChanged -= textBox2_TextChanged ; this . textBox2 . Text = CODE_STRING ; this . textBox2 . TextChanged += textBox2_TextChanged ; } private void textBox2_TextChanged ( object sender , EventArgs e ) { this . textBox1 . TextChanged -= textBox1_TextChanged ; this . textBox1 . Text = CODE_STRING ; this . textBox1 . TextChanged += textBox1_TextChanged ; } <EOF>
. WithMany ( ) . HasForeignKey ( . . ) <EOF>
var mainWindowInstant = ( MainWindow ) App . Current . MainWindow ; mainWindowInstant . Getcanvas . MouseMove += new MouseEventHandler ( . . . ) ; <EOF>
foreach ( var x in attrs ) { var attributeType = x . GetType ( ) ; if ( attributeType . FullName == CODE_STRING ) { var id = ( int ) attributeType . GetProperty ( CODE_STRING ) . GetValue ( x ) ; Console . WriteLine ( id ) ; } } <EOF>
public class Provider < T > where T : ICommonInterface <EOF>
DELETE FROM Ficheros WHERE IDFichero IN ( CODE_INTEGER , CODE_INTEGER , . . . ) AND NOT EXISTS ( SELECT CODE_INTEGER FROM ChildTable WHERE ChildTable . IDFichero = Ficheros . IDFichero ) <EOF>
string site = CODE_STRING ; webBrowser1 . Navigate ( CODE_STRING + site ) ; <EOF>
\ s ( ? = \ w + : ) <EOF>
IEnumerable < RunDetail > runDetails = from run in xdocument . Descendants ( CODE_STRING ) select new RunDetail { Name = run . Element ( CODE_STRING ) . Value , Date = int . Parse ( run . Element ( CODE_STRING ) . Value ) } ; <EOF>
string [ ] readText = File . ReadAllLines ( path ) ; for ( int i = CODE_INTEGER ; i < readText . length ; i ++ ) { readText [ i ] = readText [ i ] . Trim ( [ CODE_CHAR ] ) ; } File . WriteAllLines ( path , readText ) ; <EOF>
using ( var textReader = File . OpenText ( CODE_STRING ) ) using ( var writer = File . CreateText ( CODE_STRING ) ) { do { string line = textReader . ReadLine ( ) ; writer . WriteLine ( line ) ; } while ( ! textReader . EndOfStream ) ; } <EOF>
public static object SlowFunction ( ) { if ( ExcelDnaUtil . IsInFunctionWizard ( ) ) return " ! ! ! In Function Wizard " ; } <EOF>
var combined = passed . Concat ( failed ) . GroupBy ( x = > x . DataDate ) . Select ( x = > new ReportData { DataDate = x . Key , quantity = x . Sum ( rd = > rd . quantity ) , rejected = x . Sum ( rd = > rd . rejected ) , cumulativeQuantity = x . Max ( rd = > rd . cumulativeQuantity ) , cumulativeRejected = x . Max ( rd = > rd . cumulativeRejected ) } ) . ToList ( ) ; for ( var i = CODE_INTEGER ; i < combined . Count ; i ++ ) { if ( combined [ i ] . cumulativeQuantity == CODE_INTEGER ) combined [ i ] . cumulativeQuantity = combined [ i - CODE_INTEGER ] . cumulativeQuantity ; if ( combined [ i ] . cumulativeRejected == CODE_INTEGER ) combined [ i ] . cumulativeRejected = combined [ i - CODE_INTEGER ] . cumulativeRejected ; } <EOF>
private static void SetEncryptedCookie ( string name , string value ) { var encryptName = SomeEncryptionMethod ( name ) ; Response . Cookies [ encryptName ] . Value = SomeEncryptionMethod ( value ) ; } private static string GetEncryptedCookie ( string name ) { return SomeDecryptionMethod ( Response . Cookies [ SomeDecryptionMethod ( name ) ] . Value ) ; } <EOF>
DetachedCriteria . For < User > ( ) . AddAlias ( CODE_STRING , CODE_STRING ) . Add ( Expression . Eq ( CODE_STRING , CODE_STRING ) ; <EOF>
Membership . GetUser ( ) . ProviderUserKey <EOF>
public Dictionary < string , Stream > GetData ( string [ ] paths ) { Dictionary < string , Stream > data = new Dictionary < string , Stream > ( ) ; foreach ( string path in paths ) { data [ path ] = new FileStream ( path , FileMode . Open ) ; } return data ; } <EOF>
Encoding . UTF8 . GetBytes ( ) <EOF>
var responseArray = JSON . parse ( result . d ) <EOF>
[ DllImport ( CODE_STRING ) ] static extern uint32 SetSpeed ( in uint64 sp ) ; private void button1_Click ( object sender , EventArgs e ) { SetSpeed ( CODE_INTEGER ) ; } <EOF>
private void _theCanvas_Tapped ( object sender , TappedRoutedEventArgs e ) { _pointerDeviceType . Text = e . PointerDeviceType . ToString ( ) ; var position = e . GetPosition ( _root ) ; _x . Text = position . X . ToString ( ) ; _y . Text = position . Y . ToString ( ) ; } <EOF>
var mybtncmd2 = new SqlCommand ( CODE_STRING , mybtnconn2 ) ; mybtncmd2 . Parameters . AddWithValue ( CODE_STRING , CODE_STRING ) ; mybtncmd2 . Parameters . AddWithValue ( CODE_STRING , CODE_STRING ) ; <EOF>
Memcached Binary Protocol <EOF>
btnOK . Text = CODE_STRING + Environment . NewLine + CODE_STRING ; <EOF>
var result = rank . Cast < ListItem > ( ) . ToArray ( ) ; <EOF>
CODE_CHAR <EOF>
return confirm ( CODE_STRING ) ; <EOF>
foreach ( var attribute in node . AttributeLists . SelectMany ( al = > al . Attributes ) ) { if ( csFile . FileSemanticModel . GetTypeInfo ( attribute ) . Type . ToDisplayString ( ) == CODE_STRING ) { var arg = attribute . ArgumentList . Arguments . FirstOrDefault ( aa = > aa . NameEquals . Name . Identifier . Text == CODE_STRING ) ; if ( arg != null && arg . Expression . IsKind ( SyntaxKind . TrueLiteralExpression ) ) validationKind = ValidationKind . JDate ; } } <EOF>
int [ ] maxIP = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int [ ] minIP = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; char [ ] sep = new char [ ] { CODE_CHAR } ; var ip = CODE_STRING ; string [ ] splitted = ip . Split ( sep ) ; for ( int i = CODE_INTEGER ; i < splitted . Length ; i ++ ) { if ( int . Parse ( splitted [ i ] ) > maxIP [ i ] ) { Console . WriteLine ( CODE_STRING ) ; break ; } else if ( int . Parse ( splitted [ i ] ) < minIP [ i ] ) { Console . WriteLine ( CODE_STRING ) ; break ; } } <EOF>
foreach ( var filePath in logpath ) { var sbRecord = new StringBuilder ( ) ; using ( var reader = new StreamReader ( filePath ) ) { do { var line = reader . ReadLine ( ) ; if ( Regex . Match ( line , datePattern ) && sbRecord . Length > CODE_INTEGER ) { HandleRecord ( sbRecord . ToString ( ) ) ; sbRecord . Clear ( ) ; sbRecord . AppendLine ( line ) ; } else { sbRecord . AppendLine ( line ) ; } } while ( ! reader . EndOfStream ) } } <EOF>
var _menagerMock = new Mock < IManager > ( ) ; _menagerMock . Setup ( x = > x . GetOrAdd ( CODE_STRING , It . IsAny < Func < Tuple < int > , string > > ( ) , It . IsAny < Tuple < int > > ( ) ) ) ; <EOF>
string displayedText ; DataRowView drw = null ; foreach ( var item in comboBox1 . Items ) { drw = item as DataRowView ; displayedText = null ; if ( drw != null ) { displayedText = drw [ comboBox1 . DisplayMember ] . ToString ( ) ; } else if ( item is string ) { displayedText = item . ToString ( ) ; } } <EOF>
var < %= DateFormat % > = CODE_STRING ; <EOF>
XElement input = XElement . Load ( filename ) ; foreach ( XElement feedChild in input . Elements ( CODE_STRING ) ) foreach ( XElement linkChild in feedChild . Elements ( CODE_STRING ) ) <EOF>
row . HeaderCell . Value = String . Format ( CODE_STRING , row . Index + CODE_INTEGER ) ; <EOF>
IsChecked = CODE_STRING <EOF>
MyMap . Style = MapStyle . None ; HttpMapTileDataSource dataSource = new HttpMapTileDataSource ( CODE_STRING ) ; MapTileSource tileSource = new MapTileSource ( dataSource ) ; tileSource . Layer = MapTileLayer . BackgroundReplacement ; MyMap . TileSources . Add ( tileSource ) ; <EOF>
var selectList = new SelectList ( ( from s in statList . ToList ( ) where s . Name != CODE_STRING select new { statusId = s . Id , statusName = s . Name } ) , CODE_STRING , CODE_STRING ) <EOF>
public bool setPrinterToGrayScale ( string printerName ) { short monochroom = CODE_INTEGER ; dm = this . GetPrinterSettings ( printerName ) ; dm . dmColor = monochroom ; Marshal . StructureToPtr ( dm , yDevModeData , true ) ; pinfo . pDevMode = yDevModeData ; pinfo . pSecurityDescriptor = IntPtr . Zero ; Marshal . StructureToPtr ( pinfo , ptrPrinterInfo , true ) ; lastError = Marshal . GetLastWin32Error ( ) ; nRet = Convert . ToInt16 ( SetPrinter ( hPrinter , CODE_INTEGER , ptrPrinterInfo , CODE_INTEGER ) ) ; if ( nRet == CODE_INTEGER ) { lastError = Marshal . GetLastWin32Error ( ) ; throw new System . ComponentModel . Win32Exception ( Marshal . GetLastWin32Error ( ) ) ; } if ( hPrinter != IntPtr . Zero ) ClosePrinter ( hPrinter ) ; return Convert . ToBoolean ( nRet ) ; } <EOF>
var qOver = _HibSession . QueryOver < MyModel > ( ( ) = > baseModel ) . JoinAlias ( ( ) = > baseModel . Submodels , ( ) = > subModels ) . Where ( Restrictions . In ( subModels . ID , IDsSubModels ) ) . List < MyModel > ( ) ; <EOF>
using System . Management . Automation ; public class Whatever { public string One { get { return CODE_STRING ; } } public string Two { get { return CODE_STRING ; } } public string Three { get { return CODE_STRING ; } } public string Four { get { return CODE_STRING ; } } public static PSObject Get ( ) { var w = new Whatever ( ) ; var pso = new PSObject ( w ) ; var display = new PSPropertySet ( CODE_STRING , new [ ] { CODE_STRING , CODE_STRING } ) ; var mi = new PSMemberSet ( CODE_STRING , new [ ] { display } ) ; pso . Members . Add ( mi ) ; return pso ; } } <EOF>
Plugins . RemoveAll ( x = > x is PredefinedRoutesFeature ) ; <EOF>
INSERT INTO Task ( Employee_ID , Project_Id , Assigned_Project_Name ) SELECT e . Employee_Id , p . Project_Id , ' NewTask ' FROM Employees e INNER JOIN Projects p WHERE e . last_name = ' XYZ ' AND e . first_name = ' ABC ' AND p . Project_Name = ' SomeProject ' ; <EOF>
foreach ( int blah in multilistbox . SelectedIndices ) { MessageBox . Show ( blah . ToString ( ) ) ; } <EOF>
var timeLine = new Timeline ( ) ; timeLine . MethodTwo ( ) ; <EOF>
Image img = Image . FromFile ( yourImage ) ; Bitmap bmp = new Bitmap ( img . Width , img . Height ) ; using ( Graphics G = Graphics . FromImage ( bmp ) ) using ( Pen pen = new Pen ( Color . DarkBlue , CODE_REAL ) ) { G . Clear ( Color . Black ) ; for ( int x = CODE_INTEGER ; x < img . Width ; x += CODE_INTEGER ) G . DrawLine ( pen , x , CODE_INTEGER , x , img . Height ) ; for ( int y = CODE_INTEGER ; y < img . Height ; y += CODE_INTEGER ) G . DrawLine ( pen , CODE_INTEGER , y , img . Width , y ) ; } bmp . Save ( yourGrid ) ; bmp . Dispose ( ) ; img . Dispose ( ) ; <EOF>
ContactsModule module = ( ContactsModule ) outlookObj . ActiveExplorer ( ) . NavigationPane . Modules . GetNavigationModule ( OlNavigationModuleType . olModuleContacts ) ; foreach ( NavigationGroup navigationGroup in module . NavigationGroups ) { foreach ( NavigationFolder navigationFolder in navigationGroup . NavigationFolders ) { foreach ( var item in navigationFolder . Folder . Items ) { . . . } <EOF>
class A { void MethodOne ( ) { MethodOneCore ( ) ; } virtual void MethodOneCore ( ) { } } class B : A { override void MethodOneCore ( ) { } } <EOF>
DataView view = new DataView ( ds . Tables [ CODE_INTEGER ] ) ; DataTable distinctInvoiceNumbers = view . ToTable ( true , CODE_STRING ) ; DataTable dt = new Datatable ( ) ; dt = ds . Tables [ CODE_INTEGER ] . Clone ( ) ; int index = CODE_INTEGER ; foreach ( datarow dr in ds . Tables [ CODE_INTEGER ] . Rows ) { if ( distinctInvoiceNumbers . Rows [ CODE_INTEGER ] [ index ] . ToString ( ) == dr [ CODE_INTEGER ] . ToString ( ) ) { dt . ImportRow ( dr ) ; } } datagridview1 . DataSource = dt ; <EOF>
. . . this . trcResults . DataBinding += this . trcResults_DataBinding ; this . trcResults . BeforeLayout += this . trcResults_BeforeLayout ; this . trcResults . DataSource = pcl ; this . trcResults . DataBind ( ) ; } void trcResults_DataBinding ( object sender , EventArgs e ) { var senderChart = ( RadChart ) sender ; var pcl = senderChart . DataSource as IEnumerable < PollContainer > ; foreach ( var pollContainer in pcl ) { pollContainer . AnswerText = CODE_STRING + pollContainer . AnswerText ; } } void trcResults_BeforeLayout ( object sender , EventArgs e ) { foreach ( var axisItem in this . trcResults . PlotArea . XAxis . Items ) { axisItem . TextBlock . Text = axisItem . TextBlock . Text . Remove ( CODE_INTEGER , CODE_INTEGER ) ; } } <EOF>
string path = Directory . GetCurrentDirectory ( ) ; string desktopPath = Environment . GetFolderPath ( Environment . SpecialFolder . Desktop ) ; if ( ! path . Equals ( desktopPath ) ) { Console . WriteLine ( CODE_STRING ) ; } <EOF>
Process . WaitForExit ( ) <EOF>
using ( LatestServiceSoapClient proxy = new LatestServiceSoapClient ( CODE_STRING ) ) { label1 . Text = proxy . Welcome ( ) ; } <EOF>
UPDATE Table SET Table . col1 = other_table . col1 , Table . col2 = other_table . col2 FROM Table INNER JOIN other_table ON Table . id = other_table . id <EOF>
public ActionResult Index ( ) { var memoryStream = new MemoryStream ( ) ; using ( var zip = new ZipFile ( ) ) { zip . AddFile ( CODE_STRING ) ; zip . AddFile ( CODE_STRING ) ; zip . AddFile ( CODE_STRING ) ; zip . Save ( memoryStream ) ; } memoryStream . Seek ( CODE_INTEGER , CODE_INTEGER ) ; return File ( memoryStream , CODE_STRING , CODE_STRING ) ; } <EOF>
using Windows . Media . Capture ; var ui = new CameraCaptureUI ( ) ; ui . PhotoSettings . CroppedAspectRatio = new Size ( CODE_INTEGER , CODE_INTEGER ) ; var file = await ui . CaptureFileAsync ( CameraCaptureUIMode . Photo ) ; if ( file != null ) { var bitmap = new BitmapImage ( ) ; bitmap . SetSource ( await file . OpenAsync ( FileAccessMode . Read ) ) ; Photo . Source = bitmap ; } <EOF>
chkBx . InputAttributes . Add ( CODE_STRING , strtemPath ) ; <EOF>
Select ( CODE_STRING + tbxName . Text + CODE_STRING + tbx . Account + CODE_STRING ) <EOF>
var readerSettings = new XmlReaderSettings { IgnoreWhitespace = true , } ; using ( XmlReader reader = XmlReader . Create ( new FileStream ( archivePath , FileMode . Open ) , readerSettings ) ) { } <EOF>
* * BackgroundWorker_DoWork event * * int nTrials = CODE_INTEGER ; bool isRunning = false ; while ( ( isRunning = Process . GetProcessesByName ( CODE_STRING ) == CODE_INTEGER ) || nTrials < CODE_INTEGER ) { Thread . Sleep ( CODE_INTEGER ) ; nTrials ++ ; } if ( isRunning ) RunProcess ( ) ; <EOF>
. . . Stream ReceiveStream = myWebResponse . GetResponseStream ( ) ; Encoding encode = System . Text . Encoding . GetEncoding ( CODE_STRING ) ; StreamReader readStream = new StreamReader ( ReceiveStream , encode ) ; Console . WriteLine ( " Response stream received " ) ; Char [ ] read = new Char [ CODE_INTEGER ] ; int count = readStream . Read ( read , CODE_INTEGER , CODE_INTEGER ) ; Console . WriteLine ( " HTML . . . \ r " ) ; while ( count > CODE_INTEGER ) { String str = new String ( read , CODE_INTEGER , count ) ; Console . Write ( str ) ; count = readStream . Read ( read , CODE_INTEGER , CODE_INTEGER ) ; } . . . <EOF>
public void UpdateCell ( string subtitle2 ) { var callURL = new NSUrl ( CODE_STRING + subtitle2 ) ; call . SetTitle ( subtitle2 , UIControlState . Normal ) ; call . TouchUpInside += ( object sender , EventArgs e ) = > { if ( UIApplication . SharedApplication . CanOpenUrl ( callURL ) ) { UIApplication . SharedApplication . OpenUrl ( callURL ) ; } else { Console . WriteLine ( CODE_STRING ) ; } } ; } <EOF>
bool found = host . Hostname . ToLower ( ) . Contains ( searchBox . Text . ToLower ( ) ) ; if ( ! found ) { found = host . IP . ToString ( ) . Contains ( searchBox . Text . ToLower ( ) ) ; if ( ! found ) { found = host . Username . ToString ( ) . Contains ( searchBox . Text . ToLower ( ) ) ; } } <EOF>
class InputManager < T > { SortedDictionary < T , Keys > inputList = new SortedDictionary < T , Keys > ( ) ; public void add ( T id , Keys key ) { . . . } public bool isPressed ( T id ) { . . . } } <EOF>
( BasicEnum ) Enum . ToObject ( typeof ( BasicEnum ) , someEnum ) <EOF>
ca . Property ( x = > x . Code , map = > { map . Type ( NHibernateUtil . AnsiString ) ; map . Column ( /*etc.*/ ) ; } ) ; <EOF>
var people = entities . People . Where ( CODE_STRING , new ObjectParameter ( CODE_STRING , searchTerm ) ) ; <EOF>
Frame1 . Navigate ( new Page1 ( ) ) ; <EOF>
List < FILE_REPORT_TYPES > mySelectedList = new List < FILE_REPORT_TYPES > ( ) ; foreach ( Object selectedItem in ListBox . SelectedItems ) { mySelectedList . Add ( ( ( FILE_REPORT_TYPES ) selectedItem ) ) ; } <EOF>
DateTime date3 = date1 . Date + date2 . TimeOfDay ; <EOF>
D . Keys . Sum ( ) ; <EOF>
POST / Policy / SomeNamespace . GetSubsetByPolicyNumber { CODE_STRING : [ CODE_INTEGER , CODE_INTEGER , . . . ] } <EOF>
foreach ( ListItem item in cbFilter . Items ) { if ( item . Selected ) { Response . Write ( item . Attributes . CssStyle [ CODE_STRING ] . ToString ( ) ) ; } } <EOF>
internal static class Program { /// <summary> /// The main entry point for the application. /// </summary> [ STAThread ] private static void Main ( ) { } } public partial class MainForm : Form ( ) { void someMethodInYourFormIERunningOnTheUIThread ( ) { ScanLib scanLib = null ; var th = new Thread ( ( ) = > { scanLib = new ScanLib ( ) ; } ) ; th . SetApartmentState ( ApartmentState . MTA ) ; th . Start ( ) ; th . Join ( ) ; this . scanLibraryReference = scanLib ; } } <EOF>
public static bool IsValid ( this string XML ) { try { XElement temp = XElement . Parse ( XML ) ; } catch ( FormatException ) { return false ; } catch ( XmlException ) { return false ; } return true ; } <EOF>
private void searchbtn_Click ( object sender , EventArgs e ) { SqlCeConnection con = new SqlCeConnection ( CODE_STRING ) ; try { con . Open ( ) ; string SearchQuerry = CODE_STRING + searchtxt . Text + CODE_STRING ; SqlCeCommand com = new SqlCeCommand ( SearchQuerry , con ) ; SqlCeDataReader sqlReader = com . ExecuteReader ( ) ; while ( sqlReader . Read ( ) ) { txtID . text = sqlReader . GetValue ( CODE_INTEGER ) . ToString ( ) ; txtRadif . text = sqlReader . GetValue ( CODE_INTEGER ) . ToString ( ) ; txtName . text = sqlReader . GetValue ( CODE_INTEGER ) . ToString ( ) ; } sqlReader . Close ( ) ; com . Dispose ( ) ; con . Close ( ) ; } catch ( SqlCeException ex ) { MessageBox . Show ( ex . Message ) ; } } <EOF>
System . Guid . NewGuid ( ) . ToString ( ) ; <EOF>
using ( var stream = new FileStream ( xmlFilePath ) ) { var serializer = new XmlSerializer ( typeof ( body ) ) ; var body = ( body ) serializer . Deserialize ( stream ) ; } <EOF>
int [ ] vectorOfIntegers = new int [ CODE_INTEGER ] ; vectorOfIntegers [ CODE_INTEGER ] = CODE_INTEGER ; vectorOfIntegers [ CODE_INTEGER ] = CODE_INTEGER ; . : int [ ] outputArray = cls . MyFunctionInClass ( vectorOfIntegers ) ; <EOF>
string givenDate = ( CODE_STRING ) ; DateTime d = DateTime . Parse ( givenDate , System . Globalization . CultureInfo . InvariantCulture ) ; string ouputDate = d . ToUniversalTime ( ) . ToString ( CODE_STRING , System . Globalization . CultureInfo . InvariantCulture ) ; <EOF>
Colors currentValidColors = CODE_INTEGER ; colorStr . Split ( new char [ ] { CODE_CHAR } ) . Select ( p = > EnumHelper . GetEnumFromString < Colors > ( p ) ) . ToList ( ) . ForEach ( c = > currentValidColors |= c ) ; <EOF>
string [ ] file = Directory . GetFiles ( myWebsite . physicalPath , CODE_STRING ) ; if ( file != null ) { XmlDocument doc = new XmlDocument ( ) ; doc . Load ( file [ CODE_INTEGER ] ) ; XmlNodeList configurationStrings = doc . SelectNodes ( CODE_STRING ) ; configurationStrings [ CODE_INTEGER ] . Attributes [ CODE_STRING ] . Value = CODE_STRING ; configurationStrings [ CODE_INTEGER ] . Attributes [ CODE_STRING ] . Value = CODE_STRING ; configurationStrings [ CODE_INTEGER ] . Attributes [ CODE_STRING ] . Value = CODE_STRING ; doc . Save ( file [ CODE_INTEGER ] ) ; } <EOF>
new Regex ( CODE_STRING ) . Replace ( youxmlstr , CODE_STRING ) ; <EOF>
MyReportViewer . ServerReport . SetParameters ( new ReportParameter ( CODE_STRING , new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING } , false ) ) ; <EOF>
string jsonString = CODE_STRING ; dynamic dyn = JsonConvert . DeserializeObject < dynamic > ( jsonString ) ; Console . WriteLine ( dyn . status ) ; <EOF>
DateTime dateValue = DateTime . Parse ( CODE_STRING ) ; string formattedString ; if ( dateValue . Minute == CODE_INTEGER ) formattedString = dateValue . ToString ( CODE_STRING ) ; else formattedString = dateValue . ToString ( CODE_STRING ) ; <EOF>
dontAskOptions . SetValue ( CODE_STRING , unchecked ( ( int ) CODE_INTEGER ) , RegistryValueKind . DWord ) ; <EOF>
static void Main ( string [ ] args ) { Console . Write ( CODE_STRING ) ; SendKeys . SendWait ( CODE_STRING ) ; Console . ReadLine ( ) ; } <EOF>
MsoTriState . msoTrue <EOF>
times . GroupBy ( y = > ( int ) ( y . Ticks / TimeSpan . TicksPerMinute / CODE_INTEGER ) ) <EOF>
DateTime ServerDate = Entities . CreateQuery < DateTime > ( CODE_STRING ) . AsEnumerable ( ) . First ( ) ; <EOF>
static async void Main ( string [ ] args ) { var url = System . Configuration . ConfigurationManager . AppSettings [ CODE_STRING ] ; if ( url == null ) { Console . WriteLine ( CODE_STRING ) ; } var client = new HttpClient ( ) ; client . BaseAddress = new Uri ( url ) ; client . DefaultRequestHeaders . Accept . Clear ( ) ; client . DefaultRequestHeaders . Accept . Add ( new MediaTypeWithQualityHeaderValue ( CODE_STRING ) ) ; await Task . WhenAll ( new Task [ ] { DbRequestHandler . ReadRooms ( client ) , DbRequestHandler . ReadRoomsType ( client ) , DbRequestHandler . ReadCourses ( client ) , DbRequestHandler . ReadTeachers ( client ) , } ) ; } <EOF>
private void button1_Click ( object sender , EventArgs e ) { ArrayList UserList = new ArrayList ( ) ; var SkypeClient = new SKYPE4COMLib . Skype ( ) ; foreach ( SKYPE4COMLib . Group Group in SkypeClient . CustomGroups ) { if ( Group . DisplayName == CODE_STRING ) { foreach ( SKYPE4COMLib . User User in Group . Users ) { UserList . Add ( User . Handle ) ; } } } string s = CODE_STRING ; foreach ( string str in UserList ) { s = s + str + Environment . NewLine ; } label1 . Text = s ; } <EOF>
public interface ITypeA < out T > { } public class TypeA < T > : ITypeA < T > { } public class TypeB < T > { } public class TypeC : TypeB < int > { } class Program { public static void MyMethod < OutputType > ( ITypeA < TypeB < OutputType > > Parameter ) { } static void Main ( string [ ] args ) { ITypeA < TypeC > Test = new TypeA < TypeC > ( ) ; MyMethod < int > ( Test ) ; } } <EOF>
Pane . CurveList [ Pane . CurveList . Count - CODE_INTEGER ] . Clear ( ) ; zgc . Refresh ( ) ; <EOF>
string result = CODE_STRING + string . Join ( CODE_STRING , textBox . Text . Split ( new [ ] { " \ r CODE_STRING CODE_STRING ' CODE_STRING ' CODE_STRING ) " ; <EOF>
cmd . ExecuteNonQuery ( ) ; <EOF>
class FastestRegex { public static readonly Regex RE = new Regex ( CODE_STRING , RegexOptions . Compiled ) ; } <EOF>
foreach ( var item in deleteUserActivities ) { m_WeightScaleEntities . DeleteObject ( item ) ; } And then SaveChanges ( ) on the object context . <EOF>
myWebClient . Headers . Add ( CODE_STRING , CODE_STRING ) ; <EOF>
jpegtran - crop WxH + X + Y input_file output_file <EOF>
using System . DirectoryServices . AccountManagement ; public static string [ ] GetGroups ( string username ) { string [ ] output = null ; using ( var ctx = new PrincipalContext ( ContextType . Domain ) ) using ( var user = UserPrincipal . FindByIdentity ( ctx , username ) ) { if ( user != null ) { output = user . GetGroups ( ) . Select ( x = > x . SamAccountName ) . ToArray ( ) ; } } return output ; } <EOF>
class MyClass : IValidatableObject { public string EId { get ; set ; } public string PId { get ; set ; } public IEnumerable < ValidationResult > Validate ( ValidationContext vC ) { if ( string . IsNullOrEmpty ( EId ) && string . IsNullOrEmpty ( PId ) ) yield return new ValidationResult ( CODE_STRING , new [ ] { CODE_STRING , CODE_STRING } ) ; } } <EOF>
private void boldText_Click ( object sender , EventArgs e ) { textArea . SelectedText = string . Format ( CODE_STRING , textArea . SelectedText ) ; textArea . SelectionLength = CODE_INTEGER ; } <EOF>
List < Button > listOfButtons = new List < Button > ( ) ; listOfButtons . Add ( yourButton ) ; <EOF>
if ( userInput % CODE_INTEGER == CODE_INTEGER ) { } <EOF>
if ( e . KeyCode == neededLetter as Keys ) { if ( neededLetter == CODE_STRING ) { neededLetter = CODE_STRING ; } else if ( neededLetter == CODE_STRING ) { neededLetter = CODE_STRING ; } else if ( neededLetter == CODE_STRING ) { neededLetter = CODE_STRING ; } else if ( neededLetter == CODE_STRING ) { } } else { neededLetter = CODE_STRING ; } <EOF>
public class PassedData { public string Name { get ; set ; } public int Value { get ; set ; } } Frame . Navigate ( typeof ( Page1 ) , new PassedData { Name = CODE_STRING , Value = CODE_INTEGER } ) ; protected override void OnNavigatedTo ( NavigationEventArgs e ) { PassedData data = e . Parameter as PassedData ; } <EOF>
join t7 in db . Notes . DefaultIfEmpty ( ) on t2 . Lead_ID equals t7 . Item_ID into notes where t7 . Item_ID == CODE_INTEGER <EOF>
ChartThree . SeriesCollection [ CODE_INTEGER ] . Type = SeriesType . AreaLine ; <EOF>
( p2 . X - p1 . X ) * ( p2 . Y - p1 . Y ) <EOF>
public Control GetWebBrowserControl ( ) { foreach ( Control ctl in TabControl1 . SelectedTab . Controls ) { if ( ctl is WebBrowser ) { return ctl ; } } return null ; } <EOF>
PerformanceCounter counter = new PerformanceCounter ( CODE_STRING , CODE_STRING , CODE_STRING , true ) ; <EOF>
[ Dependency ] <EOF>
public delegate int PassH264Stream ( byte [ ] buffer , int len ) ; public PASSH264Stream TestDelegate = { } ; TestDelegate += ( buffer , len ) = > Application . Current . Dispatcher . BeginInvoke ( new Action ( ( ) = > ReceiveInUiThread ( buffer , len ) ) , DispatcherPriority . Render ) ; <EOF>
Queue < WorkItem > <EOF>
public int getSumOfTimes ( ) { int sum ; if ( subordinates . Count ( ) == CODE_INTEGER ) { sum = getIdealTime ( ) ; } else { foreach ( var prodel in subordinates ) { sum += prodel . getSumOfTimes ( ) ; } } return sum ; } <EOF>
int threshold = CODE_INTEGER ; foreach ( ListViewItem item in listView1 . Items ) { if ( item . SubItems . Count > threshold ) { if ( item . SubItems [ CODE_INTEGER ] . Text . Contains ( CODE_STRING ) ) { } } } <EOF>
if ( openFileDialog1 . ShowDialog ( ) == DialogResult . OK ) { File . Copy ( openFileDialog1 . FileName , Path . Combine ( Path . GetTempPath ( ) , Path . GetFileName ( openFileDialog1 . FileName ) ) , true ) ; } <EOF>
string remoteImgPath = CODE_STRING ; Uri remoteImgPathUri = new Uri ( remoteImgPath ) ; string remoteImgPathWithoutQuery = remoteImgPathUri . GetLeftPart ( UriPartial . Path ) ; string fileName = Path . GetFileName ( remoteImgPathWithoutQuery ) ; string localPath = AppDomain . CurrentDomain . BaseDirectory + CODE_STRING + fileName ; WebClient webClient = new WebClient ( ) ; webClient . DownloadFile ( remoteImgPath , localPath ) ; return localPath ; <EOF>
DateTime . Parse ( myDate ) . ToString ( CODE_STRING ) ; <EOF>
string byteArrayEncoded = System . Convert . ToBase64String ( plainTextBytes , CODE_INTEGER , plainTextBytes . Length ) ; string byteArrayUrlEncoded = System . Web . HttpUtility . UrlEncode ( byteArrayEncoded ) ; byte [ ] byteArray = Encoding . UTF8 . GetBytes ( CODE_STRING + byteArrayUrlEncoded + CODE_STRING ) ; <EOF>
List < string > labels = new List < string > ( ) ; labels . Add ( CODE_STRING ) ; labels . Add ( CODE_STRING ) ; labels . Add ( CODE_STRING ) ; labels . Add ( CODE_STRING ) ; for ( int i = CODE_INTEGER ; i < labels . Count ; i ++ ) { Label lbl = new Label ( ) ; lbl . Text = labels [ i ] ; flowLayoutPanel1 . Controls . Add ( lbl ) ; } <EOF>
var repStr = txtBox . Text ; foreach ( var kvp in d ) { repStr = repStr . Replace ( kvp . Key , kvp . Value ) ; } txtBox2 . Text = repStr ; <EOF>
public double [ , ] Transpose ( double [ , ] matrix ) { int w = matrix . GetLength ( CODE_INTEGER ) ; int h = matrix . GetLength ( CODE_INTEGER ) ; double [ , ] result = new double [ h , w ] ; for ( int i = CODE_INTEGER ; i < w ; i ++ ) { for ( int j = CODE_INTEGER ; j < h ; j ++ ) { result [ j , i ] = matrix [ i , j ] ; } } return result ; } <EOF>
bool ignoreEvent = false ; object lastSelectedItem = null ; void comboBox1_SelectedIndexChanged ( object sender , EventArgs e ) { if ( ignoreEvent ) return ; if ( CheckForChanges ( ) ) { if ( MessageBox . Show ( CODE_STRING , CODE_STRING , MessageBoxButtons . YesNo ) == DialogResult . Yes ) { ignoreEvent = true ; comboBox1 . SelectedItem = lastSelectedItem ; ignoreEvent = false ; } else { } } lastSelectedItem = comboBox1 . SelectedItem ; } <EOF>
public static string GetSelectedItems ( this ListBox lbox ) { List < string > selectedValues = new List < string > ( ) ; int [ ] selectedIndeces = lbox . GetSelectedIndices ( ) ; foreach ( int i in selectedIndeces ) selectedValues . Add ( lbox . Items [ i ] . Value ) ; return String . Join ( CODE_STRING , selectedValues . ToArray ( ) ) ; } public static void SetSelectedItems ( this ListBox lbox , string [ ] values ) { foreach ( string value in values ) { lbox . Items [ lbox . Items . IndexOf ( lbox . Items . FindByValue ( value ) ) ] . Selected = true ; } } public static void AddListItems ( this ListBox lbox , string [ ] values ) { foreach ( string value in values ) { ListItem item = new ListItem ( value ) ; lbox . Items . Add ( item ) ; } } <EOF>
Microsoft . Phone . Shell . PhoneApplicationService . Current . ContractActivated += Application_ContractActivated ; private void Application_ContractActivated ( object sender , IActivatedEventArgs e ) { var filePickerContinuationArgs = e as FileOpenPickerContinuationEventArgs ; if ( filePickerContinuationArgs != null ) { } } <EOF>
using System . Collections ; using System . Collections . Generic ; using System . ComponentModel . DataAnnotations ; public class DataAnnotationsValidator { public bool TryValidate ( object @object , out ICollection < ValidationResult > results ) { var context = new ValidationContext ( @object , serviceProvider : null , items : null ) ; results = new List < ValidationResult > ( ) ; return Validator . TryValidateObject ( @object , context , results , validateAllProperties : true ) ; } } <EOF>
TilesControl . Items . Refresh ( ) ; <EOF>
we . Message <EOF>
public object Convert ( object value ) { int c ; if ( value is IBookRepository ) { c = ( int ) ( ( IBookRepository ) value ) . CountAllBooks ( ) ; } return c ; } <EOF>
Date = grp . Where ( g = > g . CRTI == grp . Max ( s = > s . CRTI ) && g . STATUS == CODE_INTEGER ) . Max ( s = > s . CRTI ) <EOF>
a2 = a1 . Clone ( ) as double [ ] ; <EOF>
OleDbCommand cmd = new OleDbCommand ( CODE_STRING , connection ) ; cmd . Parameters . Add ( CODE_STRING , OleDbType . VarChar ) . Value = name ; <EOF>
for ( int k = CODE_INTEGER ; k < CODE_INTEGER ; k ++ ) { for ( int l = CODE_INTEGER ; l < CODE_INTEGER ; l ++ ) { newdata [ k ] [ l ] = data [ k / CODE_INTEGER ] [ l / CODE_INTEGER ] ; } } <EOF>
string filePath = " c : \ program files \ xyz \ cl . exe " ; System . Diagnostics . Process . Start ( filePath ) ; <EOF>
public Form1 ( ) { InitializeComponent ( ) ; private TextBox [ ] TextBoxes = { textBox1 , textBox2 , textBox3 , textBox4 , textBox5 , textBox6 } ; private List < string > storeItems = new List < string > ( ) ; } private void button1_Click ( object sender , EventArgs e ) { var buffer = new StringBuilder ( ) ; foreach ( var textBox in textBoxes ) { if ( string . IsNullOrEmpty ( textBox . Text ) ) { textBox . BackColor = Color . FromName ( CODE_STRING ) ; MessageBox . Show ( CODE_STRING ) ; textBox . Focus ( ) ; return ; } textBox . BackColor = Colors . FromName ( CODE_STRING ) ; buffer . Append ( textBox . Text ) ; } var result = buffer . ToString ( ) ; storeItems . Add ( result ) ; System . IO . File . AppendAllText ( CODE_STRING , Environment . NewLine + result ) ; } <EOF>
c . BindByName = true ; <EOF>
var validationContext = new ValidationContext ( movie , null , null ) ; var results = new List < ValidationResult > ( ) ; if ( Validator . TryValidateObject ( movie , validationContext , results , true ) ) { db . Movies . Add ( movie ) ; db . SaveChanges ( ) ; } else { } <EOF>
LedProject project = db . LedProject . Include ( CODE_STRING ) . Where ( p = > p . ProjectId == projectId ) . FirstOrDefault ( ) ; <EOF>
private void GetWebpage ( string url ) { WebBrowser browser = new WebBrowser ( ) ; browser . Navigate ( url ) ; browser . DocumentCompleted += new WebBrowserDocumentCompletedEventHandler ( browser_DocumentCompleted ) ; } void browser_DocumentCompleted ( object sender , WebBrowserDocumentCompletedEventArgs e ) { var browser = ( WebBrowser ) sender ; var client = new WebClient ( ) ; foreach ( var img in browser . Document . Images ) { var image = img as HtmlElement ; var src = image . GetAttribute ( CODE_STRING ) . TrimEnd ( CODE_CHAR ) ; if ( ! Uri . IsWellFormedUriString ( src , UriKind . Absolute ) ) { src = string . Concat ( browser . Document . Url . AbsoluteUri , CODE_STRING , src ) ; } var filename = new string ( src . Skip ( src . LastIndexOf ( CODE_CHAR ) + CODE_INTEGER ) . ToArray ( ) ) ; File . WriteAllBytes ( filename , client . DownloadData ( src ) ) ; } } <EOF>
string variable = txt . Text ; string [ ] strArr = variable . Split ( new char [ ] { CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; if ( strArr . Length < CODE_INTEGER ) { } <EOF>
Order ord = new Order { OrderID = CODE_INTEGER , ShipCity = CODE_STRING , OrderDate = DateTime . Now } ; db . Orders . InsertOnSubmit ( ord ) ; try { db . SubmitChanges ( ) ; } catch ( Exception e ) { Console . WriteLine ( e ) ; db . SubmitChanges ( ) ; } <EOF>
public override async Task TokenEndpoint ( OAuthTokenEndpointContext context ) { context . AdditionalResponseParameters . Add ( CODE_STRING , CODE_STRING ) ; return Task . FromResult < object > ( null ) ; } <EOF>
using System . Windows . Forms . DataVisualization . Charting ; using System . IO ; . . . public void GeneratePlot ( IList < DataPoint > series , Stream outputStream ) { using ( var ch = new Chart ( ) ) { ch . ChartAreas . Add ( new ChartArea ( ) ) ; var s = new Series ( ) ; foreach ( var pnt in series ) s . Points . Add ( pnt ) ; ch . Series . Add ( s ) ; ch . SaveImage ( outputStream , ChartImageFormat . Jpeg ) ; } } <EOF>
System . Threading . Timer <EOF>
internal interface ICommand { } public interface IProject { } internal interface IProjectWithCommands : IProject { ICommand Command { get ; set ; } } <EOF>
int Sec = CODE_INTEGER ; int i = CODE_INTEGER ; do { Application . DoEvents ( ) ; System . Threading . Thread . Sleep ( CODE_INTEGER ) ; i ++ ; } while ( ( Sec * CODE_INTEGER ) > i ) ; <EOF>
XPath = " / newsSection / news [ position ( ) > last ( ) - CODE_INTEGER ] <EOF>
DataRowView rowView = listBox . SelectedItem as DataRowView ; if ( null == rowView ) { return ; } dt . Rows . Remove ( rowView . Row ) ; <EOF>
public static IEnumerable < string > GetScriptSection ( string file , string section ) { var startMatch = string . Format ( CODE_STRING , section ) ; var endMatch = string . Format ( CODE_STRING , section ) ; var lines = file . Split ( Environment . NewLine . ToCharArray ( ) , StringSplitOptions . RemoveEmptyEntries ) . Select ( s = > s . Trim ( ) ) . ToList ( ) ; int startIndex = lines . FindIndex ( f = > f == startMatch ) + CODE_INTEGER ; int endIndex = lines . FindLastIndex ( f = > f == endMatch ) ; if ( endIndex == - CODE_INTEGER ) { endIndex = lines . FindIndex ( startIndex , f = > f . StartsWith ( CODE_STRING ) && lines . IndexOf ( f ) > startIndex ) ; endIndex = endIndex == - CODE_INTEGER ? lines . Count : endIndex ; } return lines . GetRange ( startIndex , endIndex - startIndex ) . Where ( l = > ! string . IsNullOrWhiteSpace ( l ) ) . ToList ( ) ; } <EOF>
int number = int . Parse ( textBox1 . Text ) ; for ( int row = CODE_INTEGER ; row < number ; row ++ ) { for ( int x = number - row ; x > CODE_INTEGER ; x -- ) { textBox2 . Text = textBox2 . Text + CODE_STRING ; } textBox2 . Text = textBox2 . Text + Environment . NewLine ; } <EOF>
Array . Resize <EOF>
foreach ( object control in InformationsGroupControl . Controls ) { BaseEdit editableControl = control as BaseEdit ; if ( editableControl != null ) editableControl . Properties . ReadOnly = false ; } <EOF>
employees . Where ( emp = > emp . Designation . Equals ( CODE_STRING ) ) . Select ( item = > item . EmpNo ) . ToList ( ) <EOF>
class MyForm : Form { MyType data1 ; MyType data2 ; private void button1_click ( object sender , EventArgs e ) { } private void button2_click ( object sender , EventArgs e ) { } } <EOF>
XmlAttribute value = xmlDoc . CreateAttribute ( CODE_STRING ) ; childNode1 . attributes . appendChild ( value ) ; <EOF>
[ ImportingConstructor ] <EOF>
string innerString = CODE_STRING ; if ( innerString . Length > CODE_INTEGER ) { int startvalue = CODE_INTEGER ; while ( startvalue < innerString . Length ) { if ( innerString [ startvalue ] == CODE_CHAR ) { innerString = innerString . Insert ( startvalue , System . Environment . NewLine ) . TrimEnd ( ) ; startvalue = startvalue + CODE_INTEGER ; } else { int i = innerString . LastIndexOf ( CODE_STRING , startvalue ) ; startvalue = i ++ ; innerString = innerString . Insert ( startvalue , System . Environment . NewLine ) . TrimEnd ( ) ; startvalue = startvalue + CODE_INTEGER ; } } } <EOF>
public static string BuildSqlNativeConnStr ( string server , string database ) { return string . Format ( CODE_STRING , server , database ) ; } private void simpleButton1_Click ( object sender , EventArgs e ) { const string query = CODE_STRING ; string connStr = BuildSqlNativeConnStr ( CODE_STRING , CODE_STRING ) ; try { using ( SqlConnection conn = new SqlConnection ( connStr ) ) { conn . Open ( ) ; using ( SqlCommand cmd = new SqlCommand ( query , conn ) ) { cmd . Parameters . Add ( new SqlParameter ( CODE_STRING , CODE_INTEGER ) ) ; cmd . Parameters . Add ( new SqlParameter ( CODE_STRING , DateTime . Today ) ) ; cmd . ExecuteNonQuery ( ) ; } } } catch ( SqlException ) { System . Diagnostics . Debugger . Break ( ) ; } } <EOF>
Enumerable . Range ( char . MinValue , char . MaxValue - char . MinValue ) <EOF>
string [ ] addressParts = { location . Street1 , location . Street2 , location . City , location . PostalCode } ; string inputAddress = string . Join ( CODE_STRING , addressParts . Where ( s = > ! string . IsNullOrEmpty ( s ) ) ) ; inputAddress = HttpUtility . UrlEncode ( inputAddress ) ; <EOF>
private void Rectangle_Click ( object sender , RoutedEventArgs e ) { var rec = new Rectangle ( ) ; rec . Height = CODE_INTEGER ; rec . Width = CODE_INTEGER ; rec . Fill = new SolidColorBrush ( Colors . Violet ) ; rec . ManipulationMode = ManipulationModes . All ; rec . ManipulationDelta += rec_ManipulationDelta ; rec . RenderTransform = new TranslateTransform ( ) ; board . Children . Add ( rec ) ; } void rec_ManipulationDelta ( object sender , ManipulationDeltaRoutedEventArgs e ) { Rectangle recSender = ( Rectangle ) sender ; TranslateTransform ttSender = recSender . RenderTransform as TranslateTransform ; ttSender . X += e . Delta . Translation . X ; ttSender . Y += e . Delta . Translation . Y ; } <EOF>
new Uri ( CODE_STRING ) <EOF>
using System ; using System . Runtime . InteropServices ; using System . Diagnostics ; class Program { static void Main ( string [ ] args ) { byte [ ] arr1 = new byte [ CODE_INTEGER * CODE_INTEGER * CODE_INTEGER ] ; byte [ ] arr2 = new byte [ CODE_INTEGER * CODE_INTEGER * CODE_INTEGER ] ; var sw = Stopwatch . StartNew ( ) ; bool equal = memcmp ( arr1 , arr2 , arr1 . Length ) == CODE_INTEGER ; sw . Stop ( ) ; Console . WriteLine ( sw . ElapsedMilliseconds ) ; Console . ReadLine ( ) ; } [ DllImport ( CODE_STRING ) ] private static extern int memcmp ( byte [ ] arr1 , byte [ ] arr2 , int cnt ) ; } <EOF>
var timeSpan = TimeSpan . FromMilliseconds ( CODE_INTEGER ) ; var seconds = timeSpan . TotalSeconds ; var minutes = timeSpan . TotalMinutes ; <EOF>
using ( DataFeedEntities db = new DataFeedEntities ( ) ) { IntradayFuturesTick tick = db . IntradayFuturesTicks . OrderByDescending ( x = > x . Id ) . Take ( CODE_INTEGER ) . Single ( ) ; } <EOF>
myCacheSrc = ( CollectionViewSource ) FindResource ( CODE_STRING ) ; myCacheSrc . Source = new ObservableCollection < MyEFPOCO > ( ) ; <EOF>
CultureInfo . CurrentCulture . Calendar . TwoDigitYearMax <EOF>
var itemsAlreadyAdded = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var newIds = new string [ ] { CODE_STRING , CODE_STRING } ; var itemsToAdd = newIds . Except ( itemsAlreadyAdded . Select ( iaa = > iaa . ToString ( ) ) ) ; foreach ( var item in itemsToAdd ) { Console . WriteLine ( item ) ; } Console . ReadLine ( ) ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { var cntls = GetAll ( this , typeof ( RadioButton ) ) ; foreach ( Control cntrl in cntls ) { RadioButton _rb = ( RadioButton ) cntrl ; if ( _rb . Checked ) { _rb . Checked = false ; } } } public IEnumerable < Control > GetAll ( Control control , Type type ) { var controls = control . Controls . Cast < Control > ( ) ; return controls . SelectMany ( ctrls = > GetAll ( ctrls , type ) ) . Concat ( controls ) . Where ( c = > c . GetType ( ) == type ) ; } <EOF>
System . Globalization . CultureInfo modCulture = new System . Globalization . CultureInfo ( CODE_STRING ) ; modCulture . NumberFormat . CurrencyNegativePattern = CODE_INTEGER ; Thread . CurrentThread . CurrentCulture = modCulture ; <EOF>
var result = from t in conn . TICKETS join dept in conn . DEPARTMENT on t . FK_DEPT_ID equals dept . PK_DEPT_ID select new { DeptName = dept . NAME , Status = t . STATUS } into temp group temp by new { temp . DeptName , temp . Status } into g select new { g . Key . DeptName , g . Key . Status , Count = g . Count ( ) } ; <EOF>
XDocument xdoc = XDocument . Load ( url ) ; if ( xdoc != null ) { var levels = ( from l in xdoc . Descendants ( CODE_STRING ) select new Level { levelNumber = l . Attribute ( CODE_STRING ) . Value , startingX = l . Attribute ( CODE_STRING ) . Value , startingY = l . Attribute ( CODE_STRING ) . Value , cellsList = ( from c in l . Descendants ( CODE_STRING ) select new Cell { CellType = c . Attribute ( CODE_STRING ) . Value , PositionX = c . Attribute ( CODE_STRING ) . Value , PositionY = c . Attribute ( CODE_STRING ) . Value } ) . ToList ( ) } ) . ToList ( ) ; } <EOF>
AutoGenerateColumns = CODE_STRING <EOF>
string MyPageTitle = CODE_STRING ; string myConnectionString = CODE_STRING ; SqlCommand cmd = new SqlCommand ( CODE_STRING + MyPageTitle . Replace ( CODE_STRING , CODE_STRING ) + CODE_STRING , new SqlConnection ( myConnectionString ) ) ; cmd . Connection . Open ( ) ; labelPrice . Text = cmd . ExecuteScalar ( ) . ToString ( ) ; cmd . Connection . Close ( ) ; <EOF>
var query = from doc in query let tagIds = from t in doc . Tags select t . Id where parameters . All ( p = > tagIds . Contains ( p ) ) select doc ; <EOF>
XDocument doc = XDocument . Load ( CODE_STRING ) ; int ScalarVariableCount = doc . Root . Element ( CODE_STRING ) . Elements ( CODE_STRING ) . Count ( ) ; <EOF>
var dups = collection . GroupBy ( x = > x ) . Where ( g = > g . Count ( ) > CODE_INTEGER ) . Select ( g = > g . Key ) ; <EOF>
foreach ( var currentItem in RoleName . SelectedItems ) { cmdAdd . Parameters [ CODE_STRING ] . Value = label1 . Text ; cmdAdd . Parameters [ CODE_STRING ] . Value = currentItem cmdAdd . ExecuteNonQuery ( ) ; } <EOF>
string connString = CODE_STRING ; string sql = CODE_STRING ; using ( SqlConnection conn = new SqlConnection ( connString ) ) { try { using ( SqlDataAdapter da = new SqlDataAdapter ( ) ) { da . SelectCommand = new SqlCommand ( sql , conn ) ; da . SelectCommand . CommandType = CommandType . StoredProcedure ; DataSet ds = new DataSet ( ) ; da . Fill ( ds , CODE_STRING ) ; DataTable dt = ds . Tables [ CODE_STRING ] ; foreach ( DataRow row in dt . Rows ) { } } } catch ( SQLException ex ) { Console . WriteLine ( CODE_STRING + ex . Message ) ; } catch ( Exception e ) { Console . WriteLine ( CODE_STRING + e . Message ) ; } } <EOF>
protected override void OnMouseClick ( MouseEventArgs e ) { int x = e . X ; int y = e . Y ; } <EOF>
string s1 = CODE_STRING ; string s2 = CODE_STRING ; if ( ! string . IsNullOrEmpty ( s2 ) && s2 . Contains ( CODE_CHAR ) ) { string [ ] partsS1 = s1 . Split ( CODE_CHAR ) ; string [ ] partsS2 = s2 . Split ( CODE_CHAR ) ; int count = partsS1 . Length ; for ( int a = CODE_INTEGER ; a < count ; a ++ ) { if ( partsS2 . Length > count ) { if ( partsS1 [ a ] != partsS2 [ a ] ) { partsS2 [ a ] = partsS1 [ a ] ; } } } string final = string . Empty ; foreach ( string s in partsS2 ) { final += s + CODE_STRING ; } final = final . TrimEnd ( CODE_CHAR ) ; Console . WriteLine ( final ) ; } <EOF>
DataTable table ; table = dataSet . Tables [ CODE_STRING ] ; object sumObject ; sumObject = table . Compute ( CODE_STRING , CODE_STRING ) ; <EOF>
protected override void OnFileActivated ( FileActivatedEventArgs args ) { } <EOF>
IQueryable < Student > q = dbContext . Students . AsQueryable ( ) ; if ( crit . name != null ) q = q . Where ( c = > c . name == crit . name ) ; if ( crit . age != null ) q = q . Where ( c = > c . age == crit . age ) ; <EOF>
myString . GetHashCode ( ) <EOF>
string text = new string ( CODE_CHAR , CODE_INTEGER ) ; <EOF>
var path = CODE_STRING ; var res = Application . GetResourceStream ( new Uri ( path , UriKind . Relative ) ) xml = new StreamReader ( res . Stream ) . ReadToEnd ( ) ; <EOF>
System . IO . File . GetLastWriteTime ( Assembly . GetExecutingAssembly ( ) . Location ) <EOF>
FileDialog fd = new OpenFileDialog ( ) ; fd . Filter = CODE_STRING ; fd . ShowDialog ( ) ; if ( Path . GetExtension ( fd . FileName ) . ToLower ( ) != CODE_STRING ) MessageBox . Show ( CODE_STRING ) ; <EOF>
public static Vector3D ToVector3D ( Vector3 input ) { return new Vector3D ( ( float ) input . X , ( float ) input . Y , ( float ) input . Z ) ; } <EOF>
BinaryFormatter binaryFormatter = new BinaryFormatter ( ) ; binaryFormatter . Serialize ( streamWriter . BaseStream , Users ) ; <EOF>
snakeBodyRectangleArray [ bodyNumber ] = new Rectangle ( ( int ) snakeBodyArray [ bodyNumber ] . X , ( int ) snakeBodyArray [ bodyNumber ] . Y , textureSnakeBody . Width , textureSnakeBody . Height ) ; <EOF>
string [ ] linesSplitted = new string [ CODE_INTEGER ] ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { linesSplitted [ i ] = lines [ i ] . Split ( CODE_CHAR ) [ CODE_INTEGER ] ; } <EOF>
void IPlugin . Reset ( ) { this . number = null ; this . state = State . NotReady ; Contract . Assume ( ( ( IPlugin ) this ) . State == this . state ) ; } <EOF>
var minYear = dbContext . News . Min ( x = > x . ArticleDate . Year ) ; var maxYear = dbContext . News . Max ( x = > x . ArticleDate . Year ) ; <EOF>
mapping . Join ( CODE_STRING , map = > { map . KeyColumn ( CODE_STRING ) ; map . Map ( x = > x . Notes ) . Nullable ( ) . LazyLoad ( ) ; map . Optional ( ) ; } ) ; <EOF>
switch ( op ) { case Operator . PLUS : { } } <EOF>
List < City > cities = new List < City > ( ) ; foreach ( RouteServiceRef . Hawker rp in recommendPlaceList ) { hawkername = rp . hawkername ; address = rp . address ; postal = rp . postal ; coordX = rp . xcoord ; coordY = rp . ycoord ; popularity = rp . popularity ; cities . Add ( new City ( ) { Name = hawkername , Population = popularity } ) ; } <EOF>
Vector3 rayOrigin = new Vector3 ( CODE_REAL , CODE_REAL , CODE_REAL ) ; float rayLength = CODE_REAL ; Ray ray = Camera . main . ViewportPointToRay ( rayOrigin ) ; Debug . DrawRay ( ray . origin , ray . direction * rayLength , Color . red ) ; RaycastHit hit ; if ( Physics . Raycast ( ray , out hit , rayLength ) ) { } <EOF>
var dropThis = ( from tutorial in xmlDoc . Descendants ( CODE_STRING ) select new { Author = ( myTutorial . Author = ( string ) tutorial . Element ( CODE_STRING ) ) , Title = ( myTutorial . Title = ( string ) tutorial . Element ( CODE_STRING ) ) , Date = ( myTutorial . Date = ( DateTime ) tutorial . Element ( CODE_STRING ) ) , } ) . First ( ) ; <EOF>
public class WinAPI { [ DllImport ( CODE_STRING ) ] public static extern IntPtr SetWindowLong ( IntPtr hWnd , int nIndex , uint dwNewLong ) ; public const int GWL_HWNDPARENT = - CODE_INTEGER ; } WinAPI . SetWindowLong ( this . Handle , WinAPI . GWL_HWNDPARENT , ( uint ) this . ObservedHandle ) ; <EOF>
Bind < IMarketRepository > ( ) . To < MarketRepository > ( ) . WithConstructorArgument ( CODE_STRING , CODE_STRING ) ; <EOF>
foreach ( FileInfo fil in files ) { listView2 . Items . Add ( new ListViewItem ( new string [ ] { fil . Name , fil . LastWriteTime . ToString ( ) , fil . Length . ToString ( ) } ) ) ; } <EOF>
/ Library / Frameworks / Mono . framework / Commands / nunit - console4 / my / test / project / Test . dll <EOF>
System . TimeSpan <EOF>
try { byte [ ] xmlContentInBytes = new System . Text . UnicodeEncoding ( ) . GetBytes ( xmlContent ) ; System . Text . UTF8Encoding utf8 = new System . Text . UTF8Encoding ( false , true ) ; utf8 . GetChars ( xmlContentInBytes ) ; } catch ( Exception ex ) { Console . WriteLine ( ex . Message ) ; return false ; } <EOF>
public void UpdateProgressBar ( double progress ) { Dispatcher . BeginInvoke ( ( Action < double > ) ( ( n ) = > { progressBar1 . Value = n ; } ) , progress ) ; } <EOF>
paragraph . AddFormattedText ( CODE_STRING , TextFormat . Italic ) ; Style style = document . AddStyle ( CODE_STRING , CODE_STRING ) ; style . ParagraphFormat . LeftIndent = CODE_STRING ; string [ ] items = CODE_STRING . Split ( CODE_CHAR ) ; for ( int idx = CODE_INTEGER ; idx < items . Length ; ++ idx ) { ListInfo listinfo = new ListInfo ( ) ; listinfo . ContinuePreviousList = idx > CODE_INTEGER ; listinfo . ListType = ListType . BulletList1 ; paragraph = section . AddParagraph ( items [ idx ] ) ; paragraph . Style = CODE_STRING ; paragraph . Format . ListInfo = listinfo ; } return document ; <EOF>
private void AddLabelDynamically ( ) { this . LabelGrid . ColumnDefinitions . Clear ( ) ; this . LabelGrid . RowDefinitions . Clear ( ) ; this . LabelGrid . ColumnDefinitions . Add ( new ColumnDefinition ( ) ) ; this . LabelGrid . ColumnDefinitions . Add ( new ColumnDefinition ( ) ) ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { this . LabelGrid . RowDefinitions . Add ( new RowDefinition ( ) { Height = GridLength . Auto } ) ; Label nameLabel = new Label ( ) ; nameLabel . Content = CODE_STRING + i . ToString ( ) ; Label dataLabel = new Label ( ) ; dataLabel . Content = CODE_STRING + i . ToString ( ) ; Grid . SetRow ( nameLabel , i ) ; Grid . SetRow ( dataLabel , i ) ; Grid . SetColumn ( nameLabel , CODE_INTEGER ) ; Grid . SetColumn ( dataLabel , CODE_INTEGER ) ; this . LabelGrid . Children . Add ( nameLabel ) ; this . LabelGrid . Children . Add ( dataLabel ) ; } } <EOF>
public string SpecialFormatDecimal ( decimal input ) { return ( input / CODE_INTEGER ) . ToString ( CODE_STRING , System . Globalization . CultureInfo . GetCultureInfo ( CODE_STRING ) ) ; } <EOF>
DataTable original ; DataTable modified ; modified = modified . AsEnumerable ( ) . Zip < DataRow , DataRow , DataRow > ( original . AsEnumerable ( ) , ( DataRow modif , DataRow orig ) = > { if ( ! orig . ItemArray . SequenceEqual < object > ( modif . ItemArray ) ) { modif . SetModified ( ) ; } return modif ; } ) . CopyToDataTable < DataRow > ( ) ; <EOF>
public static void Main ( ) { AnimEngine f1 = new AnimEngine ( ) ; f1 . Paint += new PaintEventHandler ( f1 . draw ) ; Application . Run ( f1 ) ; f1 . Refresh ( ) ; return ; } <EOF>
\\ CODE_REAL CODE_REAL CODE_REAL \ folder \ subfolder \ <EOF>
IDictionary < string , string > dict = new Dictionary < string , string > { { CODE_STRING , CODE_STRING } } ; dynamic dobj = dict . ToExpando ( ) ; dobj . Foo = CODE_STRING ; <EOF>
error : function ( header , status , exception ) { alert ( exception . Message ) ; } <EOF>
public class DoubleLookup < TKey , TValue > { private IDictionary < TKey , TValue > keys ; private IDictionary < TValue , TKey > values ; public void Add ( TKey key , TValue value ) { this . keys . Add ( key , value ) ; this . values . Add ( value , key ) ; } public TKey GetKeyFromValue ( TValue value ) { return this . values [ value ] ; } public TValue GetValueFromKey ( TKey key ) { return this . keys [ key ] ; } } <EOF>
String x ; char ch = x [ i ] ; if ( ch == CODE_CHAR || ch == CODE_CHAR || ch == CODE_CHAR || ch == CODE_CHAR || ch == CODE_CHAR ) { else { <EOF>
using System ; using System . Threading ; class Program { static void Main ( ) { ReaderWriterLockSlim sync = new ReaderWriterLockSlim ( ) ; using ( sync . Read ( ) ) { } } } public static class ReaderWriterExt { sealed class ReadLockToken : IDisposable { private ReaderWriterLockSlim sync ; public ReadLockToken ( ReaderWriterLockSlim sync ) { this . sync = sync ; sync . EnterReadLock ( ) ; } public void Dispose ( ) { if ( sync != null ) { sync . ExitReadLock ( ) ; sync = null ; } } } public static IDisposable Read ( this ReaderWriterLockSlim obj ) { return new ReadLockToken ( obj ) ; } } <EOF>
Xrm . Page . getControl ( ' yourfieldname ' ) . setDisabled ( true ) ; <EOF>
DataTable resultsList = new DataTable ( ) ; resultsList . Columns . Add ( CODE_STRING , typeof ( String ) ) ; . . . resultsList . Rows . Add ( stat ) ; <EOF>
var row = Grid . GetRow ( ( Button ) sender ) ; var col = Grid . GetColumn ( ( Button ) sender ) ; <EOF>
public interface IWidgetGetter < T > where T : IWidget { IEnumerable < T > Widgets { get ; } } <EOF>
string commandText = CODE_STRING ; cmd . CommandText = commandText ; cmd . Parameters . Add ( CODE_STRING , tb_MyBox . Text ) ; cmd . Parameters . Add ( CODE_STRING , Request . QueryString [ CODE_STRING ] ) ; <EOF>
using System . Diagnostics ; . . . ProcessStartInfo startInfo = new ProcessStartInfo ( ) ; startInfo . UseShellExecute = false ; startInfo . RedirectStandardOutput = true ; startInfo . RedirectStandardOutput = true ; startInfo . RedirectStandardError = true ; startInfo . FileName = . . . app path to execute . . . ; startInfo . Arguments = . . . argumetns if required . . . ; Process process = new Process ( ) ; process . StartInfo = startInfo ; process . Start ( ) ; process . StandardInput . WriteLine ( . . . write whatever you want . . . ) ; <EOF>
string input = Math . PI . ToString ( ) ; string decSeparator = System . Threading . Thread . CurrentThread . CurrentCulture . NumberFormat . NumberGroupSeparator ; Regex RX = new Regex ( CODE_STRING ) ; string result = RX . Replace ( input , CODE_STRING + decSeparator ) ; <EOF>
using ( SqlConnection connection = new SqlConnection ( connectionString ) ) { SqlCommand command = new SqlCommand ( queryString , connection ) ; connection . Open ( ) ; SqlDataReader reader = command . ExecuteReader ( ) ; while ( reader . Read ( ) ) { CustomersRow newCustomersRow = Customers . NewCustomersRow ( ) ; newCustomersRow . CustomerID = reader [ CODE_INTEGER ] . ToString ( ) ; newCustomersRow . CompanyName = reader [ CODE_INTEGER ] . ToString ( ) ; dt . Rows . Add ( newCustomersRow ) ; } reader . Close ( ) ; } <EOF>
Concat ( ) <EOF>
var doc = new XmlDocument ( ) ; doc . LoadXml ( File . ReadAllText ( filePath ) ) ; var rootElement = doc . DocumentElement ; var Hilfeartikel = rootElement . GetElementsByTagName ( CODE_STRING ) [ CODE_INTEGER ] . InnerText ; foreach ( XmlElement Element in Hilfeartikel . ChildNodes ) { var frage = Element . GetElementsByTagName ( Frage ) [ CODE_INTEGER ] . InnerText ; } <EOF>
var loanItems = chkBoxAssetLoan . Items ; if ( ( cboLoanAssetName . SelectedItem != null ) { if ( ! loanItems . Contains ( cboLoanAssetName . SelectedItem ) ) { loanItems . Add ( cboLoanAssetName . SelectedItem . ToString ( ) , true ) ; } } <EOF>
public partial class Form1 : Form { string [ ] values ; public Form1 ( ) { InitializeComponent ( ) ; values = setValueArray ( ) ; numericUpDown1 . Maximum = values . Length - CODE_INTEGER ; numericUpDown1 . Minimum = CODE_INTEGER ; } private string [ ] setValueArray ( ) { return new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; } private void numericUpDown1_ValueChanged ( object sender , EventArgs e ) { label1 . Text = values [ ( int ) ( ( NumericUpDown ) sender ) . Value ] ; } } <EOF>
process1 . StartInfo . Arguments = CODE_STRING + fi . Name + CODE_STRING ; process1 . StartInfo . FileName = CODE_STRING ; <EOF>
public DataStates DataState { get ; private set ; } public Task UpdateDataStateAsync ( ) { <EOF>
this . Invoke ( ( MethodInvoker ) ( ( ) = > OutputBox . Items . Add ( engineOutput ) ) ) ; <EOF>
container . ResolveUnregisteredType += ( s , e ) = > { Type type = e . UnregisteredType ; if ( typeof ( ISetting ) . IsAssignableFrom ( type ) ) { e . Register ( ( ) = > { return Activator . CreateInstance ( type ) ; } ) ; } } ; <EOF>
Application . Current . Dispatcher . Invoke ( DispatcherPriority . Background , ( Action ) delegate ( ) { } ) ; <EOF>
var regEx = new Regex ( CODE_STRING ) ; <EOF>
( ? <= \ < tr . * ? ( even | odd ) . * ? \ > ) . * ? ( ? = \ < ) <EOF>
if ( obj is string ) Console . WriteLine ( obj ) ; else . . . use reflection <EOF>
protected override void OnModelCreating ( DbModelBuilder modelBuilder ) { modelBuilder . Entity < Match > ( ) . HasRequired < Team > ( i = > i . TeamHome ) . WithMany ( i = > i . Matches ) . WillCascadeOnDelete ( false ) ; base . OnModelCreating ( modelBuilder ) ; } <EOF>
public int ? LongitudinalId { get ; set ; } public int ? ChassisLongitudinalId { get ; set ; } <EOF>
var selectedObj = dgGrid . Items . Cast < YourClass > ( ) . First ( a = > a . ID = txtFilter . Text ) ; if ( selectedObj != null ) dgGrid . SelectedItem = selectedObj ; <EOF>
zip . AddFile ( fileName ) . FileName = System . IO . Path . GetFileName ( fileName ) ; <EOF>
List < DTO > DTO = new List < DTO > ; foreach ( IGroup ele in Details ) { DTO request = new DTO ( ) ; request . ActiveDirectoryGroupName = ele . DisplayName ; . . . . . . DTO . Add ( request ) ; } <EOF>
public partial class remSolicitudesEnt { private List < Solicitud > solicitudesField ; public List < Solicitud > Solicitudes { get { return this . solicitudesField ; } set { this . solicitudesField = value ; } } } <EOF>
Using ts As New System . Transactions . TransactionScope ( ) Using sharedConnectionScope As New SubSonic . SharedDbConnectionScope ( ) ' Do your individual saves here ' If all OK ts . Complete ( ) End Using End Using <EOF>
pagenumber = CODE_INTEGER <EOF>
Func < int , bool > isEven = n = > n % CODE_INTEGER == CODE_INTEGER ; Func < int , bool > isFive = n = > n == CODE_INTEGER ; int diff = numbers . Aggregate ( CODE_INTEGER , ( sum , next ) = > isEven ( next ) ? sum + CODE_INTEGER : isFive ( next ) ? sum - CODE_INTEGER : sum ) ; <EOF>
DateTime dob = . . . . . DateTime Today = DateTime . Now ; TimeSpan ts = Today - dob ; DateTime Age = DateTime . MinValue + ts ; int Years = Age . Year - CODE_INTEGER ; int Months = Age . Month - CODE_INTEGER ; int Days = Age . Day - CODE_INTEGER ; <EOF>
BinaryMessageFormatter formatter = new BinaryMessageFormatter ( ) ; System . Messaging . Message message = new System . Messaging . Message ( YourObject , formatter ) ; <EOF>
List < KeyValuePair < string , object > > GetEnumInfo ( string name ) { var type = Type . GetType ( name ) ; return Enum . GetValues ( type ) . Cast < object > ( ) . Select ( v = > new KeyValuePair < string , object > ( Enum . GetName ( type , v ) , v ) ) . ToList ( ) ; } <EOF>
System . Drawing . Image image = Image . FromFile ( CODE_STRING ) ; System . Drawing . Imaging . ColorPalette palette = image . Palette ; image . Palette = palette ; <EOF>
Icon = CODE_STRING <EOF>
public class RestPerformanceInterceptor : IInterceptionBehavior { public bool WillExecute { get { return true ; } } public IEnumerable < Type > GetRequiredInterfaces ( ) { return new [ ] { typeof ( IA ) } ; } public IMethodReturn Invoke ( IMethodInvocation input , GetNextInterceptionBehaviorDelegate getNext ) { var behaviorDelegate = getNext ( ) ; StartInNewTask ( behaviorDelegate . Invoke ( input , getNext ) ) ; return new Mock < IMethodReturn > ( ) ; } } <EOF>
Session . Query < Foo > ( ) . Customize ( x = > x . WaitForNonStaleResults ( ) ) <EOF>
public DataGridViewRow FindRow ( DataGridView dgv , DateTime searchID ) { DataGridViewRow row = dgv . Rows . Cast < DataGridViewRow > ( ) . Where ( r = > ( ( DateTime ) r . Cells [ CODE_STRING ] . Value <= searchID ) ) . Last ( ) ; return row ; } <EOF>
Command cmd = _applicationObject . Commands . Item ( CODE_STRING , - CODE_INTEGER ) ; object dummy = null ; _applicationObject . Commands . Raise ( cmd . Guid , cmd . ID , ref dummy , ref dummy ) ; <EOF>
protected void CustomersGridView_RowDataBound ( Object sender , GridViewRowEventArgs e ) { if ( e . Row . RowType == DataControlRowType . DataRow ) { if ( e . Row . Cells [ CODE_INTEGER ] . Text == CODE_STRING ) { e . Row . Cells [ CODE_INTEGER ] . Text = CODE_STRING ; } } } <EOF>
private void InputExpressionRchTxt_KeyDown ( object sender , KeyEventArgs e ) { bool ctrlV = e . Modifiers == Keys . Control && e . KeyCode == Keys . V ; bool shiftIns = e . Modifiers == Keys . Shift && e . KeyCode == Keys . Insert ; if ( ctrlV || shiftIns ) if ( Clipboard . ContainsImage ( ) ) e . Handled = true ; } <EOF>
public void insertionsort ( ) { int inner , temp ; for ( int outer = CODE_INTEGER ; outer <= upper ; outer ++ ) { displayElements ( ) ; Console . WriteLine ( ) ; temp = arr [ outer ] ; inner = outer ; while ( inner > CODE_INTEGER && arr [ inner - CODE_INTEGER ] >= temp ) { arr [ inner ] = arr [ inner - CODE_INTEGER ] ; inner -= CODE_INTEGER ; } arr [ inner ] = temp ; } <EOF>
[ Required ] [ RegularExpression ( CODE_STRING , ErrorMessage = CODE_STRING ) ] public string Name { get ; set ; } <EOF>
private Point [ ] GetNeighbors ( int count ) { int a , x , y , c = count / CODE_INTEGER ; Point [ ] p = new Point [ count * count ] ; for ( a = y = CODE_INTEGER ; y < count ; y ++ ) for ( x = CODE_INTEGER ; x < count ; x ++ ) p [ a ++ ] = /* Create point here */ return p ; } <EOF>
var username = txtUserName . Text ; var password = txtPassword . Text ; var isValidUser = from user on UserTable where user . UserName == txtUserName . Text && user . Password == password && user . Status == CODE_INTEGER select user ; if ( isValiduser . Count ( ) > CODE_INTEGER ) { } else { } <EOF>
if ( IsAllowed ) { DoSomethingInteresting ( ) ; } <EOF>
public static void ConvertBlToUi < TBl , TUi > ( TBl entitySource , TUi entityTarget ) { var blProperties = typeof ( TBl ) . GetProperties ( ) . Select ( p = > new { Name = p . Name . ToLower ( ) , Property = p } ) . ToArray ( ) ; var uiProperties = typeof ( TUi ) . GetProperties ( ) . Select ( p = > new { Name = p . Name . ToLower ( ) , Property = p } ) ; foreach ( var uiProperty in uiProperties ) { var value = blProperty . Property . GetValue ( entitySource ) ; var t = Nullable . GetUnderlyingType ( uiProperty . Property . PropertyType ) ?? uiProperty . Property . PropertyType ; var safeValue = ( value == null ) ? null : Convert . ChangeType ( value , t ) ; uiProperty . Property . SetValue ( entityTarget , safeValue ) ; } } <EOF>
public void FillBuf ( object sender ) { var handler = ( Socket ) sender ; while ( true ) { int received = CODE_INTEGER ; byte [ ] bytes = new byte [ CODE_INTEGER ] ; while ( received < bytes . Length ) { int block = handler . Receive ( bytes , received , bytes . Length - received , SocketFlags . None ) ; received += block ; } que . Enqueue ( bytes ) ; } } <EOF>
var client = new HttpClient ( ) ; var uri = new Uri ( CODE_STRING ) ; Stream respStream = await client . GetStreamAsync ( uri ) ; DataContractJsonSerializer ser = new DataContractJsonSerializer ( typeof ( rootObject ) ) ; rootObject feed = ( rootObject ) ser . ReadObject ( respStream ) ; System . Diagnostics . Debug . WriteLine ( feed . SONGHISTORY [ CODE_INTEGER ] . TITLE ) ; <EOF>
private void dg_LoadingRow ( object sender , DataGridRowEventArgs e ) { e . Row . MouseRightButtonDown += new MouseButtonEventHandler ( Row_MouseRightButtonDown ) ; } void Row_MouseRightButtonDown ( object sender , MouseButtonEventArgs e ) { dg . SelectedItem = ( ( sender ) as DataGridRow ) . DataContext ; } <EOF>
if ( useHashing ) { key = CryptoJS . MD5 ( key ) . toString ( ) ; var k1 = key . substring ( CODE_INTEGER , CODE_INTEGER ) ; key = key + k1 ; } <EOF>
bool containsParts ( string1 , string2 ) { count1 = array of CODE_INTEGER CODE_INTEGER ' s count2 = array of CODE_INTEGER CODE_INTEGER ' s for each character c in string1 : count1 [ c ] ++ for each character c in string2 : count2 [ c ] ++ for each character c in CODE_CHAR . . . CODE_CHAR : if count1 [ c ] < count2 [ c ] : return false return true } <EOF>
runat = CODE_STRING <EOF>
public partial class Character { [ ResultColumn ] public Entity Entity { get ; set ; } } public partial class Entity { [ ResultColumn ] public Faction Faction { get ; set ; } } sql = Sql . Builder . Append ( CODE_STRING ) . Append ( CODE_STRING ) . Append ( CODE_STRING ) . Append ( CODE_STRING ) . Append ( CODE_STRING , CODE_INTEGER ) ; var characters = db . Fetch < Character , Entity , Faction , Character > ( ( c , e , f ) = > { c . Entity = e ; e . Faction = f ; return c ; } , sql ) ; <EOF>
XDocument xd = new XDocument ( new XDeclaration ( CODE_STRING , CODE_STRING , CODE_STRING ) ) ; xd . Add ( new XElement ( CODE_STRING ) ) ; xd . Save ( Console . Out ) ; <EOF>
private CancellationTokenSource ts = new CancellationTokenSource ( ) ; public void Start ( ) { System . Timers . Timer t = new System . Timers . Timer ( ) ; t . Interval = CODE_INTEGER ; t . Elapsed += ( s , e ) = > { if ( ts . Token . IsCancellationRequested ) { Debug . WriteLine ( CODE_STRING ) ; t . Stop ( ) ; } } t . Start ( ) ; } public void Stop ( ) { ts . Cancel ( ) ; } <EOF>
private void dataGridView1_RowStateChanged ( object sender , DataGridViewRowStateChangedEventArgs e ) { if ( e . StateChanged == DataGridViewElementStates . Selected ) { Console . WriteLine ( CODE_STRING ) ; dataGridView1 . ReadOnly = true ; } } private void dataGridView1_CellStateChanged ( object sender , DataGridViewCellStateChangedEventArgs e ) { if ( e . StateChanged == DataGridViewElementStates . Selected ) { Console . WriteLine ( CODE_STRING ) ; dataGridView1 . ReadOnly = false ; } } <EOF>
void someCppFunc ( ) { long expected = CODE_INTEGER ; long actual = CODE_INTEGER ; Assert :: AreEqual < long > ( expected , actual , gcnew System :: String ( L CODE_STRING ) ) ; } <EOF>
public class SumObject { public int ID { get ; set ; } public string Name { get ; set ; } } public abstract class AbstractClass { protected SumObject SumProperty { get ; private set ; } protected AbstractClass ( ) { SetupSumObjecInAbstractClass ( ) ; DoWorkInChildClass ( ) ; } protected void SetupSumObjecInAbstractClass ( ) { SumProperty = new SumObject ( ) { ID = CODE_INTEGER , Name = CODE_STRING } ; } protected abstract void DoWorkInChildClass ( ) ; } public class ChildClass : AbstractClass { protected override void DoWorkInChildClass ( ) { if ( SumProperty == null ) throw new Exception ( CODE_STRING ) ; Console . WriteLine ( string . Format ( CODE_STRING , SumProperty . Name ) ) ; Console . ReadKey ( ) ; } } class Program { static void Main ( string [ ] args ) { var name = new ChildClass ( ) ; } } <EOF>
public BitmapImage ImageFromBuffer ( Byte [ ] bytes ) { MemoryStream stream = new MemoryStream ( bytes ) ; BitmapImage image = new BitmapImage ( ) ; image . BeginInit ( ) ; image . StreamSource = stream ; image . EndInit ( ) ; return image ; } public Byte [ ] BufferFromImage ( BitmapImage imageSource ) { Stream stream = imageSource . StreamSource ; Byte [ ] buffer = null ; if ( stream != null && stream . Length > CODE_INTEGER ) { using ( BinaryReader br = new BinaryReader ( stream ) ) { buffer = br . ReadBytes ( ( Int32 ) stream . Length ) ; } } return buffer ; } <EOF>
int key = ( int ) Registry . GetValue ( CODE_STRING , CODE_STRING , - CODE_INTEGER ) ; <EOF>
static IEnumerable < Tuple < string , int > > FindAdjacentItems ( IEnumerable < string > list ) { string previous = null ; int count = CODE_INTEGER ; foreach ( string item in list ) { if ( previous == item ) { count ++ ; } else { if ( count > CODE_INTEGER ) { yield return Tuple . Create ( previous , count ) ; } count = CODE_INTEGER ; } previous = item ; } if ( count > CODE_INTEGER ) { yield return Tuple . Create ( previous , count ) ; } } <EOF>
File | Options | Advanced | Developers | Show add - in user interface errors <EOF>
static void Main ( string [ ] args ) { int numFiles = CODE_INTEGER ; for ( int fileIndex = CODE_INTEGER ; fileIndex < numFiles ; fileIndex ++ ) { string randomFileName = Path . Combine ( CODE_STRING , Path . GetRandomFileName ( ) + CODE_STRING ) ; GenerateTestFile ( randomFileName , CODE_INTEGER , CODE_INTEGER ) ; } } static void GenerateTestFile ( string fileName , int numLines , int numValues ) { int [ ] values = new int [ numValues ] ; Random random = new Random ( DateTime . Now . Millisecond ) ; FileInfo f = new FileInfo ( fileName ) ; using ( TextWriter fs = f . CreateText ( ) ) { for ( int lineIndex = CODE_INTEGER ; lineIndex < numLines ; lineIndex ++ ) { for ( int valIndex = CODE_INTEGER ; valIndex < values . Length ; valIndex ++ ) { values [ valIndex ] = random . Next ( CODE_INTEGER ) ; } fs . WriteLine ( string . Join ( CODE_STRING , values ) ) ; } } } <EOF>
public class Person { private string _Nome ; private string _Nascimento ; public string Nome { get { return _Nome ; } set { _Nome = value ; } } public string Nascimento { get { return _Nascimento ; } set { _Nascimento = value ; } } public Person ( ) { } public Person ( string Nome , DateTime Nascimento ) { _Nome = Nome ; _Nascimento = Nascimento . ToString ( ) ; } } <EOF>
WebElement el = ( WebElement ) ( ( JavascriptExecutor ) driver ) . executeScript ( CODE_STRING ) ; <EOF>
public static Boolean CheckContents ( string ExportDirectory , string DspFleName ) { if ( DspFleName == CODE_STRING ) return true ; var DspFle = DspFleName . Split ( CODE_CHAR ) ; var ActualFiles = Directory . GetFiles ( ExportDirectory ) ; foreach ( var file in DspFle ) if ( ! ActualFiles . Any ( x = > Path . GetFileName ( x ) . Equals ( file ) ) ) return false ; return true ; } <EOF>
Assembly asm = Assembly . LoadFrom ( CODE_STRING ) ; Type type = asm . GetType ( CODE_STRING ) ; IMyType obj = Activator . CreateInstance ( type ) as IMyType ; <EOF>
zero - indexed <EOF>
public class HomePageActivity : FragmentActivity , Android . Support . V4 . View . ViewPager . IOnPageChangeListener { protected override void OnCreate ( Bundle bundle ) { base . OnCreate ( bundle ) ; SetContentView ( Resource . Layout . home ) ; var viewPager_up = FindViewById < Android . Support . V4 . View . ViewPager > ( Resource . Id . viewPager_up ) ; viewPager_up . AddOnPageChangeListener ( this ) ; } public void OnPageScrollStateChanged ( int state ) { Console . WriteLine ( CODE_STRING + CODE_STRING + state ) ; } public void OnPageScrolled ( int position , float positionOffset , int positionOffsetPixels ) { Console . WriteLine ( CODE_STRING + CODE_STRING + position ) ; } public void OnPageSelected ( int position ) { Console . WriteLine ( CODE_STRING + CODE_STRING + position ) ; } } <EOF>
try { operation1 ( ) ; operation2 ( ) ; . . . } finally { cleanup ( ) ; } public void cleanup ( ) { try { finalizer_operation1 ( ) ; finalizer_operation2 ( ) ; } finally { very_critical_finalizer_operation_which_should_occurs_at_the_end ( ) ; } } <EOF>
var result = arrayname . Select ( ( m , index ) = > new { key = array [ index ] , value = m } ) . OrderByDescending ( m = > m . key ) . Select ( m = > m . value ) . Take ( CODE_INTEGER ) ; var textBoxValue = string . Join ( CODE_STRING , result ) ; <EOF>
using System ; using Microsoft . Office . Interop . Word ; namespace PageSetup { class TestPageOrientation { static void Main ( string [ ] args ) { var app = new Microsoft . Office . Interop . Word . Application ( ) ; app . Visible = true ; Document document = app . Documents . Open ( CODE_STRING ) ; document . PageSetup . Orientation = WdOrientation . wdOrientLandscape ; } } } <EOF>
public async Task < List < ObjectId > > GetEntitiesIdsByEmail ( IList < string > emails ) { var regexFilter = CODE_STRING + string . Join ( CODE_STRING , emails ) + CODE_STRING ; var projection = Builders < Entity > . Projection . Include ( x = > x . Id ) ; var filter = Builders < Entity > . Filter . Regex ( CODE_STRING , new BsonRegularExpression ( new Regex ( regexFilter , RegexOptions . IgnoreCase | RegexOptions . IgnorePatternWhitespace ) ) ) ; var entities = await GetCollection ( ) . Find ( filter ) . Project ( projection ) . ToListAsync ( ) ; return entities . Select ( x = > x [ CODE_STRING ] . AsObjectId ) . ToList ( ) ; } <EOF>
var engine = new SparkViewEngine { DefaultPageBaseType = typeof ( SparkView ) . FullName , ViewFolder = viewFolder . Append ( new SubViewFolder ( viewFolder , CODE_STRING ) ) } ; SparkView view ; view = ( SparkView ) engine . CreateInstance ( new SparkViewDescriptor ( ) . AddTemplate ( templateName ) ) ; using ( var writer = new StreamWriter ( Console . OpenStandardOutput ( ) , Encoding . UTF8 ) ) { view . RenderView ( writer ) ; } <EOF>
( ? <= ~ ) [ ^ \ s ] + <EOF>
List < GmailItem > lstMail = new List < GmailItem > ( ) ; for ( int i = CODE_INTEGER ; i < mailCount ; i ++ ) { lstMail . Add ( client . GetMailItem ( i ) ) ; } _bindingMails . DataSource = lstMail ; dgMails . DataSource = _bindingMails ; <EOF>
Func < int , int , int > Add = ( x , y ) = > x + y ; Func < int , int , int > diff = ( x , y ) = > x - y ; Func < int , int , int > multi = ( x , y ) = > x * y ; <EOF>
Timer r = new System . Timers . Timer ( timeout_in_ms ) ; r . elapsed += new ElapsedEventHandler ( timer_Elapsed ) ; r . Enabled = true ; running = true ; while ( running ) { } r . Enabled = false ; void timer_Elapsed ( object sender , ElapsedEventArgs e ) { running = false ; } <EOF>
sqlAdapter = new SqlDataAdapter ( CODE_STRING + saka [ listboxselectedindex ] + CODE_STRING , conn ) ; sqlAdapter . SelectCommand . Parameters . AddWithValue ( CODE_STRING , CODE_INTEGER ) ; dataset = new DataSet ( ) ; sqlAdapter . Fill ( dataset , saka [ listboxselectedindex ] ) ; datagridview1 . DataSource = null ; datagridview1 . DataSource = dataset . Tables [ saka [ listboxselectedindex ] ] ; <EOF>
public void btnSubmitClick ( object sender , EventArgs e ) { if ( this . txtMultiLine . Text . StartsWith ( " \ r " ) ) { this . txtMultiLine . Text = " \ r " + this . txtMultiLine . Text ; } } <EOF>
url = url . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING ) ; <EOF>
RadCaptcha1 . Validate ( ) ; Page . Validate ( ) ; if ( RadCaptcha1 . IsValid ) { } <EOF>
var s = string . Join ( CODE_STRING , files . Select ( file = > Path . GetExtension ( file ) ) . Distinct ( StringComparer . InvariantCultureIgnoreCase ) . ToArray ( ) ) ; <EOF>
protected void RowBound ( object sender , GridItemEventArgs e ) { if ( e . Item is GridNestedViewItem ) { GridNestedViewItem item = e . Item as GridNestedViewItem ; } } <EOF>
for ( int userIndex = CODE_INTEGER ; userIndex < addressList . Count - CODE_INTEGER ; userIndex ++ ) { <EOF>
waitForJavaScript ( CODE_STRING ) <EOF>
var a = CODE_STRING ; var c = CODE_STRING ; var e = CODE_STRING ; var builder = new StringBuilder ( e ) ; for ( var i = CODE_INTEGER ; i < e . Length ; ++ i ) { var index = a . IndexOf ( e [ i ] ) ; if ( index >= CODE_INTEGER ) { builder [ i ] = c [ index ] ; } } var result = builder . ToString ( ) ; <EOF>
rowIndex = this . searchDataGridView . Rows . Add ( ) ; <EOF>
var temp = list [ CODE_INTEGER ] ; list [ CODE_INTEGER ] = list [ CODE_INTEGER ] ; list [ CODE_INTEGER ] = temp ; <EOF>
public class ListWrapper < T > { public ListWrapper ( INamedEnumerable < T > list ) { List = new List < T > ( list ) ; Name = list . Name ; } public List < T > List { get ; set ; } public string Name { get ; set ; } } <EOF>
message . Formatter = new BinaryMessageFormatter ( ) ; var reader = new StreamReader ( message . BodyStream , Encoding . Unicode ) ; var msgBody = reader . ReadToEnd ( ) ; <EOF>
reqFTP . Proxy = GlobalProxySelection . GetEmptyWebProxy ( ) ; <EOF>
var roomAmount = dc . Room . Single ( r = > r . RoomId == myRoomId ) . RoomCost ; var itemAmount = dc . RoomItem . Where ( i = > i . RoomId == myRoomId ) . Sum ( r = > r . ItemCost ) ; txtTotalAmount . Text = roomAmount + itemAmount ; <EOF>
public string this [ string key ] { get { string str = this . QueryString [ key ] ; if ( str != null ) { return str ; } str = this . Form [ key ] ; if ( str != null ) { return str ; } HttpCookie cookie = this . Cookies [ key ] ; if ( cookie != null ) { return cookie . Value ; } str = this . ServerVariables [ key ] ; if ( str != null ) { return str ; } return null ; } } <EOF>
Intent intent = new Intent ( this . ApplicationContext , typeof ( AutoLinkActivity ) ) ; <EOF>
string ToLatinDigits ( string nativeDigits ) { int n = nativeDigits . Length ; StringBuilder latinDigits = new StringBuilder ( capacity : n ) ; for ( int i = CODE_INTEGER ; i < n ; ++ i ) { if ( char . IsDigit ( nativeDigits , i ) ) { latinDigits . Append ( char . GetNumericValue ( nativeDigits , i ) ) ; } else if ( nativeDigits [ i ] . Equals ( CODE_CHAR ) || nativeDigits [ i ] . Equals ( CODE_CHAR ) || nativeDigits [ i ] . Equals ( CODE_CHAR ) ) { latinDigits . Append ( nativeDigits [ i ] ) ; } else { throw new Exception ( CODE_STRING ) ; } } return latinDigits . ToString ( ) ; } <EOF>
var srcString = CODE_STRING ; IEnumberable < string > results = Regex . Matches ( srcString , CODE_STRING ) . Cast < Match > ( ) . Select ( match = > match . Value ) ; <EOF>
string text = CODE_STRING + Environment . NewLine + this . richTextBoxSummary . Text ; Clipboard . SetText ( text ) ; <EOF>
BaseAnimal myAnimal ; if ( someVar ) { var myCat = new cat ( ) ; myAnimal = myCat ; } else { var myDog = new dog ( ) ; myAnimal = myDog ; } allAnimals . add ( myAnimal ) ; <EOF>
MethodInfo GetMethod ( Type argType , Type returnType ) { var enumerableType = typeof ( IEnumerable < > ) . MakeGenericType ( new Type [ ] { argType } ) ; Console . WriteLine ( enumerableType ) ; var methods = from method in typeof ( Enumerable ) . GetMethods ( BindingFlags . Public | BindingFlags . Static ) let parameters = method . GetParameters ( ) let genParams = method . GetGenericArguments ( ) where method . Name == CODE_STRING && method . ContainsGenericParameters && parameters . Length == CODE_INTEGER && parameters [ CODE_INTEGER ] . ParameterType . GetGenericTypeDefinition ( ) == typeof ( Func < , > ) && parameters [ CODE_INTEGER ] . ParameterType . GetGenericArguments ( ) [ CODE_INTEGER ] == argType && method . ReturnType == returnType select method ; return methods . FirstOrDefault ( ) ; } <EOF>
LinkedList < int > ll ; ll . Find ( CODE_INTEGER ) . Value = CODE_INTEGER ; <EOF>
Test test = new Test ( ) { new Test2 ( ) { new Test3 ( ) { } } , new Test ( ) { new Test2 ( ) { { new Test ( ) , new Test2 ( ) } , { new Test ( ) , new Test2 ( ) } , { new Test ( ) , new Test2 ( ) } } } } ; public class Test : IEnumerable { public void Add ( Test a ) { } public void Add ( Test2 a ) { } public IEnumerator GetEnumerator ( ) { } } public class Test2 : IEnumerable { public void Add ( Test a , Test2 b ) { } public void Add ( Test3 a ) { } public IEnumerator GetEnumerator ( ) { } } public class Test3 : IEnumerable { public void Add ( Test a ) { } public void Add ( Test2 a ) { } public IEnumerator GetEnumerator ( ) { } } <EOF>
protected void lnk_Click ( object sender , EventArgs e ) { LinkButton lnk = sender as LinkButton ; Label Label1 = lnk . NamingContainer . FindControl ( CODE_STRING ) as Label ; if ( Label1 . Text == CODE_STRING ) { Page . ClientScript . RegisterStartupScript ( this . GetType ( ) , CODE_STRING , CODE_STRING , true ) ; } else if ( Label1 . Text == CODE_STRING ) { Page . ClientScript . RegisterStartupScript ( this . GetType ( ) , CODE_STRING , CODE_STRING , true ) ; } } <EOF>
netstat - o <EOF>
string pattern = CODE_STRING ; Regex r = new Regex ( pattern , RegexOptions . None ) ; string s = CODE_STRING ; foreach ( Match m in r . Matches ( s ) ) { . . . } <EOF>
OrgCollection myYears = Org . RetrieveDistinctYear ( ) ; AcademicYearCollection allYears = AcademicYear . RetrieveAll ( ) ; var items = from y in myYears join ay in allYears on y . Code equals ay . AcademicYearCode select new { ay . Name , ay . Code } <EOF>
var ordered = dictionary . OrderBy ( kv = > kv . Key ) ; var half = dictionary . Count / CODE_INTEGER ; var firstHalf = ordered . Take ( half ) . ToDictionary ( kv = > kv . Key , kv = > kv . Value ) ; var secondHalf = ordered . Skip ( half ) . ToDictionary ( kv = > kv . Key , kv = > kv . Value ) ; <EOF>
IWebElement button = locator to button ; button . getAttribute ( CODE_STRING ) ; <EOF>
public static Expression < Func < MyEntity , bool > > HasPrefix ( String prefix ) { return e = > e . RowKey . CompareTo ( prefix + CODE_CHAR ) > CODE_INTEGER && e . RowKey . CompareTo ( prefix + CODE_CHAR ) <= CODE_INTEGER ; } CloudTableQuery < MyEntity > query = ( from e in tableServiceContext . CreateQuery < MyEntity > ( tableName ) where e . PartitionKey == CODE_STRING select e ) . Where ( HasPrefix ( CODE_STRING ) ) . AsTableServiceQuery ( ) ; <EOF>
byte [ ] firstArray = new byte [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; byte [ ] secondArray = [ your data here ] byte [ ] result = firstArray . Concat ( secondArray ) . ToArray ( ) ; <EOF>
var directoryname = new DirectoryInfo ( CODE_STRING ) . Name ; \\ The variable directoryname will be Test <EOF>
List < dynamic > <EOF>
height = DataGridHeight - Height of all rows except last one <EOF>
interface ITestInterface { void Test ( ) ; string Test2 ( ) ; } public class TestBase : ITestInterface { #region ITestInterface Members public void Test ( ) { System . Console . WriteLine ( CODE_STRING ) ; } public string Test2 ( ) { return CODE_STRING ; } #endregion } public class TestChild : TestBAse , ITestInterface { public void Test ( ) { System . Console . WriteLine ( CODE_STRING ) ; } } public static void Main ( ) { TestChild f = new TestChild ( ) ; f . Test ( ) ; var i = f as ITestInterface ; i . Test ( ) ; i . Test2 ( ) ; } <EOF>
net . tcp : <EOF>
Process :: Start ( ) <EOF>
int count = costumer . GroupCustomers . SelectMany ( gc = > gc . Group . GroupEmployees ) . Select ( ge = > ge . EmployeeID ) . Distinct ( ) . Count ( ) ; <EOF>
mutexName = String . Format ( CODE_STRING , CODE_STRING ) ; <EOF>
public Task CreateTask ( XmlElement elem ) { if ( elem != null ) { try { Assembly a = typeof ( Task ) . Assembly string type = string . Format ( CODE_STRING , typeof ( Task ) . Namespace , elem . Name ) ; Type t = a . GetType ( type , true , true ) ; return a . CreateInstance ( type , true ) as Task ; } catch ( System . Exception ) { throw new ArgumentException ( CODE_STRING ) ; } } } <EOF>
using System ; using System . Linq ; using System . Xml ; static class Program { static void Main ( string [ ] args ) { string mixed = CODE_STRING ; string xml = CODE_STRING + mixed + CODE_STRING ; XmlDocument doc = new XmlDocument ( ) ; doc . LoadXml ( xml ) ; var xmlFragments = from XmlNode node in doc . FirstChild . ChildNodes where node . NodeType == XmlNodeType . Element select node ; foreach ( var fragment in xmlFragments ) { Console . WriteLine ( fragment . OuterXml ) ; } } } <EOF>
private void redballoon_click ( object sender , MouseButtonEventArgs e ) { if ( e . LeftButton != MouseButtonState . Pressed ) return ; string red_balloon_question = System . Windows . Browser . HtmlPage . Window . Prompt ( CODE_STRING ) ; if ( red_balloon_question == CODE_STRING ) { MessageBox . Show ( CODE_STRING , CODE_STRING , MessageBoxButton . OK ) ; PopBalloonCount ++ ; } else { MessageBox . Show ( CODE_STRING , CODE_STRING , MessageBoxButton . OK ) ; PopBalloonCount -- ; } score . Content = CODE_STRING + CODE_STRING + Convert . ToString ( PopBalloonCount ) ; this . lastBalloonClickColor = CODE_STRING ; redballoon . Visibility = Visibility . Hidden ; redballoon . Opacity = CODE_REAL ; } <EOF>
depends . exe <EOF>
richTextBox1 . SaveFile ( CODE_STRING , RichTextBoxStreamType . PlainText ) ; <EOF>
this . TopMost = true ; this . Focus ( ) ; this . BringToFront ( ) ; this . TopMost = false ; <EOF>
get { if ( Math . Abs ( value ) > CODE_INTEGER && this . PayoutType == CutType . Percent ) { return _payout / CODE_INTEGER ; } return _payout ; } set { _payout = value ; } <EOF>
Using { } <EOF>
Mapper . CreateMap < I_NEWS , NewsModel > ( ) . ForMember ( x = > x . DateCreated , opt = > opt . MapFrom ( src = > ( ( DateTime ) src . DateCreated ) . ToShortDateString ( ) ) ) ; <EOF>
public List < Item > GetAll ( ) { var sql = CODE_STRING + CODE_STRING ; using ( var multipleResults = this . db . QueryMultiple ( sql ) ) { var items = multipleResults . Read < Item > ( ) . ToList ( ) ; var tags = multipleResults . Read < Tag > ( ) . ToList ( ) ; var tagsByItemId = tags . ToLookup ( t = > t . ItemId ) ; foreach ( var item in items ) { item . Tags = tagsByItemId [ item . Id ] . ToList ( ) ; } return items ; } } <EOF>
Button btn = new Button ( ) ; btn . Name = CODE_STRING ; btn . Click += btn1_Click ; private void btn1_Click ( object sender , RoutedEventArgs e ) { } <EOF>
private Visibility _comboboxvisibility ; public Visibility comboboxvisibility { get { return _comboboxvisibility ; } set { _comboboxvisibility = value ; RaisePropertyChanged ( CODE_STRING ) ; } } private XyZListItem _selectedItem ; public XyZListItem SelectedItem { get { return _selectedItem ; } set { comboboxvisibility = Visibility . Collapsed ; } } <EOF>
[ Obsolete ] <EOF>
Path . GetTempPath ( ) + CODE_STRING ; <EOF>
private void SendData ( string value ) { byte [ ] data = Encoding . ASCII . GetBytes ( value ) ; try { using ( TcpClient client = new TcpClient ( CODE_STRING , CODE_INTEGER ) ) { NetworkStream stream = client . GetStream ( ) ; stream . Write ( data , CODE_INTEGER , data . Length ) ; } } catch ( Exception err ) { } <EOF>
Dim months = { CODE_INTEGER , CODE_INTEGER } Dim query = From row In DataSet . A Where row . Position < > CODE_INTEGER AndAlso months . Contains ( row . Date . Month ) Group row By name Into eGroup = Group Select New With { Key . Name = name , . Amount = eGroup . Count ( Function ( row ) row . Field ( Of Decimal ) ( CODE_STRING ) ) } <EOF>
VideoCapture cap ( CODE_INTEGER ) ; <EOF>
int i = CODE_INTEGER ; DateTime date = DATE_YOU_WANT_HERE ; List < double > valuesForDate ; bool foundDate = sortedDict . TryGetValue ( date , out valuesForDate ) ; if ( foundDate ) { double theValue = valuesForDate [ i ] ; } else { } <EOF>
DateTime dt = DateTime . ParseExact ( CODE_STRING , CODE_STRING , CultureInfo . InvariantCulture ) ; <EOF>
string select = CODE_STRING ; Connection c = new Connection ( ) ; SqlDataAdapter dataAdapter = new SqlDataAdapter ( select , c . con ) ; SqlCommandBuilder commandBuilder = new SqlCommandBuilder ( dataAdapter ) ; DataSet ds = new DataSet ( ) ; dataAdapter . Fill ( ds ) ; dataGridView1 . ReadOnly = true ; dataGridView . DataSource = ds . tables [ CODE_INTEGER ] ; <EOF>
CODE_STRING <EOF>
private void numericUpDown1_KeyPress ( object sender , KeyPressEventArgs e ) { if ( e . KeyChar . Equals ( CODE_CHAR ) || e . KeyChar . Equals ( CODE_CHAR ) ) { e . KeyChar = ( ( System . Globalization . CultureInfo ) System . Globalization . CultureInfo . CurrentCulture ) . NumberFormat . NumberDecimalSeparator . ToCharArray ( ) [ CODE_INTEGER ] ; } } <EOF>
insert into book ( [ Book Name ] , Description ) <EOF>
INSERT INTO DictionaryTest ( BinNumber , Letter ) VALUES ( @NewCode , @NewLetter ) <EOF>
sqrt ( re * re + im * im ) <EOF>
string joined = String . Join ( sOperators , Operators ) ; <EOF>
string command ; do { command = Console . ReadLine ( ) ; } while ( ! CODE_STRING . Equals ( command , StringComparison . InvariantCultureIgnoreCase ) ) <EOF>
public object ReturnValue ( string operationName , object returnValue ) { Type t = returnValue . GetType ( ) ; return Activator . CreateInstance ( t ) ; } <EOF>
HtmlDocument doc = new HtmlDocument ( ) ; doc . Load ( myHtmlFile ) ; foreach ( HtmlNode node in doc . DocumentNode . SelectNodes ( CODE_STRING ) ) { node . ParentNode . ReplaceChild ( doc . CreateTextNode ( node . InnerText + CODE_STRING + node . GetAttributeValue ( CODE_STRING , null ) + CODE_STRING ) , node ) ; } doc . Save ( Console . Out ) ; <EOF>
private Control GetControl ( ) { string dynamicCtrl = CurrentItem . DynamicControl ; string path = SomeClass . DynamicControls [ dynamicCtrl ] ; Control ctrl = LoadControl ( path ) ; return ctrl ; } <EOF>
protected void GridView1_RowCommand ( object sender , GridViewCommandEventArgs e ) { switch ( e . CommandName ) { case CODE_STRING : { PersonBL objPersonBL = new PersonBL ( ) ; var objPerson = objPersonBL . GetPersonSingleByPersonID ( e . CommandArgument . ToString ( ) ) ; if ( objPerson . Count != CODE_INTEGER ) { txtPersonID . Text = objPerson [ CODE_INTEGER ] . PersonID ; txtFirstname . Text = objPerson [ CODE_INTEGER ] . Firstname ; txtLastname . Text = objPerson [ CODE_INTEGER ] . Lastname ; break ; } } default : break ; } } <EOF>
stripevents ( AddressOf Any_Control_ValChanged ) stripevents ( AddressOf Any_EnterControl ) stripevents ( AddressOf Any_LeaveControl ) stripevents ( AddressOf ButtonClick ) Sub stripevents ( ByVal eh As EventHandler ) [ Delegate ] . RemoveAll ( eh , eh ) End Sub <EOF>
myItems = new ObservableCollection < DateTime > ( myItems . Distinct ( ) ) ; <EOF>
string Add < T > ( object value , T expiration ) where T : struct , IMyInterface <EOF>
public static readonly DependencyProperty GridColumnsProperty = DependencyProperty . Register ( CODE_STRING , typeof ( ObservableCollection < DataGridColumn > ) , typeof ( XGrid ) ) ; public ObservableCollection < DataGridColumn > GridColumns { get { return ( ObservableCollection < DataGridColumn > ) GetValue ( GridColumnsProperty ) ; } set { SetValue ( GridColumnsProperty , value ) ; } } public XGrid ( ) { GridColumns = new ObservableCollection < DataGridColumn > ( ) ; GridColumns . CollectionChanged += ( x , y ) = > { dataGrid . Columns . Clear ( ) ; foreach ( var column in this . GridColumns ) { dataGrid . Columns . Add ( column ) ; } } ; InitializeComponent ( ) ; } <EOF>
Sub BookmarksInTables ( ) Dim aTable As Table Dim aBookmark As Bookmark For Each aBookmark In ActiveDocument . Bookmarks For Each aTable In ActiveDocument . Tables ' If start of book mark is inside the table range or ' the end of a book mark is inside the table range then YES ! If ( aBookmark . Range . Start >= aTable . Range . Start _ And aBookmark . Range . Start <= aTable . Range . End ) _ Or ( aBookmark . Range . End >= aTable . Range . Start _ And aBookmark . Range . End <= aTable . Range . End ) Then MsgBox aBookmark . Name + CODE_STRING Else MsgBox aBookmark . Name + CODE_STRING End If Next Next End Sub <EOF>
File -> New -> Project -> C # ( Language ) -> Console Application <EOF>
var results = ( from c in _customers from ct in _customerTypes where c . TypeId == ct . TypeId select new { Customer = c , TypeName = ct . TypeName } ) . ToList ( ) ; <EOF>
public class ClassA { public virtual string ProcessName { get { return CODE_STRING ; } } } public class ClassB : ClassA { public override string ProcessName { get { return CODE_STRING ; } } } <EOF>
public class MyDynamicObject : DynamicObject { public override bool TryGetMember ( GetMemberBinder binder , out Object result ) { if ( binder . Name == CODE_STRING ) { result = CODE_STRING ; return true ; } result = null ; return false ; } } dynamic x = new MyDynamicObject ( ) ; Console . WriteLine ( x . myVar ) ; <EOF>
public IDataReader ExecuteReaderStoredProcedure ( string procName , IUnitOfWork uow , IEnumerable < KeyValuePair < string , object > > parameters ) { var command = Sessions [ uow ] . Connection . CreateCommand ( ) ; command . CommandText = procName ; command . CommandType = CommandType . StoredProcedure ; foreach ( var param in parameters ) { var parameter = command . CreateParameter ( ) ; parameter . ParameterName = param . Key ; parameter . Value = param . Value ; command . Parameters . Add ( parameter ) ; } Sessions [ uow ] . Transaction . Enlist ( command ) ; return command . ExecuteReader ( ) ; } <EOF>
string keys = CODE_STRING ; if ( ( Keyboard . Modifiers & ModifierKeys . Control ) > CODE_INTEGER ) { keys += CODE_STRING ; } if ( ( Keyboard . Modifiers & ModifierKeys . Alt ) > CODE_INTEGER ) { keys += CODE_STRING ; } if ( ( Keyboard . Modifiers & ModifierKeys . Shift ) > CODE_INTEGER ) { keys += CODE_STRING ; } keys += e . Key ; YourTextBox . Text = keys ; <EOF>
body . Text = row [ CODE_STRING ] . ToString ( ) ; Microsoft . Office . Interop . Outlook . MailItem mailItem = myApp . Session . GetItemFromID ( row [ CODE_STRING ] ) ; body . Text = mailItem . Body ; <EOF>
void RecursiveLoop ( BackGroundWorker worker ) { if ( worker . CancellationPending ) return ; if ( morework ) RecursiveLoop ( worker ) ; } <EOF>
builder . RegisterAssemblyTypes ( dataAccess ) . Where ( t = > ( typeof ( INotifier ) . IsAssignableFrom ( t ) && t . IsClass && ! t . IsAbstract ) ) . AsSelf ( ) . AsImplementedInterfaces ( ) ; <EOF>
Bitmap bitmap = Bitmap . CreateBitmap ( CODE_INTEGER , CODE_INTEGER , Bitmap . Config . Argb8888 ) ; Canvas canvas = new Canvas ( bitmap ) ; canvas . drawPath ( path , paint ) ; imageView . setImageBitmap ( bitmap ) ; <EOF>
new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) . ToString ( CODE_STRING ) <EOF>
string str = CODE_STRING ; DateTime dt = new DateTime ( ) ; bool b = DateTime . TryParseExact ( str . Substring ( CODE_INTEGER , CODE_INTEGER ) , CODE_STRING , null , DateTimeStyles . None , out dt ) ; <EOF>
string expression ; expression = CODE_STRING ; DataRow [ ] foundRows ; foundRows = table . Select ( expression ) ; for ( int i = CODE_INTEGER ; i < foundRows . Length ; i ++ ) { Console . WriteLine ( foundRows [ i ] [ CODE_STRING ] ) ; } <EOF>
GeneralTransform transform = yourRect . TransformToVisual ( yourCanvas ) ; Rect bounds = transform . TransformBounds ( new Rect ( CODE_INTEGER , CODE_INTEGER , yourRect . ActualWidth , yourRect . ActualHeight ) ) ; <EOF>
var str = CODE_STRING ; var spl = str . Split ( CODE_CHAR ) ; var l1 = spl . Where ( ( x , y ) = > y % CODE_INTEGER == CODE_INTEGER ) . ToList ( ) ; var l2 = spl . Where ( ( x , y ) = > y % CODE_INTEGER == CODE_INTEGER ) . ToList ( ) ; <EOF>
rng . MoveEnd Microsoft . Office . Interop . Word . WdUnits . wdCharacter , - CODE_INTEGER rng . Select ( ) ; rng . Bookmarks . Add ( CODE_STRING , rng ) ; <EOF>
XmlAttributeOverrides xmlAttributeOverrides = new XmlAttributeOverrides ( ) ; XmlSerializer serializer = new XmlSerializer ( typeof ( Data ) , XmlAttributeOverrides ) ; <EOF>
Panel polje1 = new Panel ( ) { Name = CODE_STRING } ; this . Controls . Add ( polje1 ) ; if ( this . Controls . ContainsKey ( CODE_STRING ) ) { this . Controls [ CODE_STRING ] . BackColor = Color . Red ; } <EOF>
var details = ( from p in repository . Query < Model . ProfileType > ( ) join r in repository . Query < Model . RoleProfile > ( ) on p . Id equals r . ProfileTypeId into g from x in g . DefaultIfEmpty ( ) select new RoleProfileModel { ProfileType = p . Name , SecurityLevel = x == null ? string . Empty : x . SecurityLevel , ProfileCode = x == null ? string . Empty : x . Code , } ) . ToArray ( ) ; <EOF>
Video Source = > Demux -> Audio Stream + Video Stream -> MP4Muxer <EOF>
public static class myGlobalArray { public static int [ ] thisIsMyGlobalArray { get ; set ; } } <EOF>
Properties p = new Properties ( ) ; Type tClass = p . GetType ( ) ; PropertyInfo [ ] pClass = tClass . GetProperties ( ) ; int value = CODE_INTEGER ; foreach ( var property in pClass ) { property . SetValue ( p , value ++ , null ) ; } <EOF>
SET NOCOUNT ON ; <EOF>
[ HttpPost ] public ActionResult Edit ( ClientContactViewModel model ) { if ( ModelState . IsValid ) { ClientContact contact = db . ClientPersons . Include ( CODE_STRING ) . Where ( x = > x . ClientPersonId == model . ClientPersonId ) . SingleOrDefault ( ) ; contact . FirstName = model . FirstName ; db . Entry ( contact ) . State = EntityState . Modified ; db . SaveChanges ( ) ; return RedirectToAction ( CODE_STRING ) ; } return View ( model ) ; } <EOF>
BackgroundImage = ( Image ) Properties . Resources . ResourceManager . GetObject ( resourcename ) ) ; <EOF>
var bf = new BinaryFormatter ( ) ; object ghost = bf . Deserialize ( stream ) ; return ghost ; <EOF>
using ( var context = new MyEntities ( ) ) { string lastSectionHeading = CODE_STRING ; bool isFirstHeading = true ; var dynamicPageItems = context . view_dynamicPageItems ; foreach ( var item in dynamicPageItems ) { if ( item . IsActive == CODE_INTEGER ) { if ( ! lastSectionHeading . Equals ( item . CategoryId ) ) { if ( ! isFirstHeading ) CloseSection ( ) ; lastSectionHeading = item . CategoryId ; AddSettingsSection ( item . CategoryDescription ) ; isFirstHeading = false ; } AddControl ( item . DataType ) ; } } } <EOF>
using System . Reflection ; static Program ( ) { AppDomain . CurrentDomain . AssemblyResolve += delegate ( object sender , ResolveEventArgs e ) { AssemblyName requestedName = new AssemblyName ( e . Name ) ; if ( requestedName . Name == CODE_STRING ) { return Assembly . LoadFrom ( CODE_STRING ) ; } else { return null ; } } ; } <EOF>
[ Column ( CODE_STRING ) ] [ Key ] public int Id { get ; set ; } <EOF>
interface IServer { ISession Authenticate ( ) ; } interface ISession { IServer Server { get ; } void Post ( ) ; void Get ( ) ; } <EOF>
double GetValue ( int index ) { return double . Parse ( System . IO . File . ReadAllLines ( your file ) [ CODE_INTEGER ] . Split ( CODE_CHAR ) [ index ] ) ; } <EOF>
paragph . Clear ( ) ; foreach ( string line in lines ) { if ( line . IndexOf ( searchString , StringComparison . OrdinalIgnoreCase ) >= CODE_INTEGER ) { paragph . Add ( ( counter + CODE_INTEGER ) . ToString ( ) ) ; arrparagh = paragph . ToArray ( ) ; toDisplay = string . Join ( CODE_STRING , arrparagh ) ; } counter ++ ; } yield return filePath ; <EOF>
var filteredProducts = ( from p in allProducts where usersProducts . Contains ( p . Id ) && p . Type == CODE_INTEGER select p ) . ToList ( ) ; <EOF>
{ CODE_STRING : { CODE_STRING : CODE_STRING , CODE_STRING : CODE_STRING } } <EOF>
using System . Reflection ; [ assembly : AssemblyVersion ( CODE_STRING ) ] [ assembly : AssemblyFileVersion ( CODE_STRING ) ] <EOF>
int [ ] Ids = folders . Select ( f = > f . Id ) . ToArray ( ) ; <EOF>
byte [ ] Encrypt ( byte [ ] plain ) { using ( FileStream keyFile = new FileStream ( FileName , FileMode . Open ) ) { keyFile . Seek ( - plain . Length , SeekOrigin . End ) ; byte [ ] key = new byte [ plain . Length ] ; keyFile . Read ( key , CODE_INTEGER , plain . Length ) ; byte [ ] encrypted = new byte [ plain . Length ] ; for ( int i = CODE_INTEGER ; i < plain . Length ; i ++ ) { encrypted [ i ] = ( byte ) ( plain [ i ] ^ key [ plain . Length - CODE_INTEGER - i ] ) ; } keyFile . SetLength ( keyFile . Length - plain . Length ) ; return encrypted ; } } <EOF>
Thread . Abort <EOF>
typeof ( T ) . GetProperty ( membername ) . SetValue ( obj , o ) ; <EOF>
var page = query . Take ( count ) <EOF>
service . SaveChanges ( SaveChangesOptions . Batch ) ; <EOF>
switch ( comboBox1 . SelectedItem . ToString ( ) ) { case CODE_STRING : label1 . Text = CODE_STRING ; break ; case CODE_STRING : label1 . Text = CODE_STRING ; break ; } <EOF>
public static bool TryGetTags ( string tagsInput , out string [ ] tags ) { Regex regex = new Regex ( CODE_STRING ) ; tags = tagsInput . Split ( CODE_CHAR ) . Select ( tag = > tag . Trim ( ) ) . ToArray ( ) ; if ( tags . Last ( ) == CODE_STRING ) tags = tags . Take ( tags . Length - CODE_INTEGER ) . ToArray ( ) ; if ( tags . Any ( tag = > tag == CODE_STRING ) ) return false ; if ( tags . Length > CODE_INTEGER ) return false ; if ( tags . Any ( tag = > tag . Length > CODE_INTEGER ) ) return false ; if ( tags . Distinct ( ) . Count ( ) != tags . Length ) return false ; if ( tags . Any ( tag = > ! regex . IsMatch ( tag ) ) ) return false ; return true ; } <EOF>
from r in db . entries where filters . contains ( r . word . substring ( CODE_INTEGER , CODE_INTEGER ) ) <EOF>
VoucherDate . Date . ToShortDateString ( ) ; <EOF>
GameObject result = Array . Find ( GOArray , g = > g . name == CODE_STRING ) ; <EOF>
MediaLibrary . Pictures <EOF>
Page . Title <EOF>
private FileClient CopyFileClientModel ( FileClient fileClient ) { return this . CopyFileClientModel ( fileClient , c = > c . Client ) ; } private FileContact CopyFileClientModel ( FileContact fileContact ) { return this . CopyFileClientModel ( fileContact , c = > c . Client ) ; } private TSource CopyFileClientModel < TSource > ( TSource fileClientOrContact , Func < TSource , Contact > contactGetter ) { var contact = contactGetter ( fileClientOrContact ) ; } <EOF>
protected void LinkButton1_Click ( Object sender , EventArgs { LinkButton button = sender as LinkButton ; Apartments apartAdmin = new Apartment ( ) ; bool deleted = apartAdmin . Delete ( int . Parse ( button . CommandArgument . ToString ( ) ) ; if ( deleted ) { radGrid . Rebind ( ) ; } } <EOF>
borrowedBookList . DataSource = from borrower in Borrowers join transaction in Transactions on borrower . BorrowerID equals transaction . BorrowerID join book in Books on transaction . BookID equals book . BookID select new { borrower . BorrowerID , borrower . BorrowerName , book . BookName , transaction . BorrowDate , transaction . ReturnDate , } borrowedBookList . DataBind ( ) ; <EOF>
ElementHost host = new ElementHost ( ) ; InkCanvas ic = new InkCanvas ( ) ; host . Child = ic ; Controls . Add ( host ) ; <EOF>
from att in context . Attendees join webUsers in context . WebUsers on att . web_user_id equals webUsers . id join invoice in context . Invoice on att . InvoiceID equals invoice . ID where invoice . SeminarID == seminarId select new { webUsers . FirstName , att . InvoiceID } ; <EOF>
Dim data As New Attachment ( New MemoryStream ( ByteArray ) , CODE_STRING ) <EOF>
var ii = i ; tasks [ i ] = Task . Factory . StartNew ( ( ) = > { nums . Add ( numbers [ ii ] ) ; } , TaskCreationOptions . None ) ; <EOF>
int width = sizeof ( float ) ; int nDataIndex = CODE_INTEGER ; byte [ ] data = new byte [ myData . Count * width ] ; for ( int i = CODE_INTEGER ; i < myData . Count ; ++ i ) { byte [ ] converted = BitConverter . GetBytes ( myData [ i ] ) ; if ( BitConverter . IsLittleEndian ) { Array . Reverse ( converted ) ; } for ( int j = CODE_INTEGER ; j < width ; ++ j ) { data [ nDataIndex + j ] = converted [ j ] ; } nDataIndex += width ; } client . Send ( data , data . Length , remoteEndPoint ) ; <EOF>
string username = User . Identity . Name ; <EOF>
DataGridViewColumn column = dataGridView1 . SortedColumn ; ListSortDirection order ; if ( dataGridView1 . SortOrder . Equals ( SortOrder . Ascending ) ) { order = ListSortDirection . Ascending ; } else { order = ListSortDirection . Descending ; } dataGridView1 . Sort ( column , order ) ; <EOF>
public static void Savedata ( ) { if ( HttpContext . Current != null ) { Page page = ( Page ) HttpContext . Current . Handler ; TextBox TextBox1 = ( TextBox ) page . FindControl ( CODE_STRING ) ; TextBox TextBox2 = ( TextBox ) page . FindControl ( CODE_STRING ) ; } } <EOF>
public static void Function ( [ QueueInput ] string testqueue ) { } <EOF>
public Func < bool > GenerateCheckIsLocal ( ) { var dynamicMethod = new DynamicMethod ( CODE_STRING , typeof ( bool ) , Type . EmptyTypes , true ) ; var il = dynamicMethod . GetILGenerator ( ) ; il . Emit ( OpCodes . Call , typeof ( HttpContext ) . GetProperty ( CODE_STRING ) . GetMethod ) ; il . Emit ( OpCodes . Call , typeof ( HttpContext ) . GetProperty ( CODE_STRING ) . GetMethod ) ; il . Emit ( OpCodes . Call , typeof ( HttpRequest ) . GetProperty ( CODE_STRING ) . GetMethod ) ; il . Emit ( OpCodes . Ret ) ; return dynamicMethod . CreateDelegate ( typeof ( Func < bool > ) ) as Func < bool > ; } <EOF>
string findMe = CODE_STRING ; Type enumType = typeof ( IllinoisNonDisclosureConvictionFormOptions ) ; Type descriptionAttributeType = typeof ( DescriptionAttribute ) ; foreach ( string memberName in Enum . GetNames ( enumType ) ) { MemberInfo member = enumType . GetMember ( memberName ) . Single ( ) ; string memberDescription = ( ( DescriptionAttribute ) Attribute . GetCustomAttribute ( member , descriptionAttributeType ) ) . Description ; if ( findMe . Equals ( memberDescription ) ) { Console . WriteLine ( CODE_STRING ) ; } } <EOF>
public bool IsV40Installed ( ) { try { System . Reflection . Assembly . Load ( CODE_STRING ) ; } catch ( System . IO . FileNotFoundException ) { return false ; } try { var factory = System . Data . Common . DbProviderFactories . GetFactory ( CODE_STRING ) ; } catch ( System . Configuration . ConfigurationException ) { return false ; } catch ( System . ArgumentException ) { return false ; } return true ; } <EOF>
public class MultiSqlCommand : IDisposable { public MultiSqlCommand ( DbConnectionType connType , DbConnection conn ) { . . . switch ( connType ) { case ADO : _cmd = new SqlCommand ( _connection ) ; break ; case ODBC : . . . } } public void AddParameter ( string strippedName , object value ) { object parameter = GetSqlParam ( strippedName , value ) ; _cmd . Parameters . Add ( object ) ; } } <EOF>
var colorBrush = new SolidColorBrush ( Colors . Transparent ) ; treeNode . Resources . Add ( SystemColors . HighlightBrushKey , colorBrush ) ; <EOF>
customers . ToList ( ) . ForEach ( g = > Console . WriteLine ( CODE_STRING , g . Country , g . Customers . Count ( ) , string . Join ( CODE_STRING , g . Customers . Select ( ( x , i ) = > i + CODE_STRING + x . CompanyName ) . ToArray ( ) ) ) ) ; <EOF>
source . Should ( ) . Equal ( target , ( left , right ) = > AreEqualApproximately ( left , right , CODE_REAL ) ) ; <EOF>
string version = Assembly . GetExecutingAssembly ( ) . GetReferencedAssemblies ( ) . Where ( x = > x . Name == CODE_STRING ) . First ( ) . Version . ToString ( ) ; <EOF>
public static List < string > GetDocuments ( Guid id , string documentType ) { return GetDocuments < Guid > ( id , documentType ) ; } <EOF>
lock ( m_syncObj ) { l . LogInformation ( CODE_STRING , ( Int32 ) VipEvent . GotStateLock ) ; using ( var fileStream = File . Open ( ServerState . PATH , FileMode . OpenOrCreate , FileAccess . ReadWrite , FileShare . None ) ) { result = func . Invoke ( fileStream ) ; } } l . LogInformation ( CODE_STRING , ( Int32 ) VipEvent . ReleasedStateLock ) ; return true ; <EOF>
var newList = data . Where ( s = > s . StartsWith ( input ) ) . ToList ( ) ; <EOF>
protected void Application_AuthenticateRequest ( object sender , EventArgs e ) { if ( HttpContext . Current . User != null ) { if ( HttpContext . Current . User . Identity . IsAuthenticated ) { } } } <EOF>
Map ( x = > x . Factor ) . Column ( CODE_STRING ) . CustomSqlType ( CODE_STRING ) . Not . Nullable ( ) ; <EOF>
if ( ! IsPostBack ) <EOF>
Process . Start ( CODE_STRING , CODE_STRING ) ; <EOF>
var createdEx = Expression . Lambda < Func < TModel , DateTime ? > > . . . <EOF>
ObservableCollection < string > myCollection = new ObservableCollection < string > ; myCollection . Add ( CODE_STRING ) ; myCollection . Add ( CODE_STRING ) ; myCollection . Add ( CODE_STRING ) ; myCollection . Add ( CODE_STRING ) ; myCollection . Add ( CODE_STRING ) ; myCollection [ CODE_INTEGER ] = CODE_STRING ; <EOF>
public static Control DeepFindControl ( Control c , string id ) { if ( c . ID == id ) { return c ; } if ( c . HasControls ) { Control temp ; foreach ( var subcontrol in c . Controls ) { temp = DeepFindControl ( subcontrol , id ) ; if ( temp != null ) { return temp ; } } } return null ; } <EOF>
var location = Path . GetDirectoryName ( typeof ( YourType ) . Assembly . Location ) ; <EOF>
System . Data . Common . DbTransaction transaction = null ; DBDataContext db = new DBDataContext ( ) ; db . Connection . Open ( ) ; transaction = db . Connection . BeginTransaction ( ) ; db . Transaction = transaction ; Table1 = new Table1 ( ) ; obj . objName = CODE_STRING ; db . Table1s . InsertOnSubmit ( obj ) ; db . SubmitChanges ( ) ; Table2 obj_info = new Table2 ( ) ; obj_info . Info = CODE_STRING ; obj_info . Id = obj . Id ; db . Table2s . InsertOnSubmit ( obj_info ) ; db . SubmitChanges ( ) ; try { db . SubmitChanges ( ) ; transaction . Commit ( ) ; } catch ( Exception ) { transaction . Rollback ( ) ; } finally { transaction . Dispose ( ) ; db . Dispose ( ) ; } <EOF>
public DataPool < T > { internal class DataStructHelper < T > { public T DataObject { get ; private set ; } public int Size { get ; private set ; } public DataStructHelper ( T dataObject ) { DataObject = dataObject ; Size = GetObjectSize ( dataObject ) ; } private int GetObjectSize ( T TestObject ) { BinaryFormatter bf = new BinaryFormatter ( ) ; using ( MemoryStream ms = new MemoryStream ( ) ) { byte [ ] Array ; bf . Serialize ( ms , TestObject ) ; return ms . ToArray ( ) . Length ; } } } } } <EOF>
SqlCommand sqlcmd = sqlcon . CreateCommand ( ) ; sqlcmd . CommandText = CODE_STRING + CODE_STRING ; sqlCmd . Parameters . AddWithValue ( CODE_STRING , textBox_cardNumber . Text ) ; . . . . <EOF>
List < string > bids = search_string_full_of_comma_bids . Split ( CODE_CHAR ) . ToList ( ) ; query = query . Where ( t = > bids . Any ( b = > t . BuildingIDs . StartsWith ( b + CODE_STRING ) || t . BuildingIds . EndsWith ( CODE_STRING + b ) || t . BuildngIds . Contains ( CODE_STRING + b + CODE_STRING ) ) ) ; <EOF>
ConfigurationManager . RefreshSection ( CODE_STRING ) ; <EOF>
ThankYouMessage = new XhtmlString ( CODE_STRING ) <EOF>
using ( var sr = new StreamReader ( CODE_STRING ) ) { var myArray = sr . ReadToEnd ( ) . Split ( ' ' ) . SelectMany ( s = > s . Split ( CODE_CHAR ) . Select ( x = > int . Parse ( x ) ) ) . ToArray < int > ( ) ; foreach ( var x in myArray ) Console . WriteLine ( x ) ; } <EOF>
using ( var sr = File . OpenText ( path ) ) { var line = string . Empty ; while ( ( line = sr . ReadLine ( ) ) != null ) { var dataPoints = line . Split ( CODE_CHAR ) ; } } <EOF>
var newAuctionsResults = repo . FindAllAuctions ( ) . Where ( a = > a . IsActive == true || ( a . StartTime . Value . Year == todayYear && a . StartTime . Value . Month == todayMonth && a . StartTime . Value . Day == todayDay ) ) . ToList ( ) ; <EOF>
WebClient wc = new WebClient ( ) ; var json = ( JObject ) JsonConvert . DeserializeObject ( wc . DownloadString ( url ) ) ; var country = json [ CODE_STRING ] . SelectMany ( x = > x [ CODE_STRING ] ) . FirstOrDefault ( t = > t [ CODE_STRING ] . First ( ) . ToString ( ) == CODE_STRING ) ; var name = country != null ? country [ CODE_STRING ] . ToString ( ) : CODE_STRING ; <EOF>
Stream outStream = File . Open ( filename , FileMode . Open ) ; outStream . Seek ( CODE_INTEGER , SeekOrigin . Begin ) ; outStream . WriteByte ( CODE_INTEGER ) ; <EOF>
Json ( results ) <EOF>
static int [ ] long2doubleInt ( long a ) { int a1 = ( int ) ( a & uint . MaxValue ) ; int a2 = ( int ) ( a > > CODE_INTEGER ) ; return new int [ ] { a1 , a2 } ; } static long doubleInt2long ( int a1 , int a2 ) { long b = a2 ; b = b << CODE_INTEGER ; b = b | ( uint ) a1 ; return b ; } static void Main ( string [ ] args ) { long a = CODE_INTEGER ; int [ ] al = long2doubleInt ( a ) ; long ap = doubleInt2long ( al [ CODE_INTEGER ] , al [ CODE_INTEGER ] ) ; System . Console . WriteLine ( ap ) ; System . Console . ReadKey ( ) ; } <EOF>
struct MyStruct { public List < string > MyList ; public int MyInt ; public MyStruct ( int myInt ) { MyInt = myInt ; MyList = new List < string > ( ) ; } } <EOF>
var doc = new HtmlAgilityPack . HtmlDocument ( ) ; doc . LoadHtml ( html ) ; foreach ( var img in doc . DocumentNode . Descendants ( CODE_STRING ) ) { img . Attributes . Remove ( CODE_STRING ) ; img . Attributes . Remove ( CODE_STRING ) ; } var newhtml = doc . DocumentNode . OuterHtml ; <EOF>
public bool OnlyHexInString ( string test ) { return System . Text . RegularExpressions . Regex . IsMatch ( test , CODE_STRING ) ; } <EOF>
string imageFolder = CODE_STRING ; string shareJPEG = CODE_STRING ; . . . private void CreateLiveTile ( TileItem item ) { var title = item . Title . ToString ( ) ; string tileParameter = CODE_STRING + item . Title . ToString ( ) ; ShellTile Tile = CheckIfTileExist ( tileParameter ) ; if ( Tile == null ) { string filePath = System . IO . Path . Combine ( imageFolder , shareJPEG ) ; background = new Uri ( CODE_STRING + filePath , UriKind . Absolute ) ; . . . } } <EOF>
public class UniqueKeyMaker { private int [ ] keys = new int [ CODE_INTEGER ] ; public void Reset ( ) { for ( int i = CODE_INTEGER ; i < keys . Length ; i ++ ) keys [ i ] = CODE_INTEGER ; } public string NextKey ( ) { string key = getCurrentKey ( ) ; increment ( ) ; return key ; } private void increment ( ) { int i = CODE_INTEGER ; while ( keys [ i ] == CODE_INTEGER ) { keys [ i ] = CODE_INTEGER ; i -- ; } keys [ i ] ++ ; } private string getCurrentKey ( ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { if ( keys [ i ] < CODE_INTEGER ) sb . Append ( ( char ) ( keys [ i ] + ( int ) CODE_CHAR ) ) ; else sb . Append ( ( char ) ( keys [ i ] - CODE_INTEGER + ( int ) CODE_CHAR ) ) ; } return sb . ToString ( ) ; } } <EOF>
public class HomeController { public ActionResult Index ( ) { var model = new Model ( ) ; return View ( model ) ; } } <EOF>
public enum DataFormat { JSON = CODE_INTEGER , XML = CODE_INTEGER , PRINTR = CODE_INTEGER } public ReturnType SomeFunction ( DataFormat format ) { if ( DataFormat . JSON == format ) return . . . . } <EOF>
string s = string . Empty ; MessageBox . Show ( s = string . Format ( CODE_STRING ) ) ; <EOF>
armyListing . army . Add ( army ) <EOF>
spfieldlookupvalue value = new SpFiledlookupvalue ( item [ CODE_STRING ] ) ; string id = value . lookupid ; string text = value . lookuptext ; <EOF>
string [ ] data = new [ ] { postalAddress . Line1 , postalAddress . Line2 , postalAddress . Line3 , postalAddress . Line4 , postalAddress . Suburb , postalAddress . StateCode , postalAddress . Pcode } ; string address = string . Join ( CODE_STRING , data . Where ( e = > ! string . IsNullOrWhiteSpace ( e ) ) ; <EOF>
static public string GetHTML ( Control myControl ) { System . IO . StringWriter sw = new System . IO . StringWriter ( ) ; HtmlTextWriter myWriter = new HtmlTextWriter ( sw ) ; myControl . RenderControl ( myWriter ) ; return sw . ToString ( ) ; } <EOF>
IF { db_column } = CODE_INTEGER THEN false ELSE true <EOF>
string yourText = Encoding . UTF8 . GetString ( yourByteArray ) ; <EOF>
string time = CODE_STRING ; int Result = CODE_INTEGER ; textresult . Text = Result . ToString ( CODE_STRING ) + CODE_STRING + time ; <EOF>
listView1 . Columns . Add ( CODE_STRING , CODE_INTEGER , HorizontalAlignment . Center ) <EOF>
var products = context . Products . Where ( p = > p . Name == CODE_STRING || p . OrderDetailList . Any ( od = > od . Order . orderName == CODE_STRING ) ) . ToList ( ) ; <EOF>
private void textBox1_TextChanged ( object sender , EventArgs e ) { textBox1 . Text = string . Format ( CODE_STRING , double . Parse ( textBox1 . Text ) ) ; } private void textBox1_KeyPress ( object sender , KeyPressEventArgs e ) { if ( ! char . IsControl ( e . KeyChar ) && ! char . IsDigit ( e . KeyChar ) && ( e . KeyChar != CODE_CHAR ) ) { e . Handled = true ; } if ( ( e . KeyChar == CODE_CHAR ) && ( ( sender as TextBox ) . Text . IndexOf ( CODE_CHAR ) > - CODE_INTEGER ) ) { e . Handled = true ; } } <EOF>
string binary = CODE_STRING string arguments = CODE_STRING ProcessStartInfo PSI = new System . Diagnostics . ProcessStartInfo ( binary , arguments ) ; PSI . RedirectStandardInput = true ; PSI . RedirectStandardOutput = true ; PSI . RedirectStandardError = true ; PSI . UseShellExecute = false ; Process p = System . Diagnostics . Process . Start ( PSI ) ; Encoding encoding = p . StandardOutput . CurrentEncoding ; System . IO . StreamWriter SW = new StreamWriter ( CODE_STRING , false , encoding ) ; p . WaitOnExit ( ) ; string output = p . StandardOutput . ReadToEnd ( ) SW . Write ( output ) SW . Close ( ) ; <EOF>
. , ; ? ! <EOF>
using ( OperationContextScope scope = new OperationContextScope ( ( ( IContextChannel ) proxy ) ) { } <EOF>
oMsg . Body = TextBox1 . text ; <EOF>
int [ ] ia = new int [ ] { - CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , - CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , - CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , - CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var result = ia . SkipWhile ( i = > i != - CODE_INTEGER ) . Skip ( CODE_INTEGER ) . TakeWhile ( i = > i >= CODE_INTEGER ) ; <EOF>
ViewState [ CODE_STRING ] = Convert . ToInt32 ( ViewState [ CODE_STRING ] ) + CODE_INTEGER <EOF>
protected override void Render ( HtmlTextWriter writer ) { var sw = new System . IO . StringWriter ( ) ; var tw = new HtmlTextWriter ( sw ) ; base . Render ( tw ) ; Response . Write ( String . Format ( CODE_STRING : \ CODE_STRING , \ CODE_STRING , Server . HtmlEncode ( sw . ToString ( ) ) . Replace ( " CODE_STRING " ) ) ; Response . Flush ( ) ; Response . End ( ) ; } <EOF>
foreach ( DataRow row in dt . Rows ) { try { DataTable newtable = new DataTable ( ) ; newtable = dt . Clone ( ) ; newtable . ImportRow ( row ) ; UserInfo = GetInfo ( newtable ) ; catch ( Exception exep ) { } } <EOF>
Surface oldDepthBuffer = device . DepthStencilSurface ; Texture db = new Texture ( device , w , w , CODE_INTEGER , Usage . DepthStencil , oldDepthBuffer . Description . Format , Pool . Default ) ; Surface myDepthBuffer = db . GetSurfaceLevel ( CODE_INTEGER ) ; device . SetRenderTarget ( CODE_INTEGER , surface ) ; device . DepthStencilSurface = myDepthBuffer ; device . DepthStencilSurface = oldDepthBuffer ; <EOF>
static string [ ] GetFiles ( string directory , params string [ ] extensions ) { var allowed = new HashSet < string > ( extensions , StringComparer . CurrentCultureIgnoreCase ) ; return Directory . GetFiles ( directory ) . Where ( f = > allowed . Contains ( Path . GetExtension ( f ) ) ) . ToArray ( ) ; } static void Main ( string [ ] args ) { string [ ] files = GetFiles ( CODE_STRING , CODE_STRING , CODE_STRING ) ; foreach ( var file in files ) { Console . WriteLine ( file ) ; } } <EOF>
{ CODE_STRING : { CODE_STRING : { CODE_STRING : CODE_STRING } } } <EOF>
private void BuildTree ( TreeView treeView , XDocument doc ) { TreeNode treeNode = new TreeNode ( doc . Root . Name . LocalName ) ; treeView . Nodes . Add ( treeNode ) ; BuildNodes ( treeNode , doc . Root ) ; } private void BuildNodes ( TreeNode treeNode , XElement element ) { foreach ( XNode child in element . Nodes ( ) ) { switch ( child . NodeType ) { case XmlNodeType . Element : XElement childElement = child as XElement ; TreeNode childTreeNode = new TreeNode ( childElement . Name . LocalName ) ; treeNode . Nodes . Add ( childTreeNode ) ; BuildNodes ( childTreeNode , childElement ) ; break ; case XmlNodeType . Text : XText childText = child as XText ; treeNode . Nodes . Add ( new TreeNode ( childText . Value ) ) ; break ; } } } } <EOF>
PhantomJSOptions options = new PhantomJSOptions ( ) ; options . AddAdditionalCapability ( CODE_STRING , CODE_STRING ) ; IWebDriver driver = new PhantomJSDriver ( options ) ; <EOF>
private static readonly HashSet < char > _base64Characters = new HashSet < char > ( ) {} ; public static bool IsBase64String ( string value ) { if ( string . IsNullOrEmpty ( value ) ) { return false ; } else if ( value . Any ( c = > ! _base64Characters . Contains ( c ) ) ) { return false ; } try { Convert . FromBase64String ( value ) ; return true ; } catch ( FormatException ) { return false ; } } <EOF>
var ordinal = reader . GetOrdinal ( CODE_STRING ) ; while ( reader . Read ( ) ) { result [ i ] = reader . GetString ( ordinal ) ; i ++ ; } <EOF>
[ Test ] [ Category ( CODE_STRING ) private void DoSomethingForCat1 ( ) { TestSomeStuff ( CODE_STRING ) ; } [ Test ] [ Category ( CODE_STRING ) private void DoSomethingForCat2 ( ) { TestSomeStuff ( CODE_STRING ) ; } private void TestSomeStuff ( string category ) { if ( category == CODE_STRING ) { ( . . . ) } else if ( category == CODE_STRING ) { ( . . . ) } } <EOF>
objectname . abc ( CODE_INTEGER , CODE_STRING ) ; <EOF>
DataRow [ ] rows = dTable . Select ( CODE_STRING ) ; DataRow [ ] rows1 = dTable . Select ( CODE_STRING , CODE_STRING ) ; <EOF>
CODE_REAL CODE_REAL CODE_REAL localhost <EOF>
cblTest . DataSource = CODE_STRING ; cblTest . DataValueField = CODE_STRING ; cblTest . DataTextField = CODE_STRING ; cblTest . RepeatDirection = RepeatDirection . Horizontal ; cblTest . RepeatColumns = CODE_INTEGER ; cblTest . CssClass = CODE_STRING ; cblTest . DataBind ( ) ; <EOF>
Dictionary < int , int > data = new Dictionary < int , int > ( ) ; data . Add ( CODE_INTEGER , CODE_INTEGER ) ; data . Add ( CODE_INTEGER , CODE_INTEGER ) ; data . Add ( CODE_INTEGER , CODE_INTEGER ) ; data . Add ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
table . Width = CODE_INTEGER ; <EOF>
public int var1 { get ; set ; } public int var2 { get ; set ; } <EOF>
transform . GetComponent < Renderer > ( ) . material . texture = CODE_STRING <EOF>
struct Example < T > { private object obj ; public T Obj { get { return ( T ) obj ; } set { this . obj = value ; } } } <EOF>
command . CommandTimeout = CODE_INTEGER ; <EOF>
Addresses . FirstOrDefault ( x = > x . paon . Trim ( ) == Regex . Replace ( exception . AddressLineOne , CODE_STRING , CODE_STRING ) && x . thorofare . Trim ( ) == ( Regex . Replace ( exception . AddressLineOne , CODE_STRING , CODE_STRING ) . Trim ( ) ) ) <EOF>
using ( SqlConnection conn = new SqlConnection ( CODE_STRING ) ) { conn . Open ( ) ; using ( SqlCommand command = conn . CreateCommand ( ) ) { command . CommandType = CommandType . StoredProcedure ; SqlParameter parameter = command . Parameters . Add ( CODE_STRING , SqlDbType . VarChar , CODE_INTEGER ) ; parameter . Direction = ParameterDirection . Output ; command . CommandText = CODE_STRING ; command . ExecuteNonQuery ( ) ; return parameter . Value ; } } <EOF>
public class SharedLogger : ILogger { public static SharedLogger Instance = new SharedLogger ( ) ; public void Write ( string s ) { lock ( _lock ) { _writer . Write ( s ) ; } } private SharedLogger ( ) { _writer = new LogWriter ( ) ; } private object _lock ; private LogWriter _writer ; } <EOF>
var specificFields = db . Session . CreateQuery ( CODE_STRING ) . List ( ) ; var specificFields = db . Session . CreateQuery ( CODE_STRING ) . List < Tuple < string , string > > ( ) ; <EOF>
var batchSize = CODE_INTEGER ; var batched = orig . Select ( ( Value , Index ) = > new { Value , Index } ) . GroupBy ( p = > p . Index / batchSize ) . Select ( g = > g . Select ( p = > p . Value ) . ToList ( ) ) ; <EOF>
var lastRow = splitRow . Last ( ) ; var lastPosition = lastRow . Split ( CODE_CHAR ) . First ( ) ; <EOF>
string _val = CODE_STRING ; Console . Write ( CODE_STRING ) ; ConsoleKeyInfo key ; do { key = Console . ReadKey ( true ) ; if ( key . Key != ConsoleKey . Backspace ) { double val = CODE_INTEGER ; bool _x = double . TryParse ( key . KeyChar . ToString ( ) , out val ) ; if ( _x ) { _val += key . KeyChar ; Console . Write ( key . KeyChar ) ; } } else { if ( key . Key == ConsoleKey . Backspace && _val . Length > CODE_INTEGER ) { _val = _val . Substring ( CODE_INTEGER , ( _val . Length - CODE_INTEGER ) ) ; Console . Write ( CODE_STRING ) ; } } } while ( key . Key != ConsoleKey . Enter ) ; Console . WriteLine ( ) ; Console . WriteLine ( CODE_STRING + _val ) ; Console . ReadKey ( ) ; <EOF>
public class Estandar { public int Id { get ; set ; } } public interface IConector { IEnumerable < Estandar > listar ( string name , Estandar estandar , object key ) ; } [ TestMethod ] public void CheckAnonymous ( ) { var connector = new Mock < IConector > ( ) ; connector . Setup ( cn = > cn . listar ( CODE_STRING , It . IsAny < Estandar > ( ) , It . Is < object > ( it = > MatchKey ( it , CODE_INTEGER ) ) ) ) . Returns ( new List < Estandar > { new Estandar { Id = CODE_INTEGER } } ) ; var entidad = connector . Object . listar ( CODE_STRING , new Estandar ( ) , new { Id = CODE_INTEGER } ) ; Assert . AreEqual ( CODE_INTEGER , entidad . Count ( ) ) ; } public static bool MatchKey ( object key , int soughtId ) { var ret = false ; var prop = key . GetType ( ) . GetProperty ( CODE_STRING ) ; if ( prop != null ) { var id = ( int ) prop . GetValue ( key , null ) ; ret = id == soughtId ; } return ret ; } <EOF>
string message1 = CODE_STRING + CODE_STRING ; string message2 = CODE_STRING + CODE_STRING ; string pattern = CODE_STRING ; Regex regex = new Regex ( pattern ) ; Match m = regex . Match ( message1 ) ; if ( m . Success ) { Group g = m . Groups [ CODE_INTEGER ] ; CaptureCollection cc = g . Captures ; for ( int i = CODE_INTEGER ; i < cc . Count ; i ++ ) { Capture c = cc [ i ] ; Console . WriteLine ( CODE_STRING , c ) ; } } Console . ReadLine ( ) ; <EOF>
var userdateformat = DateTime . ParseExact ( CODE_STRING , CODE_STRING , System . Globalization . CultureInfo . CurrentCulture ) ; <EOF>
int [ ] indices = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; string [ ] strings = { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; IEnumerable < string > results = indices . Select ( s = > strings [ s ] ) ; foreach ( string result in results ) { Console . WriteLine ( result ) ; } <EOF>
final ObjectMapper mapper = new ObjectMapper ( ) ; final AmazonSNSMessage message = mapper . readValue ( yourInput , AmazonSNSMessage . class ) ; <EOF>
CommandParameter = CODE_STRING <EOF>
Console . ReadLine ( ) ; } <EOF>
for ( int i = CODE_INTEGER ; i < row ; i ++ ) { for ( int j = CODE_INTEGER ; j < column ; j ++ ) { Console . Write ( CODE_STRING ) ; var value = Console . ReadLine ( ) ; int result ; if ( int . TryParse ( value , out result ) ) arrayFour [ i , j ] = result ; else { Console . WriteLine ( CODE_STRING ) ; j -- ; } } } <EOF>
public class Animal { protected Animal ( ) { } public Animal ( string name , string species ) { _Name = name ; _Species = species ; } public virtual string Name { get { return _Name ; } set { _Name = value ; } } private string _Name ; public virtual string Species { get { return _Species ; } set { _Species = value ; } } private string _Species ; } public sealed class NullAnimal : Animal { public override string Name { get { return String . Empty ; } set { } } public override string Species { get { return String . Empty ; } set { } } } <EOF>
public class MenuItem { public string Text { get ; set ; } public string NavigateUrl { get ; set ; } . . public List < MenuItem > Children { get ; set ; } } <EOF>
MySqlConnectionStringBuilder connBuilder = new MySqlConnectionStringBuilder ( ) ; connBuilder . IgnorePrepare = false ; MySqlConnection conn = new MySqlConnection ( connBuilder . ToString ( ) ) ; <EOF>
Browser _currentBrowser = new IE ( ) ; Link myLink = _currentBrowser . Link ( Find . ById ( CODE_STRING ) ) ; myLink . FireEvent ( CODE_STRING ) ; myLink . FireEvent ( CODE_STRING ) ; <EOF>
var currentAssembly = GetType ( ) . GetTypeInfo ( ) . Assembly ; var migrations = currentAssembly . DefinedTypes . Where ( type = > type . ImplementedInterfaces . Any ( inter = > inter == typeof ( IMigration ) ) && ! type . IsAbstract ) . OrderBy ( type = > type . Name ) ; <EOF>
Stopwatch sw = new Stopwatch ( ) ; sw . Start ( ) ; while ( true ) { Console . SetCursorPosition ( CODE_INTEGER , CODE_INTEGER ) ; Console . Write ( sw . Elapsed . ToString ( CODE_STRING ) ) ; if ( sw . Elapsed . TotalMinutes > CODE_INTEGER ) break ; } <EOF>
public class Class1 < T > : IInterface where T : Test2 { public T Test { get ; private set ; } Test2 IInterface . Test { get { . . . } } } <EOF>
var reader = new StreamReader ( Request . InputStream ) ; var json = reader . ReadToEnd ( ) ; cmupdate u = JsonConvert . DeserializeObject < cmupdate > ( json ) ; string output = CODE_STRING ; output = CODE_STRING + u . ListID ; List < Event > t = u . Events ; output += CODE_STRING + t [ CODE_INTEGER ] . OldEmailAddress + CODE_STRING + t [ CODE_INTEGER ] . EmailAddress ; <EOF>
fileitem . DropDownItems . Add ( CODE_STRING , _ Image . FromFile ( CODE_STRING ) , _ AddressOf NewFile_click ) <EOF>
using Company . WebServices ; namespace ST_abcdef . csproj { [ System . AddIn . AddIn ( CODE_STRING , Version = CODE_STRING , Publisher = CODE_STRING , Description = CODE_STRING ) ] public partial class ScriptMain : Microsoft . SqlServer . Dts . Tasks . ScriptTask . VSTARTScriptObjectModelBase { public void Main ( ) { WebService1 webService1 = new WebService1 ( ) ; var result = webService1 . methodA ( CODE_STRING , CODE_STRING ) ; } } } <EOF>
HtmlAgilityPack . HtmlDocument doc = new HtmlAgilityPack . HtmlDocument ( ) ; doc . LoadHtml ( html ) ; var table = doc . DocumentNode . SelectNodes ( CODE_STRING ) . Select ( tr = > tr . Elements ( CODE_STRING ) . Select ( td = > td . InnerText ) . ToList ( ) ) . ToList ( ) ; <EOF>
private static int runupdates ( string arr ) { updatestatement = CODE_STRING ; using ( SqlConnection connection = new SqlConnection ( SQLConnectionString ) ) { connection . Open ( ) ; using ( SqlCommand command = new SqlCommand ( updatestatement , connection ) ) { command . CommandText = updatestatement ; int nummmm = command . ExecuteNonQuery ( ) ; connection . Close ( ) ; } } return nummmm ; } <EOF>
listBox1 . DataSource = programasSPTV1 . Zip ( horasSPTV1 , ( a , b ) = > ( a + CODE_STRING + b ) ) . ToList ( ) ; <EOF>
int cnt = CODE_INTEGER ; while ( cnt < CODE_INTEGER ) cnt += port . Read ( size , cnt , CODE_INTEGER - cnt ) ; <EOF>
public class YourViewModel { public YourViewModel ( ) { AspectRatio . PropertyChanged += AspectRatio_PropertyChanged ; } void AspectRatio_PropertyChanged ( object sender , PropertyChangedEventArgs e ) { if ( e . PropertyName == CODE_STRING ) NotifyPropertyChanged ( CODE_STRING ) ; } } <EOF>
XDocument doc = XDocument . Parse ( someStringContainingXml ) ; var cats = from node in doc . Descendants ( CODE_STRING ) where node . Attribute ( CODE_STRING ) . Value == CODE_STRING select node . Attribute ( CODE_STRING ) . Value ; <EOF>
public class Prices { public string category { get ; set ; } public string price { get ; set ; } } <EOF>
foreach ( var PharosUserItem in ListRef ) { ADUser User ; try { User = new ADUser ( PharosUserItem . UserLoginPharos ) ; } catch ( ByTel . DirectoryServices . Exceptions . UserNotFoundException ex ) { continue ; } } <EOF>
Assembly . Load ( CODE_STRING ) ; <EOF>
var result = string . Concat ( element . Nodes ( ) ) ; <EOF>
Message Loop <EOF>
Private Sub Button_Click ( ByVal sender As System . Object , ByVal e as RoutedEventArgs ) Handles Button . Click DirectCast ( DataContext , Person ) . FirstName = CODE_STRING End Sub <EOF>
class WebServiceClass : Interface1 , Interface2 { public string Method1 ( int result ) { . . . } public void Method2 ( long id , int p3 ) { . . . } public void Method3 ( long in ) { . . . } string Interface1 . Method1 ( int result ) { return Method1 ( result ) ; } void Interface1 . Method2 ( long id , int p3 ) { Method2 ( id , p3 ) ; } string Interface2 . Method1 ( int result ) { return Method1 ( result ) ; } void Interface2 . Method2 ( long in ) { Method3 ( in ) ; } } <EOF>
private void B_Say_Click ( object sender , EventArgs e ) { var customArgs = e as Custom_EventArgs ; if ( null != customArgs ) { } } <EOF>
System . Convert . ToUInt16 ( CODE_CHAR ) <EOF>
DetailsDlg . Columns [ CODE_INTEGER ] . Header = CODE_STRING ; <EOF>
var CategoryItems = from item in db . Items join rental in db . Rentals on item . itemID equals rental . ItemID where item . CategoryID == CategoryID && rental . RentedBy == CODE_INTEGER orderby item . ListDate descending select new DisplayItem { AvailableForPurchase = item . AvailableForPurchase , . . . } ; <EOF>
class SyncListView : ListView { public SyncListView ( ) { } public Control Buddy { get ; set ; } private static bool scrolling ; protected override void WndProc ( ref Message m ) { base . WndProc ( ref m ) ; if ( ( m . Msg == CODE_INTEGER || m . Msg == CODE_INTEGER ) && ! scrolling && Buddy != null && Buddy . IsHandleCreated ) { scrolling = true ; SendMessage ( Buddy . Handle , m . Msg , m . WParam , m . LParam ) ; scrolling = false ; } } [ DllImport ( CODE_STRING , CharSet = CharSet . Auto ) ] private static extern IntPtr SendMessage ( IntPtr hWnd , int msg , IntPtr wp , IntPtr lp ) ; } <EOF>
Regex ( " ( ( http : <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( ! Page . IsPostBack ) { PutWhatWasBefore ( ) ; } } <EOF>
ISession . Contains ( ) <EOF>
public class Sprite { static Vector2 WorldOrigo = new Vector2 ( CODE_INTEGER , CODE_INTEGER ) ; Texture2D Texture { get ; set ; } Vector2 Origin { get ; set ; } public Sprite ( Texture2D texture ) { Texture = texture ; Origin = new Vector2 ( texture . Width / CODE_INTEGER , texture . Height / CODE_INTEGER ) ; } public void Draw ( Vector2 position , SpriteBatch spriteBatch ) { spriteBatch . Draw ( Texture , WorldOrigo + position - Origin , Color . White ) ; } } <EOF>
var sitePath = MapPath ( CODE_STRING ) ; var relativePath = i . FinalPath . Replace ( sitePath , CODE_STRING ) ; <EOF>
List < Test > laneConfigs = new List < Test > ( ) ; foreach ( DataGridViewRow dr in dataGridView1 . Rows ) { int bbbBorder = CODE_INTEGER ; Int32 . TryParse ( dr . Cells [ CODE_STRING ] . Value . ToString ( ) , out bbbBorder ) ; int eeee = CODE_INTEGER ; Int32 . TryParse ( dr . Cells [ CODE_STRING ] . Value . ToString ( ) , out eee ) ; LaneConfig laneConfig = new LaneConfig ( dr . Cells [ CODE_STRING ] . Value . ToString ( ) , ( TrafficLaneType ) Enum . Parse ( typeof ( TrafficLaneType ) , dr . Cells [ CODE_STRING ] . Value . ToString ( ) ) , new ValueWithUnit < int > ( bbbBorder , CODE_STRING ) , new ValueWithUnit < int > ( eee , CODE_STRING ) ) ; laneConfigs . Add ( llaneConfig ) ; } <EOF>
dynamic wrkCacheTableObject = wrkTablePropInfo . GetValue ( wrkGSD , null ) ; dynamic wrkRow = wrkCacheTableObject [ ( long ) varAJR . rowID ] ; wrkCacheTableObject [ ( long ) varAJR . rowID ] = wrkRow ; <EOF>
string section = CODE_STRING ; Configuration config = WebConfigurationManager . OpenWebConfiguration ( Request . ApplicationPath ) ; ConfigurationSection configSection = config . GetSection ( section ) ; if ( configSection . SectionInformation . IsProtected ) { configSect . SectionInformation . UnprotectSection ( ) ; config . Save ( ) ; } <EOF>
var filterdFiles = files . Where ( x = > mappings . Any ( m = > x . filename . contains ( m . Value ) ) ) <EOF>
private BitmapImage LoadImage ( string myImageFile ) { BitmapImage myRetVal = null ; if ( myImageFile != null ) { BitmapImage image = new BitmapImage ( ) ; using ( FileStream stream = File . OpenRead ( myImageFile ) ) { image . BeginInit ( ) ; image . CacheOption = BitmapCacheOption . OnLoad ; image . StreamSource = stream ; image . EndInit ( ) ; } myRetVal = image ; } return myRetVal ; } <EOF>
XDocument doc = XDocument . Load ( CODE_STRING ) ; foreach ( var id in doc . Descendants ( CODE_STRING ) . Attributes ( CODE_STRING ) ) { id . SetValue ( ( int ) id + CODE_INTEGER ) ; } doc . Save ( CODE_STRING ) ; <EOF>
this . TheTextBoxName . Text <EOF>
Type mytype = typeof ( int ) ; Type listGenericType = typeof ( List < > ) ; Type list = listGenericType . MakeGenericType ( mytype ) ; ConstructorInfo ci = list . GetConstructor ( new Type [ ] { } ) ; List < int > listInt = ( List < int > ) ci . Invoke ( new object [ ] { } ) ; <EOF>
Refactor -> Rename . . . <EOF>
string fullPath = CODE_STRING ; string partialPath = CODE_STRING ; string resultingPath = fullPath . Substring ( partialPath . Length ) ; <EOF>
X509Certificate2Collection certCollection = new X509Certificate2Collection ( ) ; certCollection . Import ( CODE_STRING ) ; X509Store store = new X509Store ( StoreName . AddressBook , StoreLocation . LocalMachine ) ; store . Open ( OpenFlags . ReadWrite ) ; store . AddRange ( certCollection ) ; <EOF>
public static bool IsStringInFile ( string fileName , string searchString ) { return File . ReadAllText ( fileName ) . Contains ( searchString ) ; } <EOF>
. TableDock { overflow - x : auto ; overflow - y : auto ; padding : CODE_INTEGER CODE_INTEGER CODE_INTEGER px CODE_INTEGER ; } <EOF>
isolated storage application settings <EOF>
rm = new ResourceManager ( CODE_STRING , this . GetType ( ) . Assembly ) ; pictureBox1 . Image = ( System . Drawing . Image ) rm . GetObject ( CODE_STRING ) ; <EOF>
INSERT INTO # AuditData ( AuditDataId ) EXEC usp_AuditSave <EOF>
DropDownList ddlRole = sender as DropDownList ; <EOF>
public int X { get ; set ; } <EOF>
string path = CODE_STRING ; if ( ! File . Exists ( path ) ) { using ( StreamWriter sw = File . CreateText ( path ) ) { sw . WriteLine ( CODE_STRING ) ; sw . WriteLine ( CODE_STRING ) ; sw . WriteLine ( CODE_STRING ) ; } } using ( StreamWriter sw = File . AppendText ( path ) ) { sw . WriteLine ( CODE_STRING ) ; sw . WriteLine ( CODE_STRING ) ; sw . WriteLine ( CODE_STRING ) ; } <EOF>
var recipients = json [ CODE_STRING ] ; var subject = ( string ) json [ CODE_STRING ] ; var blurb = ( string ) json [ CODE_STRING ] ; <EOF>
ICollectionView RefineList ( ) { DataSourceProvider provider = ( DataSourceProvider ) this . FindResource ( CODE_STRING ) ; return CollectionViewSource . GetDefaultView ( provider . Data ) ; } private void Unread_Click ( object sender , RoutedEventArgs e ) { ICollectionView view = RefineList ( ) ; if ( view . Filter == null ) { view . Filter = delegate ( object item ) { return int . Parse ( ( ( XmlElement ) item ) . Attributes [ CODE_STRING ] . Value ) == CODE_INTEGER ; } ; } else { view . Filter = null ; } } <EOF>
private void MenuItemPrint ( ) { if ( ! FileName . Trim ( ) . Equals ( CODE_STRING ) ) { using ( PrintDocument pd = new PrintDocument ( ) ) { using ( PrintDialog printDialog = new PrintDialog ( ) ) { if ( printDialog . ShowDialog ( ) == DialogResult . Yes ) { pd . PrintPage += new PrintPageEventHandler ( pd_PrintPage ) ; pd . Print ( ) ; } } } } } private void pd_PrintPage ( object sender , PrintPageEventArgs ev ) { ev . Graphics . DrawString ( FileName , new Font ( CODE_STRING , CODE_INTEGER ) , Brushes . Black , ev . MarginBounds . Left , CODE_INTEGER , new StringFormat ( ) ) ; } <EOF>
var formatedDate = date . getFullYear ( ) + CODE_CHAR + date . getDate ( ) + CODE_CHAR date . getDay ( ) ; <EOF>
mockContext . Setup ( m = > m . Products . First ( Moq . It . IsAny < int > ( ) ) ) . Returns ( the product you want returned ) ; <EOF>
app . Use ( async ( context , next ) = > { var user = context . Authentication . User ; if ( user == null || user . Identity == null || ! user . Identity . IsAuthenticated ) { context . Authentication . Challenge ( ) ; return ; } await next ( ) ; } ) ; <EOF>
void GoogleGeoCode ( string address ) { string url = CODE_STRING ; dynamic googleResults = new Uri ( url + address ) . GetDynamicJsonObject ( ) ; foreach ( var result in googleResults . results ) { Console . WriteLine ( CODE_STRING + result . geometry . location . lat + CODE_STRING + result . geometry . location . lng + CODE_STRING + result . formatted_address ) ; } } <EOF>
string [ ] drives = Environment . GetLogicalDrives ( ) ; foreach ( string drive in drives ) { try { DriveInfo di = new DriveInfo ( drive ) ; if ( di . VolumeLabel == CODE_STRING ) { } } catch { } } <EOF>
[ TableName ( CODE_STRING ) ] [ PrimaryKey ( CODE_STRING , autoIncrement = true ) ] public class Project { [ PrimaryKeyColumn ( AutoIncrement = true ) ] public int Id { get ; set ; } [ Required ] public string Name { get ; set ; } } [ TableName ( CODE_STRING ) ] [ PrimaryKey ( CODE_STRING , autoIncrement = true ) ] public class Student { [ PrimaryKeyColumn ( AutoIncrement = true ) ] public int Id { get ; set ; } [ Required ] public string Name { get ; set ; } [ ForeignKey ( typeof ( Project ) ) ] public int ProjectId { get ; set ; } } <EOF>
while ( true ) { acceptConnectionOnNormalPort ( ) connectToTargetPort ( ) startThreadCopyingDataFromAcceptedPortToTargetPort ( ) startThreadCopyingDataFromTargetPortToAcceptedPort ( ) } <EOF>
[ WebGet ( ResponseFormat = WebMessageFormat . Json ) ] public bool ConfigurationChanged ( string jsonStr ) { try { MyObject obj = new JavaScriptSerializer ( ) . Deserialize < MyObject > ( jsonStr ) ; } catch ( Exception ) { throw ; } } <EOF>
[ HttpPost ] public ActionResult studentWeights ( FormCollection formCollection ) { foreach ( string _formData in formCollection ) { var x = formCollection [ _formData ] ; } } <EOF>
Console . Read ( ) ; <EOF>
image = e . Row . FindControl ( CODE_STRING ) as Image ; <EOF>
class Worker { private Thread _thread ; private ManualResetEvent _notToBePaused = new ManualResetEvent ( true ) ; public Worker ( ) { _thread = new Thread ( Run ) { IsBackground = true } ; } /// <summary> /// Thread function. /// </summary> private void Run ( ) { while ( true ) { _notToBePaused . WaitOne ( ) ; } } public void Start ( ) { _thread . Start ( ) ; } public void Pause ( ) { _notToBePaused . Reset ( ) ; } public void UnPause ( ) { _notToBePaused . Set ( ) ; } } <EOF>
return new SelectList ( newSelectList . Concat ( oldSelectList ) , CODE_STRING , CODE_STRING ) ; return new SelectList ( newSelectList . Union ( oldSelectList ) , CODE_STRING , CODE_STRING ) ; return new SelectList ( newSelectList . Union ( oldSelectList , equalityComparer ) , CODE_STRING , CODE_STRING ) ; <EOF>
thisDate1 . ToString ( CODE_STRING ) ; <EOF>
public class B { private const A . myEnum alias_1 = A . myEnum . value_1 ; private const A . myEnum alias_2 = A . myEnum . value_2 ; private A . myEnum [ ] tab = { alias_1 , alias_2 } ; } <EOF>
object _priceStruct = new PriceStruct ( ) ; type = typeof ( PriceStruct ) ; info = type . GetProperty ( CODE_STRING ) ; info . SetValue ( _priceStruct , CODE_INTEGER , null ) ; Console . WriteLine ( ( ( PriceStruct ) _priceStruct ) . Value ) ; Debugger . Break ( ) ; <EOF>
. csproject <EOF>
class MyClass { static int instanceCount = CODE_INTEGER ; public MyClass ( ) { instanceCount ++ ; } } <EOF>
var yourObject = JsonConvert . DeserializeObject < Root > ( jsonstring ) ; public class Root { public Profile [ ] Profile ; } public class Profile { public string Name { get ; set ; } public string Last { get ; set ; } public Client Client { get ; set ; } public DateTime Date { get ; set ; } } public class Client { public int ClientId ; public string Product ; public string Message ; } <EOF>
StartCoroutine ( DownloadAndPlay ( CODE_STRING ) ) ; IEnumerator DownloadAndPlay ( string url ) { WWW www = new WWW ( url ) ; yield return www ; AudioSource audio = GetComponent < AudioSource > ( ) ; audio . clip = www . GetAudioClip ( false , false ) ; audio . Play ( ) ; } <EOF>
var qas = questions . Descendants ( CODE_STRING ) ; int qaCount = qas . Count ( ) ; h = qas . ElementAt ( rnd . Next ( CODE_INTEGER , qaCount - CODE_INTEGER ) ) . Element ( CODE_STRING ) . Value ; <EOF>
public SomeReturnType MyHelper ( UrlHelper url , { var myUrl = url . Action ( CODE_STRING , CODE_STRING ) ; } <EOF>
var autoCompleteData = new AutoCompleteStringCollection ( ) ; autoCompleteData . add ( CODE_STRING ) ; autoCompleteData . add ( CODE_STRING ) ; textBox . AutoCompleteMode = AutoCompleteMode . SuggestAppend ; textBox . AutoCompleteSource = AutoCompleteSource . CustomSource ; textBox . AutoCompleteCustomSource = autoCompleteData ; <EOF>
static string GetText2 ( ToolStripMenuItem c ) { string s = c . OwnerItem . Text + CODE_STRING + c . Text + Environment . NewLine ; foreach ( ToolStripMenuItem c2 in c . DropDownItems ) { s += GetText2 ( c2 ) ; } return s ; } <EOF>
float min = float . MaxValue ; int minI , minJ ; for ( int i = CODE_INTEGER ; i <= DistanceArray . GetUpperBound ( CODE_INTEGER ) ; i ++ ) { for ( int j = CODE_INTEGER ; j <= DistanceArray . GetUpperBound ( CODE_INTEGER ) ; i ++ ) { if ( DistanceArray [ i , j ] <= min ) { min = DistanceArray [ i , j ] ; minI = i ; minJ = j ; } } } <EOF>
string s = CODE_STRING ; byte [ ] data = Encoding . Unicode . GetBytes ( s ) ; SHA1 algorithm = SHA1 . Create ( ) ; byte [ ] hash = algorithm . ComputeHash ( data ) ; string base64 = Convert . ToBase64String ( hash ) ; <EOF>
> Common Properties > Debug Source Files <EOF>
foreach ( KeyValuePair < int , string > pair in dic ) { if ( pair . Key == count ) Console . WriteLine ( pair . Value ) ; } <EOF>
var xPathDocument = new XPathDocument ( CODE_STRING ) ; var query = XPathExpression . Compile ( CODE_STRING ) ; var navigator = xpathDocument . CreateNavigator ( ) ; var iterator = navigator . Select ( query ) ; while ( iterator . MoveNext ( ) ) { Console . WriteLine ( iterator . Current . Name ) ; Console . WriteLine ( iterator . Current . Value ) ; } <EOF>
e . Row . Attributes [ CODE_STRING ] = CODE_STRING + this . UniqueID + CODE_STRING + gvUserList . ID + CODE_STRING + e . Row . RowIndex + CODE_STRING ; <EOF>
public interface ICommented { string Comment { get ; set ; } } public class MyClass : ICommented { public string Comment { get ; set ; } } public partial class CommentEntry : Form { public CommentEntry ( Control pControl , ICommented commented ) { InitializeComponent ( ) ; control = pControl ; _commented = commented ; } private ICommented _commented ; private void CommentEntry_Closing ( object sender , CancelEventArgs e ) { _commented . Comment = tbCommentText . Text . Trim ( ) ; } } <EOF>
DirectoryInfo directoryInfo = new DirectoryInfo ( CODE_STRING ) ; FileInfo [ ] files = directoryInfo . GetFiles ( ) ; foreach ( FileInfo fileInfo in files ) { ListViewItem newItem = new ListViewItem ( ) ; newItem . Text = fileInfo . Name ; newItem . SubItems . Add ( fileInfo . Length ) ; listView1 . Items . Add ( newItem ) ; } <EOF>
Dictionary < String , Tuple < int , int , DateTime > > store = new Dictionary < String , Tuple < int , int , DateTime > > ( ) ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { int n1 = rnd . Next ( CODE_INTEGER , CODE_INTEGER ) ; int n2 = rnd . Next ( CODE_INTEGER , CODE_INTEGER ) ; DateTime dt = RandomDay ( ) ; String key = n1 . ToString ( ) + n2 . ToString ( ) + dt . ToString ( ) ; while ( store . ContainsKey ( key ) ) { n1 = rnd . Next ( CODE_INTEGER , CODE_INTEGER ) ; n2 = rnd . Next ( CODE_INTEGER , CODE_INTEGER ) ; dt = RandomDay ( ) ; key = n1 . ToString ( ) + n2 . ToString ( ) + dt . ToString ( ) ; } store . Add ( key , new Tuple ( n1 , n2 , dt ) ) ; } <EOF>
HtmlAgilityPack . HtmlNode . ElementsFlags . Remove ( CODE_STRING ) ; HtmlDocument html = new HtmlDocument ( ) ; html . OptionAutoCloseOnEnd = true ; <EOF>
private void dataGridView1_CellPainting ( object sender , DataGridViewCellPaintingEventArgs e ) { if ( e . Value == null ) return ; var s = e . Graphics . MeasureString ( e . Value . ToString ( ) , dataGridView1 . Font ) ; if ( s . Width > dataGridView1 . Columns [ e . ColumnIndex ] . Width ) { using ( Brush gridBrush = new SolidBrush ( this . dataGridView1 . GridColor ) , backColorBrush = new SolidBrush ( e . CellStyle . BackColor ) ) { e . Graphics . FillRectangle ( backColorBrush , e . CellBounds ) ; e . Graphics . DrawString ( e . Value . ToString ( ) , dataGridView1 . Font , Brushes . Black , e . CellBounds , StringFormat . GenericDefault ) ; dataGridView1 . Rows [ e . RowIndex ] . Height = ( int ) ( s . Height * Math . Ceiling ( s . Width / dataGridView1 . Columns [ e . ColumnIndex ] . Width ) ) ; e . Handled = true ; } } } <EOF>
Context . DbSet . find ( MyGuid ) ; <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( this . IsCookieDisabled ( ) ) errorMsgLabel . Text = Resources . Resource . BrowserDontSupportCookies ; } private bool IsCookieDisabled ( ) { string currentUrl = Request . RawUrl ; if ( Request . QueryString [ CODE_STRING ] == null ) { try { HttpCookie c = new HttpCookie ( CODE_STRING , CODE_STRING ) ; Response . Cookies . Add ( c ) ; if ( currentUrl . IndexOf ( CODE_STRING ) > CODE_INTEGER ) currentUrl = currentUrl + CODE_STRING ; else currentUrl = currentUrl + CODE_STRING ; Response . Redirect ( currentUrl ) ; } catch ( Exception ex ) { return false ; } } if ( ! Request . Browser . Cookies || Request . Cookies [ CODE_STRING ] == null ) return true ; return false ; } <EOF>
protected void btnGuess_Click ( object sender , EventArgs e ) { int randomNum = Convert . ToInt32 ( HttpContext . Current . Session [ CODE_STRING ] ) ; int guessedNum = Convert . ToInt32 ( txtGuess . Text ) ; if ( guessedNum < randomNum ) { MessageBox . Show ( CODE_STRING ) ; txtGuess . Text = CODE_STRING ; } else if ( guessedNum > randomNum ) { MessageBox . Show ( CODE_STRING ) ; txtGuess . Text = CODE_STRING ; } else { MessageBox . Show ( CODE_STRING ) ; txtGuess . Text = CODE_STRING ; } } protected void Page_Load ( object sender , EventArgs e ) { if ( Page . IsPostBack == false ) { Random myGenerator = new Random ( ) ; myGenerator = new Random ( ) ; int randomNum = myGenerator . Next ( CODE_INTEGER , CODE_INTEGER ) ; HttpContext . Current . Session [ CODE_STRING ] = randomNum ; } } <EOF>
int limit = richcars . GetLength ( CODE_INTEGER ) for ( int i = CODE_INTEGER ; i < limit ; i ++ ) { Random random = new Random ( ) ; int randomNumber = random . Next ( CODE_INTEGER , limit ) ; if ( lstBoxGarage . FindStringExact ( richcars [ randomNumber , CODE_INTEGER ] ) == - CODE_INTEGER ) lstBoxGarage . Items . Add ( richcars [ randomNumber , CODE_INTEGER ] ) ; else i -- ; } <EOF>
dataGridView1 . Rows [ CODE_INTEGER ] . Cells [ CODE_INTEGER ] . Value = CODE_STRING ; <EOF>
try { } catch ( Exception e ) { var d = new ThreadExceptionDialog ( e ) ; d . ShowDialog ( ) ; } <EOF>
var foo = from type in assembly . GetTypes ( ) where type . GetCustomAttributes ( false ) . OfType < ServiceContractAttribute > ( ) . Any ( ) from method in type . GetMethods ( ) where method . GetCustomAttributes ( false ) . OfType < OperationContractAttribute > ( ) . Any ( ) select method ; <EOF>
while ( i < myDT . Rows . Count ) { while ( j < myDT . Columns . Count ) { Row newRow = table . Rows . Add ( CODE_INTEGER , Font . Helvetica , CODE_INTEGER ) ; newRow . Cells . Add ( myDT . Rows [ i ] [ j ] . ToString ( ) ) ; j ++ ; } j = CODE_INTEGER ; i ++ ; } <EOF>
ScrollBar vScrollBar1 = new VScrollBar ( ) ; vScrollBar1 . Dock = DockStyle . Right ; vScrollBar1 . Scroll += ( sender , e ) = > { panel1 . VerticalScroll . Value = vScrollBar1 . Value ; } ; panel1 . Controls . Add ( vScrollBar1 ) ; <EOF>
CompilerParameters parms = new CompilerParameters { GenerateExecutable = false , GenerateInMemory = true , IncludeDebugInformation = false } ; parms . ReferencedAssemblies . Add ( CODE_STRING ) ; parms . ReferencedAssemblies . Add ( CODE_STRING ) ; CodeDomProvider compiler = CSharpCodeProvider . CreateProvider ( CODE_STRING ) ; return compiler . CompileAssemblyFromSource ( parms , source ) ; <EOF>
. NET Min Visual Studio version CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_REAL CODE_INTEGER ( CODE_REAL ) CODE_REAL CODE_INTEGER ( CODE_REAL ) <EOF>
private void btnUpsidedownEx_Click ( object sender , EventArgs e ) { txtAnswer . Text = txtAnswer . Text + CODE_STRING ; txtAnswer . Focus ( ) ; } <EOF>
Array . Resize ( ref myArray , CODE_INTEGER ) ; <EOF>
var folder = await Windows . ApplicationModel . Package . Current . InstalledLocation . GetFolderAsync ( CODE_STRING ) ; var file = await folder . GetFileAsync ( CODE_STRING ) ; if ( file != null ) { var content = await FileIO . ReadTextAsync ( file ) ; } <EOF>
public class RejectService { Dictionary < RejectInformation , Action < RejectInformation > > pendingNotifications = new Dictionary < RejectInformation , Action < RejectInformation > > ( ) ; public void SubmitNewRejectInfo ( RejectInformation rejectInformation ) { OnSubmitNewRejectInfo ( new RejectInfoArgs ( rejectInformation ) ) ; pendingNotifications . Add ( rejectInformation , info = > callback . RejectCallback ( info ) ) ; } public void SendRejectCallback ( RejectInformation rejectInformation ) { Action < RejectInformation > action ; if ( pendingNotifications . TryGetValue ( rejectInformation , out action ) ) { acion ( rejectInformation ) ; pendingNotifications . Remove ( rejectInformation ) ; } } } <EOF>
<EOF>
string valueOfFirstQueryStringParameter = CODE_STRING ; string nameOfFirstQueryStringParameter = CODE_STRING ; NameValueCollection n = Request . QueryString ; if ( n . HasKeys ( ) ) { nameOfFirstQueryStringParameter = n . GetKey ( CODE_INTEGER ) ; valueOfFirstQueryStringParameter = n . Get ( CODE_INTEGER ) ; } <EOF>
. . . SqlDataReader reader = command . ExecuteReader ( ) ; if ( reader . Read ( ) ) { string [ ] tokens = reader . GetString ( CODE_INTEGER ) . Split ( CODE_CHAR ) ; for ( int i = CODE_INTEGER ; i < tokens . Length ; i ++ ) { textBoxes [ i ] . Text = tokens [ i ] ; } } . . . <EOF>
gridView . DataSource = null ; . . . stuff happens . . . object [ ] source = dataSet ; foreach ( object item in source ) { dataProvider . Add ( item ) ; } gridView . DataSource = dataProvider ; <EOF>
ajax . params ( ) <EOF>
public static class SudokuCache { private static Sudoku _game ; private static DateTime _timestamp ; public static Sudoku Game { get { if ( _timestamp . AddMinutes ( CODE_INTEGER ) < DateTime . Now ) { _game = new Sudoku ( ) ; _timestamp = new DateTime . Now ; } return _game ; } } } public class Sudoku { } <EOF>
string s = CODE_STRING ; string [ ] values = s . Split ( CODE_CHAR ) ; for ( int i = CODE_INTEGER ; i < values . Length ; i ++ ) { values [ i ] = values [ i ] . Trim ( ) ; } <EOF>
class BaseContext : ApplicationContext <EOF>
PERMISSION_SET = UNSAFE <EOF>
mStaff . Children . Add ( mNote ) ; <EOF>
! CISDFCRC16 < crc > < filename > < size > < checksum > < data > <EOF>
Request . QueryString [ CODE_STRING ] <EOF>
public void Start ( int bbm ) { _timer . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; _timer . Start ( ) ; } public void Stop ( ) { _timer . Stop ( ) ; } <EOF>
var orderedMovies = movies . OrderBy ( movie = > String . Join ( CODE_STRING , movie . Directors . OrderBy ( dir = > dir . Name ) . Select ( dir = > dir . Name ) ) ) ; <EOF>
ex . ToString ( ) <EOF>
myUserControl . Controls . Add ( new LiteralControl ( myHTMLstring ) ) ; <EOF>
Dispatcher . BeginInvoke <EOF>
protected override void SaveApsXml ( System . Xml . XmlNode node ) { base . SaveApsXml ( node ) ; node . AppendNewChild ( CODE_STRING ) . SetElementText ( this . EventTime . ToString ( ApsMessage . DateTimeFormat ) ) ; var track = node . AppendNewChild ( CODE_STRING ) ; track . SetAttribute ( CODE_STRING , this . Track ) ; this . SequenceCar . SaveApsXml ( track . AppendNewChild ( CODE_STRING ) ) ; } <EOF>
NotifyPropertyChanged ( m = > m . RateTableDataView ) ; <EOF>
public void CreateMySqlDataReader ( string mySelectQuery , MySqlConnection myConnection ) { MySqlCommand myCommand = new MySqlCommand ( mySelectQuery , myConnection ) ; myConnection . Open ( ) ; MySqlDataReader myReader ; myReader = myCommand . ExecuteReader ( ) ; try { while ( myReader . Read ( ) ) { Console . WriteLine ( myReader . GetString ( CODE_INTEGER ) ) ; } } finally { myReader . Close ( ) ; myConnection . Close ( ) ; } } <EOF>
dateTimePicker1 . Value . Date <EOF>
var accounts = new Dictionary < string , double > ( ) ; accounts [ CODE_STRING ] = CODE_INTEGER ; accounts [ CODE_STRING ] = CODE_INTEGER ; accounts [ CODE_STRING ] = CODE_INTEGER ; accounts [ CODE_STRING ] += CODE_REAL ; accounts [ CODE_STRING ] += CODE_REAL ; accounts [ CODE_STRING ] += CODE_REAL ; Console . WriteLine ( CODE_STRING , accounts [ CODE_STRING ] ) ; <EOF>
double [ ] periods = gridData . Select ( x = > x . Period ) . ToArray ( ) ; <EOF>
ctorDefaultIL . Emit ( OpCodes . Ldc_I8 , dateVal . Ticks ) ; ctorDefaultIL . Emit ( OpCodes . Newobj , typeof ( DateTime ) . GetConstructor ( new [ ] { typeof ( long ) } ) ) ; <EOF>
WorkItemStore store = new WorkItemStore ( collection ) ; Changeset changeset = service . GetChangeset ( CODE_INTEGER , true , true ) ; WorkItem item = new WorkItem ( project . WorkItemTypes [ CODE_STRING ] ) ; item . Links . Add ( new ExternalLink ( store . RegisteredLinkTypes [ ArtifactLinkIds . Changeset ] , changeset . ArtifactUri . AbsoluteUri ) ) ; item . Fields [ CODE_STRING ] . Value = someValue ; item . Fields [ CODE_STRING ] . Value = someValue ; item . Fields [ CODE_STRING ] . Value = someValue ; item . Validate ( ) ; item . Save ( ) ; <EOF>
var topShifts = from s in shifts . GroupBy ( s = > s . CompanyId ) from a in s . GroupBy ( b = > b . TimeSlot ) select a . OrderBy ( p = > p . Priority ) . First ( ) ; <EOF>
string connection = ConfigurationManager . ConnectionStrings [ CODE_STRING ] . ToString ( ) ; DirectorySearcher dssearch = new DirectorySearcher ( connection ) ; dssearch . Filter = CODE_STRING ; dssearch . Filter = CODE_STRING + current_User + CODE_STRING ; SearchResultCollection searchResult = dssearch . FindAll ( ) ; foreach ( SearchResult srUSers in searchResult ) { DirectoryEntry de = srUsers . GetDirectoryEntry ( ) ; dropDownList1 . Items . Add ( de . Name . ToString ( ) ) ; } <EOF>
private void UpdateStatus ( String message ) { if ( this . InvokeRequired ) this . Invoke ( ( MethodInvoker ) delegate { UpdateStatus ( message ) ; } ) ; else label1 . Text = message ; } <EOF>
for ( int ix = CODE_INTEGER ; ix < listView . Columns . Count ; ix ++ ) { ColumnHeader columnHeader = listView . Columns [ ix ] ; int displayIndex = Settings . GetSettingInt ( CODE_STRING , columnHeader . Text + CODE_STRING ) ; columnHeader . DisplayIndex = displayIndex ; } <EOF>
var methods = typeof ( Service1 ) . GetMethods ( ) . Where ( meth = > meth . GetCustomAttributes ( true ) . Where ( attr = > attr is OperationContractAttribute ) . Count ( ) > CODE_INTEGER ) ; <EOF>
void ScrollToBottom ( ) { txtLogEntries . SelectionStart = txtLogEntries . Text . Length ; txtLogEntries . ScrollToCaret ( ) ; } <EOF>
Hyperlink GetHyperlinkAtSelection ( ) { var selectedPointer = rtb . Selection . GetNextInsertionPosition ( forward ) if ( sp == null ) return ; var para = sp . Paragraph ; var hyperlink = para . Inlines . FirstOrDefault ( x = > x . ContentStart . CompareTo ( sp ) == - CODE_INTEGER && x . ContentEnd . CompareTo ( sp ) == CODE_INTEGER ) ; return hyperlink as Hyperlink ; } <EOF>
BasicGeoposition queryHint = new BasicGeoposition ( ) ; queryHint . Latitude = CODE_REAL ; queryHint . Longitude = - CODE_REAL ; Geopoint hintPoint = new Geopoint ( queryHint ) ; MapLocationFinderResult result = await MapLocationFinder . FindLocationsAsync ( CODE_STRING , hintPoint , CODE_INTEGER ) ; if ( result . Status == MapLocationFinderStatus . Success ) { if ( result . Locations != null && result . Locations . Count > CODE_INTEGER ) { Uri uri = new Uri ( CODE_STRING + result . Locations [ CODE_INTEGER ] . Point . Position . Latitude . ToString ( ) + CODE_STRING + result . Locations [ CODE_INTEGER ] . Point . Position . Longitude . ToString ( ) + CODE_STRING + CODE_STRING ) ; var success = await Windows . System . Launcher . LaunchUriAsync ( uri ) ; } } <EOF>
partial class TimedModalForm : Form { private Timer timer ; public TimedModalForm ( ) { InitializeComponent ( ) ; timer = new Timer ( ) ; timer . Interval = CODE_INTEGER ; timer . Tick += CloseForm ; timer . Start ( ) ; } private void CloseForm ( object sender , EventArgs e ) { timer . Stop ( ) ; timer . Dispose ( ) ; this . DialogResult = DialogResult . OK ; } } <EOF>
protected void RadGrid1_NeedDataSource ( object sender , GridNeedDataSourceEventArgs e ) { string PhoneID = RadComboBox1 . SelectedItem . Value ; RadGrid1 . DataSource = GetDataTable ( string . Format ( CODE_STRING , PhoneID ) ) ; } <EOF>
ExcelLibrary . DataSetHelper . CreateWorkbook ( String filePath , DataSet dataset ) + CODE_INTEGER <EOF>
var engine = VsaEngine . CreateEngine ( ) ; Eval . JScriptEvaluate ( mySum , engine ) ; <EOF>
var myQuery = from movie in myContext . Movies where movie . genre . Any ( g = > g . Id == ( ( Genre ) listBox . SelectedItem ) . Id ) select movie ; <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( ! Page . IsPostBack ) { visitDateCal . SelectedDate = DateTime . Today ; } } <EOF>
right click -- > Update Model from Database <EOF>
OPOSPOSPrinter . Open CODE_STRING ' LDN of your printer OPOSPOSPrinter . Claim CODE_INTEGER ' Timeout OPOSPOSPrinter . DeviceEnabled = True ' - Print OPOSPOSPrinter . PrintNormal CODE_INTEGER , CODE_STRING ' - Close the printer If OPOSPOSPrinter . Claimed then OPOSPOSPrinter . Release End If OPOSPOSPrinter . Close <EOF>
Html . renderpartial ( CODE_STRING ) <EOF>
System . IO . StringWriter htmlStringWriter = new System . IO . StringWriter ( ) ; Server . Execute ( CODE_STRING , htmlStringWriter ) ; string htmlOutput = htmlStringWriter . GetStringBuilder ( ) . ToString ( ) ; <EOF>
IEnumerable < MyMeasure > interList = MyMeasure . Distinct ( new MyMeasure . NameComparer ( ) ) . Where ( cmo = > cmo . CompanyMeasureName . ToLower ( ) . Contains ( term . ToLower ( ) ) ) . Select ( m = > m . CompanyMeasure ) ; <EOF>
. { y } ( . { x } ) . * <EOF>
routes . MapRoute ( name : CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING } , constraints : new { id = CODE_STRING } ) ; <EOF>
static bool rotate ; <EOF>
column . Bound ( c = > c . AchievedPercentage ) . Format ( CODE_STRING ) . HtmlAttributes ( new { style = CODE_STRING } ) . HeaderHtmlAttributes ( new { style = CODE_STRING , title = CODE_STRING } ) . ClientFooterTemplate ( CODE_STRING ) ; <EOF>
foreach ( UIElement child in canvas . Children ) { } int index = CODE_INTEGER ; var childByIndex = canvas . Children [ index ] ; <EOF>
. TopMost = true <EOF>
" % windir % \ Microsoft . NET \ Framework \ CODE_STRING \ aspnet_regiis . exe " - i <EOF>
delegate void Work ( ) ; private void Button_Click ( object sender , RoutedEventArgs e ) { new Work ( WorkOne ) . BeginInvoke ( null , null ) ; } private void WorkOne ( ) { int x = CODE_INTEGER ; while ( r == false ) { listBox . Dispatcher . Invoke ( new Action ( ( ) = > { listBox . Items . Add ( x ++ ) ; } ) ) ; System . Threading . Thread . Sleep ( x ) ; } } private void btnStop_Click ( object sender , RoutedEventArgs e ) { r = true ; } <EOF>
var command = new SqlCommand ( CODE_STRING ) ; var ageValue = command . ExecuteScalar ( ) as int ? ; <EOF>
web . config <EOF>
var lines = new string [ CODE_INTEGER ] [ ] ; var csv = string . Join ( " \ r " , lines . Select ( words = > string . Join ( CODE_STRING , words . Select ( word = > CODE_STRING + word . Replace ( CODE_STRING , CODE_STRING ) + CODE_STRING ) ) ) ) ) ; File . WriteAllText ( CODE_STRING , csv ) ; <EOF>
public class MyTokenHandler : SessionSecurityTokenHandler { public override void WriteToken ( XmlWriter writer , SecurityToken token ) { SessionSecurityToken sessionSecurityToken = token as SessionSecurityToken ; sessionSecurityToken . IsReferenceMode = true ; string ns = CODE_STRING ; string localName = CODE_STRING ; string localName2 = CODE_STRING ; XmlDictionaryWriter xmlDictionaryWriter ; if ( writer is XmlDictionaryWriter ) { xmlDictionaryWriter = ( XmlDictionaryWriter ) writer ; } else { xmlDictionaryWriter = XmlDictionaryWriter . CreateDictionaryWriter ( writer ) ; } xmlDictionaryWriter . WriteStartElement ( localName , ns ) ; xmlDictionaryWriter . WriteElementString ( localName2 , ns , sessionSecurityToken . ContextId . ToString ( ) ) ; xmlDictionaryWriter . WriteEndElement ( ) ; xmlDictionaryWriter . Flush ( ) ; } } <EOF>
[ Designer ( CODE_STRING , typeof ( IDesigner ) ) ] public partial class barFloorsGrouping : Bar { . . . } <EOF>
Integrated Security = true <EOF>
framerControl . Open ( CODE_STRING ) ; <EOF>
XslCompiledTransform xslTransform = new XslCompiledTransform ( ) ; StringWriter writer = new StringWriter ( ) ; xslTransform . Load ( CODE_STRING ) ; xslTransform . Transform ( doc . CreateNavigator ( ) , null , writer ) ; return writer . ToString ( ) ; <EOF>
Page . DrawRectangle <EOF>
private int Counter ; private void cmdGo_Click ( object sender , EventArgs e ) { System . Windows . Forms . Timer t = new System . Windows . Forms . Timer ( ) ; t . Interval = CODE_INTEGER ; t . Tick += new EventHandler ( timer_Tick ) ; t . Start ( ) ; } void timer_Tick ( object sender , EventArgs e ) { if ( ++ Counter >= CODE_INTEGER ) { Counter = CODE_INTEGER ; RunMethod1 ( ) ; return ; } RunMethod2 ( ) ; } <EOF>
var icon = Icon . ExtractAssociatedIcon ( Application . ExecutablePath ) ; <EOF>
var entity = new UDetails ( ) { Email = User . Identity . Name , RegesterDate = DateTime . Now , UDetailsId = User . Identity . GetUserId ( ) } ; <EOF>
LoadSourceDetail obj = FillLoadSourceDetail ( ) ; ReportingEntity = obj . ReportingEntity . Select ( x = > new ReportingEntityViewModel ( ) { ReportingEntityCode = x . ReportingEntityCode , ReportingEntityDesc x . ReportingEntityDesc } ) . ToList ( ) ; <EOF>
try { string testURL = ApplicationDeployment . CurrentDeployment . UpdateLocation . ToString ( ) ; HttpWebRequest webRequest = WebRequest . Create ( testURL ) as HttpWebRequest ; webRequest . Proxy . Credentials = CredentialCache . DefaultCredentials ; HttpWebResponse webResponse = webRequest . GetResponse ( ) as HttpWebResponse ; } catch ( WebException ex ) { } <EOF>
myList . RemoveAll ( x = > x . BeginsWith ( CODE_STRING ) ) ; <EOF>
if ( result ) { return RedirectToAction ( CODE_STRING ) ; } <EOF>
var pi = new ProcessStartInfo ( CODE_STRING ) ; pi . CreateNoWindow = true ; pi . UseShellExecute = false ; pi . WorkingDirectory = CODE_STRING ; pi . Arguments = CODE_STRING ; using ( var process = Process . Start ( pi ) ) { process . WaitForExit ( CODE_INTEGER ) ; Debug . WriteLine ( process . ExitCode ) ; } <EOF>
var result = g . GroupBy ( x = > x . City , ( key , group ) = > new { city = key , employees = group . Select ( emp = > new { fullname = emp . FirstName + CODE_STRING + emp . LastName , title = emp . Title } ) } ) ; <EOF>
using System ; using System . Windows . Forms ; namespace WindowsFormsApplication6 { static class Program { /// <summary> /// The main entry point for the application. /// </summary> [ STAThread ] static void Main ( ) { using ( Form form = new Form ( ) ) { form . ContextMenuStrip = new ContextMenuStrip ( ) ; ToolStripItem addMenuItem = form . ContextMenuStrip . Items . Add ( CODE_STRING ) ; ToolStripItem deleteMenuItem = form . ContextMenuStrip . Items . Add ( CODE_STRING ) ; form . ContextMenuStrip . ItemClicked += ( sender , e ) = > { if ( e . ClickedItem == addMenuItem ) { MessageBox . Show ( CODE_STRING ) ; } if ( e . ClickedItem == deleteMenuItem ) { MessageBox . Show ( CODE_STRING ) ; } } ; Application . Run ( form ) ; } } } <EOF>
using System ; using System . Windows ; using System . Windows . Media ; using System . Windows . Media . Imaging ; void DrawBitmapGreyscale ( DrawingContext dc , string filename , int x , int y , int width , int height ) { BitmapImage bitmap = new BitmapImage ( ) ; bitmap . BeginInit ( ) ; bitmap . CacheOption = BitmapCacheOption . OnLoad ; bitmap . UriSource = new Uri ( filename ) ; bitmap . EndInit ( ) ; FormatConvertedBitmap bitmapGreyscale = new FormatConvertedBitmap ( bitmap , PixelFormats . Gray8 , BitmapPalettes . Gray256 , CODE_REAL ) ; dc . DrawImage ( bitmapGreyscale , new Rect ( x , y , width , height ) ) ; } <EOF>
public class OtherClass < T > where T : IBaseline { public T GenericInstance { get ; private set ; } public OtherClass ( T genericInstance ) { this . GenericInstance = genericInstance ; } } <EOF>
protected override void WndProc ( ref Message m ) { switch ( m . Msg ) { case CODE_INTEGER : base . WndProc ( ref m ) ; if ( ( /*m.LParam.ToInt32() >> 16 and m.LParam.ToInt32() & 0xffff fit in your transparen region*/ ) && m . Result . ToInt32 ( ) == CODE_INTEGER ) { m . Result = new IntPtr ( CODE_INTEGER ) ; } break ; default : base . WndProc ( ref m ) ; break ; } } <EOF>
events . OrderBy ( ev = > ev . Appointments . Min ( app = > app . StartTime ) ) . First ( ) . StartTime ; <EOF>
var selected = MultiSelectList . Items . Cast < IDName > ( ) . Where ( x = > MultiSelectList . SelectedItems . Contains ( x . Name ) ) ; <EOF>
HtmlWeb web = new HtmlWeb ( ) ; HtmlDocument doc = web . Load ( CODE_STRING ) ; HtmlNode rateNode = doc . DocumentNode . SelectSingleNode ( CODE_STRING ) ; string rate = rateNode . InnerText ; <EOF>
using System . Net . NetworkInformation ; public bool IsNetworkLikelyAvailable ( ) { return NetworkInterface . GetAllNetworkInterfaces ( ) . Any ( x = > x . OperationalStatus == OperationalStatus . Up ) ; } <EOF>
using ( var stream = await request . GetRequestStreamAsync ( ) ) { stream . Write ( dataBytes , CODE_INTEGER , dataBytes . Length ) ; } <EOF>
var alerts = driver . FindElements ( By . CssSelector ( CODE_STRING ) ) ; Assert . IsTrue ( alerts . Any ( element = > element . Text . Contains ( CODE_STRING ) ) ) ; <EOF>
int bufSize = CODE_INTEGER ; IntPtr ptr = ( IntPtr ) ( CODE_INTEGER * CODE_INTEGER + CODE_INTEGER ) ; byte [ ] data = new byte [ bufSize ] ; Marshal . Copy ( ptr , data , CODE_INTEGER , bufSize ) ; <EOF>
DispatcherTimer autosaveTimer = new DispatcherTimer ( TimeSpan . FromSeconds ( autosaveInterval ) , DispatcherPriority . Background , new EventHandler ( DoAutoSave ) , Application . Current . Dispatcher ) ; private void DoAutoSave ( object sender , EventArgs e ) { } <EOF>
[ Trace ( AttributePriority = CODE_INTEGER ) ] [ HandleError ( AttributePriority = CODE_INTEGER ) ] public void MyMethod ( ) { } <EOF>
con . Open ( ) ; cmd = new SqlCommand ( CODE_STRING , con ) ; rdr = cmd . ExecuteReader ( ) ; txtTeacher . Items . Clear ; while ( rdr . Read ( ) ) { string sub = rdr [ CODE_STRING ] . ToString ( ) ; string fname = rdr [ CODE_STRING ] . ToString ( ) ; string lname = rdr [ CODE_STRING ] . ToString ( ) ; string fulname = fname + CODE_CHAR + lname ; if ( ComboSubDep . Text == sub ) { txtTeacher . Items . Add ( fulname ) ; } } <EOF>
Nullable < int > or int ? <EOF>
var bytesFromFile = System . IO . File . ReadAllBytes ( CODE_STRING ) ; Console . WriteLine ( Encoding . UTF8 . GetString ( bytesFromFile ) ) ; Console . ReadKey ( ) ; <EOF>
datagridview_CellValidating ( object sender , DataGridViewCellValidatingEventArgs e ) { if ( e . FormattedValue == ( theOldValue ) ) { changed = false ; currentIndexRow = e . RowIndex ; currentIndexColumn = e . ColumnIndex ; e . cancel = true ; } } datagridview_SelectionChanged ( object sender , EventArgs e ) { if ( ! changed ) datagridview . CurrentCell = datagridview . Rows [ currentIndexRow ] . Cells [ currentIndexColumn ] ; } <EOF>
XElement element = item . Element ( CODE_STRING ) ; int length = ( int ) element . Attribute ( CODE_STRING ) ; string type = ( string ) element . Attribute ( CODE_STRING ) ; string url = ( string ) element . Attribute ( CODE_STRING ) ; rssItem . FeedUrl = url ; <EOF>
string s = list . Aggregate < int , string > ( String . Empty , ( x , y ) = > ( x . Length > CODE_INTEGER ? x + CODE_STRING : x ) + y . ToString ( ) ) ; <EOF>
string caseType = null ; if ( ! String . IsNullOrEmpty ( viewModel . CaseTypeValue ) ) { caseType = HttpUtility . UrlEncode ( viewModel . CaseTypeValue , System . Text . Encoding . Default ) ; } <EOF>
var replacements = new Dictionary < string , string > ( ) ; string file = System . IO . File . ReadAllText ( CODE_STRING ) ; file = Regex . Replace ( file , CODE_STRING , new MatchEvaluator ( m = > replacements . ContainsKey ( m . Groups [ CODE_STRING ] . Value ) ? replacements [ m . Groups [ CODE_STRING ] . Value ] : m . Value ) ) ; <EOF>
public object Convert ( object value , Type targetType , object parameter , CultureInfo culture ) { var mp = parameter as MetadataParameters ; var modelPropertyInfo = mp . ModelType . GetProperty ( mp . ModelProperty ) ; var attribute = modelPropertyInfo . GetCustomAttributes ( true ) . Cast < Attribute > ( ) . FirstOrDefault ( memberInfo = > memberInfo . GetType ( ) == mp . AttributeType ) ; var result = attribute . GetType ( ) . InvokeMember ( CODE_STRING + mp . AttributeProperty , BindingFlags . InvokeMethod | BindingFlags . Instance | BindingFlags . Public , null , attribute , new object [ CODE_INTEGER ] ) ; return result ; } <EOF>
foreach ( TabelRow row in Table1 . Rows ) { if ( row . Cells . Count > CODE_INTEGER ) { if ( row . Cells [ CODE_INTEGER ] . Controls . Count > CODE_INTEGER && row . Cells [ CODE_INTEGER ] . Controls [ CODE_INTEGER ] . GetType ( ) == typeof ( DropDownList ) ) { Response . Write ( a . SelectedValue ) ; } } } <EOF>
System . IO . Path . GetFileName ( CODE_STRING ) ; <EOF>
public interface IDependency { void DoSomeStuff ( ) ; } public class ClassUnderTest { private IDependency _dependency ; public ClassUnderTest ( IDependency dependency ) { _dependency = dependency ; } public ClassUnderTest ( ) : this ( new Dependency ( ) ) { } public void ImportantStuff ( ) { _dependency . DoSomeStuff ( ) ; } } <EOF>
public void AddValue ( string newGuid ) { Guid g = new Guid ( newGuid ) ; m_TheValues . Add ( g ) ; } <EOF>
OdbcCommand cmd = new OdbcCommand ( CODE_STRING + email + CODE_STRING + firstname + CODE_STRING + SecondName + CODE_STRING + DOB + CODE_STRING + Location + CODE_STRING + Aboutme + CODE_STRING , cn ) ; <EOF>
Child child = GetChildFromSomewhere ( ) ; Parent parent = GetParentFromSomewhere ( ) ; child . ParentId = parent . ParentId ; child . Parent = parent ; <EOF>
XDocument . Parse ( CODE_STRING ) . Descendants ( ) . Where ( n = > n . Elements ( ) . Any ( ) ) . Select ( n = > n . Name ) . Distinct ( ) . Count ( ) ; <EOF>
DataRow [ ] rows ; rows = dataTable . Select ( CODE_STRING ) ; foreach ( DataRow r in rows ) r . Delete ( ) ; <EOF>
. . . using FirebirdSql . Data . Firebird ; . . . FbConnectionStringBuilder builder = new FbConnectionStringBuilder ( ) ; builder . DataSource = CODE_STRING ; builder . UserID = CODE_STRING ; builder . Password = CODE_STRING ; builder . Database = CODE_STRING ; builder . ServerType = FbServerType . Default ; FbConnection . CreateDatabase ( builder . ConnectionString ) ; <EOF>
var html = new WebClient ( ) . DownloadString ( CODE_STRING ) ; <EOF>
container . Width = Unit . Percentage ( CODE_INTEGER ) ; <EOF>
chart1 . ChartAreas [ CODE_INTEGER ] . AxisX . Minimum = CODE_INTEGER ; chart1 . ChartAreas [ CODE_INTEGER ] . AxisX . Maximum = CODE_INTEGER ; <EOF>
Request . CreateResponse < Response > ( HttpStatusCode . OK , new Response ( ) { responseCode = Response . ResponseCodes . ItemNotFound } ) <EOF>
int [ , , ] a = new int [ CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ] { { { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } } , { { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } } } ; int x = ( int ) a . GetValue ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; int [ ] nArray = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; x = ( int ) a . GetValue ( nArray ) ; <EOF>
{ get ; set ; } <EOF>
protected override PageStatePersister PageStatePersister { get { return new HiddenFieldPageStatePersister ( this ) ; } } <EOF>
public List < Checklist > Provide ( ) { List < Checklist > checklists = new List < Checklist > ( ) ; using ( var reader = ExcelReaderFactory . CreateOpenXmlReader ( m_Stream ) ) { while ( reader . Read ( ) ) { Checklist checklist = new Checklist ( ) ; checklist . Description = reader . GetString ( CODE_INTEGER ) ; checklist . View = reader . GetString ( CODE_INTEGER ) ; checklist . Organ = reader . GetString ( CODE_INTEGER ) ; checklists . Add ( checklist ) ; } return checklists ; } } <EOF>
object dobVal = null ; while ( ( dobVal = reader . Read ( ) ) != null ) { var storedDob = Convert . ToDateTime ( dobVal . ToString ( ) ) ; if ( storedDob . Month == DateTime . Now . Month && storedDob . Day == DateTime . Now . Day ) { Session [ CODE_STRING ] = CODE_STRING ; } } <EOF>
private void button1_Click ( object sender , RoutedEventArgs e ) { Grid x = ( sender as Button ) . Parent as Grid ; } <EOF>
Marshal . FinalReleaseComObject ( xlWorkSheet ) ; xlWorkBook . Close ( false ) ; Marshal . FinalReleaseComObject ( xlWorkBook ) ; xlApp . Quit ( ) ; Marshal . FinalReleaseComObject ( xlApp ) <EOF>
var results = from t1 in Table1 from t2 in Table2 where t1 . ID = t2 . AnotherID join t3 in Table3 on t1 . ID equals t3 . AnotherID into joined from j in joined . DefaultIfEmpty ( ) select new { t1 , t2 , t3 = j } <EOF>
protected void OnRowDataBound ( object sender , GridViewRowEventArgs e ) { SearchControls < LinkButton > ( e . Row , button = > button . OnClientClick = CODE_STRING ) ; } private void SearchControls < T > ( Control start , Action < T > itemMatch ) { foreach ( var c in start . Controls . OfType < T > ( ) ) itemMatch ( c ) ; foreach ( var c in start . Controls . OfType < Control > ( ) ) SearchControls < T > ( c , itemMatch ) ; } <EOF>
foreach ( var dataItem in listOfData ) { DataRow row = dataTable . NewRow ( ) ; for ( int i = CODE_INTEGER ; i < props . Length ; i ++ ) { row [ i ] = props [ i ] . GetValue ( dataItem ) ; } dataTable . Rows . Add ( row ) ; } <EOF>
string clickedElement = ( ( System . Windows . FrameworkElement ) ( sender ) ) . Tag ; <EOF>
bvlsFortran . BV <EOF>
. Yield ( ) <EOF>
public class BrunoTabControl : TabControl { protected override void OnDrawItem ( System . Windows . Forms . DrawItemEventArgs e ) { if ( ImageList == null ) return ; int imageIndex = TabPages [ e . Index ] . ImageIndex ; if ( imageIndex >= CODE_INTEGER ) ImageList . Draw ( e . Graphics , CODE_INTEGER , CODE_INTEGER , imageIndex ) ; } } <EOF>
using System . Threading ; foreach ( . . ) { } Thread . Sleep ( CODE_INTEGER ) ; foreach ( . . ) { } Thread . Sleep ( CODE_INTEGER ) ; foreach ( . . ) { } <EOF>
int l = CODE_INTEGER ; string s ; Console . WriteLine ( CODE_STRING ) ; s = Console . ReadLine ( ) ; l = s . Replace ( CODE_STRING , String . Empty ) . Length ; Console . WriteLine ( CODE_STRING + l ) ; Console . ReadLine ( ) ; <EOF>
if ( button1 . Text . Length > Your button text length to be checked ) { System . Windows . Forms . ToolTip ToolTip1 = new System . Windows . Forms . ToolTip ( ) ; ToolTip1 . SetToolTip ( this . button1 , this . button1 . Text ) ; } <EOF>
foreach ( var cell in wsRow ) { var header = ws . Cell ( CODE_INTEGER , cell . Column ) ; } <EOF>
cbActive . CheckedChanged += SelectCheckBox_OnCheckedChanged <EOF>
double averageMaximumX = query . Average ( t = > double . Parse ( t . XMax ) ) ; double varianceMaximumX = query . Sum ( t = > Math . Pow ( double . Parse ( t . XMax ) - averageMaximumX , CODE_INTEGER ) ) ) ; double stdDevMaximumX = Math . Sqrt ( varianceMaximumX ) ; varianceMaximumX /= query . Count ( ) ; <EOF>
ddEquipmentName . SelectedIndex = ddEquipmentName . Items . IndexOf ( ddEquipmentName . Items . FindByText ( selectRow . Cells [ CODE_INTEGER ] . Text ) ) ; <EOF>
DateTime parsed = DateTime . ParseExact ( CODE_STRING , CODE_STRING , CultureInfo . InvariantCulture ) ; <EOF>
var OuterBrackets_List = lst . Where ( s = > s . StartsWith ( CODE_STRING ) && s . EndsWith ( CODE_STRING ) ; var AlphaNumeric_List = lst . Except ( OuterBrackets_List ) ; <EOF>
ServerManager iisManager = new ServerManager ( ) site = iisManager . Sites . FirstOrDefault ( a = > a . Name . Contains ( CODE_STRING ) ) ; site . VirtualDirectoryDefaults . Password = tbImpersonatorPassword . Text ; site . VirtualDirectoryDefaults . UserName = tbImpersonatorUser . Text ; <EOF>
For your MsiShortcutProperty table , add the following values to the table : Columns / values : MsiShortcutProperty / AppIDProperty Shortcut_ / MyShortcut . < guid > PropertyKey / System . AppUserModel . ID PropVariantValue / < YourCompanyName . ProductName . SubProduct . VersionInformation > <EOF>
[ Required ( ErrorMessageResourceName = CODE_STRING , ErrorMessageResourceType = typeof ( MyResource ) ] <EOF>
private DataSet CreateCommand ( string procedureName , string [ , ] parameters ) { SqlCommand cmd = new SqlCommand ( ) ; cmd . CommandText = CODE_STRING + procedureName ; for ( int i = CODE_INTEGER ; i < parameters . Length ; i ++ ) { cmd . CommandText += CODE_STRING + parameters [ i , CODE_INTEGER ] + CODE_STRING + parameters [ i , CODE_INTEGER ] ; cmd . Parameters . AddWithValue ( CODE_STRING + parameters [ i , CODE_INTEGER ] , parameters [ i , CODE_INTEGER ] ) ; } SqlDataAdapter da = new SqlDataAdapter ( ) ; DataSet ds = new DataSet ( ) ; da . SelectCommand = cmd ; da . Fill ( ds ) ; return ds ; } <EOF>
string [ ] splittedText1 = textBox2 . Text . Split ( CODE_CHAR ) ; string [ ] splittedText2 = textBox1 . Text . Split ( CODE_CHAR ) ; string [ ] splittedText3 = textBox3 . Text . Split ( CODE_CHAR ) ; string _sql = CODE_STRING ; OleDbCommand CmdSql = new OleDbCommand ( ) ; CmdSql . Connection = Cnn ; CmdSql . Parameters . Add ( CODE_STRING , OleDbType . VarChar ) ; CmdSql . Parameters . Add ( CODE_STRING , OleDbType . VarChar ) ; CmdSql . Parameters . Add ( CODE_STRING , OleDbType . VarChar ) ; decimal dQty = CODE_REAL ; decimal dPrice = CODE_REAL ; for ( int i = CODE_INTEGER ; i < splittedText1 . Length ; i ++ ) { Decimal . TryParse ( splittedText2 [ i ] , out dQty ) ; Decimal . TryParse ( splittedText3 [ i ] , out dPrice ) ; CmdSql . Parameters [ CODE_STRING ] . Value = splittedText1 [ i ] ; CmdSql . Parameters [ CODE_STRING ] . Value = dQty ; CmdSql . Parameters [ CODE_STRING ] . Value = dPrice ; CmdSql . ExecuteNonQuery ( ) ; } <EOF>
decimal d = CODE_REAL ; d . ToString ( CODE_STRING ) ; <EOF>
var p = new Process ( ) ; p . StartInfo . FileName = CODE_STRING ; p . StartInfo . Arguments = CODE_STRING ; p . Start ( ) ; <EOF>
foreach ( CancelEventHandler subHandler in handler . GetInvocationList ( ) ) { } <EOF>
aspnet_regiis . exe <EOF>
from a in tableA from b in tableB where a >= b . minX && a <= b . maxX select a ; <EOF>
public class RoleApiController : ApiController { private RoleService _roleService = new RoleService ( ) ; public RoleUser GetRoleUser ( int sectionID ) { if ( sectionID != null ) { return _roleService . GetUsers ( sectionID ) ; } throw new HttpResponseException ( HttpStatusCode . NotFound ) ; } } <EOF>
private int width ; private int height ; private int length ; private bool constrained ; . . . public int Width { get { return width ; } set { width = value ; if ( constrained ) { height = value ; length = value ; } } } <EOF>
treeView1 . SelectedNode . Name <EOF>
Windows . UI . Text . ITextSelection selection = richEditBox . Document . Selection ; selection . StartPosition = CODE_INTEGER ; selection . EndPosition = n ; <EOF>
string path = AppDomain . CurrentDomain . BaseDirectory ; String dir = Path . GetDirectoryName ( path ) ; dir += CODE_STRING ; string filename = dir + CODE_STRING ; if ( ! Directory . Exists ( dir ) ) Directory . CreateDirectory ( dir ) ; FileStream fs = File . Open ( filename , FileMode . OpenOrCreate , FileAccess . ReadWrite ) ; StreamReader reader = new StreamReader ( fs ) ; <EOF>
List < string > answervalue = new List < string > ; answervalue . ADD ( CODE_STRING ) answervalue . ADD ( CODE_STRING ) ?? ?? if ( answervalue . contains ( /*the message value being send it*/ ) { } <EOF>
using System ; using System . IO ; using System . Xml ; using System . Xml . Xsl ; using System . Xml . XPath ; public class TransformXML { public static void Main ( string [ ] args ) { try { XPathDocument myXPathDocument = new XPathDocument ( sourceDoc ) ; XslTransform myXslTransform = new XslTransform ( ) ; XmlTextWriter writer = new XmlTextWriter ( resultDoc , null ) ; myXslTransform . Load ( xsltDoc ) ; myXslTransform . Transform ( myXPathDocument , null , writer ) ; writer . Close ( ) ; StreamReader stream = new StreamReader ( resultDoc ) ; Console . Write ( " * * This is result document * * " ) ; Console . Write ( stream . ReadToEnd ( ) ) ; } catch ( Exception e ) { Console . WriteLine ( CODE_STRING , e . ToString ( ) ) ; } } } <EOF>
myComboBox . IsEditable = false ; myComboBox . IsHitTestVisible = false ; myComboBox . Focusable = false ; <EOF>
EXEC GetFilmsInCategory ' SF ' <EOF>
public IEnumerable < string > GetAllFiles ( string rootDirectory ) { foreach ( var directory in Directory . GetDirectories ( rootDirectory , CODE_STRING , SearchOption . AllDirectories ) ) { foreach ( var file in Directory . GetFiles ( directory ) ) { yield return file ; } } } <EOF>
folderWatcher . Renamed += FolderWatcherOnRenamed ; private static void FolderWatcherOnRenamed ( object sender , RenamedEventArgs e ) { var attr = File . GetAttributes ( e . FullPath ) ; if ( attr == FileAttributes . Directory && e . OldName == CODE_STRING ) { StartMonitoringDir ( e . FullPath ) } } <EOF>
public IEnumerable < ImportField > CreateFields ( HttpPostedFileBase file ) { if ( file == null ) throw new ArgumentNullException ( CODE_STRING ) ; return ExtractFromFile ( file ) ; } private IEnumerable < ImportField > ExtractFromFile ( HttpPostedFileBase file ) { using ( var reader = new StreamReader ( file . InputStream ) ) { var firstLine = reader . ReadLine ( ) ; var columns = firstLine . Split ( new [ ] { CODE_CHAR } ) ; for ( var i = CODE_INTEGER ; i < columns . Length ; i ++ ) { yield return new ImportField ( columns [ i ] , i ) ; } } } <EOF>
string [ ] times = { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; private void Form1_Load ( object sender , EventArgs e ) { DateTime prevDt = new DateTime ( CODE_INTEGER ) ; string prevString = CODE_STRING ; StringBuilder output = new StringBuilder ( CODE_STRING ) ; foreach ( string time in times ) { DateTime dt = DateTime . ParseExact ( time , CODE_STRING , CultureInfo . InvariantCulture ) ; if ( dt . Subtract ( prevDt ) . TotalMinutes > CODE_INTEGER ) { if ( prevString != CODE_STRING ) output . Append ( CODE_STRING + prevString + CODE_STRING ) ; output . Append ( CODE_STRING + time + CODE_STRING ) ; } prevString = time ; prevDt = dt ; } output . Remove ( output . Length - CODE_INTEGER , CODE_INTEGER ) ; MessageBox . Show ( output . ToString ( ) ) ; } <EOF>
class Song { prop IsSelected { get { return this . selected ; } set { this . selected = value ; PropertyChanged ( CODE_STRING ) ; } } } <EOF>
var IE = new SHDocVw . InternetExplorer ( ) ; object URL = CODE_STRING ; IE . ToolBar = CODE_INTEGER ; IE . StatusBar = false ; IE . MenuBar = false ; IE . Width = CODE_INTEGER ; IE . Height = CODE_INTEGER ; IE . Visible = true ; IE . Navigate2 ( ref URL ) ; <EOF>
byte [ ] buf = Encoding . UTF8 . GetBytes ( xml ) ; request . Method = CODE_STRING ; request . ContentType = CODE_STRING ; request . ContentLength = buf . Length ; request . GetRequestStream ( ) . Write ( buf , CODE_INTEGER , buf . Length ) ; var HttpWebResponse = ( HttpWebResponse ) request . GetResponse ( ) ; <EOF>
StorageFile storageFile = await Windows . Storage . StorageFile . GetFileFromApplicationUriAsync ( uri ) ; var randomAccessStream = await storageFile . OpenReadAsync ( ) ; Stream stream = randomAccessStream . AsStreamForRead ( ) ; <EOF>
Button . Text = CODE_STRING ; <EOF>
using System ; using System . Reflection ; namespace ConsoleApplication1 { class Program { public Int32 Add ( Int32 a , Int32 b ) { return a + b ; } static void Main ( string [ ] args ) { Program obj = new Program ( ) ; MethodInfo m = obj . GetType ( ) . GetMethod ( CODE_STRING ) ; Int32 result = ( Int32 ) m . Invoke ( obj , new Object [ ] { CODE_INTEGER , CODE_INTEGER } ) ; } } } <EOF>
var entry = CODE_STRING ; string pattern = CODE_STRING ; Match match = Regex . Match ( entry , pattern ) ; while ( match . Success ) { Console . WriteLine ( CODE_STRING , match . Groups [ CODE_INTEGER ] . Value ) ; match = match . NextMatch ( ) ; } <EOF>
var data = List . SelectedItem as SongData ; if ( data != null ) . . . <EOF>
using System ; using System . Collections . Generic ; using System . Linq . Expressions ; public Type GetExpressionType ( string expression , IDictionary < string , Type > variables ) { var types = new List < ParameterExpression > ( ) ; foreach ( var varType in variables ) types . Add ( Expression . Parameter ( varType . Value , varType . Key ) ) ; var lamda = System . Linq . Dynamic . DynamicExpression . ParseLambda ( types . ToArray ( ) , null , expression ) ; return lamda . ReturnType ; } <EOF>
string s = CODE_STRING ; new Uri ( s ) . Segments . Last ( ) ; s . Substring ( s . LastIndexOf ( CODE_STRING ) + CODE_INTEGER ) ; Regex . Match ( s , CODE_STRING ) . Groups [ CODE_INTEGER ] ; <EOF>
Label1 . Text = ( Excel . Worksheet1 . Cells [ CODE_INTEGER , CODE_INTEGER ] . value ?? CODE_STRING ; Label2 . Text = ( Excel . Worksheet1 . Cells [ CODE_INTEGER , CODE_INTEGER ] . value ?? CODE_STRING ; Label3 . Text = ( Excel . Worksheet1 . Cells [ CODE_INTEGER , CODE_INTEGER ] . value ?? CODE_STRING ; Label4 . Text = ( Excel . Worksheet1 . Cells [ CODE_INTEGER , CODE_INTEGER ] . value ?? CODE_STRING ; <EOF>
chart1 . Series [ CODE_STRING ] . ChartType = SeriesChartType . Polar ; chart1 . Series [ CODE_INTEGER ] [ CODE_STRING ] = CODE_STRING ; chart1 . ChartAreas [ CODE_STRING ] . AxisX . MajorGrid . Enabled = true ; chart1 . ChartAreas [ CODE_STRING ] . AxisX . MajorGrid . IntervalType = DateTimeIntervalType . Hours ; chart1 . ChartAreas [ CODE_STRING ] . AxisX . MajorGrid . Interval = CODE_INTEGER ; chart1 . ChartAreas [ CODE_STRING ] . AxisX . Crossing = CODE_INTEGER ; chart1 . ChartAreas [ CODE_STRING ] . AxisY . MajorGrid . Enabled = true ; <EOF>
Console . WriteLine ( ( ( ICollection < KeyValuePair < object , object > ) d2 ) . Remove ( new KeyValuePair < object , object > ( CODE_STRING , CODE_INTEGER ) ) ) ; <EOF>
var point = DbGeography . FromText ( string . Format ( CODE_STRING , latitude , longitude ) , CODE_INTEGER ) ; var query = from person in persons let region = point . Buffer ( radius ) where SqlSpatialFunctions . Filter ( person . Location , region ) == true select person ; <EOF>
svcutil . exe / language : cs / out : GeneratedProxy . cs / config : app . config net . tcp : <EOF>
INSERT INTO SpatialTable ( GeogCol1 ) VALUES ( geography :: STGeomFromText ( ' POINT ( CODE_INTEGER CODE_INTEGER ) ' , CODE_INTEGER ) ) ; <EOF>
decimal longitude = CODE_INTEGER ; decimal latitude = CODE_INTEGER ; var precision = BitConverter . GetBytes ( decimal . GetBits ( argument ) [ CODE_INTEGER ] ) [ CODE_INTEGER ] ; <EOF>
global :: <EOF>
List < IEntity > <EOF>
SoapObject request = new SoapObject ( NAMESPACE , METHOD_NAME ) ; request . addProperty ( CODE_STRING , bmpArray ) ; SoapSerializationEnvelope envelope = new SoapSerializationEnvelope ( SoapEnvelope . VER11 ) ; new MarshalBase64 ( ) . register ( envelope ) ; envelope . dotNet = true ; envelope . setOutputSoapObject ( request ) ; HttpTransportSE androidHttpTransport = new HttpTransportSE ( URL , CODE_INTEGER ) ; <EOF>
using ( MemoryStream stream = new MemoryStream ( data ) ) { BitmapImage image = new BitmapImage ( ) ; image . SetSource ( stream ) ; } <EOF>
Win32 API <EOF>
private void dataGridView1_Sorted ( object sender , System . EventArgs e ) { foreach ( DataGridViewRow dataGridViewRow in dataGridView1 . Rows . Cast < DataGridViewRow > ( ) ) { dataGridViewRow . Cells [ CODE_STRING ] . Value = dataGridViewRow . Index + CODE_INTEGER ; } } <EOF>
SmtpClient smtpClient = new SmtpClient ( ) ; smtpClient . UseDefaultCredentials = true ; smtpClient . Send ( mailMessage ) ; <EOF>
public HttpResponseMessage Get ( ) { var resp = new HttpResponseMessage ( ) { Content = new StringContent ( CODE_STRING ) } ; resp . Content . Headers . ContentType = new MediaTypeHeaderValue ( CODE_STRING ) ; return resp ; } <EOF>
XmlDocument document = new XmlDocument ( ) ; document . Load ( CODE_STRING ) ; <EOF>
using ( var cnx = DbFactory . CreateConnection ( Global . ConnectionString ) ) { using ( var multi = cnx . QueryMultiple ( CODE_STRING , new { communityId , categoryId } , commandType : CommandType . StoredProcedure ) ) { var projectMembers = multi . Read < ProjectMember > ( ) . ToList ( ) ; var projects = multi . Read < Project > ( ) . ToList ( ) ; BindProjectMembers ( projects , projectMembers ) ; return projects ; } } <EOF>
Stack < ParseTreeNode > stack = new Stack { yourRootTreeNode } ; while ( ! stack . Empty ) { var current = stack . Pop ( ) ; if ( current . ChildNodes != null ) { if ( current . ChildNodes . Contains ( yourChildNode ) ) return current ; /*parent of yourChildNode */ foreach ( var child in current . ChildNodes ) stack . Push ( child ) ; } } <EOF>
. . . var request = WebRequest . Create ( uri ) ; request . Method = CODE_STRING ; . . . <EOF>
var groupedRows1 = from row in enumerableRowCollection group row by new { Network = row [ CODE_STRING ] , Week = row [ CODE_STRING ] } ; <EOF>
public property MyProperty As Nullable ( Of Integer ) <EOF>
frame . Button ( Find . ByName ( CODE_STRING ) ) . ClickNoWait ( ) ; System . Diagnostics . Stopwatch stopwatch = new System . Diagnostics . Stopwatch ( ) ; stopwatch . Start ( ) ; while ( stopwatch . Elapsed . TotalMilliseconds < CODE_REAL ) { if ( alertDialogHandler . Exists ( ) ) { alertDialogHandler . OKButton . Click ( ) ; break ; } } <EOF>
[ XmlArray ( CODE_STRING ) , XmlArrayItem ( CODE_STRING ) ] public List < string > Dependencies { get ; set ; } public bool ShouldSerializeDependencies ( ) { if ( Dependencies != null && Dependencies . Count > CODE_INTEGER ) { return true ; } else { return false ; } } <EOF>
FileStream . SetLength ( ) <EOF>
return File ( fs , CODE_STRING , CODE_STRING ) ; <EOF>
int someNumber = ( from a in TableA . col1 where a . DateUTC != null group a by a . DateUTC . Value . ToLocalTime ( ) . Date into g where TableA . col2 = Emp select g ) . Count ( ) ; <EOF>
XmlDocument doc = new XmlDocument ( ) ; doc . Load ( spath ) ; XmlNode snippet = doc . CreateNode ( XmlNodeType . Element , CODE_STRING , null ) ; XmlAttribute att = doc . CreateAttribute ( CODE_STRING ) ; att . Value = name . Text ; snippet . Attributes . Append ( att ) ; XmlNode snippetCode = doc . CreateNode ( XmlNodeType . Element , CODE_STRING , null ) ; snippetCode . InnerText = code . Text ; snippet . AppendChild ( snippetCode ) ; doc . SelectSingleNode ( CODE_STRING ) . AppendChild ( snippet ) ; <EOF>
makecert - n CODE_STRING - cy authority - r - sv root . pvk root . cer <EOF>
/// <summary> /// Get list of all categories except current one as well as all it's child categories /// </summary> /// <param name="id">Current category id</param> /// <param name="categories">List of categories</param> /// <returns>List of categories</returns> public static List < Category > CategoriesWithoutChildren ( int id , List < Category > categories ) { var currentCategory = categories . Single ( x = > x . Id == id ) ; categories . Remove ( currentCategory ) ; if ( currentCategory . ChildCategories . Count > CODE_INTEGER ) { currentCategory . ChildCategories . ToList ( ) . ForEach ( x = > { categories = CategoriesWithoutChildren ( x . Id , categories ) ; } ) ; } return categories ; } <EOF>
var value = root ? . InnerObject2 ? . InnerObject2 ? . InnerObject3 ? . value ; if ( value != null ) stringBuilder . Append ( value ) ; <EOF>
public DateTimeOffset Calculate ( DateTimeOffset dateTime ) { } <EOF>
string [ ] selectedList = selected . Split ( CODE_CHAR ) ; var q = from a in dt . AsEnumerable ( ) where a . Field < string > ( CODE_STRING ) == CODE_STRING && selectedList . Contains ( a . Field < string > ( CODE_STRING ) ) select a ; GridView1 . DataSource = q . CopyToDataTable ( ) ; GridView1 . DataBind ( ) ; <EOF>
private void Form1_Load ( object sender , EventArgs e ) { Timer MyTimer = new Timer ( ) ; MyTimer . Interval = ( CODE_INTEGER * CODE_INTEGER * CODE_INTEGER ) ; MyTimer . Tick += new EventHandler ( MyTimer_Tick ) ; MyTimer . Start ( ) ; } private void MyTimer_Tick ( object sender , EventArgs e ) { MessageBox . Show ( CODE_STRING , CODE_STRING ) ; this . Close ( ) ; } <EOF>
byte [ , , ] threeD = new byte [ X , Y , Z ] ; byte [ ] res = new byte [ X * Y * Z ] ; int pos = CODE_INTEGER ; for ( int x = CODE_INTEGER ; x != X ; x ++ ) for ( int y = CODE_INTEGER ; y != Y ; y ++ ) for ( int z = CODE_INTEGER ; z != Z ; z ++ ) res [ pos ++ ] = threeD [ x , y , z ] ; <EOF>
interface IPerson { string FirstName { get ; set ; } string LastName { get ; set ; } } interface IAddress { string AddressLine1 { get ; set ; } string AddressLine2 { get ; set ; } string City { get ; set ; } string Province { get ; set ; } string Country { get ; set ; } } class CustomerRecord : IPerson , IAddress { public string FirstName { get ; set ; } public string LastName { get ; set ; } public string AddressLine1 { get ; set ; } public string AddressLine2 { get ; set ; } public string City { get ; set ; } public string Province { get ; set ; } public string Country { get ; set ; } } <EOF>
GlobalConfiguration . Configuration . Filters . Add ( new MyAttribute ( ) ) ; <EOF>
photoFilename = CODE_STRING + i . ToString ( ) + p . Name . Substring ( p . Name . LastIndexOf ( CODE_CHAR ) ) ; if ( storage . FileExists ( _photoPath + CODE_STRING + _photoFilename ) ) { storage . DeleteFile ( _photoPath + CODE_STRING + _photoFilename ) ; } using ( IsolatedStorageFileStream file = storage . CreateFile ( _photoPath + CODE_STRING + _photoFilename ) ) p . GetImage ( ) . CopyTo ( file ) ; <EOF>
var bytes = File . ReadAllBytes ( CODE_STRING ) ; string base64 = Convert . ToBase64String ( bytes ) ; <EOF>
if ( InvokeRequired ) Invoke ( new Action ( MDIParent . MDIParentRef . BaseClose ) ) ; else MDIParent . MDIParentRef . BaseClose ( ) ; <EOF>
System . Drawing . Image image = System . Drawing . Image . FromStream ( new System . IO . MemoryStream ( ( byte [ ] ) SqlReader [ CODE_STRING ] ) ) ; int width = image . Width ; int height = image . Height ; <EOF>
XmlNamespaceManager mgr = new XmlNamespaceManager ( m_xml . NameTable ) ; mgr . AddNamespace ( CODE_STRING , CODE_STRING ) ; XmlNodeList nodes = xmlDoc . SelectNodes ( CODE_STRING , mgr ) ; <EOF>
[ RegularExpression ( CODE_STRING , ErrorMessage = CODE_STRING ) ] public int Count { get ; set ; } <EOF>
ContentPresenter contentPresenter = FindVisualChild < ContentPresenter > ( myListBox ) ; DataTemplate yourDataTemplate = contentPresenter . ContentTemplate ; TextBox txtName = yourDataTemplate . FindName ( CODE_STRING , contentPresenter ) as TextBox ; if ( txtName != null ) { } <EOF>
img1 . Attributes [ CODE_STRING ] = CODE_STRING + PageID . ToString ( ) + CODE_STRING + DIImageID . ToString ( ) ; <EOF>
private bool isCtrlHPressed ; private void txt_callerName_KeyDown ( object sender , KeyEventArgs e ) { if ( isCtrlHPressed && e . KeyCode == Keys . T && e . Modifiers == Keys . Control ) Console . WriteLine ( CODE_STRING ) ; isCtrlHPressed = ( e . KeyCode == Keys . H && e . Modifiers == Keys . Control ) ; } <EOF>
EventEntry myEntry = new EventEntry ( ) ; myEntry . Title . Text = CODE_STRING ; Where eventLocation = new Where ( ) ; eventLocation . ValueString = CODE_STRING ; entry . Locations . Add ( eventLocation ) ; String recurData = " DTSTART ; VALUE = DATE : CODE_INTEGER \ r " + " DTEND ; VALUE = DATE : CODE_INTEGER \ r " + " RRULE : FREQ = WEEKLY ; BYDAY = Tu ; UNTIL = CODE_INTEGER \ r " ; Recurrence recurrence = new Recurrence ( ) ; recurrence . Value = recurData ; myEntry . Recurrence = recurrence ; <EOF>
public class YourDataClass { public string RequestDate { get ; set ; } public string NotifDate { get ; set ; } . . . } public class Sorter < T > where T : YourDataClass { private Dictionary < string , Func < T , T , int > > actions = new Dictionary < string , Func < T , T , int > > { { CODE_STRING , ( x , y ) = > String . Compare ( x . RequestDate , y . RequestDate ) } , { CODE_STRING , ( x , y ) = > String . Compare ( x . NotifDate , y . NotifDate ) } } ; public IEnumerable < T > Sort ( IEnumerable < T > list , string howTo ) { var items = list . ToArray ( ) ; Array . Sort ( items , ( x , y ) = > actions [ howTo ] ( x , y ) ) ; return items ; } } public void Sample ( ) { var list = new List < YourDataClass > ( ) ; var sorter = new Sorter < YourDataClass > ( ) ; var sortedItems = sorter . Sort ( list , CODE_STRING ) ; } <EOF>
string sSQL = CODE_STRING + sU + CODE_STRING ; <EOF>
var dateTimeStr = CODE_STRING ; var user_time = DateTime . Parse ( dateTimeStr ) ; var time_now = DateTime . Now ; if ( time_now > user_time ) { } <EOF>
ArraySegment < T > <EOF>
Worksheet sheet = ( Worksheet ) workBookIn . Sheets [ sheetName ] ; Range r = sheet . get_range ( CODE_STRING , CODE_STRING + sheet . Cells . SpecialCells ( XlCellType . xlCellTypeLastCell ) . Row ) ; Array vals = pitch . Cells . Value ; <EOF>
ArrayList list = new ArrayList ( ) ; list . AddRange ( mApples ) ; list . AddRange ( mBananas ) ; list . AddRange ( mOranges ) ; foreach ( Fruit item in list ) { item . Slice ( ) ; } <EOF>
public Form1 ( ) { InitializeComponent ( ) ; panel1 . MouseMove += panel1_MouseMove ; } void panel1_MouseMove ( object sender , MouseEventArgs e ) { lbl . Location = e . Location ; } <EOF>
private int MatchFeeID ( DataTable Dt ) { DataTable mainDt = bl . GetDataSet ( CODE_STRING ) ; var fids = ( from row in mainDt . AsEnumerable ( ) . Distinct ( ) group row by row . Field < string > ( CODE_STRING ) into rowGroup select new { fid = rowGroup . Key } ) ; foreach ( var fid in fids ) { string id = fid . fid ; DataTable t1 = new DataTable ( ) ; DataTable t2 = new DataTable ( ) ; DataRow [ ] dr1 = mainDt . Select ( String . Format ( CODE_STRING , id ) ) ; t1 = dr1 . CopyToDataTable ( ) ; t2 = Dt ; bool res = TablesEqual ( t1 , t2 , CODE_INTEGER , CODE_INTEGER ) ; if ( res ) return Convert . ToInt32 ( id ) ; } return - CODE_INTEGER ; } <EOF>
TextOptions . TextFormattingMode = CODE_STRING <EOF>
protected void Button1_Click ( object sender , EventArgs e ) { this . gvw1 . Columns [ CODE_INTEGER ] . HeaderText = CODE_STRING ; } <EOF>
private void button5_Click ( object sender , EventArgs e ) { var htmldoc = ( HTMLDocument ) webBrowser1 . Document . DomDocument ; HTMLFormElement fm = ( HTMLFormElement ) htmldoc . forms . item ( CODE_INTEGER ) ; foreach ( IHTMLElement item in ( IHTMLElementCollection ) fm . all ) { var textbox = item as IHTMLInputElement ; if ( textbox != null ) { textbox . value = CODE_STRING ; } } } <EOF>
this . DoSomething ( tests . FirstOrDefault ( x = > x . Name == CODE_STRING ) ) <EOF>
ISite site = ( ISite ) SiteHandler . Instance . CurrentSite ; ICategory category = EPiServerMailModule . Instance . GetSiteCategory ( site ) ; <EOF>
static void Application_ThreadException ( object sender , System . Threading . ThreadExceptionEventArgs e ) { string b = null ; int i = b . Length ; } <EOF>
var format = CODE_STRING ; <EOF>
cmd . Parameters . Add ( CODE_STRING , OracleDbType . Int16 , ParameterDirection . ReturnValue ) ; <EOF>
/// <exception cref="SomeException">Some explanation</exception> <EOF>
if ( Request . Browser . Type . Contains ( CODE_STRING ) ) { . . . } else if ( Request . Browser . Type . ToUpper ( ) . Contains ( CODE_STRING ) ) { if ( Request . Browser . MajorVersion < v1 ) { DoSomething ( ) ; } . . . } else { } <EOF>
string myQuery = CODE_STRING + CODE_STRING sqlCmd = new SqlCommand ( myQuery , conn ) ; sqlCmd . Connection . Open ( ) ; sqlCmd . Parameters . AddWithValue ( CODE_STRING , customerName ) ; sqlCmd . Parameters . AddWithValue ( CODE_STRING , customerID " ) ; -- rest stays the same as before <EOF>
public partial class DemoService : ServiceBase { static void Main ( string [ ] args ) { DemoService service = new DemoService ( ) ; if ( Environment . UserInteractive ) { service . OnStart ( args ) ; Console . WriteLine ( CODE_STRING ) ; Console . Read ( ) ; service . OnStop ( ) ; } else { ServiceBase . Run ( service ) ; } } <EOF>
for ( int i = CODE_INTEGER ; i < lbSrc . Items . Count ; i ++ ) { if ( lbSrc . Items [ i ] . Selected == true ) { lbSrc . Items . RemoveAt ( lbSrc . SelectedIndex ) ; } } <EOF>
MessageBox . Show ( ) <EOF>
. . . col . Text = item . OID . ToString ( ) ; YourGrid . ItemDataBound += OnYourGridItemBound ; . . . private static void OnYourGridItemBound ( object sender , Telerik . Web . UI . GridItemEventArgs e ) { GridDataItem dataBoundItem = e . Item as GridDataItem ; if ( dataBoundItem != null ) { foreach ( TableCell cell in dataBoundItem . Cells ) { if ( cell . Controls . Count > CODE_INTEGER ) { var link = cell . Controls [ CODE_INTEGER ] as HyperLink ; if ( link != null ) { var dataItem = dataBoundItem . DataItem as MyClass ; var id = link . Text ; link . Text = dataItem . AnotherObject [ id ] . Person . FormattedName ; } } } } } <EOF>
protected void UpdateButton_Click ( object sender , EventArgs e ) { if ( e . CommandName == CODE_STRING ) { ListViewDataItem lvd = ( ListViewDataItem ) ( ( Control ) e . CommandSource ) . NamingContainer ; Label ID = lvd . FindControl ( CODE_STRING ) as Label ; string id = id . ToString ( ) ; } } <EOF>
class Program { static void Main ( string [ ] args ) { char testChar = CODE_CHAR ; string test1 = CODE_STRING ; string test2 = CODE_STRING ; string test3 = CODE_STRING ; Console . WriteLine ( checkIfOnly ( testChar , test1 ) ) ; Console . WriteLine ( checkIfOnly ( testChar , test2 ) ) ; Console . WriteLine ( checkIfOnly ( testChar , test3 ) ) ; Console . WriteLine ( checkIfOnly ( CODE_CHAR , test3 ) ) ; Console . WriteLine ( checkIfOnly ( CODE_CHAR , CODE_STRING ) ) ; Console . WriteLine ( checkIfOnly ( CODE_CHAR , CODE_STRING ) ) ; } static bool checkIfOnly ( char testChar , string s ) { foreach ( char c in s ) { if ( c != testChar ) return false ; } return true ; } } <EOF>
To use it with DataGridView create a ToolTip ( HtmlToolTip ) and add this after the InitalizeComponent ( ) in your form to replace the default tooltip : System . Reflection . FieldInfo toolTipControlFieldInfo = typeof ( DataGridView ) . GetField ( CODE_STRING , System . Reflection . BindingFlags . Instance | System . Reflection . BindingFlags . NonPublic ) ; System . Reflection . FieldInfo toolTipFieldInfo = toolTipControlFieldInfo . FieldType . GetField ( CODE_STRING , System . Reflection . BindingFlags . Instance | System . Reflection . BindingFlags . NonPublic ) ; object toolTipControlInstance = toolTipControlFieldInfo . GetValue ( myDataGridView ) ; toolTipFieldInfo . SetValue ( toolTipControlInstance , myToolTip ) ; <EOF>
( . * ) courses \ / ( \ w { CODE_INTEGER } \ d { CODE_INTEGER } ) ( ? ! \ / ) <EOF>
public void MakeVisible ( Control control ) { if ( control . HasChildren ) { foreach ( Control child in control . Controls ) { MakeVisible ( child ) ; } } control . Visible = true ; } <EOF>
var appender = log4net . LogManager . GetRepository ( ) . GetAppenders ( ) . OfType < FileAppender > ( ) . SingleOrDefault ( ) ; if ( appender != null ) { appender . LockingModel = new FileAppender . MinimalLock ( ) ; } <EOF>
private double [ ] _PatchSpectrum = new double [ CODE_INTEGER ] public double [ ] GetPatchSpectrum { get { return _PatchSpectrum ; } } public double this [ int index ] { set { this . _PatchSpectrum [ index ] = value ; } } <EOF>
public class ObservableHashSet < T > : ObservableCollection < T > { protected override void InsertItem ( int index , T item ) { if ( Contains ( item ) ) { throw new ItemExistsException ( item ) ; } base . InsertItem ( index , item ) ; } protected override void SetItem ( int index , T item ) { int i = IndexOf ( item ) ; if ( i >= CODE_INTEGER && i != index ) { throw new ItemExistsException ( item ) ; } base . SetItem ( index , item ) ; } } <EOF>
svn info <EOF>
public Interface IHidable { bool hidden ; } public class MyModel : IHidable , . . . { } private Collection < MyModel > realCoollection ; public Collection < IHidable > viewCollection { get { Collection < IHidable > resCollection = new Collection < IHidable > ( ) ; foreach ( MyModel item in realCoollection ) { if ( ! item . hidden ) res . Add ( ( IHidable ) item ) } return resCollection ; } } <EOF>
var result = Regex . Matches ( input , CODE_STRING ) . Cast < Match > ( ) . Select ( m = > m . Value ) . ToArray ( ) ; <EOF>
cmdText = CODE_STRING ; using ( var cmd = new OracleCommand ( cmdText , conn ) ) using ( cmd . Parameters . Add ( CODE_STRING , projectView ) ) using ( cmd . Parameters . Add ( CODE_STRING , id ) ) using ( cmd . Parameters . Add ( CODE_STRING , record [ CODE_STRING ] ) ) using ( cmd . Parameters . Add ( CODE_STRING , record [ CODE_STRING ] ) ) using ( var tx = conn . BeginTransaction ( ) ) { try { var resourceId = Convert . ToInt32 ( cmd . ExecuteScalar ( ) ) ; tx . Commit ( ) ; return resourceId ; } catch { tx . Rollback ( ) ; throw ; } } <EOF>
using ( var connection = new SqlConnection ( CODE_STRING ) ) { int orderID ; using ( var command = new SqlCommand ( CODE_STRING , connection ) ) { command . Parameters . AddWithValue ( CODE_STRING , CODE_REAL ) ; connection . Open ( ) ; orderID = ( int ) command . ExecuteScalar ( ) ; } } <EOF>
var sb = from p in ent . people . . . . . . . . . var serializer = new JavaScriptSerializer ( ) ; string json = serializer . Serialize ( sb ) ; <EOF>
bool isRoot = new Uri ( CODE_STRING ) . AbsolutePath == CODE_STRING ; <EOF>
private static BitmapImage LoadImage ( byte [ ] imageData ) { if ( imageData == null || imageData . Length == CODE_INTEGER ) return null ; var image = new BitmapImage ( ) ; using ( var mem = new MemoryStream ( imageData ) ) { mem . Position = CODE_INTEGER ; image . BeginInit ( ) ; image . CreateOptions = BitmapCreateOptions . PreservePixelFormat ; image . CacheOption = BitmapCacheOption . OnLoad ; image . UriSource = null ; image . StreamSource = mem ; image . EndInit ( ) ; } image . Freeze ( ) ; return image ; } <EOF>
[ HttpGet ] public int GetTotalItemsInArray ( [ FromUri ] int [ ] listOfIds ) { return listOfIds . Length ; } <EOF>
string sql = CODE_STRING + CODE_STRING + CODE_STRING ; <EOF>
if ( ( int ) this [ CODE_STRING ] < CODE_INTEGER ) { return CODE_INTEGER ; } if ( ( int ) this [ CODE_STRING ] > CODE_INTEGER ) { return CODE_INTEGER ; } return ( int ) this [ CODE_STRING ] <EOF>
public static bool IsInBorder ( this BoardCell [ , ] board , int x , int y ) { return x == board . GetLowerBound ( CODE_INTEGER ) || x == board . GetUpperBound ( CODE_INTEGER ) || y == board . GetLowerBound ( CODE_INTEGER ) || y == board . GetUpperBound ( CODE_INTEGER ) ; } <EOF>
IList < IWebElement > all = driver . FindElements ( By . ClassName ( CODE_STRING ) ) ; String [ ] allText = new String [ all . Count ] ; int i = CODE_INTEGER ; foreach ( IWebElement element in all ) { allText [ i ++ ] = element . Text ; } <EOF>
foreach ( var item in collection2 . Take ( CODE_INTEGER ) ) { int index ; if ( ( index = collection1 . FindIndex ( x = > x . Name == item . Name && x . Description == item . Description ) ) > - CODE_INTEGER ) { collection1 [ index ] = item ; } } collection1 . AddRange ( collection2 . Skip ( CODE_INTEGER ) ) ; <EOF>
view . Category = ctx . Categories . Select ( x = > CategoryMap . IndustryPage ( x , industryID ) ) . ToList ( ) ; <EOF>
[ DllImport ( CODE_STRING , CallingConvention = CallingConvention . Cdecl ) ] <EOF>
var engine = new Jurassic . ScriptEngine ( ) ; Console . WriteLine ( engine . Evaluate ( CODE_STRING ) ) ; <EOF>
datagrid1 . Columns [ CODE_INTEGER ] . DefaultCellStyle . Format = CODE_STRING ; <EOF>
MapLayer layer1 = new MapLayer ( ) ; Pushpin pushpin1 = new Pushpin ( ) ; pushpin1 . GeoCoordinate = MyGeoPosition ; pushpin1 . Content = CODE_STRING ; MapOverlay overlay1 = new MapOverlay ( ) ; overlay1 . Content = pushpin1 ; overlay1 . GeoCoordinate = MyGeoPosition ; layer1 . Add ( overlay1 ) ; myMap . Layers . Add ( layer1 ) ; <EOF>
string conStr = CODE_STRING + CODE_STRING ; <EOF>
var xml = XElement . Parse ( CODE_STRING ) ; var q = from m in xml . Descendants ( CODE_STRING ) where ( int ) m . Attribute ( CODE_STRING ) == CODE_INTEGER from s in m . Descendants ( CODE_STRING ) select ( string ) s . Attribute ( CODE_STRING ) ; foreach ( var name in q ) { Console . WriteLine ( name ) ; } <EOF>
Random r = new Random ( ) ; int rInt = r . Next ( CODE_INTEGER , CODE_INTEGER ) ; int range = CODE_INTEGER ; double rDouble = r . NextDouble ( ) * range ; <EOF>
string hostName = CODE_STRING ; using ( DirectoryEntry machine = new DirectoryEntry ( CODE_STRING + hostName ) ) { using ( DirectoryEntry group = machine . Children . Find ( CODE_STRING , CODE_STRING ) ) { object members = group . Invoke ( CODE_STRING , null ) ; foreach ( object member in ( IEnumerable ) members ) { string accountName = new DirectoryEntry ( member ) . Name ; } } } <EOF>
# include < mmddk . h > <EOF>
style = CODE_STRING <EOF>
public enum eDeviceIntErrCodes { /// eDEVICEINT_ERR_FATAL -> 0x10001 eDEVICEINT_ERR_FATAL = CODE_INTEGER , } <EOF>
Dictionary < string , int > ips = new Dictionary < string , int > ( ) ; foreach ( var info in tcpConnections ) { string list = info . LocalEndPoint . Address . ToString ( ) + CODE_STRING + info . LocalEndPoint . Port . ToString ( ) ; string remote = info . RemoteEndPoint . Address . ToString ( ) + CODE_STRING + info . RemoteEndPoint . Port . ToString ( ) ; if ( list == serverMonitor ) { if ( ips . ContainsKey ( remote ) ) ips [ remote ] ++ ; else ips . Add ( remote , CODE_INTEGER ) ; } } foreach ( var entry in ips ) { Console . WriteLine ( CODE_STRING , entry . Key , entry . Value ) ; } <EOF>
using System . Xml ; public static void Main ( String args [ ] ) { XmlDocument foo = new XmlDocument ( ) ; foo . Load ( String . Format ( CODE_STRING , args [ CODE_INTEGER ] ) ) ; XmlNode root = foo . DocumentElement ; XmlNode countryNameNode = root . SelectSingleNode ( CODE_STRING ) ; Console . WriteLine ( countryNameNode . InnerText ) ; } <EOF>
Char . IsWhiteSpace ( myString [ length - CODE_INTEGER ] ) <EOF>
DataRowView dr = checkedListBoxUnits . CheckedItems [ CODE_INTEGER ] as DataRowView ; string Name = dr [ CODE_STRING ] . ToString ( ) ; <EOF>
public static async dbObj Login ( String username , String password ) { dbObj ret = new dbObj ( ) ; String rawWebReturn = CODE_STRING ; ret . propBag . Add ( _BAGTYPE , returnTypes . Login . ToString ( ) ) ; DateTime date = DateTime . Now ; WebClient wc = new WebClient ( ) ; try { var result = await wc . DownloadStringTaskAsync ( new Uri ( baseLoginURI + CODE_STRING + username + CODE_STRING + password + CODE_STRING + date . ToString ( ) ) ) ; return parseWebReturn ( result , ret ) ; } catch ( Exception e ) { return parseWebReturn ( e . Message , ret ) ; } } <EOF>
private string CountOfMales ( XDocument doc , string locationToFilter ) { var selection = from customer in doc . Descendants ( CODE_STRING ) . Where ( c = > c . Attribute ( CODE_STRING ) . Value == locationToFilter ) select new { MaleValue = customer . Element ( CODE_STRING ) . Attribute ( CODE_STRING ) . Value } ; return selection . FirstOrDefault ( ) . MaleValue ; } <EOF>
private void button1_Click ( object sender , EventArgs e ) { listBox1 . Items . Clear ( ) ; DirectoryInfo dinfo = new DirectoryInfo ( CODE_STRING ) ; FileInfo [ ] Files = dinfo . GetFiles ( CODE_STRING ) ; listBox1 . Items . AddRange ( Files ) ; listBox1 . DisplayMember = CODE_STRING ; } private void listBox1_SelectedIndexChanged ( object sender , EventArgs e ) { if ( listBox1 . SelectedIndex != - CODE_INTEGER ) { FileInfo fi = ( FileInfo ) listBox1 . SelectedItem ; pictureBox1 . ImageLocation = fi . FullName ; } } <EOF>
DECLARE @StartDate DATETIME , @EndDate DATETIME SELECT @StartDate = ' CODE_INTEGER Jan CODE_INTEGER ' , @EndDate = ' CODE_INTEGER Mar CODE_INTEGER ' SELECT [ Products ] . pName AS ItemName , SalesLog . [ Price ] AS Price , COUNT ( * ) AS Quantity , SUM ( SalesLog . [ Price ] ) AS Total FROM SalesLog JOIN [ Products ] ON [ Products ] . pCode = SalesLog . ProductCode /*Check this join - I'm not sure what your relationship is*/ WHERE BillDate >= @StartDate AND BillDate < @EndDate + CODE_INTEGER GROUP BY [ Products ] . pName , SalesLog . [ Price ] <EOF>
private void Form1_Load ( ) { if ( condition ) { DisableControls ( ) ; } } private void DisableControls ( ) { foreach ( Control c in this . Controls ) { } } <EOF>
public static class DCHelper { public static MyDataContext Create ( ) { return new MyDataContext ( ConfigurationManager . ConnectionStrings [ CODE_STRING ] . ConnectionString ) ; } } <EOF>
public ModelView ( Model model ) : this ( ) { var closure = new AnonymousClass { _this = this , model = model } ; Loaded += closure . Loaded ; } private class AnonymousClass { public ModelView _this ; public Model model ; public void Loaded ( object sender , RoutedEventArgs e ) { _this . DataContext = model ; } } <EOF>
var colors = new List < string > { CODE_STRING , CODE_STRING , CODE_STRING } ; var sentence = CODE_STRING ; int i = CODE_INTEGER ; Regex . Replace ( sentence , CODE_STRING , ( m ) = > { return colors [ i ++ % colors . Count ] ; } ) <EOF>
RegisterGeneric ( typeof ( EFGenRepo < , > ) ) . As ( typeof ( IGenRepo < , > ) ) ; <EOF>
RemoteFieldValue v = new RemoteFieldValue { id = CODE_STRING , values = new String [ ] { wi . Fields [ CODE_INTEGER ] . Value . ToString ( ) } } ; List < RemoteFieldValue > actionParams = new List < RemoteFieldValue > ( ) ; actionParams . Add ( v ) ; jiraSoapServiceService . updateIssue ( token , key , actionParams . ToArray ( ) ) ; <EOF>
z = s . Except ( y ) . ToList ( ) ; <EOF>
var oldList = new List < ORDERS > ( ) ; var newList = new List < ORDERS > ( ) ; var IdsToRemove = oldList . Select ( t = > t . link_id ) . Except ( newList . Select ( t = > t . link_id ) ) ; var IdsToAdd = newList . Select ( t = > t . link_id ) . Except ( oldList . Select ( t = > t . link_id ) ) ; var IdsToUpdate = newList . Select ( t = > t . link_id ) . Intersect ( oldList . Select ( t = > t . link_id ) ) ; bdd . orders . where ( x = > IdsToRemove . Contains ( x . link_id ) ) . ForEach ( x = > bdd . Remove ( x ) ) ; foreach ( var order in newList . Where ( x -> IdsToAdd . Contains ( x . link_id ) ) { bdd . Orders . Attach ( order ) ; bdd . Entries ( order ) . EntityState = EntityState . Added ; } foreach ( var order in newList . Where ( x -> IdsToUpdate . Contains ( x . link_id ) ) { bdd . Orders . Attach ( order ) ; bdd . Entries ( order ) . EntityState = EntityState . Modified ; } bdd . SaveChanges ( ) ; <EOF>
SqlCommand cmd = new SqlCommand ( CODE_STRING , cnn ) ; cmd . Parameters . AddWithValue ( CODE_STRING , CODE_STRING + textBox1 . Text + CODE_STRING ) ; <EOF>
flowDocument1 . Blocks . Paragraph . Text = CODE_STRING <EOF>
String term = CODE_STRING ; String input = CODE_STRING ; String result = Regex . Replace ( input , String . Join ( CODE_STRING , term . Split ( CODE_CHAR ) ) , CODE_STRING ) ; Console . Out . WriteLine ( result ) ; < b > Gemini < / b > Sunflower < b > Oil < / b > . <EOF>
using ( SqlConnection cn = new SqlConnection ( connectionString ) ) { using ( SqlCommand cm = new SqlCommand ( commandString , cn ) ) { using ( SqlDataReader dr = cm . ExecuteReader ( ) ; { } } } <EOF>
using ( var zip = new ZipFile ( ) ) { zip . Password = CODE_STRING ; zip . AddFile ( CODE_STRING ) ; zip . Save ( CODE_STRING ) ; } <EOF>
List < string > list = new List < string > ( ) { CODE_STRING , CODE_STRING } ; var numbers = list . SelectMany ( s = > Regex . Matches ( s , CODE_STRING ) . Cast < Match > ( ) . Select ( m = > m . Groups . Cast < Group > ( ) . Skip ( CODE_INTEGER ) . Select ( x = > x . Value ) . ToArray ( ) ) . Select ( x = > new { start = int . Parse ( x [ CODE_INTEGER ] ) , end = int . Parse ( x [ CODE_INTEGER ] ) } ) . SelectMany ( x = > Enumerable . Range ( x . start , x . end - x . start + CODE_INTEGER ) ) ) . ToList ( ) ; <EOF>
using ( MyDbContext db = new MyDbContext ( ) ) { foreach ( var market in marketsList ) { var existingMarket = db . Markets . FirstOrDefault ( x = > x . ProjectID == market . ProjectID && x . Year == market . Year ) ; if ( existingMarket != null ) { existingMarket . Year == market . Year } else { db . Markets . Add ( market ) ; } db . SaveChanges ( ) ; } } <EOF>
List < string > lstResult = ( from table in dt . AsEnumerable ( ) where table . Field < int > ( CODE_STRING ) == id select table . Field < string > ( CODE_STRING ) ) . ToList ( ) ; <EOF>
modelBuilder . Conventions . Remove < PluralizingTableNameConvention > ( ) ; <EOF>
public delegate void ObjectCreated ( object sender , EventArgs args ) ; public delegate void ObjectDeleted ( object sender , EventArgs args ) ; public event ObjectCreated ObjectWasCreated { add { m_ObjectCreatedSubscribers . Add ( value . Invoke ) ; } remove { m_ObjectCreatedSubscribers . RemoveAll ( e = > e . Target . Equals ( value ) ) ; } } public event ObjectDeleted ObjectWasDeleted { add { m_ObjectDeletedSubscribers . Add ( value . Invoke ) ; } remove { m_ObjectDeletedSubscribers . RemoveAll ( e = > e . Target . Equals ( value ) ) ; } } private List < Action < object , EventArgs > > m_ObjectCreatedSubscribers = new List < Action < object , EventArgs > > ( ) ; private List < Action < object , EventArgs > > m_ObjectDeletedSubscribers = new List < Action < object , EventArgs > > ( ) ; void DispatchEvent ( List < Action < object , EventArgs > > subscribers , object sender , EventArgs args ) { foreach ( var subscriber in subscribers ) subscriber ( sender , args ) ; } <EOF>
Task task = new Task ( ( ) = > { try { obj . Ping ( ) ; } catch { } } ) ; task . Start ( ) ; if ( ! task . Wait ( CODE_INTEGER ) ) throw new TimeoutException ( ) ; <EOF>
using System . Runtime . InteropServices ; public class Win32 { [ DllImport ( CODE_STRING ) ] public static extern void SetWindowText ( int h , String s ) ; } <EOF>
string sql = CODE_STRING ; SqlConnection connection = new SqlConnection ( /* connection info */ ) ; SqlCommand command = new SqlCommand ( sql , connection ) ; command . Parameters . AddWithValue ( CODE_STRING , txtSalary . Text ) ; <EOF>
async : false <EOF>
IEnumerable < FieldList > properties = from p in typeof ( T ) . GetProperties ( ) where ( from a in p . GetCustomAttributes ( false ) where a is EdmScalarPropertyAttribute select true ) . FirstOrDefault ( ) select new FieldList { FieldName = p . Name , FieldType = p . PropertyType , FieldPK = p . GetCustomAttributes ( false ) . Where ( a = > a is EdmScalarPropertyAttribute && ( ( EdmScalarPropertyAttribute ) a ) . EntityKeyProperty ) . Count ( ) > CODE_INTEGER } ; <EOF>
public static List < someclass > OrderAsc ( List < someclass > object , specific_field_by_someone ) { var data_table = new Dictionary < string , Func < someclass , object > > ( ) { { CODE_STRING , x = > x . id } , { CODE_STRING , x = > x . name } } return object . OrderBy ( data_dable [ CODE_STRING ] ) ; } <EOF>
public T DefinitionPopulate < T , TD , DontCare > ( IDataReader dr ) where T : class , new ( ) where TD : IEntityDefinition < T , DontCare > , new ( ) <EOF>
btn . SetBackgroundColor ( Android . Graphics . Color . Yellow ) ; <EOF>
public static Match Match ( string input , string pattern ) { return new Regex ( pattern , RegexOptions . None , true ) . Match ( input ) ; } public static Match Match ( string input , string pattern , RegexOptions options ) { return new Regex ( pattern , options , true ) . Match ( input ) ; } <EOF>
elem . Attributes ( ) . FirstOrDefault ( a = > a . Name . LocalName == CODE_STRING ) ; <EOF>
public void OnChangeClicked ( object sender , RoutedEventArgs e ) { XmlDataProvider ds = Resources [ CODE_STRING ] as XmlDataProvider ; string xml = CODE_STRING ; XmlDocument doc = new XmlDocument ( ) ; doc . LoadXml ( xml ) ; using ( ds . DeferRefresh ( ) ) { ds . Document = doc ; ds . XmlNamespaceManager = new XmlNamespaceManager ( doc . NameTable ) ; } } <EOF>
for ( int i = CODE_INTEGER ; i < dt . Rows . Count ; i ++ ) { for ( int j = CODE_INTEGER ; j < dt . Columns . Count ; j ++ ) { dt . Rows [ i ] [ j ] = decrypted ( dt . Rows [ i ] [ j ] . ToString ( ) ) ; } } <EOF>
string path = Server . MapPath ( CODE_STRING ) ; <EOF>
double [ ] [ ] array = doc . Root . Elements ( CODE_STRING ) . Select ( month = > month . Elements ( ) . Select ( x = > ( double ) x ) . ToArray ( ) ) . ToArray ( ) ; foreach ( var innerArray in array ) Console . WriteLine ( innerArray . Length ) ; <EOF>
static string ROT13 ( string input ) { return ! string . IsNullOrEmpty ( input ) ? new string ( input . ToCharArray ( ) . Select ( s = > { return ( char ) ( ( s >= CODE_INTEGER && s <= CODE_INTEGER ) ? ( ( s + CODE_INTEGER > CODE_INTEGER ) ? s - CODE_INTEGER : s + CODE_INTEGER ) : ( s >= CODE_INTEGER && s <= CODE_INTEGER ? ( s + CODE_INTEGER > CODE_INTEGER ? s - CODE_INTEGER : s + CODE_INTEGER ) : s ) ) ; } ) . ToArray ( ) ) : input ; } <EOF>
private void mcAI_Open ( ref bool Cancel ) { Cancel = true ; } <EOF>
interface IStudent { string Name { get ; set ; } List < Subjects > Marks { get ; set ; } int RollNumber { get ; set ; } } class EntityViewModel : IStudent { IStudent FromExcel ; IStudent FromDB ; public string Name { get { return Choose ( CODE_STRING ) . Name ; } set { Choose ( CODE_STRING ) . Name = value ; } } public string RollNumber { get { return Choose ( CODE_STRING ) . RollNumber ; } set { Choose ( CODE_STRING ) . RollNumber = value ; } } internal IStudent Choose ( string propertyName ) { if ( IsOveridable ( propertyName ) ) return this . FromExcel ; else return this . FromDB } } class ViewModel { ObservableCollection < EntityViewModel > Entities ; } <EOF>
string sIn = CODE_STRING ; string sOut = string . Join ( CODE_STRING , sIn . Split ( CODE_CHAR ) . Where ( ( x , index ) = > index != CODE_INTEGER ) ) ; <EOF>
valuesCombined . Split ( CODE_CHAR ) . Select ( s = > s . Trim ( ) . Substring ( CODE_INTEGER , s . Length - CODE_INTEGER ) ) . ToArray ( ) ; <EOF>
var routeDate = config . Routes . GetRouteData ( request ) ; <EOF>
public class Setup : MvxWpfSetup { public Setup ( Dispatcher dispatcher , IMvxWpfViewPresenter presenter ) : base ( dispatcher , presenter ) { } <EOF>
[ global :: System . Reflection . Obfuscation ( Exclude = true , Feature = CODE_STRING ) ] <EOF>
. . . . ToString ( CODE_STRING ) <EOF>
string ServersToPing = CODE_STRING ; string [ ] ServerArrays = ServersToPing . Split ( new [ ] { CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; foreach ( string server in ServerArrays ) { string host = server . Substring ( CODE_INTEGER , server . IndexOf ( CODE_CHAR ) ) ; Ping pingreq = new Ping ( ) ; PingReply pingrep = pingreq . Send ( host , CODE_INTEGER * CODE_INTEGER ) ; Console . WriteLine ( CODE_STRING , pingrep . Address . ToString ( ) , pingrep . RoundtripTime . ToString ( ) ) ; } Console . ReadLine ( ) ; <EOF>
DoEvents ( ) <EOF>
private void txtSearch_TextChanged ( object sender , EventArgs e ) { StringBuilder sb = new StringBuilder ( ) ; foreach ( DataColumn column in dv . Table . Columns ) { sb . AppendFormat ( CODE_STRING , column . ColumnName , txtSearch . Text ) ; } sb . Remove ( sb . Length - CODE_INTEGER , CODE_INTEGER ) ; dv . RowFilter = sb . ToString ( ) ; dgClientMaster . DataSource = dv ; } <EOF>
viewer . ShowLastPage ( ) ; string TotalPage = viewer . GetCurrentPageNumber ( ) . ToString ( ) ; viewer . ShowFirstPage ( ) ; pageNo . Text = viewer . GetCurrentPageNumber ( ) + CODE_STRING + TotalPage ; <EOF>
switch ( choice ) { case CODE_INTEGER : . . . . . . case - CODE_INTEGER : Console . WriteLine ( CODE_STRING ) ; phrase = CODE_STRING + Console . ReadLine ( ) ; break ; } <EOF>
public void Main ( ) { Target sometarget = new Target ( ) ; IKernel kernel = new StandardKernel ( new Bindings ( ) ) ; var character = kernel . Get < Character > ( ) ; character . Attack ( sometarget ) ; } <EOF>
public class MySplitter { public MySplitter ( string split ) { var results = string . Split ( CODE_CHAR ) ; NamedPartA = results [ CODE_INTEGER ] ; NamedpartB = results [ CODE_INTEGER ] ; } public string NamedPartA { get ; private set ; } public string NamedPartB { get ; private set ; } } <EOF>
SerialPort port ; string myReceivedLines ; protected override void SolveInstance ( IGH_DataAccess DA ) { string gcode = default ( string ) ; DA . GetData ( CODE_INTEGER , ref gcode ) ; port = new SerialPort ( selectedportname , selectedbaudrate , Parity . None , CODE_INTEGER , StopBits . One ) ; port . DtrEnable = true ; port . Open ( ) ; port . DataReceived += this . portdatareceived ; if ( gcode == null ) { AddRuntimeMessage ( GH_RuntimeMessageLevel . Warning , CODE_STRING ) ; return ; } else { DA . SetDataList ( CODE_INTEGER , myReceivedLines ) ; port . WriteLine ( gcode ) ; } } private void portdatareceived ( object sender , System . IO . Ports . SerialDataReceivedEventArgs e ) { myReceivedLines = port . ReadExisting ( ) ; } <EOF>
var obj = new MyRecord ( ) ; var json = new JavaScriptSerializer ( ) . Serialize ( obj ) ; <EOF>
String xmlDateString = XmlConvert . ToString ( DateTime . UtcNow , XmlDateTimeSerializationMode . Local ) ; <EOF>
[ XmlArray ( ElementName = CODE_STRING ) ] [ XmlArrayItem ( CODE_STRING ) ] public MyProduct [ ] Products ; <EOF>
public class PeopleRepository { public PeopleRepository ( ISession session ) { } } <EOF>
public void testGetCrystallographicOrthogonalisation ( ) { double [ ] len = { CODE_REAL , CODE_REAL , CODE_REAL } ; double [ ] ang = { CODE_REAL , CODE_REAL , CODE_REAL } ; RealSquareMatrix m = RealSquareMatrix . getCrystallographicOrthogonalisation ( len , ang ) ; RealSquareMatrix mm = new RealSquareMatrix ( CODE_INTEGER , new double [ ] { CODE_REAL , CODE_REAL , CODE_REAL , - CODE_REAL , CODE_REAL , CODE_REAL , CODE_REAL , CODE_REAL , CODE_REAL } ) ; MatrixTest . assertEquals ( CODE_STRING , mm , m , CODE_REAL ) ; } <EOF>
using System . IO ; namespace MySQLCEApplication { class Program { static void Main ( string [ ] args ) { File . Delete ( CODE_STRING ) ; } } } <EOF>
using HtmlAgilityPack ; class Program { static void Main ( string [ ] args ) { var doc = new HtmlDocument ( ) ; doc . Load ( CODE_STRING ) ; var dt = new DataTable ( ) ; bool hasColumns = false ; foreach ( HtmlNode row in doc . DocumentNode . SelectNodes ( CODE_STRING ) ) { if ( ! hasColumns ) { hasColumns = true ; foreach ( var column in row . ChildNodes . Where ( node = > node . GetType ( ) == typeof ( HtmlNode ) ) ) { dt . Columns . Add ( column . Name ) ; } } dt . Rows . Add ( row . ChildNodes . Where ( node = > node . GetType ( ) == typeof ( HtmlNode ) ) . Select ( node = > node . InnerText ) . ToArray ( ) ) ; } } } <EOF>
DashboardEntities dashboardDB = new DashboardEntities ( ) ; var sites = dashboardDB . Instances . Select ( attr = > new SiteModel { url = attr . url , server = attr . server , pool = attr . pool , version = attr . version , client = attr . url } ) . ToList ( ) ; sites . ForEach ( attr = > attr . client = Regex . Replace ( attr . client , CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) ) ; <EOF>
if ( Session [ CODE_STRING ] != null ) { CurrCatId = ( int ) ( Session [ CODE_STRING ] ) ; if ( Session [ CODE_STRING ] == null ) { Session [ CODE_STRING ] = new Dictionary < int , int > ( ) ; } itemColl = ( Dictionary < int , int > ) Session [ CODE_STRING ] ; if ( ! itemColl . ContainsKey ( CurrCatId ) ) { itemColl . Add ( CurrCatId , CODE_INTEGER ) ; } itemColl [ CurrCatId ] ++ ; } <EOF>
DateTime dt = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; DateTime dtEnd = dt . AddDays ( CODE_INTEGER ) ; Console . WriteLine ( CODE_STRING + dtEnd . ToShortDateString ( ) ) ; dtEnd = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; TimeSpan ts = dtEnd - dt ; Console . WriteLine ( CODE_STRING + ts . TotalDays ) ; <EOF>
string StartTime = ( ( TextBox ) TestDV . FindControl ( CODE_STRING ) ) . Text . ToString ( ) ; DateTime dt = new DateTime ( ) ; try { dt = Convert . ToDateTime ( StartTime ) ; } catch ( FormatException ) { dt = Convert . ToDateTime ( CODE_STRING ) ; } StartTime = dt . ToString ( CODE_STRING ) ; <EOF>
- I / Users / bill / Desktop / libdvbcsa - master / src / dvbcsa <EOF>
drivers . Select ( ( d , i ) = > new { Index = i , Driver = d } ) . ToList ( ) . ForEach ( entry = > car [ entry . Index ] . AssignDriver ( entry . Driver ) ) ; <EOF>
enum MyEnum { [ Description ( CODE_STRING ) ] Black , [ Description ( CODE_STRING ) ] White } <EOF>
NotesEmbeddedObject . ExtractFile <EOF>
System . TimeSpan ts = ( i . joinDt - DateTime . Now . Date ) . Value ; <EOF>
private void ChercheStextBox_TextChanged ( object sender , EventArgs e ) { var bd = ( BindingSource ) dataGridView3 . DataSource ; var dt = ( DataTable ) bd . DataSource ; dt . DefaultView . RowFilter = string . Format ( CODE_STRING , ChercheStextBox . Text . Trim ( ) . Replace ( CODE_STRING , CODE_STRING ) ) ; dataGridView3 . Refresh ( ) ; } <EOF>
myxml . WriteStartElement ( CODE_STRING ) ; myxml . WriteAttributeString ( CODE_STRING , CODE_STRING ) ; myxml . WriteString ( CODE_STRING ) ; <EOF>
public class Blobs : BlobCollection { } <EOF>
StartActivity ( typeof ( MainActivity ) ) ; } ; <EOF>
wsdl . exe <EOF>
Person [ ] people = new Person [ CODE_INTEGER ] ; using ( var file = System . IO . File . OpenText ( _LstFilename ) ) { int j = CODE_INTEGER ; while ( ! file . EndOfStream ) { String line = file . ReadLine ( ) ; if ( line . Length > CODE_INTEGER ) { string [ ] words = line . Split ( CODE_CHAR ) ; Person per = new Person ( words [ CODE_INTEGER ] , words [ CODE_INTEGER ] , words [ CODE_INTEGER ] , Convert . ToInt32 ( words [ CODE_INTEGER ] ) ) ; people [ j ] = per ; j ++ } } <EOF>
public void CreateControl ( IntPtr hParentWnd ) { _userControl = new MyWPFUserControl ( ) ; var parameters = new HwndSourceParameters ( CODE_STRING , _initialWidth , _initialHeight ) { ParentWindow = ( IntPtr ) hwndParent , WindowStyle = . . . , ExtendedWindowStyle = . . . , } ) _hwndSource = new HwndSource ( parameters ) { RootVisual = _userControl } ; } public void DestroyControl ( ) { _hwndSource . Destroy ( ) ; } <EOF>
cmdReader = new MySqlCommand ( query , conn ) ; myReader = cmdReader . ExecuteReader ( ) ; for ( int index = CODE_INTEGER ; index < reader . FieldCount ; index ++ ) { c . Items . Add ( myReader . GetName ( index ) ) ; } <EOF>
byte [ ] twoBytes = new byte [ CODE_INTEGER ] ; int bytesRead = fs . Read ( twoBytes , CODE_INTEGER , twoBytes . Length ) ; <EOF>
Public Function MembersOfGroup ( ByVal GroupName As String ) As List ( Of DirectoryEntry ) Dim members As New List ( Of DirectoryEntry ) Try Using search As New DirectoryEntry ( CODE_STRING & GroupName & CODE_STRING ) For Each member As Object In DirectCast ( search . Invoke ( CODE_STRING ) , IEnumerable ) Dim memberEntry As New DirectoryEntry ( member ) members . Add ( memberEntry ) Next End Using Catch ex As Exception MessageBox . Show ( ex . ToString ) End Try Return members End Function <EOF>
if ( configurationCondition ) { routes . MapRoute ( CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING } ) ; } <EOF>
private void FillItems ( ) { allItems = GetAllItems ( ) ; availableItems = new BindingList < string > ( allItems ) ; selectedItems = new BindingList < string > ( ) ; itemsListBox . DataSource = availableItems ; selectedItemsListBox . DataSource = selectedItems ; } private void addItemButton_Click ( object sender , EventArgs e ) { object itemsToAdd = itemsListBox . SelectedItems ; foreach ( string item in itemsToAdd ) { availableItems . Remove ( item ) ; selectedItems . Add ( item ) ; } } <EOF>
public static void main ( final String [ ] args ) { ArrayList < String > list = new ArrayList < > ( ) ; list . add ( CODE_STRING ) ; list . add ( CODE_STRING ) ; list . add ( CODE_STRING ) ; list . add ( CODE_STRING ) ; list . add ( CODE_STRING ) ; List < String > result = getCombinations ( list , CODE_INTEGER ) ; System . out . println ( result . size ( ) ) ; System . out . println ( result ) ; } private static List < String > getCombinations ( final List < String > list , final int length ) { if ( length >= CODE_INTEGER ) { return removeUntilLength ( list , length , CODE_INTEGER ) ; } return new ArrayList < > ( ) ; } private static List < String > removeUntilLength ( final List < String > list , final int length , final int lastIdx ) { List < String > ret = new ArrayList < > ( ) ; if ( list . size ( ) == length ) { ret . add ( list . toString ( ) ) ; } else { for ( int i = lastIdx ; i < list . size ( ) ; i ++ ) { List < String > tmp = new ArrayList < > ( list ) ; tmp . remove ( i ) ; ret . addAll ( removeUntilLength ( tmp , length , Math . max ( i , CODE_INTEGER ) ) ) ; } } return ret ; } <EOF>
public void SaveScore ( ScoreInfo scoreInfo ) { var listOfScoreInfo = this . GetListOrDefault < ScoreInfo > ( App . SCORE ) ; bool isAdd = true ; foreach ( var info in listOfScoreInfo ) { if ( info . Name == scoreInfo . Name && info . Score == scoreInfo . Score ) isAdd = false ; } if ( isAdd ) listOfScoreInfo . Add ( scoreInfo ) ; listOfScoreInfo . Sort ( scoreInfo . Compare ) ; if ( listOfScoreInfo . Count > CODE_INTEGER ) { listOfScoreInfo . RemoveAt ( CODE_INTEGER ) ; } this . AddOrUpdateValue ( App . SCORE , listOfScoreInfo ) ; this . Save ( ) ; } <EOF>
public Customer GetCustomer ( int customerID ) { return DataLayer . GetCustomer ( customerID ) ; } <EOF>
protected void ChangePassword1_ChangedPassword ( object sender , EventArgs e ) { if ( ChangePassword1 . CurrentPassword == ChangePassword1 . NewPassword ) { Response . Redirect ( CODE_STRING ) ; } Label1 . Visible = false ; } <EOF>
var plainText = CODE_STRING ; var aesAlg = new RijndaelManaged ( ) ; aesAlg . Key = new byte [ CODE_INTEGER ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; aesAlg . IV = new byte [ CODE_INTEGER ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; ICryptoTransform encryptor = aesAlg . CreateEncryptor ( aesAlg . Key , aesAlg . IV ) ; msEncrypt = new MemoryStream ( ) ; using ( CryptoStream csEncrypt = new CryptoStream ( msEncrypt , encryptor , CryptoStreamMode . Write ) ) { using ( StreamWriter swEncrypt = new StreamWriter ( csEncrypt ) ) { swEncrypt . Write ( plainText ) ; } } return msEncrypt . ToArray ( ) ; <EOF>
Math . Round ( n * CODE_INTEGER ) / CODE_REAL <EOF>
IList < Person > people = session . CreateQuery ( CODE_STRING ) . SetParameter ( CODE_STRING , CODE_STRING ) . List < Person > ( ) ; <EOF>
private void Form1_Load ( object sender , EventArgs e ) { dataGridView1 . CellContentClick += new DataGridViewCellEventHandler ( dataGridView1_CellContentClick ) ; DataGridViewButtonColumn select = new DataGridViewButtonColumn ( ) ; select . Text = CODE_STRING ; select . HeaderText = CODE_STRING ; select . Name = CODE_STRING ; dataGridView1 . Columns . Add ( select ) ; } private void dataGridView1_CellContentClick ( object sender , DataGridViewCellEventArgs e ) { if ( e . ColumnIndex == dataGridView1 . Columns [ CODE_STRING ] . Index ) { MessageBox . Show ( String . Format ( CODE_STRING , e . RowIndex ) ) ; } } <EOF>
var aPlusses = string . Empty ; for ( var i = CODE_INTEGER ; i < numA ; i ++ ) { aPlusses += CODE_STRING ; } <EOF>
public static void PrintSource ( Uri address ) <EOF>
private void dataGridView1_KeyDown ( object sender , KeyEventArgs e ) { if ( e . KeyData == ( Keys . Alt | Keys . S ) ) { } } <EOF>
var bRows = dataset . TableB . Where ( r = > r . RowState != DataRowState . Delete ) ; var results = ( from rowA in dataset . TableA join rowB in bRows on rowA . ID equals rowB . ID join rowC in dataset . TableC on rowB . ID equals rowC . ID select new { rowB . ColA , rowC . ColA } ) ; <EOF>
try { X509Certificate theSigner = X509Certificate . CreateFromSignedFile ( CODE_STRING ) ; Console . Write ( CODE_STRING + theSigner . GetCertHashString ( ) ) ; } catch ( Exception ex ) { Console . WriteLine ( CODE_STRING ) ; } <EOF>
deque < string > <EOF>
Reminder myReminder = new Reminder ( CODE_STRING ) ; myReminder . Title = CODE_STRING ; myReminder . Content = CODE_STRING ; myReminder . BeginTime = DateTime . Now . AddSeconds ( CODE_INTEGER ) ; myReminder . ExpirationTime = DateTime . Now . AddSeconds ( CODE_INTEGER ) ; myReminder . RecurrenceType = RecurrenceInterval . None ; myReminder . NavigationUri = new Uri ( CODE_STRING , UriKind . Relative ) ; ScheduledActionService . Add ( myReminder ) ; <EOF>
IEquatable < T > <EOF>
var BDATE = CODE_STRING ; string [ ] strArr = BDATE . Split ( CODE_CHAR ) ; fields . SetField ( CODE_STRING , string . Format ( CODE_STRING , strArr [ CODE_INTEGER ] , strArr [ CODE_INTEGER ] ) ) ; <EOF>
ManagementScope scope ; SelectQuery query ; scope = new ManagementScope ( CODE_STRING ) ; query = new SelectQuery ( CODE_STRING ) ; using ( ManagementObjectSearcher searcher = new ManagementObjectSearcher ( scope , query ) ) { using ( ManagementObjectCollection objectCollection = searcher . Get ( ) ) { foreach ( ManagementObject mObj in objectCollection ) { Console . WriteLine ( mObj . ClassPath ) ; foreach ( var item in mObj . Properties ) { Console . WriteLine ( item . Name + CODE_STRING + item . Value . ToString ( ) ) ; if ( item . Name == CODE_STRING ) } } } } <EOF>
double low_med = CODE_INTEGER ; double med_hi = CODE_INTEGER ; axisY . CustomLabels . Add ( CODE_INTEGER , low_med , CODE_STRING ) ; axisY . CustomLabels . Add ( low_med , med_hi , CODE_STRING ) ; axisY . CustomLabels . Add ( med_hi , CODE_INTEGER , CODE_STRING ) ; StripLine stripLow = new StripLine ( ) ; stripLow . IntervalOffset = CODE_INTEGER ; stripLow . StripWidth = low_med ; stripLow . BackColor = Color . FromArgb ( CODE_INTEGER , Color . Green ) ; StripLine stripMed = new StripLine ( ) ; stripMed . IntervalOffset = low_med ; stripMed . StripWidth = med_hi - low_med ; stripMed . BackColor = Color . FromArgb ( CODE_INTEGER , Color . Orange ) ; StripLine stripHigh = new StripLine ( ) ; stripHigh . IntervalOffset = med_hi ; stripHigh . StripWidth = CODE_INTEGER - med_hi ; stripHigh . BackColor = Color . FromArgb ( CODE_INTEGER , Color . Red ) ; axisY . StripLines . Add ( stripLow ) ; axisY . StripLines . Add ( stripMed ) ; axisY . StripLines . Add ( stripHigh ) ; <EOF>
BoundField . DataField <EOF>
if ( wb != null ) { if ( e . NewValue != null ) wb . NavigateToString ( e . NewValue as string ) ; else wb . Navigate ( CODE_STRING ) ; } <EOF>
public void button1_Click ( object sender ) { List < string > files = listBoxFiles . Items . OfType < string > ( ) . ToList ( ) ; string key = textBoxFileToSearch . Text ; backgroundWorkerSearch . RunWorkerAsync ( new Tupple < List < string > , string > ( files , key ) ) ; } void backgroundWorkerSearch_DoWork ( object sender , DoWorkEventArgs e ) { var state = e . Argument as Tupple < List < string > , string > ; List < string > files = state . Item1 ; string key = state . Item2 ; List < string > searchResult = new List < string > ( ) ; e . Result = searchResult ; } void backgroundWorkerSearch_RunWorkerCompleted ( RunWorkerCompletedEventArgs e ) { List < string > searchResult = e . Result ; } <EOF>
IL_0001 : ldc . i4 CODE_REAL IL_0002 : stloc CODE_REAL IL_0003 : br . s IL_0009 IL_0005 : ldloc CODE_REAL IL_0006 : ldc . i4 CODE_REAL IL_0007 : add IL_0008 : stloc CODE_REAL IL_0009 : ldloc CODE_REAL IL_000A : ldc . i4 . s CODE_INTEGER A IL_000C : clt IL_000E : stloc CODE_REAL IL_000F : ldloc CODE_REAL IL_0010 : brtrue . s IL_0005 <EOF>
TimeSpan timeSpan = new TimeSpan ( CODE_INTEGER , value , CODE_INTEGER ) ; return XmlConvert . ToString ( timeSpan ) ; <EOF>
DateTime dt = DateTime . ParseExact ( CODE_STRING . PadLeft ( CODE_INTEGER , CODE_CHAR ) , CODE_STRING , System . Globalization . CultureInfo . CurrentCulture ) ; <EOF>
SqlDataAdapter da = new SqlDataAdapter ( CODE_STRING , oSqlConn ) ; DataTable dt = new DataTable ( ) ; da . Fill ( dt ) ; cbxparameter . DataSource = dt ; cbxparameter . DisplayMember = CODE_STRING ; cbxparameter . ValueMember = CODE_STRING ; <EOF>
public class AccountController : Controller { private IRepository < Account > _accountRepository ; public AccountController ( IRepository < Account > accountRepository ) { this . _accountRepository = accountRepository ; } } <EOF>
var client = new SmtpClient ( CODE_STRING , CODE_INTEGER ) { Credentials = new NetworkCredential ( CODE_STRING , CODE_STRING ) , EnableSsl = true } ; client . Send ( message ) ; <EOF>
namespace ConsoleApplication1 { class Program { static int [ ] Item ; static void Main ( string [ ] args ) { Add ( CODE_INTEGER ) ; Add ( CODE_INTEGER ) ; Add ( CODE_INTEGER ) ; } public static void Add ( int x ) { if ( Item == null ) { Item = new int [ CODE_INTEGER ] ; } else { Array . Resize < int > ( ref Item , Item . Length + CODE_INTEGER ) ; } Item [ Item . Length - CODE_INTEGER ] = x ; } } } <EOF>
FileUpload [ ] uploads = { FileUpload1 , FileUpload2 , . . . } ; <EOF>
SlidePart slidePart = presentationPart . GetPartById ( slideRelId ) as SlidePart ; <EOF>
{ \ rtf1 \ ansi \ ansicpg1252 \ deff0 \ deflang1030 { \ fonttbl { \ f0 \ fswiss \ fcharset0 Arial ; } } { \ * \ generator Msftedit CODE_REAL CODE_REAL CODE_REAL ; } \ viewkind4 \ uc1 \ pard \ f0 \ fs20 Hello , \ par \ b world \ b0 ! \ par } <EOF>
string temp = CODE_STRING ; temp = temp . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
var properties = typeof ( Setting ) ; foreach ( var prop in properties ) { } <EOF>
public const byte CONNECT = CODE_INTEGER ; <EOF>
rtx_report . AppendText ( lclFileInfo . pathOnly + CODE_STRING ) ; <EOF>
var output = from mt in MemberTanks group by { mt . Tier , mt . Class , mt . TankName } into g select new { g . Key . Tier , g . Key . Class , g . Key . TankName , Fights = g . Sum ( mt = > mt . Battles ) , Wins = g . Sum ( mt = > mt . Victories } ; <EOF>
public class CustomListAdapter : BaseAdapter { public CustomListAdapter ( Context context , EventHandler buttonClickHandler ) { _context = context ; _buttonClickHandler = buttonClickHandler ; } public View GetView ( int position , View convertView , View parent ) { var itemView = convertView ; if ( itemView == null ) { var layoutInflater = ( LayoutInflater ) _context . GetSystemService ( Context . LayoutInflaterService ) ; itemView = layoutInflater ( Resource . Layout . ItemView ) ; } var button = itemView . FindViewById < Button > ( Resource . Id . MyButton ) ; button . Click += _buttonClickHandler ; } } <EOF>
var index = tabcontrolname . GetActiveTabIndex ( ) ; <EOF>
dimension . DataSource = provider . DimensionList . Select ( d = > new { Id = d . Id , Text = d . ToString ( ) } ) . ToList ( ) ; dimension . DataValueField = CODE_STRING ; dimension . DataTextField = CODE_STRING ; dimension . DataBind ( ) ; <EOF>
List < string > list1 = new List < string > ( ) { CODE_STRING , CODE_STRING } ; list1 = list1 . SelectMany ( x = > x == CODE_STRING ? new [ ] { CODE_STRING , CODE_STRING } : new [ ] { x } ) . ToList ( ) ; <EOF>
class MockGetRightsProxy : IGetRightsProxy { public void GetRights ( EventHandler < GetRightsCompletedEventArgs > callback ) { GetRightsCompletedEventArgs args = new GetRightsCompletedEventArgs ( new object [ ] { new ObservableCollection < Right > ( ) } , null , false , null ) ; callback ( null , args ) ; } } <EOF>
string s = CODE_STRING ; string result = Regex . Replace ( s , CODE_STRING , CODE_STRING ) ; <EOF>
return new string ( str . Where ( char . IsDigit ) . ToArray ( ) ) ; <EOF>
public static bool IsOrdered < T > ( this IEnumerable < T > source ) { var comparer = Comparer < T > . Default ; T previous = default ( T ) ; bool first = true ; foreach ( T element in source ) { if ( ! first && comparer . Compare ( previous , element ) > CODE_INTEGER ) { return false ; } first = false ; previous = element ; } return true ; } <EOF>
DataGridView . DisplayedRowCount ( ) <EOF>
levelManager . LoadLevel ( SceneName ) <EOF>
/// Has a close relation to the <see cref="Get(string)"/> /// and <see cref="Get(int)" /> methods. <EOF>
var rotationCenter = new Vector3 ( CODE_REAL , CODE_REAL , CODE_REAL ) ; Matrix transformation = Matrix . CreateTranslation ( - rotationCenter ) * Matrix . CreateScale ( scaling ) * Matrix . CreateRotationY ( rotation ) * Matrix . CreateTranslation ( position ) ; <EOF>
grd . TotalRow = Janus . Windows . GridEX . InheritableBoolean . True ; grd . RootTable . Columns [ CODE_INTEGER ] . AggregateFunction = Janus . Windows . GridEX . AggregateFunction . Sum ; <EOF>
try { PersonalInfo myRecipient = new PersonalInfo ( ) ; myRecipient . FirstName = id_firstName . ToString ( ) ; myDepartment . PersonalInfo = myRecipient ; myDB . AddToPersonalInfoes ( myRecipient ) ; myDB . AddToDepartments ( myDepartment ) ; myDB . SaveChanges ( ) ; } catch ( Exception ex ) { Debug . WriteLine ( ex . Message ) ; if ( ex . InnerException != null ) Debug . WriteLine ( ex . InnerException . Message ) ; } <EOF>
PowerShell ps = PowerShell . Create ( ) ; PSCommand cmd1 = new PSCommand ( ) ; cmd1 . AddCommand ( CODE_STRING ) ; cmd1 . AddParameter ( CODE_STRING ) ; ps . Commands = cmd1 ; ps . Invoke ( ) ; cmd1 . AddCommand ( CODE_STRING ) ; cmd1 . AddParameter ( CODE_STRING , CODE_STRING ) ; ps . Commands = cmd1 ; ps . Invoke ( ) ; cmd1 . AddCommand ( CODE_STRING ) ; cmd1 . AddParameter ( CODE_STRING , CODE_STRING ) ; cmd1 . AddCommand ( CODE_STRING ) ; ScriptBlock filter = ScriptBlock . Create ( CODE_STRING ) ; cmd1 . AddParameter ( CODE_STRING , filter ) ; cmd1 . AddCommand ( CODE_STRING ) ; cmd1 . AddParameter ( CODE_STRING , CODE_STRING ) ; ps . Commands = cmd1 ; ps . Invoke ( ) ; <EOF>
class student { int rollnol ; string name ; [ BsonIgnore ] string fees ; } <EOF>
using ( var writer = new StreamWriter ( fileName , new Encoding . UnicodeEncoding ( true , true , true ) ) { writer . Write ( editorTextString ) ; } <EOF>
if ( str . StartsWith ( CODE_STRING ) || str . Contains ( CODE_STRING ) ) { } <EOF>
var filter = ( someBooleanExpressionHere ) ? new Func < Something , bool > ( x = > x . SomeProp < CODE_INTEGER ) : x = > x . SomeProp >= CODE_INTEGER ; <EOF>
protected void DisplayPayOut ( object sender , EventArgs e ) { Label Payout = FormView1 . FindControl ( CODE_STRING ) as Label ; object dataItem = DataBinder . GetDataItem ( FormView1 ) ; Payout . Text = DataBinder . Eval ( dataItem , CODE_STRING ) . ToString ( ) + DataBinder . Eval ( dataItem , CODE_STRING ) . ToString ( ) ; } <EOF>
OfType < T > <EOF>
var entries = NavigationContext . QueryString . Select ( x = > Uri . EscapeDataString ( x . Key ) + CODE_STRING + Uri . EscapeDataString ( x . Value ) ) ; string joined = string . Join ( CODE_STRING , entries . ToArray ( ) ) ; <EOF>
if ( ! Regex . IsMatch ( myString , CODE_STRING ) ) { . . . } <EOF>
Color colFromHex = System . Drawing . ColorTranslator . FromHtml ( CODE_STRING ) ; ws . Cells [ CODE_STRING ] . Style . Fill . BackgroundColor . SetColor ( colFromHex ) ; <EOF>
Thread checkConnection = new Thread ( ( ) = > checkConn ( ) ) ; checkConnection . Start ( ) ; public void checkConn ( ) { if ( ! miconexion ( ip , user , pass ) ) { } Thead . Join ( ) ; } <EOF>
foreach ( Process p in Process . GetProcessesByName ( CODE_STRING ) ) { p . Kill ( ) ; } <EOF>
private void Form1_FormClosing ( object sender , FormClosingEventArgs e ) { Properties . Settings . Default . Size = this . Size ; Properties . Settings . Default . Location = this . Location ; Properties . Settings . Default . Save ( ) ; } private void Form1_Load ( object sender , EventArgs e ) { this . Size = Properties . Settings . Default . Size ; this . Location = Properties . Settings . Default . Location ; } <EOF>
\\ host \ file <EOF>
public static double [ ] GenerateRandomOrderedNumbers ( double lowerBoundInclusive , double upperBoundExclusive , int count , Random random = null ) { random = random ?? new Random ( ) ; return Enumerable . Range ( CODE_INTEGER , count ) . Select ( i = > random . NextDouble ( ) * ( upperBoundExclusive - lowerBoundInclusive ) + lowerBoundInclusive ) . OrderBy ( d = > d ) . ToArray ( ) ; } <EOF>
string testXML = CODE_STRING ; XElement xmlDoc = XElement . Parse ( testXML ) ; var query = from entry in xmlDoc . Descendants ( CODE_STRING ) select new MergeEntry { author = entry . Element ( CODE_STRING ) . Value , message = entry . Element ( CODE_STRING ) . Value , } ; var queryAsList = new BindingList < MergeEntry > ( query . ToList ( ) ) ; bindingSource1 . DataSource = queryAsList ; dataGridView1 . DataSource = bindingSource1 ; <EOF>
public string MiniButtonText { get { return GameInfo . IsMiniInserted == Visibility . Visible ? CODE_STRING : CODE_STRING ; } } <EOF>
ScrollViewer . PanningMode <EOF>
p . x = index / CODE_INTEGER ; p . y = index % CODE_INTEGER ; <EOF>
ISession dummy = factory . OpenSession ( ) ; using ( ISession session = factory . OpenSession ( dummy . Connection ) ) { } <EOF>
protected void gvData_PreRender ( object sender , EventArgs e ) { if ( this . gvData . EditIndex != - CODE_INTEGER ) { TextBox tb = new TextBox ( ) ; for ( int i = CODE_INTEGER ; i < gvData . Rows [ gvData . EditIndex ] . Cells . Count ; i ++ ) try { tb = ( TextBox ) gvData . Rows [ gvData . EditIndex ] . Cells [ i ] . Controls [ CODE_INTEGER ] ; if ( tb . Text . Length >= CODE_INTEGER ) { tb . TextMode = TextBoxMode . MultiLine ; } } catch { } } } <EOF>
ContextMenu cm = ItemList . Resources [ CODE_STRING ] as ContextMenu ; MenuItem mi = cm . Items [ CODE_INTEGER ] as MenuItem ; TextBox tb = mi . Items [ CODE_INTEGER ] as TextBox ; <EOF>
if ( y ' > ( y * x ' ) / x ) { } else { } <EOF>
finalMatrix = finalMatrix * Matrix . Reflection ( new Plane ( CODE_INTEGER , - CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; <EOF>
private IEnumerable < string > GetAllNames ( string json ) { JObject jo = JObject . Parse ( json ) ; return jo [ CODE_STRING ] . Select ( s = > s [ CODE_STRING ] . ToString ( ) ) ; } <EOF>
TextEditor -> C # -> Formatting -> Advanced <EOF>
private readonly CrystalReportViewer reportViewer = new CrystalReportViewer ( ) ; . . . crystalReport . Load ( this . reportViewer . ReportSource . ToString ( ) ) ; crystalReport . SetParameterValue ( CODE_STRING , customerId ) ; crystalReport . SetParameterValue ( CODE_STRING , isCurrent ) ; crystalReport . SetParameterValue ( CODE_STRING , totalSales ) ; <EOF>
word - wrap : break - word <EOF>
var json = File . ReadAllText ( filename ) ; var stats = JsonConvert . DeserializeObject < Dictionary < string , dynamic > > ( json ) ; <EOF>
var doc = XDocument . Parse ( xml ) ; string minSell = doc . Descendants ( CODE_STRING ) . First ( ) . Element ( CODE_STRING ) . Value ; Console . WriteLine ( minSell ) ; <EOF>
lock ( StaticObject ) { if ( _getDataTask == null ) { } return _getDataTask } <EOF>
accessRule . IdentityReference . Translate ( typeof ( SecurityIdentifier ) ) == serviceUserAccount . Translate ( typeof ( SecurityIdentifier ) ) <EOF>
context . Windows . Local . SingleOrDefault ( w = > w . Id == idWindow ) ; <EOF>
var query = db . TableAs . Where ( a = > a . TableBs . Count ( ) > CODE_INTEGER ) . Select ( a = > new { A = a , SumXY = a . X + a . Y } ) . OrderBy ( a = > a . SumXY ) . Take ( CODE_INTEGER ) ; <EOF>
IIS : <EOF>
( ? < TM > \ w * ( \ ? \ ? \ w * ) + ) <EOF>
String ^ postData = CODE_STRING + UsernameInput -> Text + CODE_STRING + PasswordInput -> Text ; array < Byte > ^ byteArray = Encoding :: UTF8 -> GetBytes ( postData ) ; <EOF>
IEnumerator < String > iter = list . GetEnumerator ( ) ; bool bHasMore = iter . MoveNext ( ) ; while ( bHasMore ) { try { . . . bHasMore = Iter . MoveNext ( ) ; } catch . . . } <EOF>
var str = CODE_STRING ; var parts = str . Split ( new string [ ] { CODE_STRING , CODE_STRING } , StringSplitOptions . None ) ; var from = parts [ CODE_INTEGER ] ; var to = parts [ CODE_INTEGER ] ; Console . WriteLine ( from ) ; Console . WriteLine ( to ) ; <EOF>
foreach ( DictionaryEntry de in infopathFields ) { string fieldName = de . Key as string ; if ( workflowProperties . Item . Fields . ContainsField ( fieldName ) ) { workflowProperties . Item [ fieldName ] = infopathFields [ fieldName ] ; } } workflowProperties . Item . Update ( ) ; <EOF>
using ( SqlConnection conn = new SqlConnection ( stringconection ) ) { conn . Open ( ) ; SqlCommand comando = new SqlCommand ( /*my query update/delete/insert/select o execute sp*/ , conn ) ; comando . Parameters . Add ( CODE_STRING , CODE_STRING ) ; comando . Parameters . Add ( CODE_STRING , CODE_STRING ) ; comando . Parameters . Add ( CODE_STRING , CODE_STRING ) ; comando . ExecuteNonQuery ( ) ; } <EOF>
NetworkInterface networkInterface = NetworkInterface . GetAllNetworkInterfaces ( ) . Where ( ipProp = > ipProp . GetIPProperties ( ) . UnicastAddresses . FirstOrDefault ( ip = > ip . Address . ToString ( ) . Equals ( CODE_STRING ) ) != null ) . FirstOrDefault ( ) ; if ( networkInterface != null ) { Console . WriteLine ( networkInterface . GetPhysicalAddress ( ) ) ; } <EOF>
public abstract class MyAbstractNetCommand { public abstract void ExecuteCommand ( ) ; } public class ConcreteCommand : MyAbstractNetCommand { /*Here additional ConcreteCommand specific methods and state members*/ public override ExecuteCommand ( ) { } } <EOF>
public class receipt { public string original_purchase_date_pst { get ; set ; } public string original_transaction_id { get ; set ; } public string original_purchase_date_ms { get ; set ; } public string transaction_id { get ; set ; } public string quantity { get ; set ; } public string product_id { get ; set ; } public string bvrs { get ; set ; } public string purchase_date_ms { get ; set ; } public string purchase_date { get ; set ; } public string original_purchase_date { get ; set ; } public string purchase_date_pst { get ; set ; } public string bid { get ; set ; } public string item_id { get ; set ; } } <EOF>
var readQueue = string . Empty ; private void port_DataReceived_1 ( object sender , SerialDataReceivedEventArgs e ) { readQueue += port . ReadExisting ( ) ; while ( readQueue . Substring ( CODE_INTEGER ) . Contains ( CODE_STRING ) ) { var slashPos = readQueue . IndexOf ( CODE_STRING , CODE_INTEGER ) ; var completeEntry = readQueue . Substring ( CODE_INTEGER , slashPos ) ; Console . WriteLine ( completeEntry ) ; readQueue = readQueue . Substring ( slashPos ) ; } } <EOF>
public void SaveOrder ( Order order ) { using ( var repository = new StoreEntities ( ) ) { repository . Orders . AddObject ( order ) ; foreach ( var orderItem in order . OrderItems ) { } } } <EOF>
var result = from stu in SyStudent join schsta in syschoolstatus on stu . syschoolstatusid equals schsta . syschoolstatusid join systa in SyStatus on schsta . SyStatusId equals systa . SyStatusId from pic in cmstudentpicture . Where ( x = > x . systudentid = stu . systudentid ) . DefaultIfEmpty ( ) where stu . sycampusid = CODE_INTEGER select new { stu , schsta , systa , pic } ; <EOF>
int i = CODE_INTEGER ; string [ ] words = textBox1 . Text . Split ( CODE_CHAR ) ; foreach ( string word in words ) { if ( word . StartsWith ( CODE_STRING ) && ( ! word . EndsWith ( i . ToString ( ) ) ) ) { MessageBox . Show ( CODE_STRING + word ) ; } } <EOF>
public static IList < DomainClass > GetAllDomains ( ) { using ( var con = new SqlConnection ( Properties . Settings . Default . YourConnection ) ) { const String sql = CODE_STRING ; con . Open ( ) ; IList < DomainClass > domains = con . Query < DomainClass > ( sql ) . ToList ( ) ; return domains ; } } <EOF>
var xml = XElement . Load ( CODE_STRING ) ; foreach ( var bookEl in xml . Elements ( CODE_STRING ) ) { Console . WriteLine ( CODE_STRING + bookEl . Attribute ( CODE_STRING ) . Value + CODE_STRING + CODE_STRING + bookEl . Attribute ( CODE_STRING ) . Value + CODE_STRING + CODE_STRING + bookEl . Attribute ( CODE_STRING ) . Value ) ; Console . WriteLine ( CODE_STRING + bookEl . Element ( CODE_STRING ) . Value ) ; Console . WriteLine ( CODE_STRING + bookEl . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value + CODE_STRING + bookEl . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value ) ; Console . WriteLine ( CODE_STRING + bookEl . Element ( CODE_STRING ) . Value ) ; } <EOF>
val = CODE_STRING ; cnn . Execute ( CODE_STRING , new { val } ) ; cnn . Execute ( CODE_STRING , new { val , id = CODE_INTEGER } ) ; <EOF>
Form2 userF = new Form2 ( this ) ; userF . Show ( ) ; <EOF>
private void ProcessTimerEvent ( object obj ) { if ( this . InvokeRequired ) { this . Invoke ( new Action < object > ( this . ProcessTimerEvent ) , obj ) ; } else { this . Show ( ) ; } } <EOF>
private async void BeginProcessingAsync ( Data d ) { this . IsLoading = true ; await Task . Run ( ( ) = > LongRunningMethod ( d ) ) ; this . IsLoading = false ; DoSomethingWithFinishedData ( d ) ; } <EOF>
String s = String . Join ( CODE_STRING , doc . Descendants ( CODE_STRING ) . Elements ( ) . Select ( x = > x . Attribute ( CODE_STRING ) . Value ) ) ; <EOF>
var factory = DbProviderFactories . GetFactory ( CODE_STRING ) ; DbConnection connection = factory . CreateConnection ( ) ; <EOF>
msbuild myApp . csproj <EOF>
public class Dice { public static int Roll ( ) { } } <EOF>
var baseMock = new Mock < AbstractBase > ( ) ; var inpcMock = baseMock . As < INotifyPropertyChanged > ( ) ; propertyChangedMapper . Subscribe ( inpcMock . Object ) ; <EOF>
public void Foo ( Base b ) { b . VirtualMethod ( ) ; } <EOF>
using System . Collections . ObjectModel ; using System . Management . Automation ; using System . Management . Automation . Runspaces ; private bool VerifyPowerShellScriptSignature ( ) { using ( var runspaceInvoke = new RunspaceInvoke ( ) ) { string path = CODE_STRING + CODE_STRING ; Collection < PSObject > results = runspaceInvoke . Invoke ( CODE_STRING + path ) ; Signature signature = results [ CODE_INTEGER ] . BaseObject as Signature ; return signature == null ? false : ( signature . Status == SignatureStatus . Valid ) ; } } <EOF>
ddlPaperDate . DataTextFormatString = CODE_STRING ; <EOF>
bc . BatchSize = CODE_INTEGER ; bc . BulkCopyTimeout = CODE_INTEGER ; <EOF>
ProcessStartInfo processStartInfo = new ProcessStartInfo ( CODE_STRING , CODE_STRING ) ; processStartInfo . Verb = CODE_STRING ; using ( Process process = new Process ( ) ) { process . StartInfo = processStartInfo ; process . Start ( ) ; process . WaitForExit ( ) ; } <EOF>
( CODE_INTEGER ) . GetNegative ( ) <EOF>
foreach ( PropertyInfo oPropertyInfo in oCostDept . GetType ( ) . GetProperties ( ) ) { if ( ! oPropertyInfo . GetGetMethod ( ) . IsStatic ) { if ( this . GetType ( ) . GetProperty ( oPropertyInfo . Name ) . CanWrite ) { if ( oPropertyInfo . CanRead ) { this . GetType ( ) . GetProperty ( oPropertyInfo . Name ) . SetValue ( this , oPropertyInfo . GetValue ( oCostDept , null ) , null ) ; } } } } <EOF>
public ActionResult Index ( string caller_id , int id = CODE_INTEGER ) <EOF>
private void button1_Click ( object sender , EventArgs e ) { comboBox1 . DroppedDown = true ; } <EOF>
private void seznamSporocil_MouseDoubleClick ( object sender , MouseButtonEventArgs e ) { var listBox = sender as ListBox ; var item = listBox . SelectedItem as ListBoxItem ; var newWindow = new Window1 ( ) ; newWindow . Title = item . Content . ToString ( ) ; newWindow . Show ( ) ; } <EOF>
class MovieCollection { public IEnumerable < Movie > movies { get ; set ; } } class Movie { public string title { get ; set ; } } class Program { static void Main ( string [ ] args ) { string jsonString = CODE_STRING ; JavaScriptSerializer serializer = new JavaScriptSerializer ( ) ; MovieCollection collection = serializer . Deserialize < MovieCollection > ( jsonString ) ; } } <EOF>
[ DllImport ( CODE_STRING ) ] public static extern bool SetConsoleTextAttribute ( IntPtr hConsoleOutput , int wAttributes ) ; <EOF>
screen . Items . deleteSelected ( ) ; <EOF>
class WebClientWithCookies : WebClient { private CookieContainer _container = new CookieContainer ( ) ; protected override WebRequest GetWebRequest ( Uri address ) { HttpWebRequest request = base . GetWebRequest ( address ) as HttpWebRequest ; if ( request != null ) { request . Method = CODE_STRING ; request . CookieContainer = _container ; } return request ; } } <EOF>
UITableViewController _parent ; public RootTableSource ( IEnumerable < VendorDetails > items , UITableViewController parent ) { tableItems = items . ToList ( ) ; _parent = parent ; } public override void RowSelected ( UITableView tableView , NSIndexPath indexPath ) { tableView . DeselectRow ( indexPath , true ) ; _parent . NavigationController . PushViewController ( . . . ) ; } <EOF>
public CustomException ( dynamic json ) : base ( HumanReadable ( json ) ) { } private static string HumanReadable ( dynamic json ) { return whatever you need to ; } <EOF>
List < T > <EOF>
public static void Parse ( ) { string htmlFragment = CODE_STRING ; HtmlDocument htmlDocument = new HtmlAgilityPack . HtmlDocument ( ) ; htmlDocument . LoadHtml ( htmlFragment ) ; foreach ( HtmlNode node in htmlDocument . DocumentNode . SelectNodes ( CODE_STRING ) . Where ( FilterTextNodes ( ) ) ) { Console . WriteLine ( node . OuterHtml ) ; } } private static Func < HtmlNode , bool > FilterTextNodes ( ) { return node = > node . NodeType == HtmlNodeType . Text && node . ParentNode != null && node . ParentNode . Name != CODE_STRING && node . OuterHtml . Contains ( CODE_STRING ) ; } <EOF>
Form . Controls . Add ( ) <EOF>
AutoItX3Lib . AutoItX3 au3 = new AutoItX3Lib . AutoItX3 ( ) ; au3 . WinWait ( CODE_STRING ) ; au3 . WinActivate ( CODE_STRING ) ; au3 . Send ( CODE_STRING ) ; au3 . Send ( CODE_STRING ) ; <EOF>
gridControl1 . DataMember = CODE_STRING ; <EOF>
RestRequst . AddFile ( ) <EOF>
var aggregateArgs = new AggregateArgs ( ) ; aggregateArgs . Pipeline = new [ ] { new BsonDocument ( CODE_STRING , new BsonDocument ( CODE_STRING , new BsonArray ( ) . Add ( new BsonDocument ( CODE_STRING , new BsonDocument ( CODE_STRING , new BsonArray ( ) . Add ( paginationData . UserId ) . Add ( paginationData . Id ) ) ) ) ) ) , new BsonDocument ( CODE_STRING , CODE_STRING ) , new BsonDocument ( CODE_STRING , new BsonDocument { { CODE_STRING , CODE_STRING } , { CODE_STRING , new BsonDocument ( CODE_STRING , CODE_STRING ) } , } ) , new BsonDocument ( CODE_STRING , new BsonDocument ( CODE_STRING , - CODE_INTEGER ) ) , new BsonDocument ( CODE_STRING , paginationData . StartIndex - CODE_INTEGER ) , new BsonDocument ( CODE_STRING , paginationData . PageSize ) } ; <EOF>
public static object GetValue ( string propertyName ) { var property = typeof ( Names ) . GetField ( propertyName ) ; return property . GetValue ( null ) ; } private static void Main ( string [ ] args ) { string res = GetValue ( CODE_STRING ) as string ; Console . Read ( ) ; } <EOF>
static void Main ( string [ ] args ) { SvnHookArguments ha ; if ( ! SvnHookArguments . ParseHookArguments ( args , SvnHookType . PostCommit , false , out ha ) ) { Console . Error . WriteLine ( CODE_STRING ) ; Environment . Exit ( CODE_INTEGER ) ; } using ( SvnLookClient cl = new SvnLookClient ( ) ) { SvnChangeInfoEventArgs ci ; cl . GetChangeInfo ( ha . LookOrigin , out ci ) ; Console . WriteLine ( ci . LogMessage ) ; foreach ( SvnChangeItem i in ci . ChangedPaths ) { } } } <EOF>
using ( var context = new YourDatabaseEntities ( ) ) { var elements = ( from c in context . YourTable where c . TaskId == taskId select c ) ; } <EOF>
event_name = null ; <EOF>
YourApp . vshost . exe . manifest <EOF>
public delegate Lambda Lambda ( ) <EOF>
System . TimeZoneInfo . GetSystemTimeZones ( ) <EOF>
var xml = XDocument . Load ( CODE_STRING ) ; var node = ( from file in xml . Descendants ( CODE_STRING ) where ( string ) file . Element ( CODE_STRING ) == CODE_STRING select file ) . Single ( ) ; <EOF>
public static void deleteRow ( string table , string columnName , string IDNumber ) { try { using ( SqlConnection con = new SqlConnection ( Global . connectionString ) ) { con . Open ( ) ; using ( SqlCommand command = new SqlCommand ( CODE_STRING + table + CODE_STRING + columnName + CODE_STRING + IDNumber + CODE_STRING , con ) ) { command . ExecuteNonQuery ( ) ; } con . Close ( ) ; } } catch ( SystemException ex ) { MessageBox . Show ( string . Format ( CODE_STRING , ex . Message ) ) ; } } } <EOF>
cordova . exec ( win , fain , CODE_STRING , CODE_STRING , [ JSON . stringify ( data ) ] ) ; <EOF>
select c . Id , c . TelephoneNumber , ( select top CODE_INTEGER Scale from Rate r where c . TelephoneNumber like r . Prefix + CODE_CHAR order by Scale desc ) as Scale from Call c <EOF>
private void btnSubmit_Click ( object sender , EventArgs e ) { var postData = Encoding . Default . GetBytes ( CODE_STRING ) ; webBrowser1 . Navigate ( CODE_STRING , null , postData , CODE_STRING + Environment . NewLine ) ; } <EOF>
public virtual Item Parent { get ; set ; } <EOF>
var e = db . Entry ( new User ( ) { Id = CODE_INTEGER , Name = CODE_STRING } ) ; var property = e . CurrentValues . PropertyNames . FirstOrDefault ( p = > p == colName ) ; e . CurrentValues [ property ] = colValue ; <EOF>
[ Test ] public void RegionFactoryDelegatesToRegionGenerator ( ) { var mockGenerator = new Mock < IMapRegiongenerator > ( ) ; var factory = new MapRegionFactory ( mockGenerator . Object ) ; var expectedRegion = new Region ( ) ; var regionSize = CreateRandomRegionSize ( ) ; mockGenerator . Setup ( g = > g . GenerateRegion ( regionSize ) ) . Returns ( expectedRegion ) ; factory . SetRegionSize ( regionSize ) ; Assert . That ( factory . GetRegion ( ) , Is . SameAs ( expectedRegion ) ) ; } <EOF>
public struct msg_next_match { public int tatami ; public int category ; public int match ; public int minutes ; public int match_time ; public int gs_time ; public int rep_time ; public int rest_time ; public char pin_time_ippon ; public char pin_time_wazaari ; public char pin_time_yuko ; public char pin_time_koka ; public fixed char cat_1 [ CODE_INTEGER ] ; public fixed char blue_1 [ CODE_INTEGER ] ; public fixed char white_1 [ CODE_INTEGER ] ; public fixed char cat_2 [ CODE_INTEGER ] ; public fixed char blue_2 [ CODE_INTEGER ] ; public fixed char white_2 [ CODE_INTEGER ] ; public int flags ; } ; <EOF>
var process = Process . Start ( . . . ) ; process . WaitForExit ( ) ; <EOF>
RelayCommand _saveCommand ; public ICommand SaveCommand { get { if ( _saveCommand == null ) { _saveCommand = new RelayCommand ( param = > this . Save ( ) , param = > this . CanSave ) ; } return _saveCommand ; } } <EOF>
Mapper . CreateMap ( typeof ( Customer ) , typeof ( CustomerViewItem ) ) . ForMember ( CODE_STRING , opt = > opt . Ignore ( ) ) ; <EOF>
String FileName = CODE_STRING ; String FilePath = CODE_STRING + FileName ; System . Web . HttpResponse response = System . Web . HttpContext . Current . Response ; response . ClearContent ( ) ; response . Clear ( ) ; response . ContentType = CODE_STRING ; response . AddHeader ( CODE_STRING , CODE_STRING + FileName + CODE_STRING ) ; response . TransmitFile ( FilePath ) ; response . Flush ( ) ; response . End ( ) ; <EOF>
if ( navProperty . FromEndMember . RelationshipMultiplicity == RelationshipMultiplicity . Many && navProperty . ToEndMember . RelationshipMultiplicity == RelationshipMultiplicity . Many ) { } <EOF>
DateTime ? today ? = ? DateTime . Today ; DateTime ? firstDayInMonth ? = ? new ? DateTime ( today . Year , ? today . Month , ? CODE_INTEGER ) ; DateTime ? lastDayInMonth ? = ? new ? DateTime ( today . Year , ? today . Month , ? DateTime . DaysInMonth ( today . Year , ? today . Month ) ) ; <EOF>
abstract class OuterBase < TInnerItem > { } class Outer < TInner , TInnerItem > : OuterBase < TInnerItem > where TInner : Inner < TInnerItem > { public void Add ( TInner item ) { item . Outer = this ; } } class Inner < TInnerItem > : ICollection < TInnerItem > { OuterBase < TInnerItem > _outer ; public OuterBase < TInnerItem > Outer { set { _outer = value ; } } } <EOF>
. DataSource <EOF>
string source = CODE_STRING ; string [ ] result = Regex . Split ( source , CODE_STRING ) ; foreach ( string a in result ) { Console . WriteLine ( a ) ; } <EOF>
if ( ! String . IsNullOrEmpty ( HttpRuntime . AppDomainAppVirtualPath ) ) else <EOF>
string session_string = CODE_STRING ; SqlConnection cn = new SqlConnection ( YOUR_CONNECTION_STRING ) ; cn . open ( ) ; SqlCommand cmd = new SqlCommand ( ) ; cmd . Connection = cn ; cmd . CommandType = CommandType . Text ; cmd . CommandText = CODE_STRING ; SqlDataReader rdr = cmd . ExecuteReader ( ) ; if ( rdr . hasRows == true ) { while ( rdr . Read ( ) ) { session_string = rdr [ CODE_STRING ] + CODE_STRING ; session_string = session_string + rdr [ CODE_STRING ] + CODE_STRING ; } } rdr . close ( ) ; cn . close ( ) ; Session [ CODE_STRING ] = session_string ; if ( Session [ CODE_STRING ] . Contains ( CODE_STRING ) ) { } else { } <EOF>
String data = CODE_STRING ; String time = data . substring ( CODE_INTEGER , CODE_INTEGER ) ; String ampm = data . substring ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
Namespace . GetItemFromID <EOF>
public event EventHandler MyNewEvent ; <EOF>
Image . FromStream <EOF>
string sql2 = CODE_STRING ; SqlCommand myCommand2 = new SqlCommand ( sql2 , conn ) ; myCommand2 . Parameters . AddWithValue ( CODE_STRING , CODE_INTEGER ) myCommand2 . Parameters . AddWithValue ( CODE_STRING , CODE_INTEGER ) <EOF>
grd . DataSource = DT ' set autosize mode grd . Columns ( CODE_INTEGER ) . AutoSizeMode = DataGridViewAutoSizeColumnMode . AllCells grd . Columns ( CODE_INTEGER ) . AutoSizeMode = DataGridViewAutoSizeColumnMode . AllCells grd . Columns ( CODE_INTEGER ) . AutoSizeMode = DataGridViewAutoSizeColumnMode . Fill ' datagrid has calculated it ' s widths so we can store them For i = CODE_INTEGER To grd . Columns . Count - CODE_INTEGER ' store autosized widths Dim colw As Integer = grd . Columns ( i ) . Width ' remove autosizing grd . Columns ( i ) . AutoSizeMode = DataGridViewAutoSizeColumnMode . None ' set width to calculated by autosize grd . Columns ( i ) . Width = colw Next <EOF>
Process p = new Process ( ) ; p . StartInfo = startInfo ; p . WaitForExit ( ) ; <EOF>
DoubleAnimation anim = new DoubleAnimation ( CODE_INTEGER , CODE_INTEGER , ( Duration ) TimeSpan . FromSeconds ( CODE_REAL ) ) ; ScaleTransform st = new ScaleTransform ( ) ; st . ScaleX = CODE_INTEGER ; st . ScaleY = CODE_INTEGER ; IMAGE . RenderTransform = st ; st . BeginAnimation ( ScaleTransform . ScaleXProperty , anim ) ; st . BeginAnimation ( ScaleTransform . ScaleYProperty , anim ) ; <EOF>
private async void Button_Click_1 ( object sender , RoutedEventArgs e ) { string filename = CODE_STRING ; Windows . Storage . StorageFile sampleFile = await Windows . Storage . KnownFolders . DocumentsLibrary . GetFileAsync ( filename ) ; BitmapImage img = new BitmapImage ( ) ; img = await LoadImage ( sampleFile ) ; myImage . Source = img ; } private static async Task < BitmapImage > LoadImage ( StorageFile file ) { BitmapImage bitmapImage = new BitmapImage ( ) ; FileRandomAccessStream stream = ( FileRandomAccessStream ) await file . OpenAsync ( FileAccessMode . Read ) ; bitmapImage . SetSource ( stream ) ; return bitmapImage ; } <EOF>
schema . name = CODE_STRING ; schema . tables = new Tables [ CODE_INTEGER ] ; schema . tables [ CODE_INTEGER ] . name = CODE_STRING ; <EOF>
NormalizeString ( ) <EOF>
for ( int i = CODE_INTEGER ; i <= CODE_INTEGER ; i ++ ) { DropDownList drp = ( DropDownList ) panel1 . FindControl ( CODE_STRING + i . ToString ( ) ) ; drp . DataSource = Prod . GetComponents ( ) ; drp . DataTextField = CODE_STRING ; drp . DataValueField = CODE_STRING ; drp . DataBind ( ) ; } <EOF>
/ p : VisualStudioVersion = CODE_REAL <EOF>
velocity /= CODE_REAL ; <EOF>
panel1 . ContextMenu = null ; <EOF>
plus . Click += delegate { counttext . Text = string . Format ( CODE_STRING , ++ count ) ; } ; minus . Click += delegate { counttext . Text = string . Format ( CODE_STRING , count > CODE_INTEGER ? -- count : CODE_INTEGER ) ; } ; <EOF>
string [ ] operators = new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; string expression = CODE_STRING ; foreach ( string operator in operators ) { } <EOF>
richTextBox1 . Text = Clipboard . GetText ( TextDataFormat . Rtf ) ; <EOF>
protected override void OnNavigatedTo ( NavigationEventArgs e ) { AddInfo ( ) ; ReadHistoryList_Loaded ( ) ; } <EOF>
XDocument doc = XDocument . Load ( CODE_STRING ) ; XNamespace serv = CODE_STRING ; var result = doc . Descendants ( serv + CODE_STRING ) . First ( ) . Value ; <EOF>
TextBox1 . Text = string . Format ( CODE_STRING , Path . GetDirectoryName ( fileData ) , openFileDialog1 . FileName ) ; <EOF>
private void mnuDatabase1_Click ( object sender , . . . ) { ToolStripMenuItem MyMenuItem = ( ToolStripMenuItem ) sender ; ToolStripMenuItem parent = ( ToolStripMenuItem ) MyMenuItem . OwnerItem ; if ( parent . Name == CODE_STRING ) else if ( parent . Name == CODE_STRING ) if ( parent . Name == CODE_STRING ) } <EOF>
static class Extensions { public static IList < T > Clone < T > ( this IList < T > listToClone ) where T : ICloneable { return listToClone . Select ( item = > ( T ) item . Clone ( ) ) . ToList ( ) ; } } <EOF>
private void dataGridView1_SortCompare ( object sender , DataGridViewSortCompareEventArgs e ) { if ( e . Column . Index == CODE_INTEGER ) { if ( double . Parse ( e . CellValue1 . ToString ( ) ) > double . Parse ( e . CellValue2 . ToString ( ) ) ) { e . SortResult = CODE_INTEGER ; } else if ( double . Parse ( e . CellValue1 . ToString ( ) ) < double . Parse ( e . CellValue2 . ToString ( ) ) ) { e . SortResult = - CODE_INTEGER ; } else { e . SortResult = CODE_INTEGER ; } e . Handled = true ; } } <EOF>
window . location = CODE_STRING ; <EOF>
DateTime dt = Convert . ToDateTime ( reader [ CODE_STRING ] ) ; int year = dt . Year ; int month = dt . Month ; int day = dt . Day ; <EOF>
while ( this . NavigationService . BackStack . Any ( ) ) { this . NavigationService . RemoveBackEntry ( ) ; } <EOF>
string pattern = CODE_STRING ; value = Regex . Match ( textToSearch , pattern ) . Value ; string [ ] removalCharacters = { CODE_STRING , CODE_STRING } ; foreach ( string character in removalCharacters ) { value = value . Replace ( character , CODE_STRING ) ; } <EOF>
public JsonResult ActionName ( ) { JsonObjectWhatEver value = new JsonObjectWhatEver ( ) ; return Json ( value , JsonBehaviour . AllowGet ) ; /// check the name is it JsonBehaviour or some thing simillar } <EOF>
Button1 . Attributes . Add ( CODE_STRING , CODE_STRING + HttpUtility . HtmlDecode ( CODE_STRING + CODE_STRING ) ; <EOF>
dataGridView1 . CellClick += new DataGridViewCellEventHandler ( dataGridView1_CellClick ) ; void dataGridView1_CellClick ( object sender , DataGridViewCellEventArgs e ) { dataGridView1 [ e . ColumnIndex , e . RowIndex ] . Style . BackColor = Color . White ; } <EOF>
DateTime dt = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; TimeSpan ts = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; dt = dt + ts ; <EOF>
Thread . CurrentPrincipal = new GenericPrincipal ( new GenericIdentity ( CODE_STRING ) , new string [ CODE_INTEGER ] ) ; <EOF>
XDocument doc ; using ( StreamReader reader = File . OpenText ( filename ) ) { doc = XDocument . Load ( reader ) ; doc . Root . Add ( entry ) ; } doc . Save ( filename ) ; <EOF>
public class Person { public string Name { get ; protected set ; } } <EOF>
ApplicationLanguages . PrimaryLanguageOverride <EOF>
ShoppingList sitem = LLS . SelectedItem as ShoppingList ; string item = string . empty ; if ( sitem != null ) { item = sitem . ( property where you text is stored ) } <EOF>
var query = from e in db . MyTable where e . AsOfDate <= DateTime . Now . Date select e ; <EOF>
try { connection . Open ( ) ; cmd = connection . CreateCommand ( ) ; cmd . CommandText = CODE_STRING + isbn + CODE_STRING + title + CODE_STRING + author + CODE_STRING + publisher + CODE_STRING + localPath + CODE_STRING + catalogid + CODE_STRING ; int a = cmd . ExecuteNonQuery ( ) ; if ( a > CODE_INTEGER ) else } catch ( Exception ) { } <EOF>
Console . WriteLine ( CODE_STRING ) ; <EOF>
public ActionResult Index ( ) { var products = _db . Products . ToArray ( ) var viewModel = products . Select ( product = > GetMedicalProductViewModel ( product ) ) ; return View ( viewModel ) ; } <EOF>
string year = idNumber . Substring ( CODE_INTEGER , CODE_INTEGER ) ; string month = idNumber . Substring ( CODE_INTEGER , CODE_INTEGER ) ; string day = idNumber . Substring ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
foreach ( PropertyInfo prop in o . GetType ( ) . GetProperties ( ) ) { if ( prop . PropertyType == typeof ( int ) ) prop . SetValue ( o , newValue , null ) ; } <EOF>
Menu mainmenu = new Menu ( ) ; MenuItem NavigationMenu = new MenuItem ( ) ; NavigationMenu . Text = CODE_STRING ; NavigationMenu . NavigateUrl = CODE_STRING ; mainmenu . Items . Add ( NavigationMenu ) ; <EOF>
Employee employee = ( Employee ) Session [ CODE_STRING ] ; if ( employee != null ) { RenderMenu ( employee ) ; } private void RenderMenu ( Employee employee ) { StringBuilder _menu = new StringBuilder ( ) ; _menu . Append ( CODE_STRING ) ; if ( employee . IsAdmin ) { } _menu . Append ( CODE_STRING ) ; this . pnlMenu . Controls . Add ( new LiteralControl ( ) { Text = _menu . ToString ( ) } ) ; } <EOF>
the timer can ' t handle the async part <EOF>
static private void WithCatch ( Action f ) { try { f ( ) ; } catch ( System . TimeoutException ex ) { Console . WriteLine ( CODE_STRING ) ; } catch ( System . Exception ex ) { Console . WriteLine ( CODE_STRING ) ; } } static public void Main ( string [ ] args ) { WithCatch ( ( ) = > { for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) ONE_IndependentProcess ( i ) ; } ) ; WithCatch ( ( ) = > { TWO_IndependentProcess ( ) ; } ) ; WithCatch ( ( ) = > { THR_IndependentProcess ( ) ; } ) ; } <EOF>
private static HashSet < String > s_StopWords = new HashSet < String > ( StringComparer . OrdinalIgnoreCase ) { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , } ; private static Char [ ] s_Separators = new Char [ ] { CODE_CHAR , ' ' , CODE_CHAR , CODE_CHAR , CODE_CHAR , CODE_CHAR , CODE_CHAR , CODE_CHAR , CODE_CHAR , } ; . . . String source = CODE_STRING ; String [ ] words = source . Split ( s_Separators , StringSplitOptions . RemoveEmptyEntries ) . Where ( word = > ! s_StopWords . Contains ( word ) ) . ToArray ( ) ; String result = String . Join ( CODE_STRING , words ) ; <EOF>
Process [ ] process = Process . GetProcesses ( ) ; foreach ( var p in process ) { selectedProgram = listView1 . SelectedItems . ToString ( ) ; } <EOF>
stream . WriteLine ( CODE_STRING + txtName . Text + CODE_STRING ) ; stream . WriteLine ( CODE_STRING + txtName . Text + CODE_STRING ) ; stream . WriteLine ( CODE_STRING + txtName . Text + CODE_STRING ) ; <EOF>
message CsvFile { repeated CsvHeader header = CODE_INTEGER ; repeated CsvRow row = CODE_INTEGER ; } message CsvHeader { require string name = CODE_INTEGER ; require ColumnType type = CODE_INTEGER ; } enum ColumnType { DECIMAL = CODE_INTEGER ; STRING = CODE_INTEGER ; } message CsvRow { repeated CsvValue value = CODE_INTEGER ; } message CsvValue { optional string string_value = CODE_INTEGER ; optional Decimal decimal_value = CODE_INTEGER ; } message Decimal { } <EOF>
public void CreateNewAuthor ( List < Author > newAuthors ) { foreach ( Author newAuthor in newAuthors ) { publishContext . AddToAuthors ( newAuthor ) ; } } <EOF>
public class Contacts_GetCount : AbstractIndexCreationTask < ClientContactsModel , Contacts_GetCount . ContactResult > { public class ContactResult { public Guid ClientId { get ; set ; } public int Total { get ; set ; } } public Contacts_GetCount ( ) { Map = contacts = > from contact in contacts select new { ClientId = contact . ClientId , Total = contact . Contacts . Count } ; Reduce = results = > from result in results group result by result . ClientId into g select new { ClientId = g . Key , Total = g . Sum ( x = > x . Total ) } ; } } <EOF>
TextBox tb ; static int i = CODE_INTEGER ; protected void addnewtext_Click ( object sender , EventArgs e ) { i ++ ; for ( j = CODE_INTEGER ; j <= i ; j ++ ) { tb = new TextBox ( ) ; tb . ID = j . ToString ( ) ; PlaceHolder1 . Controls . Add ( tb ) ; } } <EOF>
RegistryKey wp = Registry . CurrentUser . OpenSubKey ( CODE_STRING , false ) ; string sFileName = ( string ) wp . GetValue ( CODE_STRING ) ; pictureBox1 . Image = Image . FromFile ( sFileName ) ; <EOF>
Put Blob <EOF>
accountRepository . Expect ( r = > r . InsertAccount ( account ) ) . Callback ( ( ) = > account . ID = CODE_INTEGER ) ; <EOF>
var Office = profile [ PropertyConstants . Office ] != null ? profile [ PropertyConstants . Office ] . Value : String . Empty ; <EOF>
DataLoadOptions dlo = new DataLoadOptions ( ) ; dlo . LoadWith < Department > ( d = > d . Employees ) ; using ( var dba = new MyDataContext ( ) ) { dba . LoadOptions = dlo ; var result = from d in dba . Department select d ; } <EOF>
private void dataGridView1_CellClick ( object sender , DataGridViewCellEventArgs e ) <EOF>
string command = CODE_STRING ; string args = CODE_STRING ; Process process = new Process ( ) ; process . StartInfo . FileName = command ; process . StartInfo . Arguments = args ; process . Start ( ) ; <EOF>
List < Control > lst_controls = new List < Control > ( ) ; public void btnClick ( ) { RetrieveAllControls ( this . Page ) ; foreach ( Control contrl in lst_controls ) { } } public static void RetrieveAllControls ( Control control ) { foreach ( Control ctr in control . Controls ) { if ( ctr != null ) { lst_controls . add ( ctr ) ; if ( ctr . HasControls ( ) ) { RetrieveAllControls ( ctr , strID ) ; } } } return null ; } <EOF>
/// <summary> /// The test class for our example. /// </summary> class TestObject { public string Code { get ; set ; } public string Text { get ; set ; } } void PopulateGrid ( ) { TestObject test1 = new TestObject ( ) { Code = CODE_STRING , Text = CODE_STRING } ; TestObject test2 = new TestObject ( ) { Code = CODE_STRING , Text = CODE_STRING } ; List < TestObject > list = new List < TestObject > ( ) ; list . Add ( test1 ) ; list . Add ( test2 ) ; dataGridView1 . DataSource = list ; } <EOF>
Random r = new Random ( ) ; int nextValue = r . Next ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
BindingList < T > <EOF>
( object [ , ] ) Array . CreateInstance ( typeof ( object ) , new int [ ] { CODE_INTEGER , CODE_INTEGER } , new int [ ] { CODE_INTEGER , CODE_INTEGER } ) ; <EOF>
public static IEnumerable < SelectListItem > ToSelectListItems ( this IEnumerable < T > items , Func < T , string > nameSelector , Func < T , string > valueSelector , Func < T , bool > selected ) { return items . OrderBy ( item = > nameSelector ( item ) ) . Select ( item = > new SelectListItem { Selected = selected ( item ) , Text = nameSelector ( item ) , Value = valueSelector ( item ) } ) ; } <EOF>
[ TestInitialize ] <EOF>
static void Main ( ) { var strList1 = new [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ; var strList2 = new [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ; var strList3 = new [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ; var allItems = strList1 . Concat ( strList2 ) . Concat ( strList3 ) ; var abfItems = allItems . Where ( item = > item . ToUpper ( ) . EndsWith ( CODE_STRING ) ) . OrderBy ( item = > item ) ; var abiItems = allItems . Where ( item = > item . ToUpper ( ) . EndsWith ( CODE_STRING ) ) . OrderBy ( item = > item ) ; var aboItems = allItems . Where ( item = > item . ToUpper ( ) . EndsWith ( CODE_STRING ) ) . OrderBy ( item = > item ) ; } <EOF>
names . ForEach ( x = > Console . WriteLine ( x ) ) ; <EOF>
private void cbalpha_SelectedIndexChanged ( object sender , EventArgs e ) { bool isEnabled = string . Compare ( StringtDataChoiceorSelect . SelectedItem . ToString ( ) , CODE_STRING , StringComparison . OrdinalIgnoreCase ) == CODE_INTEGER ; foreach ( Control cb in this . Controls ) cb . Enabled = ! isEnabled ; } <EOF>
foreach ( PermStart p1 in wordD . MainDocumentPart . Document . Body . Descendants < PermStart > ( ) ) { p1 . Parent . RemoveChild < PermStart > ( p1 ) ; } foreach ( PermEnd p2 in wordD . MainDocumentPart . Document . Body . Descendants < PermEnd > ( ) ) { p2 . Parent . RemoveChild < PermEnd > ( p2 ) ; } wordD . MainDocumentPart . Document . Save ( ) ; <EOF>
Task . Factory . StartNew ( ( ) = > Data . Common . Documents . Regenerate ( ) ) ; <EOF>
Web_Reference_Folder . Lists listService = new Web_Reference_Folder . Lists ( ) ; listService . Credentials = System . Net . CredentialCache . DefaultCredentials ; string fileCheckout = CODE_STRING ; bool myResults = listService . CheckOutFile ( fileCheckout , CODE_STRING , CODE_STRING ) ; <EOF>
private JsonResult CompletedLogic ( object param ) { . . . } public JsonResult FooCompleted ( object result ) { return CompletedLogic ( result ) ; } public JsonResult BooCompleted ( object result ) { return CompletedLogic ( result ) ; } <EOF>
public int Sum { get { return A + B ; } set { throw new NotImplementedException ( CODE_STRING ) ; } } <EOF>
O ( logn ) <EOF>
if ( dReader . HasRows ) { while ( dReader . Read ( ) ) { if ( dReader [ CODE_STRING ] . ToString ( ) == currentWeekId ) { gameweekList . Text += CODE_STRING + ( dReader [ CODE_STRING ] . ToString ( ) ) + CODE_STRING ; } else { gameweekList . Text += CODE_STRING + ( dReader [ CODE_STRING ] . ToString ( ) ) + CODE_STRING ; } } } else { gameweekList . Text = CODE_STRING ; } dReader . Close ( ) ; conn . Close ( ) ; <EOF>
namespace EnumTest { public enum enumRole : byte { projMgr = CODE_INTEGER , docAdmin = CODE_INTEGER , dataAdmin = CODE_INTEGER , sysAdmin = CODE_INTEGER , userAdmin = CODE_INTEGER } ; class Program { static void Main ( string [ ] args ) { enumRole myrole = enumRole . docAdmin ; if ( myrole == enumRole . docAdmin ) Console . WriteLine ( CODE_STRING ) ; Console . WriteLine ( ( byte ) myrole ) ; myrole = ( enumRole ) CODE_INTEGER ; Console . WriteLine ( myrole . ToString ( ) + CODE_STRING + ( ( byte ) myrole ) . ToString ( ) ) ; Console . ReadLine ( ) ; } } } <EOF>
private Bitmap getBlankBitmap ( int width , int height ) { Bitmap b = new Bitmap ( width , height ) ; using ( Graphics g = Graphics . FromImage ( b ) ) { g . Clear ( Color . Red ) ; } return b ; } <EOF>
public Form1 ( ) { InitializeComponent ( ) ; numericUpDown1 . MouseWheel += new System . Windows . Forms . MouseEventHandler ( this . numericUpDown1_MouseWheel ) ; } private void numericUpDown1_MouseWheel ( object sender , System . Windows . Forms . MouseEventArgs e ) { MessageBox . Show ( CODE_STRING ) ; } <EOF>
WebRequest . RegisterPrefix <EOF>
IEnumerable < User > users = model . Select ( u = > new User { Username = u . Username , EmailAddress = u . EmailAddress , Federations = u . FederatedUsername == null ? new List < Federation > ( ) : ( new [ ] { new Federation ( ) { FederatedUsername = u . FederatedUsername } , } ) . ToList ( ) , } ) ; <EOF>
string fileContent = Resource . text ; using ( var reader = new StringReader ( fileContent ) ) { string line ; while ( ( line = reader . ReadLine ( ) ) != null ) { string [ ] split = line . Split ( CODE_CHAR ) ; string name = split [ CODE_INTEGER ] ; string lastname = split [ CODE_INTEGER ] ; } } <EOF>
ClientScript . RegisterClientScriptBlock ( GetType ( ) , CODE_STRING , Utils . MakeScriptBlock ( CODE_STRING ) ) ; <EOF>
DataContext . GetCommand Method <EOF>
var eastern = TimeZoneInfo . FindSystemTimeZoneById ( CODE_STRING ) ; var local = TimeZoneInfo . Local ; Console . WriteLine ( DateTime . Now . Add ( eastern . BaseUtcOffset - local . BaseUtcOffset ) ) ; <EOF>
[ assembly : InternalsVisibleTo ( CODE_STRING ) ] <EOF>
Page . ClientScript . RegisterStartupScript ( Page . GetType ( ) , CODE_STRING , CODE_STRING \ ' CODE_STRING \ ' CODE_STRING , true ) ; <EOF>
ProcessStartInfo psi = new ProcessStartInfo ( myPath ) ; psi . UserName = username ; SecureString ss = new SecureString ( ) ; foreach ( char c in password ) { ss . AppendChar ( c ) ; } psi . Password = ss ; psi . UseShellExecute = false ; Process . Start ( psi ) ; <EOF>
var httpClient = new HttpClient ( ) ; var response = await httpClient . GetAsync ( url ) ; if ( response . IsSuccessStatusCode ) { var file = await response . Content . ReadAsByteArrayAsync ( ) ; StorageFile destinationFile = await KnownFolders . SavedPictures . CreateFileAsync ( CODE_STRING , CreationCollisionOption . ReplaceExisting ) ; Windows . Storage . Streams . IRandomAccessStream stream = await destinationFile . OpenAsync ( FileAccessMode . ReadWrite ) ; IOutputStream output = stream . GetOutputStreamAt ( CODE_INTEGER ) ; DataWriter writer = new DataWriter ( output ) ; writer . WriteBytes ( file ) ; await writer . StoreAsync ( ) ; await output . FlushAsync ( ) ; } <EOF>
CREATE PROCEDURE b AS SELECT di . DocID , di . DocName , di . Uploadfile , dt . DocType , d . DepType , at . ApproveType FROM DocumentInfo di JOIN DocType dt ON dt . DocTypeID = di . DocTypeID JOIN Department d ON d . DepID = di . DepID LEFT OUTER JOIN Approval a ON a . DocID = di . DocID JOIN ApproveType at ON at . ApproveID = ISNULL ( a . Approveid , CODE_INTEGER ) <EOF>
Launcher . LaunchUriAsync ( new Uri ( CODE_STRING ) ) ; <EOF>
XElement e = document . Element ( CODE_STRING ) ; if ( e != null ) { var myValue = e . Value ; } <EOF>
var range = worksheet . get_Range ( CODE_STRING , System . Type . Missing ) . CurrentRegion ; <EOF>
Foreground = CODE_STRING <EOF>
using System . IO ; . . . foreach ( string file in Directory . EnumerateFiles ( folderPath , CODE_STRING ) ) { string contents = File . ReadAllText ( file ) ; } <EOF>
var startColor = Color . FromArgb ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; var endColor = Color . FromArgb ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; using ( var brGradient = new LinearGradientBrush ( panel1 . ClientRectangle , startColor , endColor , LinearGradientMode . Vertical ) ) { brGradient . Blend = new Blend { Factors = new [ ] { CODE_REAL , CODE_REAL , CODE_REAL } , Positions = new [ ] { CODE_REAL , CODE_REAL , CODE_REAL } } ; e . Graphics . FillRectangle ( brGradient , panel1 . ClientRectangle ) ; } <EOF>
Regex . Matches ( input , CODE_STRING ) . Count <EOF>
Application . Run <EOF>
if ( this . Context is Outlook . Inspector ) { Outlook . Inspector oInsp = this . Context as Outlook . Inspector ; if ( oInsp . CurrentItem is Outlook . MailItem ) { Outlook . MailItem oMail = oInsp . CurrentItem as Outlook . MailItem ; ( ( Outlook . _MailItem ) oMail ) . Send ( ) ; } } <EOF>
Html . LabelForBootstrap <EOF>
SqlCommand command = new SqlCommand ( CODE_STRING , conn ) ; <EOF>
var cl = new List < CancellationList > ( ) ; var dataTable = new DataTable ( ) ; var toObject = cl . Select ( c = > new object [ ] { c . SchemeId , c . EffectiveDate , c . TransactionDate , c . ExpiryDate } ) ; dataTable . Columns . Add ( CODE_STRING , typeof ( int ) ) ; dataTable . Columns . Add ( CODE_STRING , typeof ( DateTime ) ) ; dataTable . Columns . Add ( CODE_STRING , typeof ( DateTime ) ) ; dataTable . Columns . Add ( CODE_STRING , typeof ( DateTime ) ) ; foreach ( var data in toObject ) { dataTable . Rows . Add ( data ) ; } <EOF>
private void richTextBox1_SelectionChanged ( object sender , EventArgs e ) { LastCursorPosition = CurrentCursorPosition ; CurrentCursorPosition = richTextBox1 . SelectionStart ; CursorsDifferences = CurrentCursorPosition - LastCursorPosition ; } <EOF>
public T ParentOfType < T > ( DependencyObject element ) where T : DependencyObject { if ( element == null ) return default ( T ) ; else return Enumerable . FirstOrDefault < T > ( Enumerable . OfType < T > ( ( IEnumerable ) GetParents ( element ) ) ) ; } public IEnumerable < DependencyObject > GetParents ( DependencyObject element ) { if ( element == null ) throw new ArgumentNullException ( CODE_STRING ) ; while ( ( element = GetParent ( element ) ) != null ) yield return element ; } private DependencyObject GetParent ( DependencyObject element ) { DependencyObject parent = VisualTreeHelper . GetParent ( element ) ; if ( parent == null ) { FrameworkElement frameworkElement = element as FrameworkElement ; if ( frameworkElement != null ) parent = frameworkElement . Parent ; } return parent ; } <EOF>
uint dummy = CODE_INTEGER ; byte [ ] inOptionValues = new byte [ Marshal . SizeOf ( dummy ) * CODE_INTEGER ] ; BitConverter . GetBytes ( ( uint ) CODE_INTEGER ) . CopyTo ( inOptionValues , CODE_INTEGER ) ; BitConverter . GetBytes ( ( uint ) CODE_INTEGER ) . CopyTo ( inOptionValues , Marshal . SizeOf ( dummy ) ) ; BitConverter . GetBytes ( ( uint ) CODE_INTEGER ) . CopyTo ( inOptionValues , Marshal . SizeOf ( dummy ) * CODE_INTEGER ) ; Socket socket = __Client . Client ; socket . IOControl ( IOControlCode . KeepAliveValues , inOptionValues , null ) ; <EOF>
public void Validate ( object obj ) { foreach ( var property in obj . GetType ( ) . GetProperties ( ) ) { var attribute = property . GetCustomAttributes ( typeof ( ValidationAttribute ) , false ) ; var validator = ValidationFactory . GetValidator ( attribute ) ; validator . Validate ( property . GetValue ( obj , null ) ) ; } } <EOF>
# if ( DEBUG ) [ assembly : InternalsVisibleTo ( CODE_STRING ) ] # endif <EOF>
return RedirectToAction ( CODE_STRING , new { failed = true } ) ; <EOF>
GCHandle gcHandle = GCHandle . Alloc ( yourObject , GCHandleType . WeakTrackResurrection ) ; IntPtr thePointer = GCHandle . ToIntPtr ( gcHandle ) ; <EOF>
> > > from xml . etree import ElementTree as etree > > > corpus = ' ' ' < category1 > . . . < subcategory > . . . entry1 . . . entry2 . . . < / subcategory > . . . < / category1 > . . . ' ' ' > > > doc = etree . fromstring ( corpus ) > > > for subcategory in doc . getchildren ( ) : . . . for entry in filter ( bool , . . . map ( str . strip , . . . subcategory . text . split ( ' ' ) ) ) : . . . print CODE_STRING % entry . . . print CODE_STRING % subcategory . tag . . . entry output : ( entry1 ) entry output : ( entry2 ) subcategory output ( subcategory ) > > > <EOF>
create or replace PROCEDURE SP_GET_TBL ( o_rc OUT sys_refcursor ) AS open o_rc for select Col1 , Col2 , Col3 from Tbl ; END SP_GET_TBL ; <EOF>
using ( FolderBrowserDialog dialog = new FolderBrowserDialog ( ) ) { if ( dialog . ShowDialog ( ) == DialogResult . OK ) { string path = dialog . SelectedPath ; } } <EOF>
NpgsqlConnection Conn = new NpgsqlConnection ( getPostgresConnString ( ) ) ; Conn . Open ( ) ; NpgsqlCopyIn copyIn = new NpgsqlCopyIn ( CODE_STRING , Conn ) ; copyIn . Start ( ) ; NpgsqlCopySerializer cs1 = new NpgsqlCopySerializer ( pConn2 ) ; cs1 . AddString ( System . IO . File . ReadAllText ( CODE_STRING ) ) ; [ . . . ] cs1 . EndRow ( ) ; cs1 . Close ( ) ; copyIn . End ( ) ; <EOF>
Albums . SelectMany ( a = > a . Songs ) . FirstOrDefault ( song = > song . Id == id ) <EOF>
( new URI ( System . Web . HttpServerUtility . UrlDecode ( url ) ) ) . Host <EOF>
Bitmap image = BitmapFactory . decodeStream ( response . getEntity ( ) . getContent ( ) ) <EOF>
[ XmlAttribute ( CODE_STRING ) ] public string Name { get ; set ; } [ XmlElement ( CODE_STRING ) ] public string NameAlt { get { return Name ; } set { Name = value ; } } public bool ShouldSerializeNameAlt ( ) { return false ; } <EOF>
void OnStart ( string [ ] args ) <EOF>
section . ReplaceWith ( XElement . Parse ( replacementString ) ; <EOF>
foreach ( ListItem listItem in listItems ) { textBox1 . Text += listItem . FieldValues [ CODE_STRING ] . ToString ( ) ; } <EOF>
XDocument X_DOC = XDocument . Load ( Application . StartupPath + CODE_STRING ) ; X_DOC . Root . Elements ( CODE_STRING ) . Remove ( ) ; X_DOC . Save ( Application . StartupPath + CODE_STRING ) ; <EOF>
DispatcherTimer idleTimer ; DateTime timeNow ; public ChildWindow1 ( ) { InitializeComponent ( ) ; idleTimer = new DispatcherTimer ( ) ; idleTimer . Start ( ) ; idleTimer . Interval = TimeSpan . FromSeconds ( CODE_INTEGER ) ; idleTimer . Tick += new EventHandler ( idleTimer_Tick ) ; timeNow = DateTime . Now ; } private void OKButton_Click ( object sender , RoutedEventArgs e ) { this . DialogResult = true ; } private void CancelButton_Click ( object sender , RoutedEventArgs e ) { this . DialogResult = false ; } private void idleTimer_Tick ( object sender , EventArgs e ) { if ( DateTime . Now > timeNow . AddSeconds ( CODE_INTEGER ) ) { this . Close ( ) ; } } <EOF>
public partial class MyForm : Form { public MyForm ( ) { InitializeComponent ( ) ; Rectangle screenBounds = Screen . PrimaryScreen . Bounds ; screenBounds . Width = screenBounds . Width / CODE_INTEGER ; this . MaximizedBounds = screenBounds ; this . WindowState = FormWindowState . Maximized ; } } <EOF>
var sets = testResult . Select ( x = > new { Key = x . Key , Set = new HashSet < int > ( x . Value . Concat ( new [ ] { x . Key } ) ) } ) . ToList ( ) ; var res = sets . Where ( s = > sets . Any ( x = > x . Set . IsSupersetOf ( s . Set ) && x . Key != s . Key ) ) ; var keysToRemove = res . Select ( x = > x . Key ) ; <EOF>
Html . Kendo ( ) . ComboBoxFor ( m = > m . ObjectID ) . MinLength ( CODE_INTEGER ) <EOF>
class ContainingClass { int randomNumber ; int randomNumber2 ; public void generateNumbers ( ) { Random rand = new Random ( ) ; randomNumber = rand . Next ( CODE_INTEGER , CODE_INTEGER ) ; randomNumber2 = rand . Next ( CODE_INTEGER , CODE_INTEGER ) ; Console . WriteLine ( CODE_STRING + randomNumber ) ; Console . WriteLine ( CODE_STRING + randomNumber2 ) ; } public int findSum ( ) { return randomNumber + randomNumber2 ; } } <EOF>
[ ComVisible ( true ) ] [ ComDefaultInterface ( typeof ( IBackStageInfo ) ) ] <EOF>
Process . Start ( CODE_STRING ) <EOF>
FlagImage . Source = new BitmapImage ( new Uri ( CODE_STRING , UriKind . Relative ) ) ; <EOF>
NavigationService . Navigate ( new Uri ( CODE_STRING + obj + CODE_STRING + obj2 , UriKind . Relative ) ) ; <EOF>
public string [ ] getBlendShapeNames ( GameObject obj ) { SkinnedMeshRenderer head = obj . GetComponent < SkinnedMeshRenderer > ( ) ; Mesh m = head . sharedMesh ; string [ ] arr ; arr = new string [ m . blendShapeCount ] ; for ( int i = CODE_INTEGER ; i < m . blendShapeCount ; i ++ ) { string s = m . GetBlendShapeName ( i ) ; print ( CODE_STRING + i + CODE_STRING + s ) ; arr [ i ] = s ; } return arr ; } <EOF>
namespace XXX . YYY . ZZZ { /* your types that go in that namespace */ } <EOF>
public IEnumerable < UserProperty > GetSearches ( int userId ) { return userRepository . Where ( x = > x . Id == userId ) . Select ( x = > x . Properties . Where ( p = > p . IsActive ) ) . Single ( ) ; } <EOF>
D0 CF CODE_INTEGER E0 A1 B1 CODE_INTEGER A E1 <EOF>
public void DoSomethingUsingExpressionWithArgument ( Expression < Func < SomeClass , bool > > expressionWithArgument ) { var thisExpr = Expression . Constant ( this ) ; var pExpr = Expression . Property ( thisExpr , CODE_STRING ) ; var invokeExpr = Expression . Invoke ( expressionWithArgument , pExpr ) ; Expression < Func < bool > > expressionWithoutArgument = Expression . Lambda < Func < bool > > ( invokeExpr ) ; DoSomethingUsingExpressionWithoutArgument ( expressionWithoutArgument ) ; } <EOF>
private void treeView1_NodeMouseClick ( object sender , TreeNodeMouseClickEventArgs e ) { if ( e . Button == MouseButtons . Right ) { treeView1 . SelectedNode = e . Node ; contextMenuStrip1 . Show ( treeView1 , e . Location ) ; } } <EOF>
foreach ( XElement cookie in appDataXml . Elements ( ) ) { ViewModels . Cookie tempCookie = new ViewModels . Cookie ( ) ; tempCookie . Name = cookie . Element ( CODE_STRING ) . Value ; _cookieList . Add ( tempCookie ) ; } <EOF>
if ( txtdol . Text == null || txtdol . Text == string . Empty ) { cmd . Parameters . Add ( CODE_STRING , SqlDbType . DateTime ) . Value = DBNull . Value ; } else { cmd . Parameters . Add ( CODE_STRING , SqlDbType . DateTime ) . Value = Convert . ToDateTime ( txtdol . Text ) ; } <EOF>
DataGridView . FirstDisplayedScrollingRowIndex <EOF>
var before = CODE_STRING ; var wantedString = before . Split ( CODE_CHAR ) [ CODE_INTEGER ] ; <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( ! IsPostBack ) { using ( var context = new CustomersContext ( ) ) { customer = context . Logins . First ( ) ; } CustomerDetailsView . DataSource = new List < Customer > ( ) { customer } ; CustomerDetailsView . DataBind ( ) ; } } <EOF>
protected void Validate ( string propertyName , string propertyValue , List < ValidRule > validRules ) { string temp = propertyValue . ToString ( ) ; this . RemoveError ( propertyName ) ; if ( propertyName . Equals ( CODE_STRING ) ) { foreach ( ValidRule validRule in validRules ) { if ( ! Regex . IsMatch ( propertyValue , validRule . Rule ) && ! String . IsNullOrWhiteSpace ( propertyValue ) ) { this . AddError ( propertyName , validRule . ErrorMessage ) ; break ; } } } } <EOF>
_questionService . GetData ( ) . Where ( x = > x . text != null ) ; <EOF>
string [ ] Array1 = new string [ CODE_INTEGER ] ; for ( int i = CODE_INTEGER ; i < dataGridView1 . Rows . Count ; i += CODE_INTEGER ) { Array1 [ CODE_INTEGER ] = dataGridView1 . Rows [ i ] . Cells [ CODE_INTEGER ] . Value . ToString ( ) ; Array1 [ CODE_INTEGER ] = dataGridView1 . Rows [ i ] . Cells [ CODE_INTEGER ] . Value . ToString ( ) ; Array1 [ CODE_INTEGER ] = dataGridView1 . Rows [ i ] . Cells [ CODE_INTEGER ] . Value . ToString ( ) ; } <EOF>
string [ ] substrings = inputString . Split ( CODE_STRING ) ; <EOF>
public ActionResult Index ( ) { return View ( _repository . ListAll ( ) . OrderByDescending ( s = > s . Name ) ) ; } <EOF>
else { sBO . Client_id = System . Data . SqlTypes . SqlInt32 . Null ; } <EOF>
var xd = XDocument . Parse ( xml ) ; var modemResponse = xd . Element ( CODE_STRING ) . Element ( CODE_STRING ) . Value ; string address = string . Empty , netmask = string . Empty ; var tokens = modemResponse . Split ( new [ ] { CODE_CHAR , CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) ; for ( int i = CODE_INTEGER ; i < tokens . Length ; i ++ ) { var token = tokens [ i ] ; switch ( token ) { case CODE_STRING : if ( i + CODE_INTEGER < token . Length ) address = tokens [ i + CODE_INTEGER ] ; break ; case CODE_STRING : if ( i + CODE_INTEGER < tokens . Length ) netmask = tokens [ i + CODE_INTEGER ] ; break ; } } Console . WriteLine ( CODE_STRING , address , netmask ) ; <EOF>
XElement root = XElement . Load ( file ) ; var lines = root . Descendants ( CODE_STRING ) . Select ( line = > new { Id = ( string ) line . Element ( CODE_STRING ) , Points = line . Elements ( CODE_STRING ) . Select ( p = > new PointF { X = ( float ) p . Attribute ( CODE_STRING ) , Y = ( float ) p . Attribute ( CODE_STRING ) } ) . ToArray ( ) } ) . ToArray ( ) ; <EOF>
Process myProcess ; private void btnViewErrorLogFile_Click ( object sender , EventArgs e ) { myProcess . Start ( AppVars . ErrorLogFilePath ) ; } private void doSomething ( ) { if ( ! myProcess . HasExited ) { myProcess . CloseMainWindow ( ) ; myProcess . Close ( ) ; } } <EOF>
DbCommand . ExecuteNonQuery <EOF>
var sumEur = yourtable . compute ( CODE_STRING , CurrencyCode = ' GBP ' ) ; var sumGBP = yourtable . compute ( CODE_STRING , CurrencyCode = ' EUR ' ) ; var sumUSD = yourtable . compute ( CODE_STRING , CurrencyCode = ' USD ' ) ; <EOF>
private void RegexTest ( ) { String input = CODE_STRING ; String pattern = CODE_STRING ; Regex regex = new Regex ( pattern ) ; foreach ( Match match in regex . Matches ( input ) ) { Console . Out . WriteLine ( match . Groups [ CODE_INTEGER ] ) ; } } <EOF>
System . IO . DirectoryInfo ( ) <EOF>
using ( DbCommand command = oledbConn . CreateCommand ( ) ) { command . CommandText = CODE_STRING + CustID + CODE_STRING ; command . ExecuteNonQuery ( ) ; } <EOF>
StringBuilder sb = new StringBuilder ( ) ; while ( true ) { char ch = Convert . ToChar ( Console . Read ( ) ) ; sb . Append ( ch ) ; if ( ch == ' ' ) { break ; } } <EOF>
JSRequest . EnsureSetup ( ) ; var sfield = JSRequest . QueryString [ CODE_STRING ] ; var tbSearch = JSRequest . QueryString [ CODE_STRING ] ; document . getElementById ( ' sfield ' ) . value = sfield ; document . getElementById ( ' tbSearch ' ) . value = tbSearch ; <EOF>
int count = CODE_INTEGER ; var mock = MockRepository . GenerateStub < ICell > ( ) ; mock . Stub ( p = > p . Value ) . WhenCalled ( a = > a . ReturnValue = count ) . Return ( CODE_INTEGER ) ; mock . Stub ( p = > p . IncrementValue ( ) ) . WhenCalled ( a = > { count = ( int ) count + CODE_INTEGER ; } ) ; <EOF>
classes = classes . Select ( c = > { c . code = new string ( CODE_CHAR , c . code . Length - CODE_INTEGER ) + c . code . Substring ( c . code . length - CODE_INTEGER ) ; return c ; } ) . ToList ( ) ; <EOF>
void aTimer_Elapsed ( object sender , System . Timers . ElapsedEventArgs e ) { var context = GlobalHost . ConnectionManager . GetHubContext < Chat > ( ) ; context . Clients . All . addMessage ( CODE_STRING ) ; } <EOF>
CommandBar CommandBarObject = new CommandBar ( ) ; AppBarButton FirstBtn = new AppBarButton ( ) { Icon = new BitmapIcon ( ) { UriSource = new Uri ( CODE_STRING ) } } ; FirstBtn . Label = CODE_STRING ; FirstBtn . Click += FirstBtn_Click ; FirstBtn . IsEnabled = true ; AppBarButton secondaryCommand = new AppBarButton ( ) { Label = CODE_STRING , IsEnabled = true } } ; secondaryCommand . Click += FirstBtn_Click ; CommandBarObject . PrimaryCommands . Add ( FirstBtn ) ; CommandBarObject . SecondaryCommands . Add ( secondaryCommand ) ; <EOF>
DateTime temp ; if ( DateTime . TryParse ( TrystartDate . Text , out temp ) ) { string dateFilter = temp . ToString ( CODE_STRING ) ; var filteredList = images . Where ( item = > item . Date == dateFilter ) ; var filterSource = new BindingSource ( ) ; filterSource . DataSource = filteredList ; navigationGrid . DataSource = filterSource ; } <EOF>
. \ Dev \ DataFeed <EOF>
private void buttonSend_Click ( object sender , EventArgs e ) { byte [ ] outStream = System . Text . Encoding . ASCII . GetBytes ( textSend . Text + CODE_STRING ) ; serverStream . Write ( outStream , CODE_INTEGER , outStream . Length ) ; serverStream . Flush ( ) ; textSend . Text = CODE_STRING ; } <EOF>
if ( Power . Count == CODE_INTEGER ) Power . RemoveAt ( CODE_INTEGER ) ; Power . Add ( new KeyValuePair < double , double > ( i , SolarCellPower ) ) ; <EOF>
/ * [ local - name ( ) = ' Settings ' ] / * [ local - name ( ) = ' FormPassword ' ] <EOF>
ApplicationContext threadContext ; private void startLoop ( ) { threadContext = new ApplicationContext ( ) ; var messageLoop = new Thread ( ( ) = > Application . Run ( threadContext ) ) ; messageLoop . Start ( ) ; } private void stopLoop ( ) { threadContext . ExitThread ( ) ; threadContext = null ; } <EOF>
Regex rgx = new Regex ( CODE_STRING ) ; str = rgx . Replace ( str , CODE_STRING ) ; <EOF>
% SystemRoot % \ Microsoft . NET \ Framework \ v4 CODE_REAL CODE_REAL \ MSBuild . exe " D : \ test_2 \ MsBuild \ MsBuild \ BuildScript \ MsBuild . csproj " / t : SecondTarget <EOF>
public string CombinedProperty { get { return String . Format ( " { CODE_INTEGER } { CODE_INTEGER } { CODE_INTEGER } " , leadTag , content , EndTag ) ; } } <EOF>
inkPicture1 . InkEnabled = false ; inkPicture1 . Ink = new Microsoft . Ink . Ink ( ) ; inkPicture1 . InkEnabled = true ; inkPicture1 . Invalidate ( ) ; <EOF>
public EditForm ( Point location , GridColumnCollection columns , object dataSource , BindingContext context ) : this ( ) { StartPosition = FormStartPosition . Manual ; Location = location ; BindingContext = context ; allowTrackValueChanges = false ; this . dataSource = dataSource ; . . . } <EOF>
string parameter = CODE_STRING ; XmlDocument doc = new XmlDocument ( ) ; \ doc . LoadXml ( CODE_STRING + parameter + CODE_STRING ) ; <EOF>
protected void Page_Init ( object sender , EventArgs e ) { HtmlLink css = new HtmlLink ( ) ; css . Href = CODE_STRING ; css . Attributes [ CODE_STRING ] = CODE_STRING ; css . Attributes [ CODE_STRING ] = CODE_STRING ; css . Attributes [ CODE_STRING ] = CODE_STRING ; Page . Header . Controls . Add ( css ) ; } <EOF>
using ( var con = new SqlConnection ( cs ) ) <EOF>
protected void OnPropertyChanged ( string propertyName ) { PropertyChangedEventHandler handler ; lock ( propertyChangedLock ) { handler = propertyChanged ; } handler ( this , new PropertyChangedEventArgs ( propertyName ) ) ; } <EOF>
public class Request { public string request { get ; set ; } public IDictionary < string , string > parameters { get ; set ; } public string pid { get ; set ; } } var request = JsonConvert . DeserializeObject < Request > ( data ) ; <EOF>
flush ( ) <EOF>
private IEnumerable < DataPoint > GetHistorianDatapoints ( IEnumerable < DataPoint > fileDatapoints , IEnumerable < Tagname > historianTagnames ) { var tagNameDictionary = historianTagnames . ToDictionary ( t = > t . DataLoggerTagname , StringComparer . OrdinalIgnoreCase ) ; foreach ( var fileDatapoint in fileDatapoints ) { if ( tagNameDictionary . ContainsKey ( fileDatapoint . Name ) ) { var historianTagname = tagNameDictionary [ fileDatapoint . Name ] ; var historianDatapoint = new DataPoint ( ) ; historianDatapoint . Name = historianTagname . HistorianTagname ; historianDatapoint . Date = fileDatapoint . Date ; historianDatapoint . Value = fileDatapoint . Value ; yield return historianDatapoint ; } } } <EOF>
private void comboboxA_SelectionChanged ( object sender , SelectionChangedEventArgs e ) { for ( int i = CODE_INTEGER ; i <= comboboxB . Items . Count - CODE_INTEGER ; i ++ ) { if ( ( ( ComboBoxItem ) ( comboboxB . Items [ i ] ) ) . Content . ToString ( ) == ( ( ComboBoxItem ) comboboxA . SelectedItem ) . Content . ToString ( ) ) { ( ( ComboBoxItem ) ( comboboxB . Items [ i ] ) ) . Visibility = System . Windows . Visibility . Collapsed ; } else ( ( ComboBoxItem ) ( comboboxB . Items [ i ] ) ) . Visibility = System . Windows . Visibility . Visible ; } } <EOF>
foreach ( SmtpRequestContent email in emails ) { YourValidateMethod ( email ) ; } <EOF>
using System ; using System . Collections . Generic ; using System . Linq ; using System . Web ; using System . Web . UI ; using System . Web . UI . HtmlControls ; using System . Web . UI . WebControls ; public partial class _Default : System . Web . UI . Page { protected void Page_Load ( object sender , EventArgs e ) { for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { LinkButton linkButton = new LinkButton ( ) ; linkButton . Text = CODE_STRING + i ; linkButton . Click += linkButton_Click ; form1 . Controls . Add ( linkButton ) ; HtmlGenericControl p = new HtmlGenericControl ( CODE_STRING ) ; p . InnerText = CODE_STRING ; form1 . Controls . Add ( p ) ; } } void linkButton_Click ( object sender , EventArgs e ) { Response . Redirect ( CODE_STRING ) ; } } <EOF>
var email = Email . From ( CODE_STRING ) . To ( CODE_STRING , CODE_STRING ) . Subject ( CODE_STRING ) . UsingTemplate ( CODE_STRING ) . Replace ( CODE_STRING , DateTime . Now . ToShortDateString ( ) ) . Replace ( CODE_STRING , fullName ) . Replace ( CODE_STRING , saleDate ) <EOF>
Map ( x = > ( ( ICategorizedEntity ) x ) . Category ) ; <EOF>
string delimiterString = numbers . Substring ( CODE_INTEGER , CODE_INTEGER ) ; char delimiter = delimiterString [ CODE_INTEGER ] ; string resultSource = numbers . Remove ( CODE_INTEGER , CODE_INTEGER ) ; string [ ] result = resultSource . Split ( delimiter ) ; <EOF>
public MainWindow ( ) { InitializeComponent ( ) ; this . WindowState = System . Windows . WindowState . Maximized ; this . ResizeMode = System . Windows . ResizeMode . NoResize ; } <EOF>
public Result Execute ( ExternalCommandData cmdData , ref string message , ElementSet elements ) { UIDocument uiDoc = cmdData . Application . OpenAndActivateDocument ( CODE_STRING ) ; return Result . Succeeded ; } <EOF>
string Input = CODE_STRING ; DateTime dt ; DateTime . TryParseExact ( Input . ToString ( ) , CODE_STRING , CultureInfo . InvariantCulture , DateTimeStyles . None , out dt ) ; Console . WriteLine ( dt . ToString ( CODE_STRING ) ) ; <EOF>
public delegate void QueuedMethod ( ) ; static void Main ( string [ ] args ) { methodQueue ( delegate ( ) { methodOne ( CODE_INTEGER , CODE_INTEGER ) ; } ) ; methodQueue ( delegate ( ) { methodTwo ( CODE_INTEGER , CODE_INTEGER ) ; } ) ; } static void methodOne ( int x , int y ) { } static void methodQueue ( QueuedMethod parameter ) { parameter ( ) ; } <EOF>
MemoryStream ms = new MemoryStream ( fileContentResult . FileContents ) ; ContentType ct = new ContentType ( fileContentResult . ContentType ) ; Attachment a = new Attachment ( ms , ct ) ; <EOF>
XElement books = XElement . Load ( CODE_STRING ) ; string yourDate = CODE_STRING ; string yourMonth = CODE_STRING ; var titles = from book in books . Elements ( CODE_STRING ) where ( string ) book . Element ( CODE_STRING ) == yourDate && ( string ) book . Element ( CODE_STRING ) == yourMonth select book . Element ( CODE_STRING ) ; foreach ( var title in titles ) Console . WriteLine ( title . Value ) ; <EOF>
var myValue = MyEnum . Value3 ; var stringRepresentation = myValue . ToString ( ) ; var intRepresentation = ( int ) myValue ; Console . WriteLine ( CODE_STRING , stringRepresentation ) ; Console . WriteLine ( CODE_STRING , intRepresentation ) ; var parsedFromString = ( MyEnum ) Enum . Parse ( typeof ( MyEnum ) , stringRepresentation ) ; var parsedFromInt = ( MyEnum ) Enum . Parse ( typeof ( MyEnum ) , intRepresentation . ToString ( ) ) ; Console . WriteLine ( CODE_STRING , parsedFromString ) ; Console . WriteLine ( CODE_STRING , parsedFromInt ) ; <EOF>
[ DllImport ( CODE_STRING , EntryPoint = CODE_STRING ) ] public static extern IntPtr FindWindowEx ( IntPtr hwndParent , IntPtr hwndChildAfter , string lpszClass , string lpszWindow ) ; [ DllImport ( CODE_STRING ) ] public static extern int SendMessage ( IntPtr hWnd , int uMsg , int wParam , string lParam ) ; private static void DoSendMessage ( string message ) { Process notepad = Process . Start ( new ProcessStartInfo ( CODE_STRING ) ) ; notepad . WaitForInputIdle ( ) ; if ( notepad != null ) { IntPtr child = FindWindowEx ( notepad . MainWindowHandle , new IntPtr ( CODE_INTEGER ) , CODE_STRING , null ) ; SendMessage ( child , CODE_INTEGER , CODE_INTEGER , message ) ; } } <EOF>
Parameter parameter = new Parameter ( CODE_STRING , TypeCode . String , Page . User . ProviderUserKey ) ; MyDataSource . SelectParameters . Add ( parameter ) ; <EOF>
private const int GWL_STYLE = - CODE_INTEGER ; private const int WS_SIZEBOX = CODE_INTEGER ; [ DllImport ( CODE_STRING , SetLastError = true ) ] private static extern int GetWindowLong ( IntPtr hWnd , int nIndex ) ; [ DllImport ( CODE_STRING ) ] private static extern int SetWindowLong ( IntPtr hWnd , int nIndex , int dwNewLong ) ; void Main ( ) { var form = new Form ( ) ; form . ControlBox = false ; form . FormBorderStyle = FormBorderStyle . FixedDialog ; form . Show ( ) ; SetWindowLong ( form . Handle , GWL_STYLE , GetWindowLong ( form . Handle , GWL_STYLE ) | WS_SIZEBOX ) ; } <EOF>
class Program { [ STAThread ] public static void Main ( string [ ] args ) { if ( runNormally ( args ) ) { MainWindow mainWindow = new MainWindow ( ) ; var app = new Application ( ) ; app . Run ( mainWindow ) ; } else { MyFunction ( args ) ; } } } <EOF>
Public Function AfterReceiveRequest ( ByRef request As System . ServiceModel . Channels . Message , ByVal channel As System . ServiceModel . IClientChannel , ByVal instanceContext As System . ServiceModel . InstanceContext ) As Object Implements System . ServiceModel . Dispatcher . IDispatchMessageInspector . AfterReceiveRequest ' Output the request message to immediate window System . Diagnostics . Debug . WriteLine ( CODE_STRING ) System . Diagnostics . Debug . WriteLine ( request . ToString ( ) ) Return Nothing End Function <EOF>
while ( infile . Peek ( ) >= CODE_INTEGER ) { string [ ] values = infile . ReadLine ( ) . Split ( CODE_CHAR ) ; fill_in [ int . Parse ( values [ CODE_INTEGER ] ) , int . Parse ( values [ CODE_INTEGER ] ) ] = true ; } <EOF>
public class RandomWife : Wife { private RandomHusband husband ; public Husband darling { get { return husband ; } set { husband = value ; } } public Man Wife . darling { get { return husband ; } set { /* can't set anything */ } } } <EOF>
using System . Linq ; Func < double [ ] , double [ ] > oldFunc = this . Gradient ; this . Gradient = ( x ) = > oldFunc ( x ) . Select ( y = > - y ) . ToArray ( ) ; <EOF>
var c = ( BaseClass ) Activator . CreateInstance ( dict [ CODE_STRING ] ) ; <EOF>
string antcbatchpath = string . Format ( CODE_STRING , buildStream ) ; <EOF>
Rectangle method : Document document = new Document ( new Rectangle ( CODE_REAL , CODE_REAL ) ) ; PageSize method : Document document = new Document ( PageSize . A4 , CODE_REAL , CODE_REAL , CODE_REAL , CODE_REAL ) ; PdfWriter . GetInstance ( document , new FileStream ( filename , FileMode . Create ) ) ; document . Open ( ) ; document . Add ( new Paragraph ( CODE_STRING ) ) ; document . Close ( ) ; <EOF>
dynamic data = CanvasContext . Current . SignedRequest . Data if ( data . page . liked ) { } else { } <EOF>
class SendMessage { [ DllImport ( CODE_STRING ) ] public static extern IntPtr PostMessage ( IntPtr hWnd , uint Msg , IntPtr wParam , IntPtr lParam ) ; public static void sendKeystroke ( ) { const uint WM_KEYDOWN = CODE_INTEGER ; const uint WM_KEYUP = CODE_INTEGER ; IntPtr hWnd ; string processName = CODE_STRING ; Process [ ] processList = Process . GetProcesses ( ) ; foreach ( Process P in processList ) { if ( P . ProcessName . Equals ( processName ) ) { IntPtr edit = P . MainWindowHandle ; PostMessage ( edit , WM_KEYDOWN , ( IntPtr ) ( Keys . Control ) , IntPtr . Zero ) ; PostMessage ( edit , WM_KEYDOWN , ( IntPtr ) ( Keys . A ) , IntPtr . Zero ) ; PostMessage ( edit , WM_KEYUP , ( IntPtr ) ( Keys . Control ) , IntPtr . Zero ) ; } } } } <EOF>
var snippet = var rawXml = CODE_STRING + snippet + CODE_STRING ; XmlDocument xmlDoc = new XmlDocument ( ) ; xmlDoc . LoadXml ( rawXml ) ; var mergedText = xmlDoc . InnerText ; int start = mergedText . IndexOf ( startMarker ) ; int end = mergedText . IndexOf ( endMarker ) - start ; mergedText . Substring ( start , end ) ; <EOF>
new PropertyMetadata ( new List < UIElement > ( ) <EOF>
foo - 001.jpeg ' , <EOF>
System . Web <EOF>
var output = from p in input group p by p . Id into g select new Pallet { Id = g . Key , Locations = ( from l in g . SelectMany ( x = > x . Locations ) group l by l . Id into gl select new Location { Id = gl . Key } ) . ToList ( ) } ; <EOF>
from i in collectiona from j in collectionb where Regex . IsMatch ( i . name , j . jokered_name ) select . . . <EOF>
An object reference is required for the non - static field , method , or property <EOF>
var userRoles = new List < Roles > ( ) ; foreach ( var role in listRoles . Split ( CODE_STRING ) ) { userRoles . Add ( listRoles . First ( x = > x . RoleName == role ) ) } <EOF>
string x = nastavenia . adresa_servera ( ) . Replace ( CODE_STRING , " \ " ) ; <EOF>
routes . RouteExistingFiles = true ; routes . MapPageRoute ( CODE_STRING , CODE_STRING , CODE_STRING ) ; routes . MapPageRoute ( CODE_STRING , CODE_STRING , CODE_STRING ) ; <EOF>
DataGridViewComboBoxColumn CustomerColumn ; DataTable _customersDataTable = GetCustomers ( ) ; CustomerColumn . DataSource = _customersDataTable ; CustomerColumn . DisplayMember = Customer_Name ; CustomerColumn . ValueMember = ID ; var graphics = CreateGraphics ( ) ; CustomerColumn . DropDownWidth = ( from width in ( from DataRow item in _customersDataTable . Rows select Convert . ToInt32 ( graphics . MeasureString ( item [ Customer_Name ] . ToString ( ) , Font ) . Width ) ) select width ) . Max ( ) ; <EOF>
Dictionary < string , List < string > > dict = new Dictionary < string , List < string > > ( ) ; foreach ( XmlNode items in diagramTables ) { string pkTable = items [ CODE_STRING ] . InnerText . Replace ( CODE_STRING , CODE_STRING ) ; string fkTable = items [ CODE_STRING ] . InnerText . Replace ( CODE_STRING , CODE_STRING ) ; if ( ! dict . ContainsKey ( pkTable ) ) { dict . Add ( pkTable , new List < string > ( ) ) ; } if ( ! dict [ pkTable ] . Contains ( fkTable ) ) { dict [ pkTable ] . Add ( fkTable ) ; } } sb . Append ( CODE_STRING ) ; foreach ( KeyValuePair < string , List < string > > kvp in dict ) { sb . Append ( kvp . Key ) ; sb . Append ( CODE_STRING ) ; sb . AppendLine ( String . Join ( CODE_STRING , kvp . Value . ToArray ( ) ) ) ; } sb . Append ( CODE_STRING ) ; <EOF>
var offers = ov . Offers . Where ( o = > o . OfferType == composedOffer ) . Concat ( ov . Offers . Where ( o = > o . OfferType == simpleOffer ) ) . Concat ( ov . ComposedOfferList . Offers ) . Concat ( ov . SimpleOfferList . Offers ) . GroupBy ( offer = > offer . Product ) . Select ( group = > group . First ( ) ) . ToList ( ) ; var products = offers . Select ( offer = > offer . Product ) . ToList ( ) ; <EOF>
[ HttpGet ] public ActionResult GetOldEntries ( ) { var data = db . Entries . Where ( e = > e . Date . Month != DateTime . Now . Month ) ; return Json ( data , JsonRequestBehavior . AllowGet ) ; } <EOF>
using System ; using System . Diagnostics ; namespace Lynx . Dumper { public class Dampler { public void fdksfjh ( ) { var url = CODE_STRING ; var p = new Process ( ) ; p . StartInfo = new ProcessStartInfo ( CODE_STRING , CODE_STRING + url ) { WorkingDirectory = CODE_STRING , UseShellExecute = false , RedirectStandardOutput = true , RedirectStandardError = true , WindowStyle = ProcessWindowStyle . Hidden , CreateNoWindow = true } ; p . Start ( ) ; p . WaitForExit ( ) ; var text = p . StandardOutput . ReadToEnd ( ) ; Console . WriteLine ( text ) ; } } } <EOF>
var fileAcontents = File . ReadAllLines ( fileA ) ; var fileBcontents = File . ReadAllLines ( fileB ) ; HashSet < string > hashSet = new HashSet < string > ( fileAcontents ) ; foreach ( string i in fileBList ) { if ( hashSet . Contains ( i ) ) { } } <EOF>
ConfigurationManager . ConnectionStrings [ CODE_STRING ] . ConnectionString . Replace ( CODE_STRING , DateTime . Today . ToString ( CODE_STRING ) ) <EOF>
public class FakeUserRepository : IUserRepository { public IQueryable < SelectListItem > GetRecords ( int userid ) { return ( from a in fake_table select new SelectListItem { Value = a . ID . ToString ( ) , Text = a . Name } ) . AsQueryable < SelectListItem > ; } } <EOF>
protected void ASPxGridView2_CustomColumnDisplayText ( object sender , DevExpress . Web . ASPxGridViewColumnDisplayTextEventArgs e ) { if ( e . Column . FieldName != CODE_STRING ) return ; e . DisplayText = WebApp . Helpers . CodebooksHelper . GetItemData ( CODE_INTEGER ) . First ( item = > item . ItemID == ( int ) e . Value ) . Title ; } settings . CustomColumnDisplayText += ( sender , e ) = > { if ( e . Column . FieldName != CODE_STRING ) return ; e . DisplayText = WebApp . Helpers . CodebooksHelper . GetItemData ( CODE_INTEGER ) . First ( item = > item . ItemID == ( int ) e . Value ) . Title ; } <EOF>
class ListBoxItem { public string Name { get ; private set ; } public string Email { get ; private set : } public ListBoxItem ( string name , string email ) { Name = name ; Email = email ; } public override string ToString ( ) { return string . Format ( CODE_STRING , Name , Email ) ; } } ( somewhere you have a List < ListBoxItem > and do something like listBox1 . Items . AddRange ( itemList ) ) private void listBox1_DoubleClick ( object sender , EventArgs e ) { ListBoxItem item = ( ListBoxItem ) listBox1 . SelectedItem ; } <EOF>
XDocument . Parse <EOF>
String value = MBRHISTDETLDt . Rows [ r ] . ItemArray [ CODE_INTEGER ] . ToString ( ) ; value = Regex . Replace ( value . TrimStart ( CODE_CHAR ) , CODE_STRING , CODE_STRING ) ; dataGridView1 . Rows [ r ] . Cells [ CODE_INTEGER ] . Value = value ; <EOF>
public class Item { [ ScriptIgnore ] public Item ParentItem { get ; set ; } } <EOF>
static System . Windows . Threading . DispatcherTimer myTimer = new System . Windows . Threading . DispatcherTimer ( ) ; public void DoInquiry ( ) { //////////////////////// myTimer . Interval = = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; myTimer . Tick += new EventHandler ( TimerEventProcessor ) ; myTimer . Start ( ) ; } private static void TimerEventProcessor ( Object myObject , EventArgs myEventArgs ) { ShowMessage ( CODE_STRING ) ; } protected void ShowMessage ( string Message ) { System . Windows . MessageBox . Show ( Message ) ; } <EOF>
public class Person { private String _personName ; public String PersonName { get { return _personName ; } set { _personName = value ; } } public String SayHello ( String toName ) { return String . Format ( CODE_STRING , toName , PersonName ) ; } } <EOF>
protected override bool ShowWithoutActivation { get { return true ; } } <EOF>
Process process = new Process ( ) ; process . StartInfo . UseShellExecute = false ; process . StartInfo . RedirectStandardOutput = true ; process . StartInfo . FileName = CODE_STRING ; process . StartInfo . Arguments = string . Format ( CODE_STRING , newChangelist ) ; process . Start ( ) ; process . WaitForExit ( ) ; <EOF>
public string TextInABox ( By by ) { string valueInBox = string . Empty ; for ( int second = CODE_INTEGER ; ; second ++ ) { if ( second >= CODE_INTEGER ) Assert . Fail ( CODE_STRING ) ; try { valueInBox = driver . FindElement ( by ) . value ; if ( string . IsNullOrEmpty ( valueInBox ) break ; } catch ( WebDriverException ) { } Thread . Sleep ( CODE_INTEGER ) ; } return valueInBox ; } <EOF>
public override void OnApplyTemplate ( ) { base . OnApplyTemplate ( ) ; _elementName = Template . FindName ( CODE_STRING , this ) as TextBlock ; _elementText = Template . FindName ( CODE_STRING , this ) as TextBlock ; if ( _elementName != null ) _elementName . MouseLeftButtonDown += ( sender , args ) = > SelectControl ( ) ; if ( _elementText != null ) _elementText . MouseLeftButtonDown += ( sender , args ) = > SelectControl ( ) ; } <EOF>
abstract class A { public virtual string Print ( ) { } public static string DoPrint ( A a ) { a . Print ( ) ; } } class A1 : A { public override string Print ( ) { } } class A2 : A { public override string Print ( ) { } } class A3 : A { public override string Print ( ) { } } <EOF>
public static object GetDefault ( this Type t ) { return t . IsValueType ? Activator . CreateInstance ( t ) : null ; } public static T GetDefault < T > ( ) { var t = typeof ( T ) ; return ( T ) GetDefault ( t ) ; } public static bool IsDefault < T > ( T other ) { T defaultValue = GetDefault < T > ( ) ; if ( other == null ) return defaultValue == null ; return other . Equals ( defaultValue ) ; } <EOF>
string [ ] lines = File . ReadAllLines ( CODE_STRING ) ; int count = CODE_INTEGER ; int line = CODE_INTEGER ; for ( ; line < lines . Length ; line ++ ) { count += lines [ line ] . Length ; if ( count >= CODE_INTEGER ) { Console . WriteLine ( CODE_STRING , line - CODE_INTEGER ) ; Console . WriteLine ( CODE_STRING , line - CODE_INTEGER , lines [ line - CODE_INTEGER ] ) ; break ; } } <EOF>
[ DllImport ( CODE_STRING , CallingConvention = CallingConvention . Cdecl ) ] public static extern int simxGetObjects ( int clientID , int objectType , out int objectCount , out IntPtr objectHandles , int operationMode ) ; int objectCount ; IntPtr objectHandles ; int result = simxGetObjects ( clientID , objectType , out objectCount , out objectHandles , operationMode ) ; if ( result == CODE_INTEGER && objectHandles != IntPtr . Zero ) { for ( int index = CODE_INTEGER ; index < objectCount ; index ++ ) { IntPtr handle = ( IntPtr ) ( ( int ) objectHandles + index * CODE_INTEGER ) ; } } <EOF>
double d = CODE_REAL ; var invariantString = Convert . ToString ( d , CultureInfo . InvariantCulture ) ; var d2 = Convert . ToDouble ( invariantString , CultureInfo . InvariantCulture ) ; <EOF>
var tabControl = e . Source as TabControl ; var oldTabItem = e . RemovedItems [ CODE_INTEGER ] as TabItem ; var oldIndex = tabControl . Items . IndexOf ( oldTabItem ) ; <EOF>
CultureInfo . CreateSpecificCulture ( CODE_STRING ) ; <EOF>
var sReg ; @foreach ( var userid in db . Query ( selectUser ) ) { sReg = userid . userdisplayname ; var sAns = userid . usersign ; var smail = userid . usermail ; } <EOF>
Drawing . Rectangle bounds = Forms . Screen . GetBounds ( System . Drawing . Point . Empty ) ; Drawing . Bitmap bitmap = new Drawing . Bitmap ( bounds . Width , bounds . Height ) ; using ( Drawing . Graphics gr = Drawing . Graphics . FromImage ( bitmap ) ) { gr . CopyFromScreen ( Drawing . Point . Empty , Drawing . Point . Empty , bounds . Size ) ; } <EOF>
btnLink . OnClientClick = CODE_STRING ; <EOF>
protected void Page_Load ( object sender , EventArgs e ) { TextBox1 . Attributes . Add ( CODE_STRING , CODE_STRING ) ; } <EOF>
public string GenerateNumber ( string input ) { if ( string . IsNullOrWhiteSpace ( input ) ) { throw new ArgumentNullException ( CODE_STRING ) ; } Random rand = new Random ( ) ; StringBuilder builder = new StringBuilder ( ) ; for ( int i = CODE_INTEGER ; i < input . Length ; i ++ ) { if ( input [ i ] == CODE_CHAR ) { builder . Append ( CODE_STRING ) ; } else { builder . Append ( rand . Next ( CODE_INTEGER , CODE_INTEGER ) . ToString ( ) ) ; } } return builder . ToString ( ) ; } <EOF>
WebClient . DownloadData ( ) <EOF>
var client = Podio . API . Client . ConnectAsUser ( client_id , client_secret , username , password ) ; int AppId = CODE_INTEGER ; string requestUrl = Podio . API . Constants . PODIOAPI_BASEURL + CODE_STRING + AppId + CODE_STRING ; Podio . API . Utils . PodioRestHelper . PodioResponse response = Podio . API . Utils . PodioRestHelper . Request ( requestUrl , client . AuthInfo . access_token ) ; <EOF>
[ XmlElement ( CODE_STRING ) ] public string Password { get ; set ; } [ XmlElement ( CODE_STRING ) ] public string PasswordConfirmation { get { return Password ; } set ; } <EOF>
Bitmap canvas = new Bitmap ( CODE_INTEGER , CODE_INTEGER ) ; Graphics graph = Graphics . FromImage ( canvas ) ; <EOF>
private void lbz_SelectionChanged ( object sender , SelectionChangedEventArgs e ) { if ( lbz . SelectedItem != null ) { if ( File . Exist ( lbz . SelectedItem . ToString ( ) ) ) { tb1 . Text = File . ReadAllText ( lbz . SelectedItem . ToString ( ) ) ; } else { tb1 . Text = CODE_STRING ; } } else { tb1 . Text = CODE_STRING ; } } <EOF>
GridImport . DataSource = dtTemSec . AsEnumerable ( ) . Where ( x = > x . Field < string > ( CODE_STRING ) != CODE_STRING ) . CopyToDataTable ( ) ; GridImport . DataBind ( ) ; <EOF>
string strType = null ; <EOF>
dotnetfx35 . exe / q / norestart <EOF>
public ActionResult ProfessorStatus ( string schoolType ) { Expresison < Func < Professor , bool > > filter ; switch ( schoolType ) { case CODE_STRING : filter = a = > a . Engineering . Value == true ; break ; default : throw new Exception ( CODE_STRING + schoolType ) ; } var activeProfessors = ( from p in prof . ProfessorTable . Where ( filter ) group p by p . ProfessorID into g select g . Key ) . ToList ( ) ; return View ( activeProfessors ) ; } <EOF>
{ CODE_INTEGER } _ { CODE_INTEGER } ; internal { CODE_INTEGER } { CODE_INTEGER } { { get { { return _ { CODE_INTEGER } ; } } set { { _ { CODE_INTEGER } = value ; UpdateRowValue ( myObj , CODE_STRING , value ) ; } } } } internal void SetNull { CODE_INTEGER } ( ) { { UpdateRowValue ( myObj , CODE_STRING , DBNull . Value ) ; } } <EOF>
private void treeView1_NodeMouseClick ( object sender , TreeNodeMouseClickEventArgs e ) { Console . WriteLine ( e . Node . Text ) ; } <EOF>
contentCorrected = contentCorrected . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
using ZMQ ; namespace TestConsole { class Program { static void Main ( string [ ] args ) { using ( Context context = new Context ( ) ) using ( Socket client = context . Socket ( SocketType . PUSH ) ) { client . Connect ( CODE_STRING ) ; string request = CODE_STRING ; for ( int requestNum = CODE_INTEGER ; requestNum < CODE_INTEGER ; requestNum ++ ) { Console . WriteLine ( CODE_STRING , requestNum ) ; client . Send ( request , Encoding . Unicode ) ; string reply = client . Recv ( Encoding . Unicode ) ; Console . WriteLine ( CODE_STRING , requestNum , reply ) ; } } } } } <EOF>
public static PdfPCell MakeHeader ( string text , iTextSharp . text . Font Htitle ) { PdfPCell HeadCell = new PdfPCell ( new Paragraph ( text , Htitle ) ) ; HeadCell . BackgroundColor = iTextSharp . text . Color . LIGHT_GRAY ; return HeadCell ; } PdfPCell HeadCell0 = MakeHeader ( CODE_STRING , Htitle ) ; <EOF>
public static void ConfigureMappings ( ) { Mapper . CreateMap < TreeNodeDto , Taxonomy > ( ) . AfterMap ( ( s , d ) = > { d . Children = Mapper . Map < TreeNodeDto [ ] , TreeNode [ ] > ( client . GetTreeChildren ( s ) ) . ToList ( ) ; foreach ( var child in d . Children ) { child . Parent = d ; } } <EOF>
var sb = new StringBuilder ( ) ; var settings = new XmlWriterSettings { OmitXmlDeclaration = true , Indent = true , IndentChars = CODE_STRING , } ; using ( var writer = XmlWriter . Create ( sb , settings ) ) { writer . WriteStartElement ( CODE_STRING ) ; writer . WriteAttributeString ( CODE_STRING , CODE_STRING ) ; writer . Flush ( ) ; sb . Append ( " \ r " ) ; writer . WriteAttributeString ( CODE_STRING , CODE_STRING ) ; writer . Flush ( ) ; sb . Append ( " \ r " ) ; writer . WriteAttributeString ( CODE_STRING , CODE_STRING ) ; writer . WriteEndElement ( ) ; } Console . WriteLine ( sb . ToString ( ) ) ; <EOF>
List < Bar > bar = new List < Bar > ( ) { new Bar ( ) { Id = CODE_INTEGER , Name = CODE_STRING } , new Bar ( ) { Id = CODE_INTEGER , Name = CODE_STRING } , new Bar ( ) { Id = CODE_INTEGER , Name = CODE_STRING } } ; string name = bar . Where ( x = > x . Id == CODE_INTEGER ) . Select ( x = > x . Name ) . FirstOrDefault ( ) ; <EOF>
Int32 h = picture . Height ; Int32 w = picture . Width ; if ( e . X < w && e . Y < h ) { Int32 R = picture . GetPixel ( e . X , e . Y ) . R ; Int32 G = picture . GetPixel ( e . X , e . Y ) . G ; Int32 B = picture . GetPixel ( e . X , e . Y ) . B ; lbPixelValue . Text = CODE_STRING + R + CODE_STRING + G + CODE_STRING + B ; lbCoordinates . Text = String . Format ( CODE_STRING , e . X , e . Y ) ; } else { lbPixelValue . Text = CODE_STRING ; lbCoordinates . Text = CODE_STRING ; } <EOF>
using ( SqlConnection cnn = new SqlConnection ( . . . . here the connection string . . . . ) ) using ( SqlCommand cmd = new SqlCommand ( CODE_STRING , cnn ) ) { cnn . Open ( ) ; cmd . CommandType = CommandType . StoredProcedure ; string result = cmd . ExecuteScalar ( ) . ToString ( ) ; } <EOF>
Login UserLogin = new Login ( ) ; UserLogin . Username = textBox1 . Text ; UserLogin . Password = textBox2 . Text ; if ( objServiceClientobjService . UserLogin ( UserLogin ) ) { Response . Redirect ( CODE_STRING ) ; } else { } <EOF>
EmailMessage message = new EmailMessage ( ) ; Recipient myrecipient = new Recipient ( CODE_STRING , CODE_STRING ) ; message . To . Add ( myrecipient ) ; message . To . Add ( myrecipient2 ) ; message . To . Add ( myrecipient3 ) ; message . Cc . Add ( myrecipient4 ) ; message . Cc . Add ( myrecipient5 ) ; message . Bcc . Add ( myrecipient6 ) ; message . Bcc . Add ( myrecipient7 ) ; message . Subject = CODE_STRING ; message . BodyText = CODE_STRING ; message . Attachments . Add ( CODE_STRING ) ; message . Send ( CODE_STRING ) ; MessagingApplication . Synchronize ( CODE_STRING ) ; SetForegroundWindow ( this . Handle ) ; <EOF>
static IEnumerable < string > GetSubdirectoriesContainingOnlyFiles ( string path ) { return from subdirectory in Directory . GetDirectories ( path , CODE_STRING , SearchOption . AllDirectories ) where Directory . GetDirectories ( subdirectory ) . Length == CODE_INTEGER select subdirectory ; } <EOF>
SQLiteConnection dbConnection = new SQLiteConnection ( CODE_STRING , true ) ; <EOF>
BoundField boundfield = new BoundField ( ) ; boundfield . DataField = CODE_STRING ; boundfield . HeaderText = CODE_STRING ; boundfield . SortExpression = CODE_STRING ; GridView1 . Columns . Add ( boundfield ) ; <EOF>
var distinctOnes = a . Distinct ( ) ; <EOF>
private void chechTreeViewItems ( List < int > remID ) { foreach ( System . Windows . Forms . TreeNode item in this . tvRemark . Nodes [ CODE_INTEGER ] . Nodes ) { for ( int i = CODE_INTEGER ; i < remID . Count ; i ++ ) { if ( Convert . ToInt16 ( item . Tag ) == remID [ i ] ) { item . Checked = true ; } } } } <EOF>
if ( doc . SelectSingleNode ( CODE_STRING + monthCalander1 . SelectionStart . ToString ( ) + CODE_STRING ) != null ) { } <EOF>
ServiceRequest . PropertyMetada . CreatedDate . DefaultValue <EOF>
TabControl . ItemContainerStyle <EOF>
Session [ CODE_STRING ] = CODE_STRING ; Session [ CODE_STRING ] = calculateTextBox . Text ; Response . Redirect ( CODE_STRING ) ; <EOF>
private void Application_Activated ( object sender , ActivatedEventArgs e ) { if ( e . IsApplicationInstancePreserved == false ) else } <EOF>
var negList = rms . NegativeResponse . Where ( d = > d . RLMSTimeStamp != null && d . RLMSTimeStamp > new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) . toList ( ) ; var posList = rms . PositiveResponse . Where ( d = > d . RLMSTimeStamp != null && d . RLMSTimeStamp > new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) . toList ( ) ; var item = ( from pos in posList join neg in negList on pos . RLMSRecruitId equals neg . RLMSRecruitId orderby pos . RLMSTimestamp descending select pos ) . FirstOrDefault ( ) ; <EOF>
ViewData . Model = _selectedJobDb . Jobs . Where ( j = > j . Request . TargetName == TargetName ) . ToList ( ) ; <EOF>
System . CodeDom <EOF>
activeWindow . ActivePane . View . Type = WdViewType . wdPrintView ; activeWindow . ActivePane . View . SeekView = WdSeekView . wdSeekPrimaryHeader ; activeWindow . ActivePane . Selection . WholeStory ( ) ; var text = activeWindow . ActivePane . Selection . Text ; if ( ! string . IsNullOrEmpty ( text ) && text . Equals ( CODE_STRING ) ) { activeWindow . ActivePane . View . SeekView = WdSeekView . wdSeekMainDocument ; continue ; } Range headerRange = header . Range ; <EOF>
System . Reflection . PropertyInfo pi = item . GetType ( ) . GetProperty ( CODE_STRING ) ; String name = ( String ) ( pi . GetValue ( item , null ) ) ; <EOF>
var field = browser . TextField ( Find . ByName ( CODE_STRING ) ) ; if ( field . Exists ) field . TypeText ( privateCurrentPassword ) ; <EOF>
Thread t = new Thread ( ( ) = > saveFile ( args ) ) ; t . Start ( ) ; <EOF>
Environment . GetCommandLineArgs <EOF>
using ( StreamReader MyResponseStream = new StreamReader ( hwresponse . GetResponseStream ( ) ) ) { using ( StreamWriter _FileStream = new StreamWriter ( CODE_STRING , true ) ) { _FileStream . Write ( MyResponseStream . ReadToEnd ( ) ) ; } } <EOF>
public string Path { get ; set ; } private void UploadButton_Click ( object sender , EventArgs e ) { var o = new OpenFileDialog ( ) ; o . Multiselect = true ; if ( o . ShowDialog ( ) == System . Windows . Forms . DialogResult . OK ) { o . FileNames . ToList ( ) . ForEach ( file = > { System . IO . File . Copy ( file , System . IO . Path . Combine ( this . Path , System . IO . Path . GetFileName ( file ) ) ) ; } ) ; } this . LoadFiles ( ) ; } private void Form_Load ( object sender , EventArgs e ) { this . LoadFiles ( ) ; } private void LoadFiles ( ) { this . Path = CODE_STRING ; var files = System . IO . Directory . GetFiles ( this . Path ) ; this . dataGridView1 . DataSource = files . Select ( file = > new { Name = System . IO . Path . GetFileName ( file ) , Path = file } ) . ToList ( ) ; } <EOF>
. ToString ( ) <EOF>
if ( actionDescriptor . ControllerDescriptor . ControllerType == typeof ( HomeController ) && ( actionDescriptor . ActionName . Equals ( CODE_STRING ) ) && controllerContext . HttpContext . Request . HttpMethod == CODE_STRING ) <EOF>
string filepath = CODE_STRING ; zip . AddItem ( filePath , Path . GetFileName ( filePath ) ) ; <EOF>
Foo max = list . MaxBy ( f = > f . value ) ; <EOF>
IsSynchronizedWithCurrentItem = CODE_STRING <EOF>
this . BindFilter ( x = > new PermitFilter ( x . Inject < ISomeDependency > ( ) , x . FromControllerAttribute < PermitAttribute > ( ) . GetValue ( attribute = > attribute . Permissions ) ) , FilterScope . Controller , CODE_INTEGER ) . WhenActionMethodHas < PermitAttribute > ( ) ; <EOF>
App . PictureList . Pictures . OrderBy ( x = > x . DateTaken ) as System . Collections . IList <EOF>
AccountAreaRegistration . cs <EOF>
interface IFoo { event EventHandler OnChanged ; } class MyClass : IFoo { public event EventHandler OnChanged ; private FireOnChanged ( ) { EventHandler handler = this . OnChanged ; if ( handler != null ) { handler ( this , EventArgs . Empty ) ; } } } <EOF>
a = a . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
SqlCommand command = new SqlCommand ( CODE_STRING ) ; command . Parameters . Add ( new SqlParameter ( CODE_STRING , yourbegin ) ) ; command . Parameters . Add ( new SqlParameter ( CODE_STRING , yourEnd ) ) ; . . . <EOF>
display : inline - block <EOF>
var Data = base . Entities . Member . First ( c = > c . Id == entity . Id ) ; if ( Data != null ) { Data = entity ; base . Entities . SaveChanges ( ) ; } <EOF>
private void PictureClicked ( object sender , EventArgs e ) { Control picture = sender as Control ; if ( picture == null ) return ; switch ( picture . Name ) { case CODE_STRING : break ; case CODE_STRING : break ; } } <EOF>
string srxPathOfCategory = CODE_STRING ; <EOF>
var articlePages = categoryPages . SelectMany ( x = > x . ChildPages ) ; <EOF>
UpdateModel ( child . parent , CODE_STRING , new [ ] { CODE_STRING , CODE_STRING , CODE_STRING } , collection . ToValueProvider ( ) ) ; <EOF>
public class TestClass { public static event OrderUpdateHandler UpdatedOrder ; public void UpdateData ( Order order ) { OnOrderUpdated ( args ) ; } public Order GetConfirmedOrder ( int id , TimeSpan waitToConfirm ) { var order = GetOrderFromDatabase ( ) ; if ( order . Status == OrderStatus . Pending ) { var eventHandle = new EventWaitHandle ( false , EventResetMode . AutoReset ) ; UpdatedOrderHandler waiter = ( s , e ) = > { if ( e . Order . Id == id ) { order = e . Order ; eventHandle . Set ( ) ; } } ; UpdatedOrder += waiter ; if ( ! eventHandle . WaitOne ( waitToConfirm ) ) { return order ; } OrderUpdated -= waiter ; } return order ; } } <EOF>
Request . Form [ CODE_STRING ] <EOF>
var dictionary = new Dictionary < object , object > ( ) ; var hashtable = new Hashtable ( dictionary ) ; <EOF>
private void DoSomething ( ) { #if DEBUG try { #endif #if DEBUG } catch { Debugger . Break ( ) ; throw ; } #endif } <EOF>
DELETE * FROM tblSignIns WHERE LastActivityTime < DATEADD ( CODE_STRING , - CODE_INTEGER , GETDATE ( ) ) ; <EOF>
var fileStream = File . Open ( file , FileMode . Append , FileAccess . Write , FileShare . Read ) ; var streamWriter = new StreamWriter ( fileStream ) ; streamWriter . AutoFlush = true ; <EOF>
if ( Dataset1 . Tables [ CODE_INTEGER ] . Columns [ CODE_INTEGER ] . ColumnName . ToLower ( ) . Contains ( CODE_STRING ) || Dataset1 . Tables [ CODE_INTEGER ] . Columns [ CODE_INTEGER ] . DataType . ToString ( ) == CODE_STRING ) { } <EOF>
bool IsEmptyObject = ( root . Elements ( ) . Nodes ( ) . Count ( ) > CODE_INTEGER ) ? true : false ; <EOF>
class Program { static void Main ( string [ ] args ) { int n = CODE_INTEGER ; float radius = CODE_REAL ; Vector3 vector = new Vector3 ( radius , CODE_INTEGER , CODE_INTEGER ) ; Vector3 center = new Vector3 ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; float angle = ( float ) Math . PI * CODE_INTEGER / ( float ) n ; Vector3 [ ] points = new Vector3 [ n ] ; Matrix rotation = Matrix . RotationZ ( angle ) ; for ( int i = CODE_INTEGER ; i < n ; i ++ ) { points [ i ] = vector + center ; vector . TransformNormal ( rotation ) ; } } } <EOF>
var connectionString = ConfigurationManager . ConnectionStrings [ CODE_STRING ] . ConnectionString ; using ( var cn = new SqlConnection ( connectionString ) ) using ( var cmd = cn . CreateCommand ( ) ) { cn . Open ( ) ; cmd . CommandText = CODE_STRING ; cmd . Parameters . AddWithValue ( CODE_STRING , CODE_INTEGER ) ; using ( var reader = cmd . ExecuteReader ( ) ) { if ( reader . Read ( ) ) { var filePath = reader . GetString ( CODE_INTEGER ) ; imageControl . ImageUrl = filePath ; } } } <EOF>
list = NET . createGeneric ( ' System . Collections . Generic . List ' , . . . { ' System . Int32 ' } , CODE_INTEGER ) ; list . Add ( CODE_INTEGER ) list . Add ( CODE_INTEGER ) for i = CODE_INTEGER : list . Count - CODE_INTEGER disp ( list . Item ( i ) ) end <EOF>
XDocument MyXDoc ; string [ ] CsvList = MyXDoc . Root . Elements ( CODE_STRING ) . Select ( row = > String . Join ( CODE_STRING , row . Elements ( CODE_STRING ) . Select ( val = > ( string ) val ) . ToArray ( ) ) ) . ToArray ( ) ; <EOF>
var xmlDict = XDocument . Load ( filename ) . Root . Element ( CODE_STRING ) ; var dict = xmlDict . Elements ( CODE_STRING ) . Zip ( xmlDict . Elements ( CODE_STRING ) , ( k , s ) = > new KeyValuePair < string , string > ( k . Value , s . Value ) ) . ToDictionary ( x = > x . Key , x = > x . Value ) ; <EOF>
System . Diagnostics . Process proc = new System . Diagnostics . Process ( ) ; proc . StartInfo . FileName = CODE_STRING ; proc . StartInfo . WorkingDirectory = CODE_STRING ; proc . Start ( ) ; <EOF>
List < Tuple < T1 , T2 , . . . > > <EOF>
System . Activator . CreateInstance System . Reflection . Assembly . LoadFrom <EOF>
file . CopyTo ( CODE_STRING ) ; <EOF>
line = myReader . ReadLine ( ) ; if ( line != null && line . IndexOf ( x , StringComparison . CurrentCultureIgnoreCase ) >= CODE_INTEGER ) Console . WriteLine ( line ) ; <EOF>
Object obj = - CODE_REAL ; String value = obj . ToString ( ) ; String type = obj . GetType ( ) . ToString ( ) ; if ( type . Equals ( CODE_STRING ) && value . Contains ( CODE_STRING ) ) { double doubleValue = ( double ) obj ; value = doubleValue . ToString ( CODE_STRING ) ; } Console . WriteLine ( value ) ; <EOF>
private void MaskedTextBox1_TextChanged ( object sender , EventArgs e ) { MaskedTextBox1 . PromptChar = ( MaskedTextBox1 . MaskCompleted ) ? CODE_CHAR : CODE_CHAR ; } <EOF>
private void SetUpThreadPool ( int numThreadDesired ) { int currentWorkerThreads ; int currentCompletionPortThreads ; ThreadPool . GetMinThreads ( out currentWorkerThreads , out currentCompletionPortThreads ) ; const int MAXIMUM_VALUE_FOR_SET_MIN_THREAD_PARAM = CODE_INTEGER ; int numMinThreadToSet = Math . Min ( numThreadDesired , MAXIMUM_VALUE_FOR_SET_MIN_THREAD_PARAM ) ; if ( currentWorkerThreads < numMinThreadToSet ) ThreadPool . SetMinThreads ( numThreadDesired , currentCompletionPortThreads ) ; } public List < int > ProcessList ( List < int > itemsToProcess ) { SetUpThreadPool ( documentNumberList . Count ) ; . . . } <EOF>
public class Employee : System . ComponentModel . INotifyPropertyChanged <EOF>
dynamic data = Newtonsoft . Json . Linq . JObject . Parse ( content ) ; var value = data . credits . cast as Newtonsoft . Json . Linq . JArray ; var actors = value . Select ( x = > x . ToObject < Actor > ( ) ) ; <EOF>
if ( ! Dispatcher . CheckAccess ( ) ) { Dispatcher . BeginInvoke ( DispatcherPriority . Normal , ( MyDelegate ) delegate { } ) ; } else { } <EOF>
private vtkCamera camera ; camera . SetPosition ( DoubleArrayToIntPtr ( defaultCamPos ) ) ; camera . SetViewUp ( DoubleArrayToIntPtr ( defaultCamViewup ) ) ; camera . SetFocalPoint ( DoubleArrayToIntPtr ( defaultCamFocus ) ) ; <EOF>
static Random rnd = new Random ( ) ; public static int GenerateRandomNumber ( ) { int from , to ; while ( true ) { bool a = int . TryParse ( Console . ReadLine ( ) , out from ) ; bool b = int . TryParse ( Console . ReadLine ( ) , out to ) ; if ( a && b && from < to ) break ; else Console . WriteLine ( CODE_STRING ) ; } return rnd . Next ( from , to + CODE_INTEGER ) ; } <EOF>
ws . Cells [ j , CODE_INTEGER ] = CODE_STRING ; ws . Cells [ j , CODE_INTEGER ] = CODE_STRING ; ws . Cells [ j , CODE_INTEGER ] = CODE_STRING ; . . . <EOF>
var delegates = new Dictionary < string , Func < MyClass , DataTable > > ( ) { { CODE_STRING , x = > x . Method1 ( ) } } ; if ( delegates . ContainsKey ( key ) ) delegates [ key ] ( this ) ; <EOF>
Console . SetCursorPosition ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
onkeypress = ' if ( event . keyCode = CODE_INTEGER ) return false ; ' <EOF>
files | * . txt ; * . text <EOF>
Document wordDocument ; Microsoft . Office . Interop . Word . Application word = new Microsoft . Office . Interop . Word . Application ( ) ; wordDocument = word . Documents . Open ( saveFileDialog . FileName ) ; wordDocument . TablesOfContents [ CODE_INTEGER ] . Update ( ) ; wordDocument . Save ( ) ; word . Quit ( ) ; <EOF>
request . Content . Headers . ContentType = MediaTypeHeaderValue . Parse ( CODE_STRING ) ; <EOF>
public class UserMap : ClassMap < User > { public UserMap ( ) { Id ( x = > x . UserId ) . GeneratedBy . Identity ( ) ; Map ( x = > x . UserName ) . Length ( DataConstants . UserNameLength ) . Unique ( ) . Not . Nullable ( ) ; Map ( x = > x . EmailAddress ) . Length ( DataConstants . EmailAddressLength ) . Unique ( ) . Not . Nullable ( ) ; Map ( x = > x . DateJoined ) . Not . Nullable ( ) ; Map ( x = > x . Password ) . Length ( DataConstants . PasswordHashLength ) . Not . Nullable ( ) ; HasManyToMany ( x = > x . UserRoles ) . Cascade . AllDeleteOrphan ( ) . AsBag ( ) . Table ( CODE_STRING ) ; HasManyToMany ( x = > x . SubscribedFeeds ) . Cascade . DeleteOrphan ( ) . AsBag ( ) . Table ( CODE_STRING ) ; HasManyToMany ( x = > x . OwnedFeeds ) . Cascade . All ( ) . AsBag ( ) . Table ( CODE_STRING ) ; HasMany ( x = > x . Reads ) . Cascade . AllDeleteOrphan ( ) . Fetch . Join ( ) . Inverse ( ) . KeyColumn ( CODE_STRING ) ; } } <EOF>
public abstract class MyViewStart : System . Web . Mvc . ViewStartPage { public My . Helpers . ThemeHelper Themes { get ; private set ; } public override void ExecutePageHierarchy ( ) { this . Themes = new Helpers . ThemeHelper ( this . ViewContext ) ; base . ExecutePageHierarchy ( ) ; } } <EOF>
for ( int i = CODE_INTEGER ; i < listView1 . Items . Count ; i ++ ) { if ( listView1 . Items [ i ] . Selected ) { string var1 = listView1 . Items [ i ] . ToString ( ) ; string var2 = var1 . Substring ( CODE_INTEGER , CODE_INTEGER ) ; . . . listView1 . Items [ i ] . Remove ( ) ; i -- ; } } <EOF>
using ( new TransactionScope ( TransactionScopeOption . Required , new TransactionOptions { IsolationLevel = IsolationLevel . ReadUncommitted } ) ) { using ( var db = new MyDbContext ( ) ) { } } <EOF>
IsWindowEnabled ( ) <EOF>
protected void dlCategory_ItemDataBound ( object sender , DataListItemEventArgs e ) { Label Label1 = e . Item . FindControl ( CODE_STRING ) as Label ; if ( LblCat != null ) { string id = ( ( System . Data . DataRowView ) e . Item . DataItem ) . Row [ CODE_STRING ] . ToString ( ) ; if ( Request . QueryString [ CODE_STRING ] == id ) { Label1 . ForeColor = System . Drawing . Color . Red ; } } } <EOF>
var enversCfg = new FluentConfiguration ( ) ; enversCfg . SetRevisionEntity < DefaultRevisionEntity > ( r = > r . Id , r = > r . RevisionDate , yourRevisionListener > ( ) ; <EOF>
var idx = yourString . IndexOf ( CODE_STRING ) ; if ( idx != - CODE_INTEGER ) { idx = yourString . IndexOf ( CODE_CHAR , idx ) ; if ( idx != - CODE_INTEGER ) { } } <EOF>
foreach ( var category in userCategories ) { CategoryDropDownList . Items . Add ( new ListItem ( Server . HtmlEncode ( category . Category ) , category . ID . ToString ( ) ) ) ; } <EOF>
string filmID = comboBox1 . SelectedValue . ToString ( ) ; Scenario newScenario = new Scenario ( ) ; foreach ( Scenario scenario in myDatabase . Scenario . Where ( scn = > scn . filmID . ToString ( ) . Equals ( filmId ) ) { scenario . SceneWriter . Add ( newScenewriter ) ; before } myDatabase . SaveChanges ( ) ; <EOF>
Microsoft . Office . Interop . Excel . Application oExcelApp ; oExcelApp = System . Runtime . InteropServices . Marshal . GetActiveObject ( CODE_STRING ) ; foreach ( Microsoft . Office . Interop . Excel . Workbook WB in oExcelApp . Workbooks ) { MessageBox . Show ( WB . FullName ) ; } oExcelApp = null ; <EOF>
System . Windows . Form <EOF>
var keysWithMatchingValues = dic . Where ( p = > p . Value == CODE_STRING ) . Select ( p = > p . Key ) ; foreach ( var key in keysWithMatchingValues ) Console . WriteLine ( key ) ; <EOF>
public Task < double [ ] > ConvertToDouble < T > ( T [ ] input ) { return new Task < double [ ] > ( CovertToDoubleArray ( ( T [ ] ) item ) , intArray ) ; } <EOF>
var query = ( from a in db . Record_HoldData join b in db . FlavorTable on a . FlavorId equals b . Id where a . HoldStatus == CODE_STRING select new { a . DateOpened , a . Field1 , a . Field2 , . . . b . FlavorName } ) . ToList ( ) ; <EOF>
Queue < XmlNode > <EOF>
void navigatePage_onSelected ( object sender , SelectedItemChangedEventArgs args ) { _menulink menuitem = ( _menulink ) args . SelectedItem ; MasterDetailPage mstr = ( MasterDetailPage ) ( Application . Current . MainPage ) ; if ( menuitem . _link == CODE_STRING ) { mstr . Detail = new NavigationPage ( new AboutFTW ( ) ) ; } else if ( menuitem . _link == CODE_STRING ) { mstr . Detail = new NavigationPage ( new Entertainment ( ) ) ; } else if ( menuitem . _link == CODE_STRING ) { mstr . Detail = new NavigationPage ( new FTWHome ( ) ) ; } mstr . IsPresented = false ; } <EOF>
protected void MyDataSource_Selected ( object sender , ObjectDataSourceStatusEventArgs e ) { var count = e . ReturnValue as int ? ; if ( count . HasValue ) litResults . Text = string . Format ( CODE_STRING , count ) ; } <EOF>
try { if ( this . Connection . State == ConnectionState . Closed ) this . Connection . Open ( ) ; List < Bet > bets = new List < Bet > ( ) ; using ( MySqlDataReader dr = cmd . ExecuteReader ( CommandBehavior . CloseConnection ) ) { while ( dr . Read ( ) ) { Bet myBet = new Bet ( ) ; myBet = FillBetfromRow ( dr ) ; bets . Add ( myBet ) ; } } return bets ; } <EOF>
public class DoubleBufferedTableLayoutPanel : TableLayoutPanel { public DoubleBufferedTableLayoutPanel ( ) { DoubleBuffered = true ; } } <EOF>
class MyAccount { public string Name { get ; set ; } public int Priority { get ; set ; } } <EOF>
private async Task < StorageFile > SaveUriToFile ( string uri ) { var picker = new FileSavePicker ( ) ; picker . FileTypeChoices . Add ( CODE_STRING , new List < string > { CODE_STRING } ) ; picker . DefaultFileExtension = CODE_STRING ; var file = await picker . PickSaveFileAsync ( ) ; using ( var fileStream = await file . OpenStreamForWriteAsync ( ) ) { var client = new HttpClient ( ) ; var httpStream = await client . GetStreamAsync ( uri ) ; await httpStream . CopyToAsync ( fileStream ) ; fileStream . Dispose ( ) ; } return file ; } <EOF>
Dictionary < String , Country > dict = new Dictionary < string , Country > ( ) ; dict . Add ( CODE_STRING , Country . Canada ) ; dict . Add ( CODE_STRING , Country . US ) ; dict . Add ( CODE_STRING , Country . Canada ) ; dict . Add ( CODE_STRING , Country . US ) ; dict . Add ( CODE_STRING , Country . Canada ) ; Lookup < Country , String > lookup = ( Lookup < Country , String > ) dict . ToLookup ( pair = > pair . Value , pair = > pair . Key ) ; foreach ( var countryGroup in lookup ) { item = new ListViewItem ( countryGroup . Key . ToString ( ) ) ; item . SubItems . Add ( string . Format ( CODE_STRING , string . Join ( CODE_STRING , countryGroup . Select ( s = > CODE_STRING + s ) ) ) ) ; lv . Items . Add ( item ) ; item = null ; } <EOF>
public static class Program { public static void Main ( ) { var container = ConfigureContainer ( ) ; var application = container . Resolve < ApplicationLogic > ( ) ; application . Run ( ) ; } } public class ApplicationLogic { private readonly ILog log ; public ApplicationLogic ( ILog log ) { this . log = log ; } public void Run ( ) { this . log . Write ( CODE_STRING ) ; } } <EOF>
ddlFacultyMember . Items . Insert ( CODE_INTEGER , new ListItem ( CODE_STRING , CODE_STRING ) ) ; <EOF>
EXEC [ SSISDB ] . [ catalog ] . [ set_execution_parameter_value ] @execution_id , -- execution_id from catalog . create_execution @object_type = CODE_INTEGER , @parameter_name = N ' SYNCHRONIZED ' , @parameter_value = CODE_INTEGER ; <EOF>
Task sendEmail = new Task ( ( ) = > { MailMessage mail = new MailMessage ( ) ; mail . From = new MailAddress ( CODE_STRING ) ; mail . To . Add ( CODE_STRING ) ; mail . Subject = CODE_STRING ; mail . Body = CODE_STRING ; SmtpClient smtp = new SmtpClient ( ) ; smtp . Port = CODE_INTEGER ; smtp . UseDefaultCredentials = true ; smtp . Host = CODE_STRING ; smtp . EnableSsl = true ; smtp . Credentials = new NetworkCredential ( CODE_STRING , CODE_STRING ) ; smtp . Send ( mail ) ; } ) ; sendEmail . Start ( ) ; <EOF>
autoScrollBinding . Source = this ; <EOF>
modelBuilder . Entity < Lookup > ( ) . Map < Catalog > ( m = > m . Requires ( CODE_STRING ) . HasValue ( true ) ) ; modelBuilder . Entity < Lookup > ( ) . Map < CatalogType > ( m = > m . Requires ( CODE_STRING ) . HasValue ( false ) ) ; context . Lookups . AddOrUpdate ( p = > new { p . Name , p . IsCatalog } , new CatalogType { Name = CODE_STRING , IsActive = true , Order = CODE_INTEGER , } , new CatalogType { Name = CODE_STRING , IsActive = true , Order = CODE_INTEGER , } ) ; base . OnModelCreating ( modelBuilder ) ; <EOF>
var res = ( from positions in context . Lloyds_ETAs join vessels in context . Lloyds_Vessels on positions . ImoNumber equals vessels . imo_no select new PositionData { ImoNo = positions . ImoNumber , PositionCordinates = positions . AIS_Latest_Position , CompassOverGround = positions . Compass_over_Ground_Heading , VesselId = positions . Vessel_ID , Equipment = vessels . vessel_type , Updated = positions . Last_Place_Location } ) . GroupBy ( x = > x . ImoNo ) . Select ( g = > g . OrderByDescending ( pd = > pd . Updated ) . First ( ) ) ; <EOF>
System . Data . Common . DbConnectionStringBuilder builder = new System . Data . Common . DbConnectionStringBuilder ( ) ; builder . ConnectionString = CODE_STRING ; foreach ( string key in builder . Keys ) { Response . Write ( String . Format ( CODE_STRING , key , builder [ key ] ) ) ; } <EOF>
ThemeManager . ToLightTheme ( ) ; <EOF>
Environment . Is64BitProcess <EOF>
int [ , ] layout = new int [ CODE_INTEGER , CODE_INTEGER ] ; var dict = ( Dictionary < string , object > ) Json . Deserialize ( jsonString ) ; var list = ( List < object > ) dict [ CODE_STRING ] ; for ( int row = CODE_INTEGER ; row < CODE_INTEGER ; row ++ ) { var items = ( List < object > ) list [ row ] ; for ( int col = CODE_INTEGER ; col < CODE_INTEGER ; col ++ ) { layout [ row , col ] = Convert . ToInt32 ( items [ col ] ) ; } } <EOF>
[ localmax , maxind ] = findpeaks ( x ) ; inversex = CODE_REAL * max ( x ) - x ; [ localmin , minind ] = findpeaks ( inversex ) ; % % <EOF>
Regex r = new Regex ( CODE_STRING ) ; <EOF>
var query = from p in Process . GetProcesses ( ) orderby p . ProcessName select p ; List < XElement > content = new List < XElement > ( ) ; foreach ( var item in query ) { content . Add ( new XElement ( CODE_STRING , new XAttribute ( CODE_STRING , item . ProcessName ) , new XAttribute ( CODE_STRING , item . Id ) ) ) ; } var paramArr = content . ToArray ( ) ; var rootElement = new XElement ( CODE_STRING , paramArr ) ; XDocument doc = new XDocument ( rootElement ) ; <EOF>
protected override void OnNavigatedTo ( NavigationEventArgs e ) { this . DefaultViewModel [ CODE_STRING ] = e . Parameter ; } <EOF>
path . Substring ( CODE_INTEGER ) <EOF>
from ev1 in document . Descendants ( CODE_STRING ) . Elements ( CODE_STRING ) . Where ( e = > e . Element ( georss + CODE_STRING ) != null ) <EOF>
form2 . Show ( ) ; Encoding charset = Encoding . GetEncoding ( CODE_STRING ) ; HttpWebRequest SMSRequset = ( HttpWebRequest ) WebRequest . Create ( CODE_STRING ) ; SMSRequset . Method = CODE_STRING ; SMSRequset . CookieContainer = cookies ; HttpWebResponse SMSResponse = ( HttpWebResponse ) SMSRequset . GetResponse ( ) ; System . IO . StreamReader reader2 = new System . IO . StreamReader ( SMSResponse . GetResponseStream ( ) , charset ) ; form2 . webBrowser1 . Invoke ( ( MethodInvoker ) delegate { form2 . webBrowser1 . DocumentText = reader2 . ReadToEnd ( ) ; } ) ; <EOF>
public static IQueryable Where ( this IQueryable source , string predicate , params object [ ] values ) <EOF>
ConnectionStringSettings settings = ConfigurationManager . ConnectionStrings [ CODE_STRING ] ; SqlConnectionStringBuilder builder ; LINQTOSQLDataClassDataContext db ; if ( null != settings ) { string connection = settings . ConnectionString ; builder = new SqlConnectionStringBuilder ( connection ) ; builder . Password = passwordTextBox . Text ; db = new LINQTOSQLDataClassDataContext ( builder . ConnectionString ) ; } } <EOF>
foreach ( DataRow dr in prfLogic . GetAllProductFamilies ( ) ) { foreach ( DataColumn dataColumn in myDataTable . Columns ) { string fieldValue = dr [ dataColumn ] . ToString ( ) ; } } <EOF>
public class Form1 { public Form1 ( ) { InitializeComponent ( ) ; WindowState = FormWindowState . Maximized ; Load += ( s , e ) = > { MaximizeBox = false ; } ; } bool hitControlButtons ; protected override void WndProc ( ref Message m ) { if ( ( ! hitControlButtons ) && ( m . Msg == CODE_INTEGER || m . Msg == CODE_INTEGER ) ) { return ; } if ( m . Msg == CODE_INTEGER ) { int wp = m . WParam . ToInt32 ( ) ; hitControlButtons = wp == CODE_INTEGER || wp == CODE_INTEGER || wp == CODE_INTEGER ; } base . WndProc ( ref m ) ; } } <EOF>
public interface IMyGenericDBProcessor { void AddToDB < T > ( T Record ) where T : class ; } public class MyDBProcessor : IMyGenericDBProcessor { public void AddToDB < T > ( T record ) where T : class { using ( var tp = new tpEntities ( ) ) tp . Set < T > ( ) . Add ( record ) ; } } <EOF>
public IEnumerable < string > GetGroups ( string str ) { var items = str . Split ( new [ ] { CODE_STRING } , StringSplitOptions . RemoveEmptyEntries ) ; var groups = new List < string > ( items ) ; for ( int i = CODE_INTEGER ; i < items . Count ( ) ; i ++ ) { groups . Add ( string . Join ( CODE_STRING , items . Where ( ( s , idx ) = > idx <= i ) ) ) ; } return groups ; } <EOF>
/// <summary> /// /// </summary> /// <param name="identity"></param> /// <returns></returns> public static async Task < IStorageFile > FileFromPicker ( string identity ) { FileOpenPicker picker = new FileOpenPicker ( ) ; setFileTypes ( picker ) ; picker . SuggestedStartLocation = PickerLocationId . PicturesLibrary ; picker . ViewMode = PickerViewMode . Thumbnail ; picker . SettingsIdentifier = identity ; var storageFile = await picker . PickSingleFileAsync ( ) ; return storageFile ; } <EOF>
open System open System . IO let readFloats filePath = let strs = File . ReadLines ( filePath ) strs | > Seq . map ( fun str -> System . Double . TryParse ( str ) ) | > Seq . filter ( fun ( success , _ ) -> success ) | > Seq . map snd <EOF>
protected void GridView1_RowDataBound ( object sender , GridViewRowEventArgs e ) { e . Row . Cells [ CODE_INTEGER ] . Text = CODE_STRING + e . Row . Cells [ CODE_INTEGER ] . Text + CODE_STRING ; } <EOF>
if ( nextIndex >= courseView . Count ) { currIndex = nextIndex ; return false ; } <EOF>
Public Sub New ( ) InitializeComponent ( ) MyDropDownList . Select ( ) End Sub <EOF>
label_status_title . Text = " Status : changing files . files changed : CODE_STRING / CODE_STRING files . " ; label_status_title . Refresh ( ) ; <EOF>
YourList . SelectMany ( l = > l ) . Distinct ( ) <EOF>
listQuery . SpreadsheetQuery = CODE_STRING ; <EOF>
var newTable = rows . CopyToDataTable ( ) ; <EOF>
public class User { public User ( ) { } public int idUser ; { get ; set ; } [ Required ] public string UserName { get ; set ; } public virtual Computer Computer { get ; set ; } } public class Computer { public Computer ( ) { } [ Key , ForeignKey ( CODE_STRING ) ] public int idUser { get ; set ; } public string ComputerName { get ; set ; } public virtual User User { get ; set ; } } <EOF>
List < bool ? > bools <EOF>
public static TimeSpan Minutes [ this int i ] { get { return new TimeSpan ( CODE_INTEGER , i , CODE_INTEGER ) ; } } <EOF>
var maxLen = cx . Classes . Max ( x = > x . Name . Length ) ; var query = cx . Classes . Select ( x = > x . Name ) . OrderBy ( x = > x . PadLeft ( maxLen ) ) ; <EOF>
int average ( int [ ] a , int k ) { int average , s , i , n ; s = CODE_INTEGER ; for ( i = CODE_INTEGER ; i < k ; i ++ ) { a [ i ] = Convert . ToInt32 ( lblSortiranNiz . Items [ i ] ) ; s = s + a [ i ] ; } average = s / k ; return average ; } <EOF>
Array . Sort ( array , ( s1 , s2 ) = > s1 . Name . CompareTo ( s2 . Name ) ) ; <EOF>
System . IO . File . WriteAllBytes ( CODE_STRING , binaryData ) ; <EOF>
Bind < ICustomerRepository > ( ) . To < CustomerRepository > ( ) ; <EOF>
[ Append Me ] <EOF>
batches . GroupBy ( x = > x . Batch , x = > x . Amount ) . Select ( g = > new { Batch = g . Key , Amount = g . Sum ( ) } ) ; <EOF>
TwitterCredentials . SetCredentials ( CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING ) ; var user = User . GetUserFromScreenName ( CODE_STRING ) ; <EOF>
. . . byte [ ] data = ASCIIEncoding . Default . GetBytes ( ieLog . FirstName + CODE_STRING + ieLog . LastName ) ; using ( MemoryStream ms = new MemoryStream ( data ) ) { mail . Attachments . Add ( new Attachment ( ms , CODE_STRING , CODE_STRING ) ) ; SmtpClient smtp = new SmtpClient ( CODE_STRING ) ; smtp . Send ( mail ) ; } <EOF>
using ( var resp = myRequest . GetResponse ( ) ) { using ( var responseStream = resp . GetResponseStream ( ) ) { using ( var responseReader = new StreamReader ( responseStream ) ) { } } } <EOF>
Debug . Print ( ) <EOF>
var processes = Process . GetProcesses ( ) ; foreach ( var p in processes . Where ( proc = > proc . ProcessName . IndexOf ( searchString , StringComparison . CurrentCultureIgnoreCase ) > - CODE_INTEGER ) ) p . Kill ( ) ; <EOF>
public void ProcessFolder ( DirectoryInfo dirInfo ) { foreach ( DirectoryInfo di in dirInfo . GetDirectories ( ) ) { ProcessFolder ( di ) ; } foreach ( FileInfo fi in dirInfo . GetFiles ( ) ) { ProcessFile ( fi ) } } public void ProcessFile ( FileInfo fi ) { Debug . Print ( fi . FullName ) ; } <EOF>
( ? <= \ s ) x ( ? = [ A - Z ] ) <EOF>
void Selection_Change ( Object sender , EventArgs e ) { if ( Calendar1 . SelectedDate < Date . Now ) { Response . Write ( " < script language = javascript > alert ( ' previous date selected ' ) ; < / script > ) ; } } <EOF>
( \ [ [ ^ \ ] ] * \ ] ) <EOF>
DataRow [ ] drr = dt . Select ( CODE_STRING + id + CODE_STRING ) ; for ( int i = CODE_INTEGER ; i < drr . Length ; i ++ ) drr [ i ] . Delete ( ) ; dt . AcceptChanges ( ) ; <EOF>
CODE_INTEGER sin ( PI VFOV / CODE_INTEGER ) D Y X = -- -- -- -- -- -- -- -- -- -- -- -- -- VRES <EOF>
Convert . ToBase64String <EOF>
List < GeoCoordinate > mycoord = new List < GeoCoordinate > ( ) ; mycoord . add ( MyGeoPosition ) ; <EOF>
var whoHasPager = from teamMember in data . Elements ( CODE_STRING ) where teamMember . Elements ( CODE_STRING ) . Any ( x = > x . Attribute ( CODE_STRING ) . Value == CODE_STRING ) select teamMember ; <EOF>
string s = CODE_STRING ; int index = . . . string res = s . Insert ( index , c + separator ) ; <EOF>
; WITH a AS ( SELECT * , ROW_NUMBER ( ) OVER ( PARTITION BY email ORDER BY Id ) RowNum FROM UserBase ) -- deleted rows will be : SELECT * -- DELETE FROM a WHERE a . RowNum < > CODE_INTEGER <EOF>
var currentPage = ( ( PhoneApplicationFrame ) Application . Current . RootVisual ) . Content as PhoneApplicationPage ; for ( int i = CODE_INTEGER ; i < VisualTreeHelper . GetChildrenCount ( currentPage ) ; i ++ ) { DependencyObject child = VisualTreeHelper . GetChild ( currentPage , i ) ; if ( child is System . Windows . Controls . Control ) { } else if ( child is System . Windows . FrameworkElement ) { } if ( VisualTreeHelper . GetChildrenCount ( child ) > CODE_INTEGER ) { enumChildren ( child ) ; } } <EOF>
int n ; bool isNumeric = int . TryParse ( CODE_STRING , out n ) ; <EOF>
Request . QueryString <EOF>
connection . Open ( ) ; DataTable schemaTable = connection . GetOleDbSchemaTable ( OleDbSchemaGuid . Tables , new object [ ] { null , null , null , CODE_STRING } ) ; foreach ( DataRow row in schemaTable . Rows ) { Console . WriteLine ( row [ CODE_STRING ] ) ; } <EOF>
dt = dt . AddMilliseconds ( - dt . Millisecond ) ; <EOF>
string DiagnosesString = CODE_STRING ; string DiagnosisCodestemp = DiagnosesString . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) . Replace ( CODE_STRING , CODE_STRING ) ; string [ ] DiagnosisCodesParts = DiagnosisCodestemp . Split ( ) ; foreach ( var item in DiagnosisCodesParts ) { string [ ] parts = item . Split ( CODE_CHAR ) ; string num = parts [ CODE_INTEGER ] ; string finalValue = string . Empty ; if ( num . Length > CODE_INTEGER ) { num = num . Replace ( num , CODE_STRING ) ; finalValue = parts [ CODE_INTEGER ] + CODE_STRING + num ; } else { finalValue = parts [ CODE_INTEGER ] + CODE_STRING + num ; } list . Add ( finalValue ) ; } <EOF>
! [ private void FrmWeb_Btn_Click ( object sender , EventArgs e ) { PictureBox PB = new PictureBox ( ) ; PB . ImageLocation = CODE_STRING ; PB . Size = new Size ( CODE_INTEGER , CODE_INTEGER ) ; Controls . Add ( PB ) ; PB . Click += new EventHandler ( PB_Click ) ; } protected void PB_Click ( object sender , EventArgs e ) { webBrowser1 . Navigate ( CODE_STRING ) ; } ] [ CODE_INTEGER ] <EOF>
LogManager . Configuration = LogManager . Configuration . Reload ( ) ; <EOF>
new Image [ ] { /* stuff in collection */ } <EOF>
string path = Server . MapPath ( CODE_STRING ) <EOF>
public bool IsChinese ( string text ) { return text . Any ( c = > c >= CODE_INTEGER && c <= CODE_INTEGER ) ; } <EOF>
JArray jArray = JArray . Parse ( jsonStr ) ; bool isDefault ; string defaultValue ; foreach ( JObject jObject in jArray . Children < JObject > ( ) ) { isDefault = false ; JProperty p = jObject . Properties ( ) . SingleOrDefault ( x = > x . Name == CODE_STRING ) ; if ( p != null && ( bool ) p . Value == true ) { isDefault = true ; } foreach ( JProperty jProperty in jObject . Properties ( ) ) { string name = jProperty . Name . Trim ( ) ; string value = jProperty . Value . ToString ( ) . Trim ( ) ; if ( name != CODE_STRING ) { drpValues . Items . Add ( new RadComboBoxItem ( name , value ) ) ; if ( isDefault ) { defaultValue = value ; } } } } RadComboBoxItem itemToSelect = drpValues . FindItemByValue ( defaultValue ) ; itemToSelect . Selected = true ; <EOF>
using umbraco . businesslogic ; using umbraco . interfaces ; [ Application ( CODE_STRING , CODE_STRING , CODE_STRING ) ] public class Class1 : IApplication { public Class1 ( ) { } } <EOF>
protected void Calendar1_DayRender ( object sender , DayRenderEventArgs e ) { if ( ! _databaseDates . Contains ( e . Day . Date ) ) { e . Day . IsSelectable = false ; e . Cell . ForeColor = Color . Gray ; } } <EOF>
public List < Employees > GetEmployees ( ) { . . List < Employees > emps = new List < Employees > ( ) ; Employees emp = null ; while ( . . ) { emp = new Employees ( ) ; . . emps . Add ( emp ) ; } return emps ; } <EOF>
var orderLines = xDoc . Element ( nsp + CODE_STRING ) . Element ( nsp + CODE_STRING ) . Element ( nsp + CODE_STRING ) . Element ( nsp + CODE_STRING ) . Element ( nsp + CODE_STRING ) . Element ( nsp + CODE_STRING ) . Elements ( nsp + CODE_STRING ) ; var lineNumbers = orderLines . Select ( x = > x . Element ( nsp + CODE_STRING ) . Value ) ; <EOF>
var myObservableList = new ObservableCollection < MyModelType > ( myModel . NiceList ) ; <EOF>
DirectoryInfo d = new DirectoryInfo ( CODE_STRING ) ; DirectoryInfo [ ] dInfo = d . GetDirectories ( ) . Where ( di = > ! di . Attributes . HasFlag ( FileAttributes . System ) ) . Where ( di = > ! di . Attributes . HasFlag ( FileAttributes . Hidden ) ) . ToArray ( ) ; <EOF>
public class BlogEntyTreeItem { public string Text { set ; get ; } public string URL { set ; get ; } public List < BlogEntyTreeItem > Children { set ; get ; } public List < BlogEntyTreeItem > GetTree ( ) { NWDataContext db = new NWDataContext ( ) ; var p = db . Posts . ToList ( ) ; var list = p . GroupBy ( g = > g . DateCreated . Year ) . Select ( g = > new BlogEntyTreeItem { Text = g . Key . ToString ( ) , Children = g . GroupBy ( g1 = > g1 . DateCreated . ToString ( CODE_STRING ) ) . Select ( g1 = > new BlogEntyTreeItem { Text = g1 . Key , Children = g1 . Select ( i = > new BlogEntyTreeItem { Text = i . Name } ) . ToList ( ) } ) . ToList ( ) } ) . ToList ( ) ; return list ; } } <EOF>
if ( tree . Nodes . Contains ( theNode ) ) { TreeNodeCollection childNodes = theNode . Nodes ; tree . Nodes . Remove ( theNode ) ; foreach ( TreeNode child in childNodes ) { tree . Nodes . Add ( child ) ; } } <EOF>
SHOW INDEX <EOF>
driver . FindElement ( By . CssSelector ( CODE_STRING ) ) <EOF>
string result = string . Join ( CODE_STRING , fooList . Where ( x = > x . property == CODE_STRING ) . Select ( x = > x . title ) ) ; <EOF>
txtRichTextBox . Select ( yourText . IndexOf ( CODE_STRING ) , CODE_STRING . Length ) ; txtRichTextBox . SelectionColor = YourColor ; txtRichTextBox . SelectionFont = new Font ( CODE_STRING , FontStyle . Bold ) ; <EOF>
foreach ( XElement element in xmlDocument . Elements ( ) ) { if ( textBox3 . Text . ToString ( ) == element . Element ( CODE_STRING ) . Value ) { PDFLocation = element . Element ( CODE_STRING ) . Value ; pictureBox1 . Image = pdfhandler . GetPDFthumbNail ( PDFLocation ) ; textBox4 . Text = element . Element ( CODE_STRING ) . Value + " \ r " + element . Element ( CODE_STRING ) . Value + " \ r " + element . Element ( CODE_STRING ) . Value + " \ r " } } <EOF>
strList [ CODE_INTEGER ] = CODE_STRING ; <EOF>
String . Intersect <EOF>
YourDataSource . YourTableDataTable anything = new YourDataSource . YourTableDataTable ( ) ; yourdataadapter . fill ( anything , parametervalue . tostring ( ) ) ; DataGridView1 . datasource = anything ; <EOF>
List < double > nums = new List < double > ( ) ; for ( int i = CODE_INTEGER ; i < grvData . Rows . Count ; i ++ ) { if ( grvData . Rows [ i ] . Cells [ CODE_INTEGER ] . Text == CODE_STRING && grvData . Rows [ i ] . Cells [ CODE_INTEGER ] . Text == CODE_STRING ) { nums . Add ( Convert . ToDouble ( grvData . Rows [ i ] . Cells [ CODE_INTEGER ] . Text ) ) ; } } nums = nums . OrderByDescending ( n = > n ) . ToList ( ) ; NONSPR4 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR8 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR12 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR16 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR20 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR24 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR28 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR32 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR36 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; NONSPR40 . Text = nums [ CODE_INTEGER ] . ToString ( ) ; <EOF>
var elements1 = ( from e in file1 . Element ( CODE_STRING ) . Descendants ( ) select e . Name ) . ToList ( ) ; var elements2 = ( from e in file2 . Element ( CODE_STRING ) . Descendants ( ) select e . Name ) . ToList ( ) ; for ( int i = CODE_INTEGER ; i < elements1 . Count ; i ++ ) { if ( elements1 [ i ] != elements2 [ i ] ) { return false ; } } return true ; <EOF>
private void SoundClip_MediaEnded ( object sender , Windows . UI . Xaml . RoutedEventArgs e ) { SoundClip . Stop ( ) ; } <EOF>
public static void Main ( ) { List < List < double > > listOfLists = new List < List < double > > ( ) ; listOfLists . Add ( new List < double > ( ) { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ) ; listOfLists . Add ( new List < double > ( ) { CODE_INTEGER , CODE_INTEGER } ) ; int flatLength = CODE_INTEGER ; foreach ( List < double > list in listOfLists ) flatLength += list . Count ; double [ ] flattened = new double [ flatLength ] ; int iFlat = CODE_INTEGER ; foreach ( List < double > list in listOfLists ) foreach ( double d in list ) flattened [ iFlat ++ ] = d ; foreach ( double d in flattened ) Console . Write ( CODE_STRING , d ) ; Console . ReadLine ( ) ; } <EOF>
string myAppPath = System . Reflection . Assembly . GetEntryAssembly ( ) . Location ; if ( File . Exists ( Path . Combine ( myAppPath , pathToExe ) ) ) { workDir = Path . GetDirectoryName ( Path . Combine ( myAppPath , pathToExe ) ) ; } else { } <EOF>
for ( int nI = splitContainerMain . Panel2 . Controls . Count - CODE_INTEGER ; nI >= CODE_INTEGER ; nI -- ) { splitContainerMain . Panel2 . Controls [ nI ] . Dispose ( ) ; } <EOF>
if ( typeof ( ISomeInterface ) . IsAssignableFrom ( passedInParameter . GetType ( ) ) ) { } <EOF>
for ( int i = CODE_INTEGER ; i < panels . length ; i ++ ) { AddPanel ( panels [ i ] , i ) ; } AddPanel ( System . Drawing . Point point , int tabIndex ) { Panel panel = new Panel ( ) ; this . Add ( panel ) ; panel . Controls . Add ( new Button ( ) ) ; panel . Controls . Add ( new Label ( CODE_STRING ) ) ; panel . Controls . Add ( new Label ( CODE_STRING ) ) ; panel . Controls . Add ( new Label ( CODE_STRING ) ) ; panel . Controls . Add ( new Label ( CODE_STRING ) ) ; panel . Controls . Add ( new Label ( CODE_STRING ) ) ; panel . Location = point ; panel . Name = CODE_STRING + i . ToString ( ) ; panel . Size = new System . Drawing . Size ( CODE_INTEGER , CODE_INTEGER ) ; panel . TabIndex = tabIndex ; } <EOF>
var query = dbContext . Users . GroupBy ( u = > u . Department ) . Select ( g = > g . OrderByDescending ( u = > u . AddedOn ) . First ( ) ) ; <EOF>
[ XmlSerializerFormat ] <EOF>
private string genNextId ( ) { var id = ( from a in dc . nasabahs select a . nomor_nasabah ) . Max ( ) ; return id . ToString ( ) ; } <EOF>
ds . Tables [ CODE_INTEGER ] . Columns . Add ( CODE_STRING , typeof ( String ) ) ; foreach ( DataRow row in ds . Tables [ CODE_INTEGER ] . Rows ) { row [ CODE_STRING ] = ( row [ CODE_STRING ] == DBNull . Value ) ? string . Empty : string . Format ( CODE_STRING , row [ CODE_STRING ] ) ; } <EOF>
( ( ChangeDateToFontWeightConverter ) this . Resources [ CODE_STRING ] ) . MyCustomProperty = myCacheObject ; <EOF>
var timer = new DispatcherTimer ( ) ; timer . Interval = TimeSpan . FromSeconds ( CODE_INTEGER ) ; timer . Tick += OnTimerTick ; . . . private void OnTimerTick ( object sender , object e ) { } <EOF>
private bool updatingTreeView ; private void treeView1_AfterCheck ( object sender , TreeViewEventArgs e ) { if ( updatingTreeView ) return ; updatingTreeView = true ; CheckChildren_ParentSelected ( e . Node , e . Node . Checked ) ; SelectParents ( e . Node , e . Node . Checked ) ; updatingTreeView = false ; } <EOF>
sort ( listOfFoos , o = > ( ( Foo ) o ) . name ( ) ) ; <EOF>
void OrderSummaryDetails_MouseMove ( object sender , MouseEventArgs e ) { Control control = GetChildAtPoint ( e . Location ) ; if ( control != null ) { string toolTipString = mFormTips . GetToolTip ( control ) ; this . mFormTips . ShowAlways = true ; mFormTips . Show ( toolTipString , control , control . Width / CODE_INTEGER , control . Height / CODE_INTEGER ) ; } } <EOF>
Button btn = new Button ( ) ; this . Controls . Add ( btn ) ; btn . Click += ( o , x ) = > { Button b = o as Button ; FieldInfo eventclick = typeof ( Control ) . GetField ( CODE_STRING , BindingFlags . Static | BindingFlags . NonPublic ) ; object eventValue = eventclick . GetValue ( b ) ; PropertyInfo events = b . GetType ( ) . GetProperty ( CODE_STRING , BindingFlags . NonPublic | BindingFlags . Instance ) ; EventHandlerList eventHandlerList = ( EventHandlerList ) events . GetValue ( b , null ) ; eventHandlerList . RemoveHandler ( eventValue , eventHandlerList [ eventValue ] ) ; MessageBox . Show ( CODE_STRING ) ; } ; <EOF>
int start = - CODE_INTEGER ; int index = str . IndexOf ( search ) ; while ( index != - CODE_INTEGER ) { print str . Substring ( index - CODE_INTEGER , index + CODE_INTEGER ) ; index = str . IndexOf ( search , index ) ; } <EOF>
ServiceReference1 . imail_apiSoapClient soapClient = new ServiceReference1 . imail_apiSoapClient ( CODE_STRING ) ; <EOF>
Byte [ ] array = new Byte [ CODE_INTEGER ] ; Array . Clear ( array , CODE_INTEGER , array . Length ) ; <EOF>
Interlocked . Exchange <EOF>
internal static bool GetIsCompatibleIEVersionInstalled ( int minimumRequiredVersion ) { var compatibleIEVersionInstalled = false ; var key = Registry . LocalMachine . OpenSubKey ( CODE_STRING ) ; var fullVersion = ( string ) key . GetValue ( CODE_STRING ) ; int majorVersion ; if ( int . TryParse ( fullVersion . Split ( CODE_CHAR ) . First ( ) , out majorVersion ) ) { compatibleIEVersionInstalled = majorVersion >= minimumRequiredVersion ; } return compatibleIEVersionInstalled ; } <EOF>
class Program { static void Main ( string [ ] args ) { using ( var context = new PrincipalContext ( ContextType . Domain ) ) using ( var user = UserPrincipal . Current ) using ( var userGroups = user . GetGroups ( ) ) { PrintGroups ( userGroups , CODE_INTEGER ) ; } Console . ReadLine ( ) ; } static void PrintGroups ( PrincipalSearchResult < Principal > groups , int level ) { foreach ( var group in groups ) { Console . Write ( new string ( CODE_CHAR , level * CODE_INTEGER ) ) ; Console . WriteLine ( group . Name ) ; using ( var groupGroups = group . GetGroups ( ) ) { PrintGroups ( groupGroups , level + CODE_INTEGER ) ; } } } } <EOF>
dataGridView1 . DataSource = null ; dataGridView1 . Columns . Clear ( ) ; dtCompanyInfo = GetCompanyInfo ( ) ; if ( dtCompanyInfo . Rows . Count > CODE_INTEGER ) { dataGridView1 . DataSource = dtCompanyInfo ; DataGridViewCheckBoxColumn checkColumn = new DataGridViewCheckBoxColumn ( ) ; checkColumn . Name = CODE_STRING ; checkColumn . HeaderText = CODE_STRING ; checkColumn . Width = CODE_INTEGER ; checkColumn . ReadOnly = false ; checkColumn . FillWeight = CODE_INTEGER ; dataGridView1 . Columns . Add ( checkColumn ) ; } } <EOF>
void textBox1_Validating ( object sender , CancelEventArgs e ) { DateTime dateEntered ; if ( DateTime . TryParseExact ( textBox1 . Text , CODE_STRING , System . Globalization . CultureInfo . CurrentCulture , System . Globalization . DateTimeStyles . None , out dateEntered ) ) { MessageBox . Show ( dateEntered . ToString ( ) ) ; } else { MessageBox . Show ( CODE_STRING ) ; } } <EOF>
-- -- -- Returns a list from the dictionary | -- - Returns an item from the list | | v v fileList [ CODE_INTEGER ] [ CODE_INTEGER ] fileList [ CODE_INTEGER ] [ CODE_INTEGER ] fileList [ CODE_INTEGER ] [ CODE_INTEGER ] <EOF>
var stackSize = CODE_INTEGER ; var thread = new Thread ( new ThreadStart ( StartDetection ) , stackSize ) ; <EOF>
public List < String > m_Distances = new List < String > ( ) ; public List < String > Distances { get { return m_Distances ; } } listPickerDistance . ItemsSource = Distances ; < toolkit : ListPicker x : Name = CODE_STRING > < / toolkit : ListPicker > <EOF>
public class Configuration : IConfiguration { public User { get { return ConfigurationManager . AppSetting [ CODE_STRING ] ; } } } <EOF>
for ( int i = CODE_INTEGER ; i < columns ; i ++ ) { double [ ] column = Enumerable . Range ( CODE_INTEGER , rows ) . Select ( row = > values [ row , i ] ) . ToArray ( ) ; doubleList . Add ( column ) ; } <EOF>
var string = CODE_STRING ; eval ( string ) ; <EOF>
var source = new BindingSource { DataSouce = query1 . Concat ( query2 ) . Concat ( query3 ) } ; dataGridView1 . DataSource = source ; <EOF>
private void EnDis ( object sender , RoutedEventArgs e ) { var button = ( Button ) sender ; if ( button . Name == CODE_STRING ) { chk_1 . IsChecked = true ; chk_2 . IsChecked = true ; chk_3 . IsChecked = true ; chk_4 . IsChecked = true ; } if ( button . Name == CODE_STRING ) { chk_1 . IsChecked = false ; chk_2 . IsChecked = false ; chk_3 . IsChecked = false ; chk_4 . IsChecked = false ; } if ( button . Name == CODE_STRING ) { chk_5 . IsChecked = true ; chk_6 . IsChecked = true ; chk_7 . IsChecked = true ; chk_8 . IsChecked = true ; } } <EOF>
[ DataContract ] public class mainresponse { [ DataMember ] public resultmap arrayelement { get ; set ; } } [ DataContract ] public class resultmap { [ DataMember ] public string substringhere { get ; set ; } } var djson = new DataContractJsonSerializer ( typeof ( Mainresponse ) ) ; var stream = new MemoryStream ( Encoding . UTF8 . GetBytes ( responsestring ) ) ; mainresponse result = ( mainresponse ) djson . ReadObject ( stream ) ; <EOF>
if ( day > CODE_INTEGER ) { if ( MessageBox . Show ( CODE_STRING , CODE_STRING , MessageBoxButtons . YesNo ) == DialogResult . Yes ) { Process . Start ( CODE_STRING ) ; } Environment . Exit ( CODE_INTEGER ) ; } <EOF>
class Program { [ STAThread ] public static void Main ( ) { var app = new Application ( ) ; app . Run ( new MainWindow ( ) ) ; } } <EOF>
[ RunInstaller ( true ) ] public class ProjectInstaller : Installer { private ServiceProcessInstaller process ; private ServiceInstaller service ; public ProjectInstaller ( ) { process = new ServiceProcessInstaller ( ) ; process . Account = ServiceAccount . LocalSystem ; service = new ServiceInstaller ( ) ; service . ServiceName = CODE_STRING ; Installers . Add ( process ) ; Installers . Add ( service ) ; } } <EOF>
string res = null ; Match m = Regex . Match ( input , CODE_STRING ) ; if ( m . Success ) { res = m . Groups [ CODE_INTEGER ] . Value ; } <EOF>
void GridView1_RowDeleting ( object sender , GridViewDeleteEventArgs e ) { string name = e . Values [ CODE_STRING ] as string ; } <EOF>
public virtual Allocation Allocation { get ; set ; } <EOF>
T [ ] slice = new T [ end - start ] ; Array . Copy ( source , start , slice , CODE_INTEGER , slice . Length ) ; if ( dest < start ) { Array . Copy ( source , dest , source , dest + slice . Length , start - dest ) ; } else { Array . Copy ( source , end , source , dest , dest - start ) ; } Array . Copy ( slice , CODE_INTEGER , source , dest , slice . Length ) ; <EOF>
case when st . Name in ( ' varchar CODE_CHAR varchar CODE_CHAR char CODE_CHAR nchar ' ) <EOF>
var objGrid = document . getElementById ( ' < %= YourGrid . ClientID % > ' ) ; var cells = objGrid . getElementsByClassName ( ' footerClass ' ) cells [ CODE_INTEGER ] . innerText = ClsSum ; cells [ CODE_INTEGER ] . innerText = NonSaleSum ; cells [ CODE_INTEGER ] . innerText = SecSum ; <EOF>
public class MyCanvas : Canvas { public event EventHandler ChildDesiredSizeChanged ; protected override void OnChildDesiredSizeChanged ( UIElement child ) { if ( ChildDesiredSizeChanged != null ) ChildDesiredSizeChanged ( child , EventArgs . Empty ) ; base . OnChildDesiredSizeChanged ( child ) ; } } <EOF>
Freeze ( ) <EOF>
private void btnColour_Click ( object sender , EventArgs e ) { ColorDialog clrDialog = new ColorDialog ( ) ; if ( clrDialog . ShowDialog ( ) == DialogResult . OK ) { c = clrDialog . Color ; } } Color c = Color . Black ; <EOF>
JObject json = JObject . Parse ( JasonText ) ; var type = json [ CODE_STRING ] ; <EOF>
smsComposeTask . Body = title . Text + CODE_STRING + description . Text + CODE_STRING + datee . Text ; <EOF>
myTable . DefaultView . Sort = CODE_STRING ; <EOF>
public abstract class Person { public string FirstName { get ; set ; } public string Surname { get ; set ; } } public partial class Teacher : Person { public string School { get ; set ; } } public partial class Student : Person { public string YearLevel { get ; set ; } } public partial class Parent : Person { public string Blagh { get ; set ; } } <EOF>
List < MeterPrevReadInfo > list = . . . ; var result = from item in list from info in item . Regs select new { item . DateMeterRead , info . MeterRead } ; <EOF>
foreach ( var item in data ) { var post = ( IDictionary < string , object > ) item ; if ( post [ CODE_STRING ] . ToString ( ) == latestPostId ) { end = true ; break ; } } <EOF>
private bool _preventMove = false ; protected override void WndProc ( ref Message message ) { const int WM_SYSCOMMAND = CODE_INTEGER ?? CODE_INTEGER ; const int SC_MOVE = CODE_INTEGER ; if ( _preventMove ) { switch ( message . Msg ) { case WM_SYSCOMMAND : int command = message . WParam . ToInt32 ( ) & CODE_INTEGER ; if ( command == SC_MOVE ) return ; break ; } } base . WndProc ( ref message ) ; } <EOF>
public class WSField : Attribute { internal string xmlField ; public WSField ( string tableField , string xmlField = null ) { . . . public class FieldDefinition { public FieldDefinition ( FieldInfo fieldInfo ) { if ( this . wsField . xmlField == null ) this . wsField . xmlField = fieldInfo . Name ; } . . . <EOF>
EditingCommands . AlignLeft <EOF>
ex : _connectionString = CODE_STRING ; <EOF>
MobileDevice . AMDeviceStartHouseArrestService ( iPhoneHandle , MobileDevice . CFStringMakeConstantString ( bundleIdentifier ) , null , ref hService , CODE_INTEGER ) ; <EOF>
public static List < string > PermuteWords ( string s ) { string [ ] ss = s . Split ( new string [ ] { CODE_STRING } , StringSplitOptions . RemoveEmptyEntries ) ; bool [ ] used = new bool [ ss . Length ] ; string res = CODE_STRING ; List < string > list = new List < string > ( ) ; permute ( ss , used , res , CODE_INTEGER , list ) ; return list ; } private static void permute ( string [ ] ss , bool [ ] used , string res , int level , List < string > list ) { if ( level == ss . Length && res != CODE_STRING ) { list . Add ( res ) ; return ; } for ( int i = CODE_INTEGER ; i < ss . Length ; i ++ ) { if ( used [ i ] ) continue ; used [ i ] = true ; permute ( ss , used , res + CODE_STRING + ss [ i ] , level + CODE_INTEGER , list ) ; used [ i ] = false ; } } <EOF>
var index = CODE_INTEGER ; foreach ( object itemChecked in RolesCheckedListBox . CheckedItems ) { if ( index > CODE_INTEGER ) sw . Write ( CODE_STRING ) ; sw . Write ( itemChecked . ToString ( ) ) ; index ++ ; } <EOF>
string result = Marshal . PtrToStringAnsi ( new IntPtr ( positionMemory ) , size ) ; Marshal . StructureToPtr ( objectStruct , new IntPtr ( positionMemory ) , true ) ; Marshal . Copy ( byteName , CODE_INTEGER , new IntPtr ( positionMemory ) , size ) ; machineNamePosInMem = allocatedObject . Offset ( size ) . ToInt64 ( ) ; <EOF>
List < DataGridViewRow > selectedRows = new List < DataGridViewRow > ( ) ; void selectRows ( ) { dataGridView1 . SuspendLayout ( ) ; foreach ( DataGridViewRow r in dataGridView1 . Rows ) r . Selected = selectedRows . Contains ( r ) ; dataGridView1 . ResumeLayout ( ) ; } private void dataGridView1_MouseClick ( object sender , MouseEventArgs e ) { DataGridViewRow clickedRow = dataGridView1 . CurrentRow ; if ( selectedRows . Contains ( clickedRow ) ) selectedRows . Remove ( clickedRow ) ; else selectedRows . Add ( clickedRow ) ; selectRows ( ) ; } <EOF>
int chunkSize = CODE_INTEGER ; int fileByteCount = GetFileSizeInBytes ( ) ; int packetCount = ( fileByteCount + chunkSize - CODE_INTEGER ) / chunkSize ; <EOF>
from Country a where ( select PropertyValue from LocalizedProperty x where x . Entity . id = a . Id and x . PropertyName = ' Name ' and x . Entity . class = ' Prayon . Entities . Country ' and x . CultureName = ' de ' take CODE_INTEGER ) Like : val <EOF>
protected override bool ProcessDialogKey ( Keys keyData ) { int selectionIndex = pBoundsCollection . IndexOf ( pSelection ) ; if ( keyData == Keys . Tab ) { while ( selectionIndex ++ <= pBoundsCollection . Count ) { if ( selectionIndex >= pBoundsCollection . Count ) { selectionIndex = CODE_INTEGER ; pSelection = ( CMRField ) pBoundsCollection [ selectionIndex ] ; Refresh ( ) ; break ; } if ( ( ( CMRField ) pBoundsCollection [ selectionIndex ] ) . IsSelectable ) { pSelection = ( CMRField ) pBoundsCollection [ selectionIndex ] ; Refresh ( ) ; return false ; } } } return base . ProcessDialogKey ( keyData ) ; } <EOF>
function parseDate ( date ) { var year = parseInt ( date . substring ( CODE_INTEGER , CODE_INTEGER ) ) ; var month = parseInt ( date . substring ( CODE_INTEGER , CODE_INTEGER ) ) ; var day = parseInt ( date . substring ( CODE_INTEGER , CODE_INTEGER ) ) ; var hour = parseInt ( date . substring ( CODE_INTEGER , CODE_INTEGER ) ) ; var minute = parseInt ( date . substring ( CODE_INTEGER , CODE_INTEGER ) ) ; var second = parseInt ( date . substring ( CODE_INTEGER , CODE_INTEGER ) ) ; return new Date ( year , month , day , hour , minute , second ) ; } for ( i = CODE_INTEGER ; i < points . length ; i ++ ) { var date = Date . parse ( points [ i ] . EarnedOn ) ; . . . <EOF>
using ( SqlConnection con = new SqlConnection ( connectionString ) ) { con . Open ( ) ; SqlCommand cmd = new SqlCommand ( CODE_STRING , con ) ; cmd . Paramters . AddWithValue ( CODE_STRING , username ) ; cmd . Parameters . AddWithValue ( CODE_STRING , password ) ; cmd . CommandType = CommandType . Text ; UserInfo info = new UserInfo ( ) ; using ( SqlDataReader rdr = cmd . ExecuteReader ( ) ) { if ( rdr . HasRows ) { rdr . Read ( ) ; info . UserID = rdr . GetInt32 ( CODE_INTEGER ) ; info . UserName = rdr . GetString ( CODE_INTEGER ) ; info . Email = rdr . GetString ( CODE_INTEGER ) ; info . City = rdr . GetString ( CODE_INTEGER ) ; } } } <EOF>
company_reader2 = search_company2 . ExecuteReader ( ) ; if ( company_reader2 != null && company_reader2 . HasRows ) { company_reader2 . Read ( ) ; dateform . Text = company_reader2 [ CODE_INTEGER ] . ToString ( ) ; } <EOF>
myPort . DataReceived += myPort_DataReceived ; <EOF>
namespace TheNamespace { public partial class TheEntity { public DateTime DateAdded { get { } set { } } } } <EOF>
request . Headers . Add ( CODE_STRING , userID ) ; request . Headers . Add ( CODE_STRING , password ) ; <EOF>
if ( sheet . get_FilterMode ( ) ) { sheet . ShowAllData ( ) ; } <EOF>
public class C { private readonly object _parent ; public C ( object parent ) { _parent ; } public void Do ( ) { Type type = _parent != null ? _parent . GetType ( ) : null ; } } <EOF>
System . Net . NetworkInformation . NetworkInterface . GetIsNetworkAvailable ( ) <EOF>
protected void gridView_RowUpdating ( object sender , GridViewUpdateEventArgs e ) { GridViewRow row = gridView . Rows [ e . RowIndex ] ; FileUpload fileUpload = row . Cells [ CODE_INTEGER ] . FindControl ( CODE_STRING ) as FileUpload ; if ( fileUpload != null && fileUpload . HasFile ) { fileUpload . SaveAs ( Server . MapPath ( CODE_STRING + fileUpload . FileName ) ) ; } } <EOF>
List < Column > ListOfColumns { get ; set ; } <EOF>
Regex reg = new Regex ( CODE_STRING ) ; do { DisplayDivider ( CODE_STRING ) ; strInput = GetInput ( CODE_STRING ) ; isValid = reg . IsMatch ( strInput ) ; if ( ! isValid ) { isValid = false ; Console . WriteLine ( CODE_STRING + strInput + CODE_STRING ) ; } } while ( ! isValid ) ; <EOF>
public FileResult GetFile ( ) { byte [ ] filebytes ; return File ( filebytes , CODE_STRING ) ; } <EOF>
Decimal . Parse ( CODE_STRING , System . Globalization . CultureInfo . InvariantCulture ) ; <EOF>
private void lblMove_KeyUp ( object server , KeyEventArgs e ) { Point location = button1 . Location ; switch ( e . KeyCode ) { case Keys . Up : location . Y = location . Y - CODE_INTEGER ; break ; case Keys . Down : location . Y = location . Y + CODE_INTEGER ; break ; case Keys . Right : location . X = location . X + CODE_INTEGER ; break ; case Keys . Left : location . X = location . X - CODE_INTEGER ; break ; } button1 . Location = location ; } <EOF>
List < Action < Graphics > > actions = new List < Action < Graphics > > ( ) ; actions . Add ( gr = > gr . Drawrectangle ( pen , p1 , p2 ) ) ; actions . Add ( gr = > gr . FillEllipse ( brush , p , x , y ) ) ; <EOF>
string username = root . Elements ( CODE_STRING ) . First ( el = > ( string ) el . Attribute ( CODE_STRING ) == type ) . Element ( CODE_STRING ) . Value ; <EOF>
Bitmap . GetPixel ( ) <EOF>
public class MyListener : Java . Lang . Object , ExpandableListView . IOnChildClickListener { public override bool OnChildClick ( ExpandableListView parent , View v , int groupPosition , int childPosition , long id ) { return base . OnChildClick ( parent , v , groupPosition , childPosition , id ) ; } } <EOF>
Register - EngineEvent PowerShell . Exiting - Action { CODE_STRING > > C : \ TEMP \ log . txt } <EOF>
public Bitmap GrayScale ( Bitmap Bmp ) { int rgb ; Color c ; for ( int y = CODE_INTEGER ; y < Bmp . Height ; y ++ ) for ( int x = CODE_INTEGER ; x < Bmp . Width ; x ++ ) { c = Bmp . GetPixel ( x , y ) ; rgb = ( int ) ( ( c . R + c . G + c . B ) / CODE_INTEGER ) ; Bmp . SetPixel ( x , y , Color . FromArgb ( rgb , rgb , rgb ) ) ; } return Bmp ; } <EOF>
var num = CODE_REAL ; var numString = ( num * CODE_INTEGER ) . ToString ( CODE_STRING ) ; <EOF>
private void backgroundWorker1_RunWorkerCompleted ( object sender , RunWorkerCompletedEventArgs e ) { if ( e . Error != null ) MessageBox . Show ( e . Error . ToString ( ) ) ; } <EOF>
private void btnSubmit_Click ( object sender , EventArgs e ) { DisplayCustomMessageBox ( CODE_STRING ) ; Thread t = new Thread ( ( ) = > { ProcessRequest ( ) ; this . BeginInvoke ( new Eventhandler ( ( s , ee ) = > { HideCustomMessageBox ( ) ; } ) ) ; } ) ; t . Start ( ) ; } <EOF>
var props = typeof ( Foo ) . GetProperties ( BindingFlags . Public | BindingFlags . Instance ) ; foreach ( PropertyInfo p in props ) { } <EOF>
e . Graphics . DrawString ( dataToPrint , valueFont , System . Drawing . Brushes . Black , CODE_INTEGER , CODE_INTEGER , format ) ; <EOF>
List < string > strList = new List < string > { CODE_STRING , CODE_STRING } ; List < Person > people = new List < Person > { new Person { Name = CODE_STRING , Age = CODE_INTEGER } , new Person { Name = CODE_STRING , Age = CODE_INTEGER } } ; <EOF>
Process . Start ( CODE_STRING ) <EOF>
String Residence = xmlDoc . Descendants ( CODE_STRING ) . Single ( ) . Element ( CODE_STRING ) ; if ( Residence == CODE_STRING ) { Residence = null ; } <EOF>
y = ( myNumber - CODE_INTEGER ) / CODE_INTEGER + CODE_INTEGER ; x = ( myNumber - CODE_INTEGER ) % CODE_INTEGER + CODE_INTEGER ; <EOF>
public ActionResult Edit ( int id ) { string userName = User . Identity . Name ; var user = db . Users . First ( u = > u . UserName == userName ) ; icerik icerik = db . icerik . Find ( id ) ; if ( icerik . Userid . HasValue && icerik . Userid . Value == user . UserId ) { ViewBag . Kategorid = new SelectList ( db . Kategoriler , CODE_STRING , CODE_STRING , icerik . Kategorid ) ; return View ( icerik ) ; } return RedirectToAction ( CODE_STRING , CODE_STRING ) ; } <EOF>
proteted void login_Authenticate ( object sender , AuthenticateEventArgse ) { AuthenticationServiceClient client = new AuthenticationServiceClient ( ) ; e . Authenticated = client . Login ( login . UserName , login . Password , CODE_STRING , true ) ; } <EOF>
protected void btnDownloadList_Click ( object sender , EventArgs e ) { ExcelExport = CODE_STRING + StringExport + CODE_STRING ; Response . AddHeader ( CODE_STRING , CODE_STRING ) ; Response . ContentType = CODE_STRING ; byte [ ] BOM = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; Response . BinaryWrite ( BOM ) ; Response . Write ( ExcelExport ) ; Response . End ( ) ; } <EOF>
System . Web . HttpUtility . UrlDecode <EOF>
string sqlFormattedDate = myDateTime . ToString ( CODE_STRING ) ; <EOF>
var gridView = listView . View as GridView ; gridView . Columns [ CODE_INTEGER ] . Header = CODE_STRING ; <EOF>
using System ; using Microsoft . VisualBasic . FileIO ; class Program { static void Main ( ) { using ( TextFieldParser parser = new TextFieldParser ( CODE_STRING ) ) { parser . Delimiters = new string [ ] { CODE_STRING } ; while ( true ) { string [ ] parts = parser . ReadFields ( ) ; if ( parts == null ) { break ; } Console . WriteLine ( CODE_STRING , parts . Length ) ; } } } } <EOF>
using MySql . Data . MysqlClient ; namespace OwnNameSpace { public class Database { MySqlConnection connect ; string connection = CODE_STRING ; public Database ( ) { } public MySqlDataReader Select ( string query ) { connect = new MySqlConnection ( connection ) ; connect . Close ( ) ; MySqlCommand command = connect . CreateCommand ( ) ; command . CommandText = query ; connect . Open ( ) ; MySqlDataReader reader ; return reader = command . ExecuteReader ( ) ; } public Boolean Modify ( string query ) { connect = new MySqlConnection ( connection ) ; MySqlCommand command = connect . CreateCommand ( ) ; command . CommandText = query ; connect . Open ( ) ; try { command . ExecuteNonQuery ( ) ; return true ; } catch { return false ; } } } } <EOF>
employees . Except ( employees . Join ( managers , e = > e . Id , m = > m . EmployeeId , ( e , m ) = > e ) ) ; <EOF>
public class DecoratorProxy < T > : RealProxy { private T m_instance ; public static T CreateDecorator < T > ( T instance ) { var proxy = new DecoratorProxy < T > ( instance ) ; ( T ) proxy . GetTransparentProxy ( ) ; } private DecoratorProxy ( T instance ) : base ( typeof ( T ) ) { m_instance = instance ; } public override IMessage Invoke ( IMessage msg ) { IMethodCallMessage methodMessage = msg as IMethodCallMessage ; if ( methodMessage != null ) { methodMessage . MethodBase . Invoke ( m_instance , methodMessage . Args ) ; return new ReturnMessage ( retval , etc , etc ) ; } } } <EOF>
private void dataGridView1_EditingControlShowing ( object sender , DataGridViewEditingControlShowingEventArgs e ) { ComboBox combo = e . Control as ComboBox ; if ( combo != null ) combo . SelectedIndexChanged += GridComboSelectedIndexChanged ; } private void GridComboSelectedIndexChanged ( object sender , EventArgs e ) { ComboBox combo = sender as ComboBox ; } <EOF>
var offset = ( int ) Math . Floor ( buffer . WaveFormat . SampleRate * barDuration / CODE_INTEGER ) * CODE_INTEGER * bar ; <EOF>
public static void Serialize < T > ( this IList < T > list , string fileName ) { try { var ds = new DataContractSerializer ( list . GetType ( ) ) ; using ( Stream s = File . Create ( fileName ) ) ds . WriteObject ( s , list ) ; } catch ( Exception e ) { _logger . Error ( e ) ; throw ; } } <EOF>
if ( ArrivalDate != DBNull . Value ) param [ CODE_INTEGER ] . Value = Convert . ToDateTime ( ArrivalDate ) ; else { param [ CODE_INTEGER ] . Value = } <EOF>
return Json ( parts , JsonRequestBehavior . AllowGet ) ; <EOF>
var xV = xB - xA ; var yV = yB - yA ; var v = Math . Sqrt ( xV * xV + yV * yV ) ; var pArr1 = new [ ] { xA + xV / CODE_INTEGER - xV * arrHeight / ( CODE_INTEGER * v ) - yV * arrWidth / ( CODE_INTEGER * v ) , yA + yV / CODE_INTEGER - yV * arrHeight / ( CODE_INTEGER * v ) + xV * arrWidth / ( CODE_INTEGER * v ) } ; var pArr2 = new [ ] { xA + xV / CODE_INTEGER - xV * arrHeight / ( CODE_INTEGER * v ) + yV * arrWidth / ( CODE_INTEGER * v ) , yA + yV / CODE_INTEGER - yV * arrHeight / ( CODE_INTEGER * v ) - xV * arrWidth / ( CODE_INTEGER * v ) } ; var pArr3 = new [ ] { xA + xV / CODE_INTEGER + xV * arrHeight / ( CODE_INTEGER * v ) , yA + yV / CODE_INTEGER + yV * arrHeight / ( CODE_INTEGER * v ) } ; <EOF>
public override void OnApplyTemplate ( ) { base . OnApplyTemplate ( ) ; dataGrid = GetTemplateChild ( CODE_STRING ) as DataGrid ; dataGrid . MouseUp += new MouseButtonEventHandler ( dataGrid_MouseUp ) ; docGrid = GetTemplateChild ( CODE_STRING ) as DataGrid ; docGrid . MouseUp += new MouseButtonEventHandler ( docGrid_MouseUp ) ; } public void dataGrid_MouseUp ( object sender , MouseEventArgs e ) { docGrid . UnselectAll ( ) ; } public void docGrid_MouseUp ( object sender , MouseEventArgs e ) { dataGrid . UnselectAll ( ) ; } <EOF>
string result = string . Empty ; foreach ( var item in jobj ) { if ( ! string . IsNullOrEmpty ( result ) ) { result += CODE_STRING ; } result += item . Key ; } Console . WriteLine ( result ) ; <EOF>
DateTime . Now . ToString ( CODE_STRING ) ; <EOF>
public interface ITest { void DoSomething ( ) ; } public void GetData < T , U > ( T varA , int acao ) where U : ITest , new ( ) { var item = new U ( ) ; item . DoSomething ( ) ; } <EOF>
decimal balance = CODE_REAL ; int months = CODE_INTEGER ; int monthsRemaining = CODE_INTEGER ; for ( var i = CODE_INTEGER ; i < months ; i ++ ) { decimal thisMonth = Math . Round ( balance / monthsRemaining , CODE_INTEGER ) ; balance -= thisMonth ; monthsRemaining -= CODE_INTEGER ; Console . WriteLine ( CODE_STRING , i + CODE_INTEGER , thisMonth ) ; } <EOF>
int count = CODE_INTEGER ; using ( var dr = new SqlDataReader ( cmd ) ) { while ( dr . Read ( ) ) count ++ ; } <EOF>
using ( Model m = new Model ( ) ) { var result = from attack in m . Attacks group attack by attack . Player into attacksForPlayer select new { PlayerName = attacksForPlayer . Key . Name , NumberOfAttacks = attacksForPlayer . Count ( ) , NumberOfKills = ( from k in m . Kills where attacksForPlayer . Contains ( k . Attack ) select k ) . Count ( ) } ; foreach ( var r in result ) { } } <EOF>
int result = CODE_INTEGER ; int final_result = CODE_INTEGER ; for ( String word : words ) { if ( word == CODE_STRING ) { result = CODE_INTEGER ; } if ( word == CODE_STRING ) { result = CODE_INTEGER ; } if ( word == CODE_STRING ) { result = CODE_INTEGER ; } if ( word == CODE_STRING ) { final_result = final_result + result * CODE_INTEGER ; } } final_result = final_result + result ; <EOF>
var rangeStart = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; var rangeEnd = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; var res = list . Where ( item = > ( item . StartTime < rangeStart ? rangeStart : item . StartTime ) < ( item . EndTime < rangeEnd ? item . EndTime : rangeEnd ) ) . ToList ( ) ; <EOF>
string patternstart = Regex . Escape ( CODE_STRING ) ; string patternend = Regex . Escape ( CODE_STRING ) ; string regexexpr = patternstart + CODE_STRING + patternend ; <EOF>
if ( new FileInfo ( path ) . Length % CODE_INTEGER == CODE_INTEGER ) { using ( var reader = new StreamReader ( path ) ) { . . . } } else throw new ArgumentException ( CODE_STRING , CODE_STRING ) ; <EOF>
private IEnumerable < PropertyInfo > SelectProperties ( Type type ) { const BindingFlags bindingFlags = BindingFlags . Instance | BindingFlags . DeclaredOnly | BindingFlags . Public ; return from property in type . GetProperties ( bindingFlags ) where property . CanWrite && ! property . IsDefined ( typeof ( SuppressNotify ) ) select property ; } [ OnLocationSetValueAdvice , MethodPointcut ( CODE_STRING ) ] public void OnSetValue ( LocationInterceptionArgs args ) { if ( args . Value != args . GetCurrentValue ( ) ) { args . ProceedSetValue ( ) ; this . OnPropertyChangedMethod . Invoke ( null ) ; } } <EOF>
var result = accounts . OrderBy ( x = > x . Id ) . Select ( x = > new { AccountNumber = x . AccountNumber , Balance = x . Balance , BillToCompanyName = x . BillToContact . CompanyName , BillToName = x . BillToContact . Name , PhoneNumbersCount = x . BillToContact . PhoneNumbers . Count ( ) , PhoneNumbersList = x . BillToContact . PhoneNumbers . Select ( z = > z . Number ?? String . Empty ) . ToList ( ) } ) ; <EOF>
Regex r = new Regex ( CODE_STRING , RegexOptions . None ) ; Console . WriteLine ( r . Replace ( CODE_STRING , CODE_STRING ) ) ; Console . Read ( ) ; <EOF>
using D = System . Diagnostics ; . . . protected void Application_Start ( ) { if ( D . Trace . Listeners [ CODE_STRING ] == null ) { D . Trace . Listeners . Add ( new MyTraceListener ( CODE_STRING ) { Name = CODE_STRING } ) ; } . . . } <EOF>
var rnd = new Random ( ) ; var shuffledList = list . OrderBy ( x = > rnd . Next ( ) ) . ToList ( ) ; <EOF>
string resourceVal = SPUtility . GetLocalizedString ( CODE_STRING , CODE_STRING , language ) ; <EOF>
public static Int32 ? ParseInt32 ( this string str ) { Int32 k ; if ( Int32 . TryParse ( str , out k ) ) return k ; return null ; } <EOF>
var morseDictonary = new Dictionary < char , string > ( ) { { CODE_CHAR , CODE_STRING } , { CODE_CHAR , CODE_STRING } , { CODE_CHAR , CODE_STRING } , { CODE_CHAR , CODE_STRING } , { CODE_CHAR , CODE_STRING } , } ; var example = CODE_STRING ; var result = String . Join ( CODE_STRING , example . Select ( x = > morseDictonary [ x ] ) ) ; <EOF>
XDocument xDoc = XDocument . Load ( CODE_STRING ) ; string amt = xDoc . Descendants ( CODE_STRING ) . Elements ( CODE_STRING ) . Single ( ) . Value ; <EOF>
context . Database . ExecuteSqlCommand ( TransactionalBehavior . DoNotEnsureTransaction , CODE_STRING ) ; <EOF>
private void btn1_DropDownItemClicked ( object sender , ToolStripItemClickedEventArgs e ) { MessageBox . Show ( e . ClickedItem . Text ) ; } <EOF>
PageReference listRoot = CurrentPage . PageLink ; <EOF>
public Texture2D AddWatermark ( Texture2D background , Texture2D watermark ) { int startX = CODE_INTEGER ; int startY = background . height - watermark . height ; for ( int x = startX ; x < background . width ; x ++ ) { for ( int y = startY ; y < background . height ; y ++ ) { Color bgColor = background . GetPixel ( x , y ) ; Color wmColor = watermark . GetPixel ( x - startX , y - startY ) ; Color final_color = Color . Lerp ( bgColor , wmColor , wmColor . a / CODE_REAL ) ; background . SetPixel ( x , y , final_color ) ; } } background . Apply ( ) ; return background ; } <EOF>
insert into someTable ( id , name ) values newid ( ) , ' some name ' <EOF>
public class IProductMetadata { [ HiddenInput ( DisplayValue = false ) ] int ProductID ; [ Required ( ErrorMessage = CODE_STRING ) ] string Name ; [ Required ( ErrorMessage = CODE_STRING ) ] string Description ; } [ MetadataType ( typeof ( IProductMetadata ) ) ] public partial class Product { } <EOF>
public static void testConnection ( ) { SapROTWr . CSapROTWrapper sapROTWrapper = new SapROTWr . CSapROTWrapper ( ) ; object SapGuilRot = sapROTWrapper . GetROTEntry ( CODE_STRING ) ; object engine = SapGuilRot . GetType ( ) . InvokeMember ( CODE_STRING , System . Reflection . BindingFlags . InvokeMethod , null , SapGuilRot , null ) ; SAPconnection . sapGuiApp = engine as GuiApplication ; GuiConnection connection = sapGuiApp . Connections . ElementAt ( CODE_INTEGER ) as GuiConnection ; GuiSession session = connection . Children . ElementAt ( CODE_INTEGER ) as GuiSession ; MessageBox . Show ( session . Info . User + CODE_STRING + session . Info . Transaction ) ; } <EOF>
. . . student . StudentId = CODE_INTEGER ; . . . . public void UpdateStudent ( Student student ) { using ( IDataContext ctx = DataContext . Instance ( ) ) { var rep = ctx . GetRepository < Student > ( ) ; rep . Update ( student ) ; } } <EOF>
protected void cal_SelectionChanged ( object sender , EventArgs e ) { lblSelectDate . Text = cal . SelectedDate . ToString ( ) ; } <EOF>
var p = new Person ( ) ; p . FirstName = CODE_STRING ; p . MI = CODE_STRING ; p . LastName = CODE_STRING ; System . Xml . Serialization . XmlSerializer x = new System . Xml . Serialization . XmlSerializer ( p . GetType ( ) ) ; x . Serialize ( Console . Out , p ) ; <EOF>
CODE_STRING <EOF>
if ( e . Key == Key . Enter ) { LoginButton_Click ( sender , e ) ; } <EOF>
javascript : document . getElementById ( ' theCheckBox ' ) . setAttribute ( ' checked ' , ' checked ' ) ; document . getElementById ( ' theForm ' ) . submit ( ) ; <EOF>
byte [ ] send_buffer = { ( ( byte ) MyEnum . Enum1 ) } ; <EOF>
Private Sub PrintTableOrView ( ByVal table As DataTable , ByVal label As String ) Dim sw As System . IO . StringWriter Dim output As String Console . WriteLine ( label ) ' Loop through each row in the table . ' For Each row As DataRow In table . Rows sw = New System . IO . StringWriter ' Loop through each column . ' For Each col As DataColumn In table . Columns ' Output the value of each column ' s data . sw . Write ( row ( col ) . ToString ( ) & CODE_STRING ) Next output = sw . ToString ' Trim off the trailing CODE_STRING , so the output looks correct . ' If output . Length > CODE_INTEGER Then output = output . Substring ( CODE_INTEGER , output . Length - CODE_INTEGER ) End If ' Display the row in the console window . ' Console . WriteLine ( output ) Next Console . WriteLine ( ) End Sub <EOF>
grid . ClearSelection ( ) ; for ( int r = CODE_INTEGER ; r < grid . RowCount ; r ++ ) grid [ columnIndex , r ] . Selected = true ; <EOF>
companies . Select ( company = > company . Name . Substring ( CODE_INTEGER , CODE_INTEGER ) ) ; <EOF>
BigInteger . TryParse ( string . Format ( CODE_STRING , CODE_STRING ) , style , . . . ) <EOF>
g . TextRenderingHint = System . Drawing . Text . TextRenderingHint . SingleBitPerPixel ; <EOF>
public class TableSource : MvxSimpleTableViewSource { private TwitterView _parent ; public TableSource ( UITableView tableView , TwitterView parent ) : base ( tableView , TweetCell3 . Identifier , TweetCell3 . Identifier ) { _parent = parent ; tableView . RegisterNibForCellReuse ( UINib . FromName ( TweetCell3 . Identifier , NSBundle . MainBundle ) , TweetCell3 . Identifier ) ; } public override float GetHeightForRow ( UITableView tableView , NSIndexPath indexPath ) { return _parent . SomeMethod ( indexPath ) ; } } <EOF>
create function dbo . F_GREAT_CIRCLE_DISTANCE ( @Latitude1 float , @Longitude1 float , @Latitude2 float , @Longitude2 float ) returns float as begin declare @radius float declare @lon1 float declare @lon2 float declare @lat1 float declare @lat2 float declare @a float declare @distance float -- Sets average radius of Earth in Miles set @radius = CODE_INTEGER -- Convert degrees to radians set @lon1 = radians ( @Longitude1 ) set @lon2 = radians ( @Longitude2 ) set @lat1 = radians ( @Latitude1 ) set @lat2 = radians ( @Latitude2 ) set @a = sqrt ( square ( sin ( ( @lat2 - @lat1 ) / CODE_REAL E ) ) + ( cos ( @lat1 ) * cos ( @lat2 ) * square ( sin ( ( @lon2 - @lon1 ) / CODE_REAL E ) ) ) ) set @distance = @radius * ( CODE_REAL E * asin ( case when CODE_REAL E < @a then CODE_REAL E else @a end ) ) return @distance end <EOF>
List < KeyValuePair < string , object > > <EOF>
List < string > femalePetNames = { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; public void StringRandom ( ) { if ( femalePetNames . Count > CODE_INTEGER ) { Random bsd = new Random ( ) ; int fIndex = bsd . Next ( CODE_INTEGER , femalePetNames . Count ) ; txttBox2 . Text = femalePetNames [ fIndex ] ; femalePetNames . RemoveAt ( fIndex ) ; } } <EOF>
public static void Main ( string [ ] args ) { var file = CODE_STRING ; var text = File . ReadAllText ( file ) ; Console . WriteLine ( " Original text reads : { CODE_INTEGER } " , text ) ; Console . WriteLine ( " The shifted code is : { CODE_INTEGER } " , Caesar ( text , CODE_INTEGER ) ) ; } <EOF>
protected override Size ArrangeOverride ( Size arrangeSize ) { base . ArrangeOverride ( arrangeSize ) ; return arrangeSize ; } <EOF>
private void AddMemberToGroup ( string bindString , string newMember ) { try { DirectoryEntry ent = new DirectoryEntry ( bindString ) ; ent . Properties [ CODE_STRING ] . Add ( newMember ) ; ent . CommitChanges ( ) ; } catch ( Exception e ) { return ; } } <EOF>
Dim x ? As Integer Dim x As Integer ? Dim x As Nullable ( Of Integer ) Dim s As Integer s = If ( x , CODE_INTEGER ) <EOF>
using System . Text . RegularExpressions ; using System . IO ; using System . Text ; string pattern = CODE_STRING ; string strPath = new string ( CODE_STRING ) ; string strDateTime = DateTime . Now . ToString ( CODE_STRING ) ; string FileToCopy = CODE_STRING ; string NewCopy = strPath + strDateTime + CODE_STRING ; StringBuilder sb = new StringBuilder ( CODE_STRING ) ; if ( System . IO . File . Exists ( FileToCopy ) == true ) { string [ ] lines = File . ReadAllLines ( FileToCopy ) ; foreach ( string line in lines ) { if ( Regex . IsMatch ( line , pattern ) ) { sb . Append ( line + System . Environment . NewLine ) ; } } } if ( sb . Length > CODE_INTEGER ) { System . IO . File . WriteAllText ( NewCopy , sb . ToString ) ; } <EOF>
( ( Action < ViewModel > ) d1 ) ( yourparameter ) <EOF>
using System ; using System . Data ; using Microsoft . SqlServer . Dts . Runtime ; using System . Windows . Forms ; namespace ST_8eab6a8fbc79431c8c9eb80339c09d1d . csproj { public class myclass { int a , b ; public myclass ( ) { a = CODE_INTEGER ; b = CODE_INTEGER ; } } [ System . AddIn . AddIn ( CODE_STRING , Version = CODE_STRING , Publisher = CODE_STRING , Description = CODE_STRING ) ] public partial class ScriptMain : Microsoft . SqlServer . Dts . Tasks . ScriptTask . VSTARTScriptObjectModelBase { #region VSTA generated code enum ScriptResults { Success = Microsoft . SqlServer . Dts . Runtime . DTSExecResult . Success , Failure = Microsoft . SqlServer . Dts . Runtime . DTSExecResult . Failure } ; #endregion public void Main ( ) { Dts . TaskResult = ( int ) ScriptResults . Success ; myclass m = new myclass ( ) ; Dts . Variables [ CODE_STRING ] . Value = m ; } } <EOF>
PostBuffer . Split ( new string [ ] { CODE_STRING } , StringSplitOptions . None ) ; <EOF>
public static double MetersToPixels ( double meters , double latitude , double zoomLevel ) { var pixels = meters / ( CODE_REAL * Math . Cos ( latitude ) / ( Math . Pow ( CODE_INTEGER , zoomLevel ) ) ) ; return Math . Abs ( pixels ) ; } <EOF>
if ( txtUserName . Text == CODE_STRING && txtPassword . Password . ToString ( ) == CODE_STRING ) <EOF>
protected void ddlViewLabel_SelectedIndexChanged ( object sender , EventArgs e ) { DropDownList d = ( DropDownList ) sender ; } <EOF>
DataTable table = new DataTable ( CODE_STRING ) ; using ( OdbcConnection conn = new OdbcConnection ( CODE_STRING ) ) { using ( OdbcDataAdapter da = new OdbcDataAdapter ( CODE_STRING , conn ) ) da . Fill ( table ) ; } dataGridView1 . DataSource = table . DefaultView ; <EOF>
class ClockComponent : Component { public ClockComponent ( IContainer container ) { } } <EOF>
TextBox . LostFocus <EOF>
IDataObject data = null ; Exception threadEx = null ; Thread staThread = new Thread ( delegate ( ) { try { data = Clipboard . GetDataObject ( ) ; if ( data . GetDataPresent ( DataFormats . Bitmap ) ) { Bitmap bmp = ( System . Drawing . Bitmap ) data . GetData ( DataFormats . Bitmap ) ; string filename = String . Format ( CODE_STRING , i . ToString ( ) ) ; bmp . Save ( filename ) ; } } catch ( Exception ex ) { threadEx = ex ; } } ) ; staThread . SetApartmentState ( ApartmentState . STA ) ; staThread . Start ( ) ; staThread . Join ( ) ; <EOF>
List < UIElement > labels = new List < UIElement > ( ) ; foreach ( var block in myRTB . Document . Blocks ) { if ( block is Paragraph ) { var paragraph = block as Paragraph ; foreach ( var inline in paragraph . Inlines ) { if ( inline is InlineUIContainer ) { labels . Add ( ( ( InlineUIContainer ) inline ) . Child ) ; } } } } <EOF>
foreach ( Control ctrl in this . Controls ) { ctrl . Enter += new EventHandler ( Focus_Changed ) ; } <EOF>
Func < IEnumerable < XElement > , string , string , IEnumerable < XElement > > functionSearch ; functionSearch = ( l , x , y ) = > l . Where ( m = > m . Descendants ( x ) . Any ( v = > v . Value . Contains ( y ) ) ) ; <EOF>
G3FacsimileBodyPart :: = SEQUENCE { parameters G3FacsimileParameters , data G3FacsimileData } G3FacsimileParameters :: = SET { number - of - pages [ CODE_INTEGER ] INTEGER OPTIONAL , non - basic - parameters [ CODE_INTEGER ] G3FacsimileNonBasicParameters OPTIONAL } G3FacsimileData :: = SEQUENCE OF BIT STRING <EOF>
XDocument configXML = XDocument . Load ( CODE_STRING ) ; <EOF>
DECLARE @tbl TABLE ( ID INT , SomeValue VARCHAR ( CODE_INTEGER ) ) ; INSERT INTO @tbl VALUES ( CODE_INTEGER , ' value CODE_INTEGER ' ) , ( CODE_INTEGER , ' value CODE_INTEGER ' ) , ( CODE_INTEGER , ' value CODE_INTEGER ' ) , ( CODE_INTEGER , ' value CODE_INTEGER ' ) , ( CODE_INTEGER , ' value CODE_INTEGER ' ) ; DECLARE @ListOfIDs VARCHAR ( CODE_INTEGER ) = ' CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ' ; WITH ListOfIDs AS ( SELECT CAST ( ' < root > < r > ' + REPLACE ( @ListOfIDs , CODE_CHAR , ' < / r > < r > ' ) + ' < / r > < / root > ' AS XML ) AS IDsAsXML ) , ListOfIDsResolved AS ( SELECT x . y . value ( CODE_CHAR , ' int ' ) AS ID FROM ListOfIDs CROSS APPLY ListOfIDs . IDsAsXML . nodes ( ' / root / r ' ) x ( y ) ) SELECT * FROM @tbl AS tbl INNER JOIN ListOfIDsResolved ON tbl . ID = ListOfIDsResolved . ID <EOF>
if ( new [ ] { CODE_STRING , CODE_STRING } . Contains ( CODE_STRING ) ) return true ; <EOF>
new TaskCompletionSource < WebResponse > ( TaskCreationOptions . LongRunning ) ; <EOF>
% PDF - 1.X <EOF>
DataRowView vrow = ( DataRowView ) cboItems . SelectedItem ; DataRow row = vrow . Row ; <EOF>
myControl . Style = ( Style ) res [ CODE_STRING ] ; <EOF>
string input = CODE_STRING ; var output = String . Join ( CODE_STRING , Regex . Matches ( input , CODE_STRING ) . Cast < Match > ( ) . Select ( m = > m . Groups [ CODE_INTEGER ] . Value ) ) ; <EOF>
public DataTable CreateDataTable ( bool headerRow ) <EOF>
var lines = new List < string > ( File . ReadLines ( CODE_STRING ) ) ; foreach ( string line in lines ) { if ( line . StartsWith ( CODE_STRING ) ) continue ; } File . WriteAllLines ( CODE_STRING , lines ) ; <EOF>
public static string GetDisplayName < T > ( T toCheck ) { Type enumType = typeof ( T ) ; if ( ! enumType . IsEnum ) return null ; MemberInfo [ ] members = enumType . GetMember ( toCheck . ToString ( ) ) ; if ( ( members == null ) || ( members . Length != CODE_INTEGER ) ) return toCheck . ToString ( ) ; foreach ( MemberInfo memInfo in members ) { DisplayAttribute [ ] attrs = ( DisplayAttribute [ ] ) memInfo . GetCustomAttributes ( typeof ( DisplayAttribute ) , false ) ; if ( ( attrs != null ) && ( attrs . Length == CODE_INTEGER ) ) return attrs [ CODE_INTEGER ] . Name ; } return toCheck . ToString ( ) ; } <EOF>
protected void Button1_Click ( object sender , EventArgs e ) { string FilePath = ConfigurationManager . AppSettings [ CODE_STRING ] . ToString ( ) ; bool blSucces = false ; string filename = string . Empty ; string pathname = string . Empty ; string filePathName = string . Empty ; Button btn = ( Button ) sender ; DetailsViewRow drv = ( DetailsViewRow ) btn . Parent . Parent ; FileUpload FileEditUpload1 = ( FileUpload ) drv . FindControl ( CODE_STRING ) ; if ( FileEditUpload1 . HasFile ) { } } <EOF>
DECLARE @TABLE TABLE ( AUTOID INT IDENTITY ( CODE_INTEGER , CODE_INTEGER ) , BRANCHID INT , QUTNO AS CAST ( BRANCHID AS VARCHAR ( CODE_INTEGER ) ) + CODE_CHAR + CAST ( AUTOID AS VARCHAR ( CODE_INTEGER ) ) ) INSERT INTO @TABLE ( BRANCHID ) VALUES ( CODE_INTEGER ) , ( CODE_INTEGER ) SELECT * FROM @TABLE <EOF>
if ( ddl . Items . Count <= CODE_INTEGER ) { e . Cancel = true ; } <EOF>
ImageSRC = entry . Element ( media + CODE_STRING ) . Element ( media + CODE_STRING ) . Attribute ( CODE_STRING ) . Value <EOF>
Label tempLab = new Label ( ) ; tempLab . Text = CODE_STRING ; tempLab . AutoSize = true ; Controls . Add ( tempLab ) ; tempLab . Location = new Point ( CODE_INTEGER , CODE_INTEGER ) ; Button tempBut = new Button ( ) ; tempBut . Text = CODE_STRING ; Controls . Add ( tempBut ) ; tempBut . Location = new Point ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
TfsTeamProjectCollection collection = new TfsTeamProjectCollection ( new Uri ( http : new System . Net . NetworkCredential ( CODE_STRING , CODE_STRING ) ) ; collection . EnsureAuthenticated ( ) ; <EOF>
Assembly . Load ( CODE_STRING ) <EOF>
beverage2 = new Mocha ( beverage2 ) ; beverage2 = new DarkRoast ( beverage2 ) ; beverage2 = new Whip ( beverage2 ) ; <EOF>
private void Form1_KeyDown ( object sender , KeyEventArgs e ) { if ( e . Control && e . Shift && e . KeyCode == Keys . P ) { MessageBox . Show ( CODE_STRING ) ; } } <EOF>
private List < Item > _linkedItems ; private void UpdateLinksTo ( ) { this . LinksTo = string . Join < string > ( _linkedItems . Select ( i = > i . ID . ToString ( ) ) ) ; } [ NotMapped ] public ReadOnlyCollection < Item > LinkedItems { get { if ( _linkedItems == null ) { _linkedItems = db . Items . Where ( i = > this . LinksTo . Split ( CODE_CHAR ) . Select ( x = > int . Parse ( x ) ) . Contains ( i . ID ) ) . ToList ( ) ; } return _linkedItems . AsReadOnly ( ) ; } } [ NotMapped ] public void AddLinkedItem ( Item item ) { if ( ! _linkedItems . Select ( i = > i . ID ) . Contains ( item . ID ) ) { _linkedItems . Add ( item ) ; UpdateLinksTo ( ) ; } } <EOF>
private void Form1_Load ( object sender , EventArgs e ) { var systemSounds = new [ ] { System . Media . SystemSounds . Asterisk , System . Media . SystemSounds . Beep , System . Media . SystemSounds . Exclamation , System . Media . SystemSounds . Hand , System . Media . SystemSounds . Question } ; comboBox1 . DataSource = systemSounds ; comboBox1 . SelectedIndexChanged += new EventHandler ( comboBox1_SelectedIndexChanged ) ; } void comboBox1_SelectedIndexChanged ( object sender , EventArgs e ) { ( ( System . Media . SystemSound ) comboBox1 . SelectedItem ) . Play ( ) ; } <EOF>
SyntaxFactory . RegionDirectiveTrivia ( ) <EOF>
mb . Mem_Email = reader [ CODE_STRING ] == System . DBNull . Value ? null : ( string ) reader [ CODE_STRING ] ; <EOF>
private void yourTextBox_GotFocus ( object sender , RoutedEventArgs e ) { ( sender as TextBox ) . Text = string . Empty ; } <EOF>
Response . End ( ) <EOF>
new RectangleF ( Math . Min ( start . X , end . X ) , Math . Min ( start . Y , end . Y ) , Math . Abs ( start . X - end . X ) , Math . Abs ( start . Y - end . Y ) ) ; <EOF>
dr [ CODE_STRING ] . ToString ( ) <EOF>
Mono . Cecil <EOF>
worksheet . Activate ( ) ; worksheet . Application . ActiveWindow . SplitColumn = CODE_INTEGER ; worksheet . Application . ActiveWindow . FreezePanes = true ; <EOF>
tempStroke . DrawingAttributes . Color = Colors . FromArgb ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; <EOF>
textbox1 . select ( ) <EOF>
GetSchema ( ) <EOF>
CREATE procedure SP_GetEmployeeRequests ( @ApproverName varchar ( CODE_INTEGER ) ) AS BEGIN SELECT ed . Emp_Username , rd . Request_Amount , rd . Request_description , bt . Balance_Amount , bt . LastApproval , bt . LastUpdated FROM EmployeeDetails ed JOIN RequestDetails rd ON ed . Emp_ID = rd . emp_ID JOIN BalanceTracker bt ON bt . Emp_ID = rd . Emp_ID JOIN ApprovalDetails ad ON rd . Approved_ID = ad . Approved_ID WHERE ad . Approved_By = @ApproverName END GO <EOF>
public virtual void Dispose ( ) { _Writer . Dispose ( ) ; } <EOF>
Foo foo = new Foo ( ) ; var barValue = foo . GetType ( ) . GetProperty ( CODE_STRING ) . GetValue ( foo , null ) <EOF>
CultureInfo culture = new CultureInfo ( CODE_STRING ) ; Convert . ToDateTime ( date , culture ) ; <EOF>
var r = from i in myList group i by new { i . Number , i . CurrentStatus } into grp select new { Reported = grp . Key . CurrentStatus , Number = grp . Key . Number , Sum = grp . Sum ( x = > x . Details [ CODE_INTEGER ] . Quantity ) , Name = grp . Select ( x = > x . Name ) . First ( ) , Details = grp . Select ( x = > x . Details ) . First ( ) , Descriptions = grp . Select ( x = > x . Descriptions ) . First ( ) , AssignmentId = grp . Select ( x = > x . AssignmentId ) . First ( ) , Listor = grp . Select ( x = > x . Number ) . Count ( ) } ; <EOF>
Environment . TickCount <EOF>
task . ContinueWith ( HandleError , TaskContinuationOptions . OnlyOnFaulted ) ; <EOF>
Astr = new String ( AByte . Select ( b = > ( Char ) ( b + CODE_INTEGER ) ) . ToArray ( ) ) <EOF>
public delegate string IncomingMessageHook ( int id ) ; public event IncomingMessageHook InComingMessage ; private string OnInComingMessage ( int id ) { IncomingMessageHook handler = null ; Delegate [ ] targets = null ; string result ; handler = InComingMessage ; if ( handler != null ) { targets = handler . GetInvocationList ( ) ; foreach ( Delegate target in targets ) { try { handler = ( IncomingMessageHook ) target ; result = handler . Invoke ( id ) ; if ( ! String . IsNullOrEmpty ( result ) ) { break ; } } catch ( Exception ex ) { } } } return result ; } <EOF>
while ( true ) { Thread . Sleep ( CODE_INTEGER ) ; if ( ! System . IO . File . Exists ( FILE_NAME ) ) continue ; using ( System . IO . StreamReader sr = System . IO . File . OpenText ( FILE_NAME ) ) { string s = CODE_STRING ; while ( ( s = sr . ReadLine ( ) ) != null ) { if ( s . Contains ( TEXT_TO_SEARCH ) ) { } } } } <EOF>
foreach ( RepeaterItem item in rptServices . Items ) { if ( item . ItemType == ListItemType . Item || item . ItemType == ListItemType . AlternatingItem ) { var textbox = ( TextBox ) item . FindControl ( CODE_STRING ) ; textbox . Text = CODE_STRING ; } } <EOF>
File . Copy ( CODE_STRING , Path . Combine ( Path . GetTempPath ( ) , Guid . NewGuid ( ) . ToString ( ) + CODE_STRING ) ; <EOF>
String St = proxy . ToString ( ) ; MessageBox . Show ( St . Substring ( CODE_INTEGER , St . LastIndexOf ( CODE_CHAR ) ) . Substring ( St . IndexOf ( CODE_CHAR ) + CODE_INTEGER ) ) ; <EOF>
var ThematicId = parseInt ( ' @ViewBag . thematicid ' ) ; var ThematicName = ' @ViewBag . Name ' ; <EOF>
try { var pathUri = await YouTube . GetVideoUriAsync ( CODE_STRING , YouTubeQuality . Quality480P ) ; player . Source = pathUri . Uri ; } catch ( Exception ex ) { if ( ex is FormatException ) { } } <EOF>
GridView1 . PageIndex = CODE_INTEGER ; <EOF>
String content = msg . Body ; content = content . Replace ( CODE_STRING , CODE_STRING ) ; msg . Body = content ; <EOF>
IRandomAccessStream stream = . . . ; using ( var memoryStream = new MemoryStream ( ) ) { memoryStream . Capacity = ( int ) stream . Size ; var ibuffer = memoryStream . GetWindowsRuntimeBuffer ( ) ; await stream . ReadAsync ( ibuffer , ( uint ) stream . Size , InputStreamOptions . None ) . AsTask ( ) . ConfigureAwait ( false ) ; } <EOF>
var needle = CODE_STRING ; var ix = str . LastIndexOf ( needle ) ; str = str . Substring ( CODE_INTEGER , ix ) + str . Substring ( ix + needle . Length ) ; <EOF>
pbxNy . Image = ( Image ) kortlek [ i ] . bild <EOF>
if ( Grid . Rows . Count > CODE_INTEGER ) { if ( ViewState [ CODE_STRING ] != null ) { DataTable dtCurrentTable = ( DataTable ) ViewState [ CODE_STRING ] ; dtCurrentTable . Rows . RemoveAt ( dtCurrentTable . Rows . Count - CODE_INTEGER ) ; ViewState [ CODE_STRING ] = dtCurrentTable ; Grid . DataSource = dtCurrentTable ; Grid . DataBind ( ) ; } else { Response . Write ( CODE_STRING ) ; } } <EOF>
public class Customer { public string GenderOrEmptyString { get { return this . _gender ?? CODE_STRING ; } } <EOF>
public class GlobalScope { public String Variable { get ; set ; } } <EOF>
Web API only uses model binding for ?? ? simple types ?? ? <EOF>
SyndicationFeed feed = null ; SyndicationClient client = new SyndicationClient ( ) ; var feedUri = new Uri ( myUri ) ; try { var task = client . RetrieveFeedAsync ( feedUri ) . AsTask ( ) ; task . ContinueWith ( ( x ) = > { var result = x . Result ; Parallel . ForEach ( result . Items , item = > { Dispatcher . RunAsync ( Windows . UI . Core . CoreDispatcherPriority . Normal , ( ) = > { test . Text += item . Title . Text ; } ) ; } ) ; } ) ; } catch ( Exception ex ) { } <EOF>
public String description { get ; set ; } <EOF>
XmlNodeList nodeList0 = root . SelectNodes ( CODE_STRING , manager ) ; <EOF>
return list . All ( a = > a . SomeId == CODE_INTEGER || IsAuthorizedOnID ( TheUserID , a . SomeID ) ) ; <EOF>
open master file for reading . count : = CODE_INTEGER while not EOF do read line from master file into buffer write line to output file count : = count + CODE_INTEGER if count = CODE_INTEGER then write added line to output file fi od rename output file to replace input file <EOF>
public interface ISettingsUpgrader { void UpgradeSettings ( ) ; } public abstract class SettingsUpgrader : SettingsUpgrader { protected int version ; public virtual void UpgradeSettings ( ) { version = settingsVersion ; } } public class SettingsUpgraderV2 : SettingsUpgrader { public override void UpgradeSettings ( ) { base . UpgradeSettings ( ) ; if ( version > CODE_INTEGER ) return ; } } public class SettingsUpgraderV3 : SettingsUpgraderV2 { public override void UpgradeSettings ( ) { base . UpgradeSettings ( ) ; if ( version > CODE_INTEGER ) return ; } } <EOF>
routes . MapRoute ( CODE_STRING , CODE_STRING , new { controller = CODE_STRING , action = CODE_STRING , id = CODE_STRING } ) ; <EOF>
private void lsvObjectives_ItemClick ( object sender , ItemClickEventArgs e ) { objectives item = e . ClickedItem as objectives ; var itemText = item . objective ; youtTextBox . Text = item . Description . ToString ( ) ; } <EOF>
KeyValuePair < TKey , TValue > <EOF>
CustomerDataContext dc = new CustomerDataContext ( ) ; Table < Customer > customers = dc . GetTable < Customer > ( ) ; Table < Product > products = dc . GetTable < Product > ( ) ; Table < ProductConsumer > ProductConsumers = dc . GetTable < ProductConsumer > ( ) ; Customer newCustomer = new Customer ( ) ; Product newProduct = new Product ( ) ; customers . InsertOnSubmit ( newCustomer ) ; products . InsertOnSubmit ( newProduct ) ; customers . Context . SubmitChanges ( ) ; products . Context . SubmitChanges ( ) ; ProductConsumer = new ProductConsumer ( ) ; ProductConsumer . Consumer = newCustomer ; ProductConsumer . Product = newProduct ; ProductConsumers . InsertOnSubmit ( ProductConsumer ) ProductConsumers . Context . SubmitChanges ( ) ; <EOF>
public interface IJobListener < TDes > { void CopyS3File ( S3Location src , TDes des , Action < Exception > complete ) ; } <EOF>
private async void MassInvoiceExecuted ( ) { foreach ( Invoice invoice in Invoices ) { DoStuff ( invoice ) ; RefreshExecuted ( ) ; await Task . Delay ( CODE_INTEGER ) ; } } <EOF>
t = tree . Root ; while ( true ) { while ( t . Left != t . Right ) { while ( t . Left != null ) { t = t . Left ; Visit ( t ) ; } if ( t . Right != null ) { t = t . Right ; Visit ( t ) ; } } while ( t != tree . Root && ( t . Parent . Right == t || t . Parent . Right == null ) ) { t = t . Parent ; } if ( t != tree . Root ) { t = t . Parent . Right ; Visit ( t ) ; } else { break ; } } <EOF>
Image i = new Bitmap ( CODE_INTEGER , CODE_INTEGER ) ; Graphics g = Graphics . FromImage ( i ) ; g . DrawString ( CODE_STRING , new Font ( CODE_STRING , CODE_INTEGER ) , Brushes . Black , new PointF ( CODE_INTEGER , CODE_INTEGER ) ) ; pictureBox . Image = i ; g . Dispose ( ) ; <EOF>
WebApp . Start <EOF>
myForm . ShowDialog ( ) <EOF>
var t = ( from li in list orderby li descending select li ) . Take ( CODE_INTEGER ) ; <EOF>
MySqlConnection connection = new MySqlConnection ( MyConString ) ; connection . Open ( ) ; . . . MySqlCommand SQLup = new MySqlCommand ( mySQL , connection ) ; SQLup . ExecuteNonQuery ( ) ; <EOF>
{ Binding car . wheels } <EOF>
MessageFault msgFault = ex . CreateMessageFault ( ) ; var msg = msgFault . GetReaderAtDetailContents ( ) . Value ; <EOF>
private static int CalcLevenshteinDistance ( string a , string b ) { if ( String . IsNullOrEmpty ( a ) || String . IsNullOrEmpty ( b ) ) return CODE_INTEGER ; int lengthA = a . Length ; int lengthB = b . Length ; var distances = new int [ lengthA + CODE_INTEGER , lengthB + CODE_INTEGER ] ; for ( int i = CODE_INTEGER ; i <= lengthA ; distances [ i , CODE_INTEGER ] = i ++ ) ; for ( int j = CODE_INTEGER ; j <= lengthB ; distances [ CODE_INTEGER , j ] = j ++ ) ; for ( int i = CODE_INTEGER ; i <= lengthA ; i ++ ) for ( int j = CODE_INTEGER ; j <= lengthB ; j ++ ) { int cost = b [ j - CODE_INTEGER ] == a [ i - CODE_INTEGER ] ? CODE_INTEGER : CODE_INTEGER ; distances [ i , j ] = Math . Min ( Math . Min ( distances [ i - CODE_INTEGER , j ] + CODE_INTEGER , distances [ i , j - CODE_INTEGER ] + CODE_INTEGER ) , distances [ i - CODE_INTEGER , j - CODE_INTEGER ] + cost ) ; } return distances [ lengthA , lengthB ] ; } <EOF>
row . Cells [ CODE_INTEGER ] . Value = i . ToString ( ) ; <EOF>
. html ( htmlString ) <EOF>
var part = message . BodyParts . OfType < TextPart > ( ) . FirstOrDefault ( ) ; part . Text += Environment . NewLine + footer ; <EOF>
var query = from item in db . People select item . Name ; <EOF>
private void ListBox5_Click ( System . Object sender , System . EventArgs e ) { ListBox lb = ( ListBox ) sender ; if ( lb . SelectedIndex != - CODE_INTEGER ) { ListBox1 . SelectedIndex = lb . SelectedIndex ; ListBox2 . SelectedIndex = lb . SelectedIndex ; ListBox3 . SelectedIndex = lb . SelectedIndex ; ListBox4 . SelectedIndex = lb . SelectedIndex ; ListBox5 . SelectedIndex = lb . SelectedIndex ; txtsn . Text = ListBox1 . SelectedItem ; txtsa . Text = ListBox2 . SelectedItem ; txtsadd . Text = ListBox3 . SelectedItem ; txtsp . Text = ListBox4 . SelectedItem ; txtse . Text = ListBox5 . SelectedItem ; } } <EOF>
abstract class classA { public abstract void MyMethod ( ) ; } internal class classB : classA { public override void MyMethod ( ) { } } internal class classC : classA { public override void MyMethod ( ) { } } <EOF>
class MyClass { public event EventHandler MyEvent ; public MyClass ( ) { MyEvent += OnSomeEventHandlerToMyLocalClassWhichOfcourseIsABadPractice ; } protected void OnSomeEventHandlerToMyLocalClassWhichOfcourseIsABadPractice ( object sender , EventArgs e ) { MyEvent -= OnSomeEventHandlerToMyLocalClassWhichOfcourseIsABadPractice ; } } <EOF>
string encodedUrl = HttpContext . Current . Server . UrlEncode ( Request . QueryString [ CODE_STRING ] ) ; string decodedUrl HttpContext . Current . Server . UrlDecode ( encodedUrl ) ; <EOF>
public class HideableGridSplitter : GridSplitter { private GridLength height ; public HideableGridSplitter ( ) { this . IsVisibleChanged += HideableGridSplitter_IsVisibleChanged ; } void HideableGridSplitter_IsVisibleChanged ( object sender , DependencyPropertyChangedEventArgs e ) { Grid parent = base . Parent as Grid ; if ( parent == null ) return ; int rowIndex = Grid . GetRow ( this ) ; if ( rowIndex + CODE_INTEGER >= parent . RowDefinitions . Count ) return ; var lastRow = parent . RowDefinitions [ rowIndex + CODE_INTEGER ] ; if ( this . Visibility == Visibility . Visible ) lastRow . Height = height ; else { height = lastRow . Height ; lastRow . Height = new GridLength ( CODE_INTEGER ) ; } } } <EOF>
long largestSize = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < files . Length ; i ++ ) { if ( files [ i ] . Length > largestSize ) largestSize = files [ i ] . Length ; } Console . WriteLine ( largestSize ) ; <EOF>
var result = myList . GroupBy ( x = > x . Id ) . Select ( g = > new Parent ( ) { Key = g . Key , Children = g . Select ( x = > x . SomeString ) . ToList ( ) } ) ; <EOF>
[ System . Web . Http . AcceptVerbs ( CODE_STRING , CODE_STRING ) ] [ System . Web . Mvc . HttpGet ] public async Task < string > ServiceModelsForTournamentBase ( int id ) { var jsons = await Task . WhenAll ( GetJsonFromApi ( CODE_STRING + id , _siteUrl ) , GetJsonFromApi ( CODE_STRING + id , _siteUrl ) , GetJsonFromApi ( CODE_STRING + id , _siteUrl ) ) ; var matchInfoJson = jsons [ CODE_INTEGER ] ; var scoringPlayersJson = jsons [ CODE_INTEGER ] ; var teamsJson = jsons [ CODE_INTEGER ] ; } <EOF>
ColNameHeader = False <EOF>
IF NOT EXISTS ( SELECT SerialNumber WHERE SerialNumber = @SerialNumber AND Status = ' Allocated ' ) BEGIN END ELSE BEGIN END <EOF>
uint ip = CODE_INTEGER ; var bytes = BitConverter . GetBytes ( ip ) ; string res = string . Join ( CODE_STRING , bytes . Reverse ( ) ) ; <EOF>
if ( myList . Any ( ) ) { /* do something */ } <EOF>
This [ \ w | \ s ] * : ( ? < title > [ \ w | \ s ] + ) \ . <EOF>
using System . Web . Security ; <EOF>
protected void grid_CustomColumnSort ( object sender , DevExpress . Web . ASPxGridView . CustomColumnSortEventArgs e ) { if ( e . Column . FieldName == CODE_STRING ) { e . Handled = true ; var value1 = CODE_STRING ; var value2 = CODE_STRING ; if ( value1 > value2 ) e . Result = CODE_INTEGER ; else if ( value1 == value2 ) e . Result = Comparer . Default . Compare ( value1 , value2 ) ; else e . Result = - CODE_INTEGER ; } } <EOF>
string parseFormat = CODE_STRING ; DateTime date = DateTime . ParseExact ( dateString , parseFormat , CultureInfo . InvariantCulture ) ; <EOF>
int [ ] myIntArray = Enumerable . Repeat ( - CODE_INTEGER , CODE_INTEGER ) . ToArray ( ) ; <EOF>
if ( aLength == CODE_INTEGER ) a = new int [ CODE_INTEGER ] ; if ( bLength == CODE_INTEGER ) b = new int [ CODE_INTEGER ] ; if ( cLength == CODE_INTEGER ) c = new int [ CODE_INTEGER ] ; if ( dLength == CODE_INTEGER ) d = new int [ CODE_INTEGER ] ; if ( eLength == CODE_INTEGER ) e = new int [ CODE_INTEGER ] ; <EOF>
AddressHeader header = AddressHeader . CreateAddressHeader ( authorization ) ; var address = new EndpointAddress ( ClientConfig . Endpoint , new [ ] { header } ) ; <EOF>
string lblText = CustomLabelFunction ( Chart1 . Series [ CODE_STRING ] . Points [ CODE_INTEGER ] ) ; Chart1 . Series [ CODE_STRING ] . Points [ CODE_INTEGER ] . AxisLabel = lblText ; <EOF>
public List_id_model Model { get { List_id_model model = ViewState [ CODE_STRING ] as List_id_model ; if ( model != null ) return model ; return new List_id_model ( ) ; } set { ViewState [ CODE_STRING ] = value ; } } protected void DropDown_Client_SelectedIndexChanged ( object sender , EventArgs e ) { List_id_model client_list = Model ; if ( client_list . client_id == null ) client_list . client_id = new List < int > ( ) ; client_list . client_id . Add ( value ) ; Model = client_list ; } <EOF>
var result = from objPt in lstTicketPrintingTrack join objtransDetail in lstTrans on new { t1 = objPt . _id , t2 = } equals new { t1 = objtransDetail . _id , t2 = } where objPt . Seg . Contains ( objtransDetail . transSeq ) select new { name = objPt . GetValue ( CODE_STRING ) . GetIntValue ( ) } ; <EOF>
EquateType = element . Elements ( ) . First ( ) . Name . LocalName ; <EOF>
Button . MouseClick <EOF>
t . Columns [ CODE_STRING ] . ExtendedProperties [ CODE_STRING ] . Value <EOF>
ManagedIpHelper . GetExtendedTcpTable ( true ) ; <EOF>
Thread . Sleep ( CODE_INTEGER ) <EOF>
string template = CODE_STRING ; var model = new PageModel { Name = CODE_STRING , Email = CODE_STRING } ; string result = Razor . Parse ( template , model ) ; <EOF>
Thread . CurrentThread . CurrentCulture = New CultureInfo ( CODE_STRING , False ) <EOF>
internal static class MySharedInfo { /* static proerties and whatever you need */ } <EOF>
. . . string adep = let . Attributes . GetNamedItem ( CODE_STRING ) . Value ; string qfu = string . Empty ; foreach ( XmlNode letiste in getQfu ) { if ( adep == letiste . Attributes . GetNamedItem ( CODE_STRING ) . Value ) ; qfu = letiste . Attributes . GetNamedItem ( CODE_STRING ) . Value ; } . . . <EOF>
public TFLB BusRouteMapper ( string [ ] input ) { return new TFLB { Route = input [ x ] , Direction = input [ y ] , } ; } <EOF>
private void AddProducts ( double salePrice , int taxValue ) { using ( var ctx = new Entity ( ) ) { Product prodObject = new Product { PId = SalePrice = salePrice } ; Product_tax pTax = new Product_tax { pid = prodObject . PId , taxid = taxValue } ; ctx . product . AddObject ( prodObject ) ; ctx . Product_tax . AddObject ( pTax ) ; ctx . SaveChanges ( ) ; } } <EOF>
MethodInfo method = service . GetType ( ) . GetMethod ( serviceAction ) ; object result = method . Invoke ( service , new object [ ] { request } ) ; return ( R ) result ; <EOF>
function OpenPopup ( ) { document . getElementById ( CODE_STRING ) . style . visibility = ' hidden ' ; window . open ( CODE_STRING ) ; } <EOF>
With cmd . Parameters cn . Open ( ) dr = cmd . ExecuteReader ( CommandBehavior . CloseConnection ) ' Process rowset ( s ) bolEOF = dr . Read Do Do While bolEOF = True ' Process rows bolEOF = dr . Read ( ) Loop Loop While dr . NextResult = True cmd . Cancel ( ) dr . Close ( ) Debug . WriteLine ( CODE_STRING & _ . Item ( CODE_STRING ) . Value . ToString ) End With <EOF>
var order = new Order { OrderId = CODE_INTEGER , OrderDate = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) , OrderStatus = CODE_STRING , CreatedDate = DateTime . Now } ; order . OrderItems = new [ ] { new OrderItem { LineItemId = CODE_INTEGER , ProductId = CODE_STRING , CreatedDate = order . CreatedDate } , new OrderItem { LineItemId = CODE_INTEGER , ProductId = CODE_STRING , CreatedDate = order . CreatedDate } } ; <EOF>
User user = new User ( ) ; user . Id = Guid . NewGuid ( ) ; <EOF>
protected void Button1_Click ( object sender , EventArgs e ) { foreach ( TextBox i in this . Page . Form . Controls . OfType < TextBox > ( ) . ToList ( ) ) { i . Text = null ; } } <EOF>
public DataTableResult Get ( [ FromUri ] DataTableParameters parameters ) { return new DataTableResult ( ) ; } <EOF>
if ( ! ( item is Label | item is LiteralControl ) ) { if ( item is TextBox ) { TextBox textBox = ( TextBox ) item ; string textValue = textBox . Text ; } . . . } <EOF>
var tableName = CODE_STRING ; var oc = ( ( IObjectContextAdapter ) context ) . ObjectContext ; var items = oc . MetadataWorkspace . GetItems ( DataSpace . SSpace ) . OfType < EntityType > ( ) ; foreach ( var entityType in items . Where ( e = > e . Name == tableName ) ) { var props = string . Join ( CODE_STRING , entityType . Properties . Where ( p = > p . Nullable ) ) ; Debug . WriteLine ( string . Format ( CODE_STRING , entityType . Name , props ) ) ; } <EOF>
ntdll . dll ! NtWaitForSingleObject ( ) KernelBase . dll ! WaitForSingleObjectEx ( ) msvcr110_clr0400 . dll ! __C_specific_handler ( ) ntdll . dll ! RtlpExecuteHandlerForException ( ) ntdll . dll ! RtlDispatchException ( ) ntdll . dll ! KiUserExceptionDispatch ( ) dbghelp . dll ! MiniDumpWriteDump ( ) [ Managed to Native Transition ] ExceptionTest . exe ! ExceptionTest . Program . WriteMiniDump ( ) Line CODE_INTEGER C # ExceptionTest . exe ! ExceptionTest . Program . HandleUnobservedTaskException ( object sender , System . Threading . Tasks . UnobservedTaskExceptionEventArgs e ) Line CODE_INTEGER C # mscorlib . dll ! System . Threading . Tasks . TaskScheduler . PublishUnobservedTaskException ( object sender , System . Threading . Tasks . UnobservedTaskExceptionEventArgs ueea ) mscorlib . dll ! System . Threading . Tasks . TaskExceptionHolder . Finalize ( ) <EOF>
StringBuilder sb = new StringBuilder ( ) ; for ( int stringIndex = CODE_INTEGER ; stringIndex < s . Length ; stringIndex ++ ) { sb . Clear ( ) ; for ( int charIndex = CODE_INTEGER ; charIndex < str . UpperBound ( CODE_INTEGER ) ; charIndex ++ ) sb . Append ( str [ stringIndex , charIndex ] ) ; s [ stringIndex ] = sb . ToString ( ) ; } for ( int index = CODE_INTEGER ; index < s . Length ; index ++ ) s [ index ] = new string ( str [ index ] ) ; <EOF>
createResponse [ CODE_STRING ] = CODE_STRING ; request . Content = new StringContent ( JsonConvert . SerializeObject ( createResponse ) ) ; request . Content . Headers . ContentType = new MediaTypeHeaderValue ( CODE_STRING ) ; <EOF>
System . IO . File . WriteAllLines ( CODE_STRING , System . IO . File . ReadAllLines ( CODE_STRING ) . Select ( line = > string . Join ( CODE_STRING , line . Split ( new string [ ] { CODE_STRING } , StringSplitOptions . RemoveEmptyEntries ) ) ) . ToArray ( ) ) ; <EOF>
System . Data . Entity . Database . SetInitializer < EFDbContext > ( new DropCreateDatabaseAlways < EFDbContext > ( ) ) ; if ( ! WebMatrix . WebData . WebSecurity . Initialized ) { WebSecurity . InitializeDatabaseConnection ( CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , autoCreateTables : true ) ; } <EOF>
private void searchBox_TextChanged ( object sender , TextChangedEventArgs e ) { listboxWords1 . Items . Clear ( ) ; if ( searchBox . Text . Length > CODE_INTEGER ) { trie . Matcher . ResetMatch ( ) ; foreach ( char c in searchBox . Text ) trie . Matcher . NextMatch ( c ) ; foundWords = trie . Matcher . GetPrefixMatches ( ) ; for ( int i = foundWords . Count - CODE_INTEGER ; i > CODE_INTEGER ; i -- ) { listboxWords1 . Items . Add ( foundWords [ i ] ) ; } foundWords = null ; isFoundExact = trie . Matcher . IsExactMatch ( ) ; if ( isFoundExact ) listboxWords1 . Items . Add ( trie . Matcher . GetExactMatch ( ) ) ; } else { foundWords = null ; trie . Matcher . ResetMatch ( ) ; } } <EOF>
private void btnOK_Click ( object sender , EventArgs e ) { if ( textbox . Text == CODE_STRING ) { var form = Application . OpenForms . OfType < Meniu > ( ) . Single ( ) ; form . DeleteSelectedRows ( ) ; } } <EOF>
JObject obj = JObject . Parse ( json ) ; if ( obj != null ) { var root = obj . First ; if ( root != null ) { var sumJson = root . First ; if ( sumJson != null ) { var sum = sumJson . ToObject < Sum > ( ) ; } } } <EOF>
Clients . Others . addMessage ( message ) <EOF>
datagridview . Datasource = datasource datagridview . databind ( ) <EOF>
var frm = new Form { Height = CODE_INTEGER , Width = CODE_INTEGER } ; var txt = new TextBox { Dock = DockStyle . Fill , Multiline = true } ; frm . Controls . Add ( txt ) ; port . DataReceived += ( sender , args ) = > { if ( txt . InvokeRequired ) { txt . Invoke ( new MethodInvoker ( ( ) = > { txt . Text += port . ReadExisting ( ) ; } ) ) ; } else { txt . Text += port . ReadExisting ( ) ; } } ; Application . Run ( frm ) ; <EOF>
private void Page_Load ( object sender , EventArgs e ) { string imgUrl = GetRandomImageUrl ( ) ; Session [ CODE_STRING ] = imgUrl ; Image1 . ImageUrl = imgUrl ; Image1 . Visible = true ; } protected string GetRandomImageUrl ( ) { Random r = new Random ( ) ; return String . Format ( CODE_STRING , r . Next ( CODE_INTEGER , CODE_INTEGER ) ) ; } <EOF>
public class ServerResponseObject < T > { public ServerResponseObject ( T obj ) { Obj = obj ; } public T Obj { get ; set ; } } <EOF>
string stm = CODE_STRING ; MySqlCommand cmd = new MySQLCommand ( stm ) ; cmd . Parameters . AddWithValue ( CODE_STRING , regionvalue ) ; cmd . Parameters . AddWithValue ( CODE_STRING , marketvalue ) ; <EOF>
var original = CODE_STRING ; for ( int i = CODE_INTEGER ; i < original . Length ; i ++ ) Console . WriteLine ( original . Insert ( i , original [ i ] . ToString ( ) ) ) ; <EOF>
XmlNode RootNode = doc . CreateElement ( CODE_STRING ) ; doc . AppendChild ( RootNode ) ; XmlAttribute rootAttribute2 = doc . CreateAttribute ( CODE_STRING ) ; rootAttribute2 . Value = CODE_STRING ; RootNode . Attributes . Append ( rootAttribute2 ) ; XmlAttribute newAttr = doc . CreateAttribute ( CODE_STRING , CODE_STRING , CODE_STRING ) ; newAttr . Value = CODE_STRING ; RootNode . Attributes . Append ( newAttr ) ; <EOF>
Dictionary < string , List < string > > dict = new Dictionary < string , List < string > > ( ) ; Dictionary < string , List < string > > target = new Dictionary < string , List < string > > ( ) ; dict . ToList ( ) . ForEach ( i = > { List < string > temp = i . Value . Select ( x = > x . Trim ( ) ) . ToList ( ) ; target . Add ( i . Key , temp ) ; } ) ; <EOF>
DirectoryInfo di = new DirectoryInfo ( CODE_STRING ) ; FileInfo [ ] fis = di . GetFiles ( CODE_STRING ) ; foreach ( FileInfo fi in fis ) { Console . WriteLine ( CODE_STRING , fi . Name , fi . FullName , fi . Name . Substring ( fi . Name . LastIndexOf ( CODE_STRING ) - CODE_INTEGER , CODE_INTEGER ) ) ; } <EOF>
[ OperationContract ] [ WebGet ( UriTemplate = CODE_STRING ) ] string GetPersonByLicense ( string driversLicense ) ; [ OperationContract ] [ WebGet ( UriTemplate = CODE_STRING ) ] string GetPersonBySSN ( string ssn ) ; <EOF>
public FileContentResult Display ( string id ) { byte [ ] byteArray = GetImageFromDB ( id ) ; return new FileContentResult ( byteArray , CODE_STRING ) ; } <EOF>
using System . Drawing ; . . . Font font = new Font ( FontFamily . GenericMonospace , CODE_INTEGER ) ; Image reportImage = new Bitmap ( CODE_INTEGER , CODE_INTEGER ) ; using ( Graphics graphics = Graphics . FromImage ( reportImage ) ) { graphics . SmoothingMode = System . Drawing . Drawing2D . SmoothingMode . AntiAlias ; graphics . FillRectangle ( Brushes . White , new Rectangle ( new Point ( CODE_INTEGER , CODE_INTEGER ) , reportImage . Size ) ) ; for ( int i = CODE_INTEGER ; i != CODE_INTEGER ; i ++ ) { Rectangle r = new Rectangle ( CODE_INTEGER + i * CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; graphics . FillEllipse ( i % CODE_INTEGER == CODE_INTEGER ? Brushes . DarkOrange : Brushes . DarkKhaki , r ) ; graphics . DrawEllipse ( Pens . Black , r ) ; r . Offset ( CODE_INTEGER , CODE_INTEGER ) ; graphics . DrawString ( i . ToString ( ) , font , Brushes . Black , r ) ; } } reportImage . Save ( CODE_STRING ) ; <EOF>
library . books [ CODE_INTEGER ] . name <EOF>
\ [ CODE_INTEGER * ( [ CODE_INTEGER - CODE_INTEGER ] | [ CODE_INTEGER ] [ CODE_INTEGER - CODE_INTEGER ] | CODE_INTEGER [ CODE_INTEGER ] ) ( Jan | Feb | Mar | Apr | May | Jun | Jul | Aug | Sep | Oct | Nov | Dec ) ( CODE_INTEGER [ CODE_INTEGER - CODE_INTEGER ] | CODE_INTEGER [ CODE_INTEGER - CODE_INTEGER ] [ CODE_INTEGER - CODE_INTEGER ] | CODE_INTEGER [ CODE_INTEGER - CODE_INTEGER ] [ CODE_INTEGER - CODE_INTEGER ] { CODE_INTEGER } | [ CODE_INTEGER - CODE_INTEGER ] [ CODE_INTEGER - CODE_INTEGER ] { CODE_INTEGER } ) ( ( ? : CODE_INTEGER ? [ CODE_INTEGER - CODE_INTEGER ] | CODE_INTEGER [ CODE_INTEGER - CODE_INTEGER ] | CODE_INTEGER [ CODE_INTEGER - CODE_INTEGER ] ) { CODE_INTEGER } : ( ? : CODE_INTEGER ? [ CODE_INTEGER - CODE_INTEGER ] | [ CODE_INTEGER - CODE_INTEGER ] [ CODE_INTEGER - CODE_INTEGER ] ) ) by ( \ w + ) \ ] <EOF>
editwindow . Items . Add ( editpanel ) ; editwindow . Render ( this . Form ) ; <EOF>
System . Console <EOF>
int health = CODE_INTEGER ; int lastFrameHealth ; void Start ( ) { lastFrameHealth = health ; } void Update ( ) { if ( health < lastFrameHealth ) { StartCoroutine ( CODE_STRING , CODE_REAL ) ; } lastFramehealth = health ; } void OnCollisionEnter ( Collision collision ) { health -= CODE_INTEGER ; } IEnumerator InterruptPassiveSkill ( float seconds ) { yield return new WaitForSeconds ( seconds ) ; } <EOF>
var result = list1 . Except ( list2 ) ; <EOF>
\ bSccTeamFoundationServer \ s *= \ s * ( [ ' " ] ? ) ( [ ^ \ CODE_INTEGER ] * ) \ CODE_INTEGER <EOF>
table . AsEnumerable ( ) . Select ( dr = > dr . Field < string > ( CODE_STRING ) ) . ToList ( ) <EOF>
webclient . Timeout = CODE_INTEGER ; returnValue = webclient . uploadstring ( url , Message ) ; <EOF>
if ( test . ToLower ( ) . Replace ( CODE_CHAR , CODE_CHAR ) . Contains ( CODE_STRING ) ) { } <EOF>
[ DatabaseGenerated ( DatabaseGeneratedOption . Computed ) ] <EOF>
foreach ( DataRow row in workingTable . Rows ) { int keyIndex = isKey ? keyIdentifier : sKeyIdentifier ; int valueIndex = isValue ? valueIdentifier : sValueIdentifier ; workingDictionary . Add ( row [ keyIndex ] . ToString ( ) , row [ valueIndex ] ) ; } <EOF>
public class DataViewModel { public AsynchronousCommand Send ; public DataViewModel ( ) { Send = new AsynchronousCommand ( ( ) = > { SendData ( ) ; } ) ; } private void SendData ( ) { } } public class SomewhereInForm { private DataViewModel dataViewModel = new DataViewModel ( ) ; public SomewhereInForm ( ) { dataViewModel . Send . Executed += SendOnExecuted ; } private void SendOnExecuted ( object sender , CommandEventArgs args ) { } private void DoSome ( ) { dataViewModel . Send . DoExecute ( new int ( ) ) ; } } <EOF>
gvFrame . SelectedIndex = gvFrame . Rows . Cast < GridViewRow > ( ) . First ( r = > ( string ) gvFrame . DataKeys [ r . RowIndex ] [ CODE_STRING ] == requestedFrame ) . RowIndex ; <EOF>
string query = CODE_STRING + textBox1 . Text + CODE_STRING ; <EOF>
bin \ debug <EOF>
var data = _config . GetSettings ( ) . ToDictionary ( s = > s . Desc , s = > s . Setting , StringComparer . Ordinal ) ; if ( data . ContainsKey ( CODE_STRING ) ) scheduler . Config . first_hour = int . Parse ( data [ CODE_STRING ] ) ; if ( data . ContainsKey ( CODE_STRING ) ) scheduler . Config . first_hour = int . Parse ( data [ CODE_STRING ] ) ; <EOF>
public interface IUIService { bool ShowPopUp ( . . . . ) ; DialogResult ShowDialog ( . . . ) ; . . } <EOF>
StreamWriter writeFile = new StreamWriter ( fileLocation ) ; writeFile . WriteLine ( textBox1 . Text ) ; writeFile . WriteLine ( textBox2 . Text ) ; writeFile . Close ( ) ; <EOF>
new string ( CODE_STRING . Where ( char . IsDigit ) . ToArray ( ) ) == CODE_STRING <EOF>
( verticalLine . Start . X , horizontalLine . Start . Y ) <EOF>
txt . ForeColor = System . Drawing . Color . FromName ( CODE_STRING ) ; txt . ForeColor = System . Drawing . Color . FromName ( CODE_STRING ) ; <EOF>
routes . MapRoute ( name : CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING } ) ; <EOF>
SqlConnection conn = new SqlConnection ( yourconnectionstring + CODE_STRING ) ; try { conn . Open ( ) ; conn . Close ( ) ; } catch ( SqlException ex ) { if ( ex . Number == CODE_INTEGER ) { } } <EOF>
Convert . ToUInt32 ( hex , CODE_INTEGER ) <EOF>
BACKUP DATABASE database_name TO DISK = ' d : \ path \ to \ backup \ file \ on \ the \ server . bak ' <EOF>
namespace ConsoleApplication2 { class Program { static void Main ( string [ ] args ) { string line ; var keyMatch = new Dictionary < string , string > ( ) ; using ( TextReader re = File . OpenText ( CODE_STRING ) ) { while ( ( line = re . ReadLine ( ) ) != null ) { keyMatch . Add ( line . Substring ( CODE_INTEGER , line . IndexOf ( CODE_STRING ) ) , line . Substring ( line . IndexOf ( CODE_STRING ) + CODE_INTEGER ) ) ; } } var test = keyMatch [ CODE_STRING ] ; } } } <EOF>
[ CreateNew ] public DefaultViewPresenter Presenter { set { this . _presenter = value ; this . _presenter . View = this ; } } <EOF>
private void BindCountry ( ) { XmlDocument doc = new XmlDocument ( ) ; doc . Load ( Server . MapPath ( CODE_STRING ) ) ; foreach ( XmlNode node in doc . SelectNodes ( CODE_STRING ) ) { XmlAttribute attr = node . Attributes [ CODE_STRING ] ; if ( attr != null ) { usrlocationddl . Items . Add ( new ListItem ( node . InnerText , attr . Value ) ) ; } } } <EOF>
double a = CODE_REAL ; double b = CODE_INTEGER / CODE_INTEGER ; double c = CODE_INTEGER / CODE_INTEGER ; Console . WriteLine ( ( a * b * ( c + CODE_INTEGER / CODE_INTEGER ) + CODE_REAL ) . ToString ( ) ) ; <EOF>
if ( genStream == null ) { genStream . Close ( ) } <EOF>
var body = document . getElementsByTagName ( ' body ' ) [ CODE_INTEGER ] ; body . onkeydown = function ( e ) { if ( e . keyCode == = CODE_INTEGER ) { } } <EOF>
var options = new { actions = CODE_STRING , action_fields = CODE_STRING } ; List < CardUpdateAction > cua = chello . CardUpdates . ForCard ( CODE_STRING , options ) . ToList ( ) ; <EOF>
static ManualResetEvent finishGate ; static void Main ( string [ ] args ) { finishGate = new ManualResetEvent ( false ) ; Telnet telCon = new Telnet ( ) ; telCon . OnDataIn += new Telnet . OnDataInHandler ( HandleDataIn ) ; telCon . Connect ( remoteHostStr ) ; finishGate . WaitOne ( ) ; } public static void HandleDataIn ( object sender , TelnetDataInEventArgs e ) { if ( processingComplete ) finishGate . Set ( ) ; } <EOF>
List < string > files = new List < string > ( Directory . GetFiles ( CODE_STRING , CODE_STRING , SearchOption . AllDirectories ) ) ; files . ForEach ( f = > File . Copy ( f , Path . Combine ( CODE_STRING , Path . GetFileName ( f ) ) ) ) ; <EOF>
this . listenThread = new Thread ( this . ListenForClients ) ; this . listenThread . IsBackground = true ; this . listenThread . Start ( ) ; <EOF>
void GetListByInterface < TInterface > ( out IList < TInterface > plugins ) where TInterface : IBasePlugin { plugins = ( from p in _allPlugins where p is TInterface select ( TInterface ) p ) . ToList ( ) ; } <EOF>
DataTable table = new DataTable ( ) ; table . Columns . Add ( CODE_STRING ) ; table . Columns . Add ( CODE_STRING ) ; String [ ] examplerow = new String [ ] { CODE_STRING , CODE_STRING } ; table . Rows . Add ( examplerow ) ; DataRow row = table . Rows [ CODE_INTEGER ] ; Console . WriteLine ( row [ CODE_STRING ] ) ; <EOF>
public List < Users > GetUsers ( ) { List < Users > users = new List < Users > ( ) ; DataSet ds = getDataSet ( CODE_STRING ) Users user ; foreach ( DataRow row in ds . Tables [ CODE_INTEGER ] . Rows ) { user = new Users ( ) ; user . FirstName = row [ CODE_STRING ] . ToString ( ) ; . . . . . . . . users . Add ( user ) } return users ; } <EOF>
div . Controls . Add ( control ) ; <EOF>
Dim dtFirstOfMonth as DateTime = new DateTime ( DateTime . Now . Year , DateTime . Now . Month , CODE_INTEGER ) <EOF>
using ( var transaction = new TransactionScope ( ) ) { var result = from r in db . Tests where r . value == CODE_INTEGER select r ; Test t2 = result . FirstOrDefault ( ) ; t2 . value = CODE_INTEGER ; db . SaveChanges ( ) ; var result2 = from r in db . Tests where r . value == CODE_INTEGER select r ; Trace . Assert ( result2 . Count ( ) == CODE_INTEGER ) ; } <EOF>
CONTROL . Invoke ( new Action ( ( ) = > { CONTROL . Items . Add ( item ) ; } ) ) ; <EOF>
private string GetEnumDescription ( Enum value ) { FieldInfo fi = value . GetType ( ) . GetField ( value . ToString ( ) ) ; DescriptionAttribute [ ] attributes = ( DescriptionAttribute [ ] ) fi . GetCustomAttributes ( typeof ( DescriptionAttribute ) , false ) ; if ( attributes . Length > CODE_INTEGER ) return attributes [ CODE_INTEGER ] . Description ; else return value . ToString ( ) ; } <EOF>
var regex = CODE_STRING ; var matches = Regex . Match ( CODE_STRING , regex ) ; if ( matches . Success ) <EOF>
Protected Sub TabContainer1_ActiveTabChanged ( ByVal sender As Object , ByVal e As System . EventArgs ) Handles TabContainer1 . ActiveTabChanged Dim actTab As String = TabContainer1 . ActiveTab . ID . ToString ( ) Dim gv As GridView ds = gc . GetDataToListBinder ( CODE_STRING ) If actTab = CODE_STRING Then gv . DataSource = ds . Tables ( CODE_INTEGER ) TabContainer1 . ActiveTab . Controls . Add ( gv ) End If End Sub <EOF>
mshtml . HTMLDocument htmlDoc = webBrowser . Document as mshtml . HTMLDocument ; if ( htmlDoc != null && htmlDoc . body != null ) { mshtml . IHTMLElement2 body = ( mshtml . IHTMLElement2 ) htmlDoc . body ; webBrowser . Width = body . scrollWidth ; webBrowser . Height = body . scrollHeight ; } <EOF>
private static bool setMachineTrust ( X509Certificate2 oRootCert ) { try { X509Store certStore = new X509Store ( StoreName . Root , StoreLocation . LocalMachine ) ; certStore . Open ( OpenFlags . ReadWrite ) ; try { certStore . Add ( oRootCert ) ; } finally { certStore . Close ( ) ; } return true ; } catch ( Exception eX ) { return false ; } <EOF>
protected void Page_Load ( object sender , EventArgs e ) { base . Page_Load ( ) ; this . control . DataBind ( ) ; } <EOF>
( ( Form ) this . TopLevelControl ) . Close ( ) ; <EOF>
Regex . Replace ( input , CODE_STRING , CODE_STRING ) <EOF>
Random random = new Random ( ) ; TimeSpan buffer = TimeSpan . FromSeconds ( CODE_INTEGER ) ; TimeSpan span = TimeSpan . FromHours ( CODE_REAL ) ; if ( random . Next ( ) % CODE_INTEGER == CODE_INTEGER ) { span += buffer ; } else { span -= buffer ; } jobElement . CreationDate = jobElement . CreationDate + span ; <EOF>
TimeSpan span = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; Console . WriteLine ( span ) ; <EOF>
private void pinnedAppsListBox_MouseHover ( object sender , EventArgs e ) { Point point = pinnedAppsListBox . PointToClient ( Cursor . Position ) ; int index = pinnedAppsListBox . IndexFromPoint ( point ) ; if ( index < CODE_INTEGER ) return ; pinnedAppsListBox . GetItemRectangle ( index ) . Inflate ( CODE_INTEGER , CODE_INTEGER ) ; } <EOF>
string . Join ( CODE_STRING , dates . Select ( d = > d . ToString ( CODE_STRING ) ) . ToArray ( ) ) ; <EOF>
app = new Microsoft . Office . Interop . Outlook . Application ( ) ; Microsoft . Office . Interop . Outlook . NameSpace ns = app . GetNamespace ( CODE_STRING ) ; f = ns . GetDefaultFolder ( OlDefaultFolders . olFolderInbox ) ; Thread . Sleep ( CODE_INTEGER ) ; <EOF>
NCalc . Expression expr = new NCalc . Expression ( CODE_STRING ) ; expr . EvaluateParameter += ( name , args ) = > { if ( name == CODE_STRING && somecondition == CODE_INTEGER ) args . Result = CODE_INTEGER ; if ( name == CODE_STRING && somecondition == CODE_INTEGER ) args . Result = CODE_INTEGER ; } ; var result = expr . Evaluate ( ) ; <EOF>
using DevExpress . XtraGrid . Views . Grid ; void gridView_RowStyle ( object sender , RowStyleEventArgs e ) { GridView view = sender as GridView ; if ( e . RowHandle >= CODE_INTEGER ) { int value = ( int ) view . GetRowCellValue ( e . RowHandle , view . Columns [ CODE_STRING ] ) ; if ( value == CODE_INTEGER ) e . Appearance . Font = . . . ; } } <EOF>
public class MyForm : Form { Friend f1 ; private void OnLoad ( ) { f1 = new Friend ( ) ; } private void Display ( ) { } } <EOF>
* * * * * * <EOF>
Expression < Action > expr = ( ) = > MessageBox . Show ( CODE_STRING ) ; Console . WriteLine ( expr . ToString ( ) ) ; <EOF>
public class Recorder { private IList < Action > _recording ; public Recorder ( ) { _recording = new List < Action > ( ) ; } public void CallAndRecord ( Action action ) { _recording . Add ( action ) ; action ( ) ; } public void Playback ( ) { foreach ( var action in _recording ) { action ( ) ; } } } var recorder = new Recorder ( ) ; recorder . CallAndRecord ( ( ) = > Foo ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; recorder . CallAndRecord ( ( ) = > Bar ( CODE_INTEGER ) ) ; recorder . CallAndRecord ( ( ) = > Foo2 ( CODE_STRING ) ) ; recorder . CallAndRecord ( ( ) = > Bar2 ( CODE_INTEGER , CODE_INTEGER , true ) ) ; recorder . Playback ( ) ; <EOF>
var ListByPrograma = from a in db . Actions join c in db . Costs on a . ID equals c . Action_Id group new { a , c } by a . Program into p select new { Program = p . Key , actionsQty = p . Count ( ) , totalValue1 = p . Sum ( y = > y . c . Value1 ) , totalValue2 = p . Sum ( y = > y . c . Value2 ) , totalValue3 = p . Sum ( y = > y . c . Value3 ) } ; <EOF>
string fileName = CODE_STRING ; string result = Path . GetFileNameWithoutExtension ( fileName ) ; <EOF>
var startInfo = new ProcessStartInfo ( executable , parameters ) { UseShellExecute = false , RedirectStandardError = false , RedirectStandardOutput = false , CreateNoWindow = true } ; using ( var process = Process . Start ( startInfo ) ) { if ( process != null ) { process . WaitForExit ( timeoutInMilliSeconds ) ; return process . ExitCode ; } } <EOF>
public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } private void button1_Click ( object sender , EventArgs e ) { string [ ] row = { textBox1 . Text , textBox2 . Text , textBox3 . Text } ; var listViewItem = new ListViewItem ( row ) ; listView1 . Items . Add ( listViewItem ) ; } } <EOF>
testItemCollectionList = ( from WorkItem mItem in testItemCollection select mItem ) . ToList ( ) ; <EOF>
using ( var client = new HttpClient ( new HttpClientHandler { AutomaticDecompression = DecompressionMethods . GZip | DecompressionMethods . Deflate } ) ) { } <EOF>
var customer = new Customer ( . . . ) ; customer . LegalAddress = new Address ( . . . ) ; var account = new Account ( ) ; account . Customer = customer ; var order = new Order ( ) ; order . BuyerAccount = account ; _orderRepository . Add ( order ) ; context . SaveChanges ( ) ; <EOF>
LUWAccts . SelectCommand = String . Format ( CODE_STRING , Get_SVCACCT_Auth_Groups ( Session [ CODE_STRING ] . ToString ( ) ) ) ; <EOF>
( ? <= [ . ? ! ] ) \ s * <EOF>
Regex = new Regex ( " ( \ d + ) ( years ? ) " ) ; Match match = regex . Match ( ss ) ; if ( match . Success ) { string s = match . Groups [ CODE_INTEGER ] ; string s1 = match . Groups [ CODE_INTEGER ] ; } <EOF>
Debug : { Items [ { index } ] } <EOF>
String birthDate = dsEmployees . Employees . FindByEmployeeID ( Convert . ToInt32 ( ID . ToString ( ) ) ) . BirthDate . ToString ( ) ; <EOF>
List < Record > t = new List < Record > ( ) ; var result = t . ConvertAll ( x = > new RecordModified ( ) { RecordTypeText = ( ( MyEnum ) x . RecordTypeID ) . ToString ( ) } ) ; <EOF>
string base64 = Convert . ToBase64String ( test ) ; byte [ ] originalBytes = Convert . FromBase64String ( base64 ) ; string text = Encoding . ASCII . GetString ( originalBytes ) ; <EOF>
Uri uri = new Uri ( LinkButton . Text ) ; ScriptManager . RegisterStartupScript ( this , Page . GetType ( ) , CODE_STRING , CODE_STRING + uri . OriginalString + CODE_STRING , true ) ; <EOF>
var collection = new ObservableCollection < Note > ( this . DBContext . Notes . Where ( n = > n . ID == selectedNote . ID ) ) ; this . notesBox . DataContext = collection ; <EOF>
[ DllImport ( CODE_STRING ) ] private static extern int thingy ( ref uint refArg ) ; /* ... later in the code. ...*/ int retVal = thingy ( ref refVariable ) ; <EOF>
public Form1 ( ) { InitializeComponent ( ) ; } public string [ ] fileNames { get ; private set ; } int numberOfFiles { get ; set ; } public void button1_Click ( object sender , EventArgs e ) { if ( openFileDialog1 . ShowDialog ( ) == DialogResult . OK ) { fileNames = openFileDialog1 . SafeFileNames ; numberOfFiles = fileName . Length ; } } public void button2_Click ( object sender , EventArgs e ) { foreach ( string fileName in fileNames ) { } } <EOF>
DELETE FROM table_name WHERE some_column = some_value <EOF>
context . Request . IsLocal <EOF>
public static IQueryable < T > Active < T > ( this IQueryable < T > entityCollection ) where T : EntityBase { return entityCollection . Where ( e = > e . Enabled && ! e . Deleted ) ; } <EOF>
if ( myMap . Rows [ ( int ) cekPosisiPlayer ( ) . Y ] . Columns [ ( int ) ( cekPosisiPlayer ( ) . X + ( CODE_INTEGER / CODE_INTEGER ) ) ] . passable ) <EOF>
PagesSection pageSection = new PagesSection ( ) ; pageSection . ValidateRequest = false ; <EOF>
Stream receiveStream = response . GetResponseStream ( ) ; StreamReader readStream = new StreamReader ( receiveStream , Encoding . UTF8 ) ; Console . WriteLine ( CODE_STRING ) ; Console . WriteLine ( readStream . ReadToEnd ( ) ) ; <EOF>
powershell . AddCommand ( CODE_STRING ) ; powershell . AddParameter ( CODE_STRING , CODE_STRING ) ; powershell . AddParameter ( CODE_STRING , Credential ) ; powershell . AddScript ( CODE_STRING + serverName + CODE_STRING ) ; powershell . AddScript ( CODE_STRING + cmdlet + CODE_STRING ) ; powershell . AddScript ( CODE_STRING ) ; powershell . AddScript ( CODE_STRING ) ; <EOF>
Mock < IFileInformation > fileInformation = new Mock < IFileInformation > ( ) ; fileInformation . SetupGet ( x = > x . Name ) . Returns ( CODE_STRING ) ; Thing serviceResult = new Thing ( ) ; serviceResult . FileInformation = fileInformation . Object ; <EOF>
images = images . Replace ( CODE_STRING , String . Empty ) ; <EOF>
UIApplication . SharedApplication . Windows [ CODE_INTEGER ] . AddSubview ( myView ) ; <EOF>
var newList = ( from trade in FillList group trade by trade . Date . Date into g select new CurrentTrade { date = g . Key , dwBuy = g . Sum ( t = > t . dwBuy ) } ) . ToList ( ) ; <EOF>
HtmlDocument doc = new HtmlDocument ( ) ; doc . Load ( CODE_STRING ) ; foreach ( HtmlNode link in doc . DocumentElement . SelectNodes ( CODE_STRING ] ) { } <EOF>
return allFoos . All ( foo = > foo . FooVar1 == defaultFoo . FooVar1 ) ; <EOF>
var newStr = Regex . Replace ( input , CODE_STRING , CODE_STRING , RegexOptions . IgnoreCase ) ; <EOF>
const string fileName = CODE_STRING ; const string templateFileName = CODE_STRING ; var content = File . ReadAllText ( templateFileName ) ; content = content . Replace ( CODE_STRING , textBox1 . Text ) ; File . WriteAllText ( fileName , content ) ; Process . Start ( fileName ) ; <EOF>
if ( setTest . Tables [ CODE_INTEGER ] . Rows . Count == CODE_INTEGER ) <EOF>
. . . . formList = data . Read < WebsiteForm > ( ) . ToList ( ) ; surveyList = data . Read < Survey > ( ) . ToList ( ) ; formList . ForEach ( fl = > fl . Surveys = surveyList . Where ( sl = > sl . LinkID == fl . ID ) . ToList ( ) ) ; . . . . <EOF>
Console . WriteLine ( date . ToString ( CODE_STRING , usCultureInfo ) ) ; <EOF>
string location ; Process p = new Process ; location = System . IO . Path . GetDirectoryName ( System . Reflection . Assembly . GetEntryAssembly ( ) . Location ) + CODE_STRING ; p . StartInfo . FileName = location ; <EOF>
ilmerge nonsigned . dll / keyfile : key . snk / out : signed . dll <EOF>
var lines = File . ReadAllLines ( path ) ; foreach ( var line in lines ) { if ( line . StartsWith ( CODE_STRING ) ) { continue ; } else { } } <EOF>
var regex = new System . Text . RegularExpressions . Regex ( CODE_STRING , RegexOptions . Compiled | RegexOptions . IgnoreCase ) ; var text = CODE_STRING ; var matches = regex . Matches ( text ) ; var results = matches . Cast < Match > ( ) . Select ( match = > match . Value ) . ToList ( ) ; <EOF>
private void addButton_Click ( object sender , System . EventArgs e ) { DataRow newRow = table . NewRow ( ) ; table . Rows . Add ( newRow ) ; } <EOF>
protected override bool OnPowerEvent ( PowerBroadcastStatus powerStatus ) { } <EOF>
void btnGetProcesses_Click ( object sender , EventArgs e ) { Process [ ] processes = Process . GetProcesses ( ) ; ListViewItem lstViewItems = null ; foreach ( Process process in processes ) { lstViewItems = new ListViewItem ( ) ; lstViewItems . Text = process . Id . ToString ( ) ; lstViewItems . SubItems . Add ( process . ProcessName ) ; lstViewItems . SubItems . Add ( process . StartTime . ToString ( ) ) ; listView1 . Items . Add ( lstViewItems ) ; } } <EOF>
System . Linq namespace <EOF>
int resultIndex = ( myRepeater . CurrentPageIndex * myRepeater . PageSize ) + ItemIndex + CODE_INTEGER <EOF>
System . Threading . Thread . Sleep ( CODE_INTEGER ) ; <EOF>
var treeViewItem = treeView . ItemContainerGenerator . ContainerFromIndex ( CODE_INTEGER ) as TreeViewItem ; treeViewItem . Focus ( ) ; <EOF>
public interface IOptionSelector < T > { event EventHandler SelectedOptionChanged ; } public interface IReadOnlyOptionSelector < T > : IOptionSelector < T > { IReadOnlyCollection < T > Options { get ; } } public interface IWritableOptionsSelector < T > : IOptionSelector < T > { ICollection < T > Options { get ; } } <EOF>
[ ComVisible ( true ) ] <EOF>
public class Form1 { private Panel CreateNotificationPanel ( ) { var p = new Panel { BackColor = Color . Red } ; p . Controls . Add ( new Button { Text = CODE_STRING } ) ; return p ; } private void Form1_Load ( System . Object sender , System . EventArgs e ) { var flp = new FlowLayoutPanel { Dock = DockStyle . Fill } ; flp . Controls . Add ( CreateNotificationPanel ( ) ) ; flp . Controls . Add ( CreateNotificationPanel ( ) ) ; flp . Controls . Add ( CreateNotificationPanel ( ) ) ; this . Controls . Add ( flp ) ; } public Form1 ( ) { Load += Form1_Load ; } } <EOF>
public void Linq102 ( ) { string [ ] categories = new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; List < Product > products = GetProductList ( ) ; var q = from c in categories join p in products on c equals p . Category select new { Category = c , p . ProductName } ; foreach ( var v in q ) { Console . WriteLine ( v . ProductName + CODE_STRING + v . Category ) ; } } <EOF>
string [ ] formats = { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; string converted = DateTime . ParseExact ( CODE_STRING , formats , CultureInfo . InvariantCulture , DateTimeStyles . None ) . ToString ( CODE_STRING ) ; <EOF>
[ XmlRoot ( CODE_STRING ) ] public class Farm { [ XmlElement ( CODE_STRING , typeof ( Person ) ) ] [ XmlElement ( CODE_STRING , typeof ( Dog ) ) ] public List < Animal > Items { get ; set ; } } <EOF>
public class UserModel { public string Name { get ; set ; } public string Age { get ; set ; } } <EOF>
DateTime expirationDate = new DateTime ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; string lastTwoDigitsOfYear = expirationDate . ToString ( CODE_STRING ) ; <EOF>
private void g1_Hold ( object sender , Microsoft . Phone . Controls . GestureEventArgs e ) { StackPanel stk = ( StackPanel ) sender ; ClassName sg = ( ClssName ) stk . DataContext ; string path = sg . imagepath ; } <EOF>
VisualTreeHelper . GetParent ( myUserControl ) ; <EOF>
ObservableCollection < Product > ProductsObject = new ObservableCollection < Product > ( ) ; for ( int i = CODE_INTEGER ; i < GetProductByCategoryResultObject . Products . Count ; i ++ ) { ProductsObject . Add ( GetProductByCategoryResultObject . Products [ i ] ) ; } ProductListView . ItemsSource = ProductsObject ; <EOF>
Buffer . BlockCopy <EOF>
DateTime dat1 = Convert . ToDateTime ( CODE_STRING ) ; DateTime dat2 = Convert . ToDateTime ( CODE_STRING ) ; DateTime today = Convert . ToDateTime ( DateTime . Now . ToString ( CODE_STRING ) ) ; if ( today > dat1 && today < dat2 ) { } else { } <EOF>
Image image = Image . getInstance ( IMG ) ; image . scaleAbsolute ( CODE_INTEGER , CODE_INTEGER ) ; image . setScaleToFitHeight ( false ) ; List list = new List ( ) ; list . setListSymbol ( new Chunk ( Image . getInstance ( image ) , CODE_INTEGER , CODE_INTEGER ) ) ; list . add ( CODE_STRING ) ; list . add ( CODE_STRING ) ; list . add ( CODE_STRING ) ; document . add ( list ) ; <EOF>
Regex rx = new Regex ( CODE_STRING ) ; <EOF>
EditorUtility . SetDirty ( tb ) ; <EOF>
static AmazonS3 client ; client = Amazon . AWSClientFactory . CreateAmazonS3Client ( accessKeyID , secretAccessKeyID ) ; ListObjectsRequest request = new ListObjectsRequest ( ) ; request . BucketName = bucketName ; do { ListObjectsResponse response = client . ListObjects ( request ) ; if ( response . IsTruncated ) { request . Marker = response . NextMarker ; } else { request = null ; } } while ( request != null ) ; <EOF>
var processes = Process . GetProcessByName ( CODE_STRING ) ; foreach ( var process in processes ) process . Kill ( ) ; <EOF>
int rows = CODE_INTEGER ; int colums = CODE_INTEGER ; String [ , ] data = new String [ colums , rows ] ; int x = CODE_INTEGER ; int y = CODE_INTEGER ; for ( ; y < rows ; y ++ ) { for ( ; x < colums ; x ++ ) { Console . Write ( data [ x , y ] + CODE_STRING ) ; if ( x == ( colums - CODE_INTEGER ) ) { Console . WriteLine ( CODE_STRING ) ; Console . WriteLine ( CODE_STRING ) ; } } x = CODE_INTEGER ; } int userSelectedHomeTeam int userSelectedAwayTeaM Console . WriteLine ( CODE_STRING ) for ( int i = CODE_INTEGER ; i < colums ; i ++ ) { Console . WriteLine ( data [ i , CODE_INTEGER ] + CODE_STRING + i ) } str = Console . ReadLine ( ) ; userSelectedHomeTeam = Int32 . Parse ( str ) ; Console . WriteLine ( CODE_STRING ) for ( int i = CODE_INTEGER ; i < colums ; i ++ ) { Console . WriteLine ( data [ i , CODE_INTEGER ] + CODE_STRING + i ) } str = Console . ReadLine ( ) ; userSelectedAwayTeam = Int32 . Parse ( str ) ; Console . WriteLine ( CODE_STRING ) str = Console . ReadLine ( ) ; data [ userSelectedHomeTeam , userSelectedAwayTeam ] = str ; <EOF>
var canvas = new Canvas { Clip = Geometry . Parse ( CODE_STRING ) , Margin = new Thickness ( CODE_INTEGER , CODE_INTEGER , - CODE_INTEGER , CODE_INTEGER ) } ; var path = new Path { Width = CODE_INTEGER , Height = CODE_INTEGER , Fill = new SolidColorBrush ( Colors . Black ) , Stretch = Stretch . Fill , Data = Geometry . Parse ( CODE_STRING ) } ; canvas . Children . Add ( path ) ; Canvas . SetTop ( path , CODE_INTEGER ) ; Canvas . SetLeft ( path , CODE_INTEGER ) ; <EOF>
public partial class DummyControlContainer : UserControl { private Dictionary < string , Control > _ControlMap ; public DummyControlContainer ( ) { InitializeComponent ( ) ; _ControlMap = new Dictionary < string , Control > ( ) ; this . ControlAdded += new ControlEventHandler ( DummyControlCollection_ControlAdded ) ; } void DummyControlCollection_ControlAdded ( object sender , ControlEventArgs args ) { if ( args . Control . BindingContext == this . BindingContext ) args . Control . BindingContext = new BindingContext ( ) ; _ControlMap . Add ( args . Control . Name , args . Control ) ; } public Control this [ string name ] { get { return _ControlMap [ name ] ; } } } <EOF>
List < string > lst = new List < string > ( new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ) ; List < string > lst1 = lst . GetRange ( CODE_INTEGER , CODE_INTEGER ) ; lst . RemoveRange ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
protected void ASPxGridView1_CustomColumnDisplayText ( object sender , ASPxGridViewColumnDisplayTextEventArgs e ) { if ( e . Column . FieldName == CODE_STRING ) { Label1 . Text = e . Value . ToString ( ) ; } if ( e . Column . FieldName == CODE_STRING ) { Label2 . Text = e . Value . ToString ( ) ; } . . if ( e . Column . FieldName == CODE_STRING ) { Label12 . Text = e . Value . ToString ( ) ; } } <EOF>
XmlNode XNode = doc . CreateProcessingInstruction ( CODE_STRING , CODE_STRING ) ; doc . AppendChild ( XNode ) ; <EOF>
static readonly char [ ] space = { CODE_CHAR } ; . . . string [ ] items = line . Split ( space , StringSplitOptions . RemoveEmptyEntries ) ; <EOF>
Employees . SelectMany ( e = > e . ListEmployeeCashAllowances ) . Where ( lc = > lc . CashAllowanceId == selectedCashAllowanceId ) . Select ( c = > c . ValueTaken ) . Sum ( ) ; <EOF>
System . Configuration <EOF>
var writePermissionSet = new PermissionSet ( PermissionState . None ) ; writePermissionSet . AddPermission ( new FileIOPermission ( FileIOPermissionAccess . Write , path ) ) ; if ( ! Properties . Settings . Default . searchReadOnly && ! writePermissionSet . IsSubsetOf ( AppDomain . CurrentDomain . PermissionSet ) ) searchable = false ; <EOF>
anim . SetFloat ( hash . speedFloat , CODE_REAL , speedDampTime , Time . deltaTime ) ; <EOF>
var barkFunction = ( ( Expression < Func < Foo , bool > > ) barkExpression ) . Compile ( ) <EOF>
tnParent . Text = dr [ CODE_STRING ] . ToString ( ) . Replace ( CODE_STRING ; CODE_STRING ) ; <EOF>
public < Material > Material { get ; } public void Draw ( < Tool > pen ) ; <EOF>
long SetRangeMask ( int lower , int upper ) { if ( ! ( lower <= upper ) ) throw new ArgumentException ( CODE_STRING ) ; int size = upper - lower + CODE_INTEGER ; if ( size >= CODE_INTEGER ) return - CODE_INTEGER ; long mask = ( CODE_INTEGER << size ) - CODE_INTEGER ; return mask << lower | mask > > - lower ; } <EOF>
static async void Main ( ) { try { HttpClient client = new HttpClient ( ) ; HttpResponseMessage response = await client . GetAsync ( CODE_STRING ) ; response . EnsureSuccessStatusCode ( ) ; string responseBody = await response . Content . ReadAsStringAsync ( ) ; Console . WriteLine ( responseBody ) ; } catch ( HttpRequestException e ) { Console . WriteLine ( " Exception Caught ! " ) ; Console . WriteLine ( CODE_STRING , e . Message ) ; } } <EOF>
private void TabHost_SelectionChanged ( object sender , SelectionChangedEventArgs e ) { TabHost . Focus ( ) ; } <EOF>
var dirs = from file in myList let fileInfo = new DirectoryInfo ( file ) orderby fileInfo . CreationTime ascending select fileInfo ; <EOF>
var formCollection = ( Microsoft . Owin . FormCollection ) context . Parameters ; var userId = formCollection . Get ( CODE_STRING ) ; <EOF>
public class MyClass { public ObjectId Id ; [ BsonRepresentation ( BsonType . Document ) ] public DateTime MyDateTime ; } <EOF>
> > > import time > > > time . localtime ( CODE_INTEGER * CODE_INTEGER ) time . struct_time ( tm_year = CODE_INTEGER , tm_mon = CODE_INTEGER , tm_mday = CODE_INTEGER , tm_hour = CODE_INTEGER , tm_min = CODE_INTEGER , tm_sec = CODE_INTEGER , tm_wday = CODE_INTEGER , tm_yday = CODE_INTEGER , tm_isdst = CODE_INTEGER ) <EOF>
private static int Main ( string [ ] args ) { string line = CODE_STRING ; string stringToFind = CODE_STRING ; int firstQuote = line . IndexOf ( stringToFind ) + stringToFind . Length ; int nextQuote = line . IndexOf ( CODE_STRING , firstQuote ) ; string id = line . Substring ( firstQuote , nextQuote - firstQuote ) ; System . Console . Write ( CODE_STRING + id ) ; return CODE_INTEGER ; } <EOF>
Uri postUri = new Uri ( ) ; <EOF>
static void Main ( string [ ] args ) { int counter = CODE_INTEGER ; Console . WriteLine ( fun ( ref counter ) ) ; Console . WriteLine ( counter ) ; } static int fun ( ref int counter ) { try { counter = CODE_INTEGER ; return counter ; } finally { counter = CODE_INTEGER ; } } <EOF>
protected void insertButton_Click ( object sender , EventArgs e ) { GridViewRow row = ( GridViewRow ) ( ( sender as Button ) . NamingContainer ) ; dt . Columns . Add ( CODE_STRING ) ; dt . Columns . Add ( CODE_STRING ) ; dt = ( DataTable ) Session [ CODE_STRING ] ; DataRow dr = dt . NewRow ( ) ; TextBox txtnewid = ( TextBox ) row . FindControl ( CODE_STRING ) ; TextBox txtnewName = ( TextBox ) row . FindControl ( CODE_STRING ) ; dr [ CODE_STRING ] = txtnewid . Text ; dr [ CODE_STRING ] = txtnewName . Text ; dt . Rows . Add ( dr ) ; Session [ CODE_STRING ] = dt ; gv . DataSource = dt ; gv . DataBind ( ) ; } <EOF>
int lastX = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { Button b = new Button ( ) ; b . Location = new Point ( lastX , CODE_INTEGER ) ; this . Controls . Add ( b ) ; lastX += b . Width ; } <EOF>
private void MeasureStringWidth ( PaintEventArgs e ) { string measureString = CODE_STRING ; Font stringFont = new Font ( CODE_STRING , CODE_INTEGER ) ; int stringWidth = CODE_INTEGER ; SizeF stringSize = new SizeF ( ) ; stringSize = e . Graphics . MeasureString ( measureString , stringFont , stringWidth ) ; e . Graphics . DrawRectangle ( new Pen ( Color . Red , CODE_INTEGER ) , CODE_REAL , CODE_REAL , stringSize . Width , stringSize . Height ) ; e . Graphics . DrawString ( measureString , stringFont , Brushes . Black , new PointF ( CODE_INTEGER , CODE_INTEGER ) ) ; } <EOF>
/// <summary> /// Prepares the range specifier. /// </summary> private void PrepareRangeSpecifier ( ) { ddlEndDayOfWeek . Items . Clear ( ) ; if ( pnlEndDayOfWeek . Visible ) { foreach ( RadComboBoxItem item in ddlStartDayOfWeek . Items ) { if ( item . Index > ddlStartDayOfWeek . SelectedIndex ) ddlEndDayOfWeek . Items . Add ( new RadComboBoxItem ( item . Text , item . Value ) ) ; } pnlEndDayOfWeek . Visible = ddlEndDayOfWeek . Items . Count > CODE_INTEGER ; } if ( ddlEndDayOfWeek . Items . Count > CODE_INTEGER ) ddlEndDayOfWeek . Items . FirstOrDefault ( ) . Selected = true ; } <EOF>
this . Height = ( System . Windows . SystemParameters . PrimaryScreenHeight * CODE_REAL ) ; this . Width = ( System . Windows . SystemParameters . PrimaryScreenWidth * CODE_REAL ) ; <EOF>
Console . SetCursorPosition ( CODE_INTEGER , Console . CursorTop - CODE_INTEGER ) ; Console . WriteLine ( CODE_STRING ) ; <EOF>
MailMessage msg = new MailMessage ( ) ; string system_Area_Encoded = HttpContext . Current . Server . HtmlEncode ( system_Area ) ; string assigned_ToVal_Encoded = HttpContext . Current . Server . HtmlEncode ( Assigned_ToVal ) ; string taskStatus_Encoded = HttpContext . Current . Server . HtmlEncode ( TaskStatus ) ; string msgBody_Encoded = HttpContext . Current . Server . HtmlEncode ( MsgBody ) ; msg . Body = string . Format ( CODE_STRING , system_Area_Encoded , assigned_ToVal_Encoded , taskStatus_Encoded , msgBody_Encoded ) ; <EOF>
List < string > <EOF>
public class Node { public Node next ; public int val ; } class MyList { Node head = null ; Node tail = null ; public MyList ( ) { } bool isEmpty ( ) { return head == null ; } void add ( int val ) { if ( isEmpty ( ) ) head = tail = new Node ( ) ; else { tail . next = new Node ( ) ; tail = tail . next ; } tail . val = val ; } } <EOF>
var News = ( from news in db . News select new { ID = news . NewsID , kort = news . Short } ) . AsEnumerable ( ) . Reverse ( ) ; <EOF>
b . BaseStream . Position = CODE_INTEGER ; <EOF>
using System . Runtime . InteropServices ; public int WM_SYSCOMMAND = CODE_INTEGER ; public int SC_MONITORPOWER = CODE_INTEGER ; [ DllImport ( CODE_STRING ) ] private static extern int SendMessage ( int hWnd , int hMsg , int wParam , int lParam ) ; private void button1_Click ( object sender , System . EventArgs e ) { SendMessage ( this . Handle . ToInt32 ( ) , WM_SYSCOMMAND , SC_MONITORPOWER , CODE_INTEGER ) ; } <EOF>
( ? <= [ \ r ] SVC \ * ) \ b ( \ w * ) \ b <EOF>
SomeClass . Range1 = ( int ) dt . Rows [ CODE_INTEGER ] [ CODE_STRING ] ; SomeClass . Range2 = ( int ) dt . Rows [ CODE_INTEGER ] [ CODE_STRING ] ; <EOF>
HtmlDocument doc = new HtmlDocument ( ) ; doc . LoadHtml ( CODE_STRING + CODE_STRING ) ; var firstImage = doc . DocumentNode . Descendants ( CODE_STRING ) . Where ( node = > node . ParentNode . Name == CODE_STRING ) . FirstOrDefault ( ) ; if ( firstImage != null ) { var aNode = firstImage . ParentNode ; aNode . RemoveChild ( firstImage ) ; aNode . ParentNode . ReplaceChild ( firstImage , aNode ) ; } var fixedText = doc . DocumentNode . OuterHtml ; <EOF>
public static void RemoveNamespace ( this XElement element ) { foreach ( XElement e in element . DescendantsAndSelf ( ) ) { if ( e . Name . Namespace != XNamespace . None ) e . Name = e . Name . LocalName ; if ( e . Attributes ( ) . Any ( a = > a . IsNamespaceDeclaration || a . Name . Namespace != XNamespace . None ) ) e . ReplaceAttributes ( e . Attributes ( ) . Select ( NoNamespaceAttribute ) ) ; } } private static XAttribute NoNamespaceAttribute ( XAttribute attribute ) { return attribute . IsNamespaceDeclaration ? null : attribute . Name . Namespace != XNamespace . None ? new XAttribute ( attribute . Name . LocalName , attribute . Value ) : attribute ; } <EOF>
Return RedirectToAction ( CODE_STRING , New With { . id = dinner . DinnerID } ) <EOF>
using System ; using System . Collections . Generic ; using System . ComponentModel ; using System . Data ; using System . Drawing ; using System . Linq ; using System . Text ; using System . Windows . Forms ; using System . Runtime . InteropServices ; namespace WindowsFormsApplication1 { public partial class Form1 : Form { [ return : MarshalAs ( UnmanagedType . Bool ) ] [ DllImport ( CODE_STRING , CharSet = CharSet . Auto , ExactSpelling = true ) ] public static extern void BlockInput ( [ In , MarshalAs ( UnmanagedType . Bool ) ] bool fBlockIt ) ; public Form1 ( ) { InitializeComponent ( ) ; } private void Form1_Load ( object sender , EventArgs e ) { this . Show ( ) ; BlockInput ( true ) ; System . Threading . Thread . Sleep ( CODE_INTEGER ) ; BlockInput ( false ) ; } } } <EOF>
MySql . Data . MySqlClient . MySqlConnection conn ; string myConnectionString ; myConnectionString = CODE_STRING ; try { conn = new MySql . Data . MySqlClient . MySqlConnection ( ) ; conn . ConnectionString = myConnectionString ; conn . Open ( ) ; } catch ( MySql . Data . MySqlClient . MySqlException ex ) { MessageBox . Show ( ex . Message ) ; } <EOF>
MultiBinding multiBinding = new MultiBinding ( ) ; multiBinding . Converter = converter ; multiBinding . Bindings . Add ( new Binding { ElementName = CODE_STRING , Path = new PropertyPath ( CODE_STRING ) } ) ; multiBinding . Bindings . Add ( new Binding { ElementName = CODE_STRING , Path = new PropertyPath ( CODE_STRING ) } ) ; multiBinding . Bindings . Add ( new Binding { ElementName = CODE_STRING , Path = new PropertyPath ( CODE_STRING ) } ) ; <EOF>
UserForms [ CODE_INTEGER ] . Visibility = true ; <EOF>
private void FormClosing ( object sender , FormClosingEventArgs e ) { CachedText = scintilla . Text ; } public string CachedText { get ; private set ; } <EOF>
atext = ALPHA / DIGIT / ; Any character except controls , CODE_STRING / CODE_STRING / ; SP , and specials . CODE_STRING / CODE_STRING / ; Used for atoms CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING / CODE_STRING <EOF>
class Program { static void Main ( string [ ] args ) { var doc = new XmlDocument ( ) ; doc . Load ( CODE_STRING ) ; var container = doc . DocumentElement . GetElementsByTagName ( CODE_STRING ) . OfType < XmlElement > ( ) . FirstOrDefault ( ) ; if ( container == null ) return ; var dealers = container . GetElementsByTagName ( CODE_STRING ) . OfType < XmlElement > ( ) ; foreach ( var dealer in dealers ) { var dealerId = dealer . GetAttribute ( CODE_STRING ) ; Console . Write ( dealerId + CODE_STRING ) ; var descrip = dealer . GetElementsByTagName ( CODE_STRING ) . OfType < XmlElement > ( ) . FirstOrDefault ( ) ; if ( descrip != null ) Console . WriteLine ( descrip . InnerText ) ; } Console . ReadLine ( ) ; } } <EOF>
int serviceday ; int servicehour ; int serviceminute ; Int32 . TryParse ( ServiceDay , out serviceday ) ; Int32 . TryParse ( ServiceHour , out servicehour ) ; Int32 . TryParse ( ServiceMinute , out serviceminute ) ; DateTime finalDateTime = serviceEntry . ServiceDateTime . AddDays ( serviceday ) . AddHours ( servicehour ) . AddMinutes ( serviceminute ) ; <EOF>
foreach ( Component comp in this . components . Components ) { var ilist = comp as ImageList ; if ( ilist != null ) { } } <EOF>
class Program { private static bool _s_stop = false ; public static void Main ( string [ ] args ) { Console . CancelKeyPress += new ConsoleCancelEventHandler ( Console_CancelKeyPress ) ; while ( ! _s_stop ) { /* put real logic here */ Console . WriteLine ( CODE_STRING , DateTime . Now ) ; Thread . Sleep ( CODE_INTEGER ) ; } Console . WriteLine ( CODE_STRING ) ; Console . ReadLine ( ) ; } static void Console_CancelKeyPress ( object sender , ConsoleCancelEventArgs e ) { e . Cancel = true ; _s_stop = true ; Console . WriteLine ( CODE_STRING ) ; } } <EOF>
oDrawRectangle = new Rectangle ( this . Width / CODE_INTEGER - iWidth / CODE_INTEGER , this . Height / CODE_INTEGER - iHeight / CODE_INTEGER , iWidth , iHeight ) ; <EOF>
if ( variable == CODE_INTEGER ) { ComboxBox1 . Items . Add ( CODE_STRING ) ; } <EOF>
ScriptManager . RegisterStartupScript ( UpdatePanel2 , this . GetType ( ) , CODE_STRING , CODE_STRING + Request . QueryString [ CODE_STRING ] + CODE_STRING + readCookie ( ) + CODE_STRING , true ) ; <EOF>
public static void Main ( ) { List < ValueType > values = new List < ValueType > { CODE_INTEGER , DateTime . Now , CODE_REAL } ; DuplicateLastItem ( values ) ; Console . WriteLine ( values [ CODE_INTEGER ] ) ; Console . WriteLine ( values [ CODE_INTEGER ] ) ; values [ CODE_INTEGER ] = CODE_INTEGER ; Console . WriteLine ( values [ CODE_INTEGER ] ) ; Console . WriteLine ( values [ CODE_INTEGER ] ) ; } static void DuplicateLastItem ( List < ValueType > values2 ) { values2 . Add ( values2 [ values2 . Count - CODE_INTEGER ] ) ; } <EOF>
private void OrdersButton_Click ( object sender , EventArgs e ) { if ( OrdersButton . Text == CODE_STRING ) { OrdersButton . Text = CODE_STRING ; } else if ( OrdersButton . Text == CODE_STRING ) { OrdersButton . Text = CODE_STRING ; } } <EOF>
protected override void OnStart ( string [ ] args ) { this . timer = new System . Timers . Timer ( CODE_REAL ) ; this . timer . AutoReset = true ; this . timer . Elapsed += new System . Timers . ElapsedEventHandler ( this . timer_Elapsed ) ; this . timer . Start ( ) ; } protected override void OnStop ( ) { this . timer . Stop ( ) ; this . timer = null ; } protected void timer_Elapsed ( object sender , System . Timers . ElapsedEventArgs e ) { this . proccessQue ( ) ; } <EOF>
XDocument doc = XDocument . Parse ( xml ) ; List < string > ids = doc . Descendants ( CODE_STRING ) . Select ( e = > e . Attribute ( CODE_STRING ) . Value ) . ToList ( ) ; <EOF>
htmlDoc . DocumentNode . SelectNodes ( CODE_STRING ) ; <EOF>
int [ ] scoreArray = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int new_number = CODE_INTEGER ; int min_index = Array . IndexOf ( scoreArray , scoreArray . Min ( ) ) ; scoreArray [ min_index ] = new_number ; Array . Sort ( scoreArray ) ; Array . Reverse ( scoreArray ) ; <EOF>
string name = CODE_STRING ; foreach ( KnownColor kc in Enum . GetValues ( typeof ( KnownColor ) ) ) { Color known = Color . FromKnownColor ( kc ) ; if ( Color . FromArgb ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) . ToArgb ( ) == known . ToArgb ( ) ) { label1 . Text = known . Name ; break ; } } <EOF>
List < PlanObjectsViewModel > result = new List < PlanObjectsViewModel > ( ) ; Random rand = new Random ( ) ; int temp = CODE_INTEGER ; while ( budget > temp ) { int randi = rand . Next ( CODE_INTEGER , count ) ; var nthItem = model1 . Skip ( randi ) . First ( ) ; if ( ! result . Find ( nthItem ) { result . Add ( nthItem ) ; } } <EOF>
hitBounds = Math . Abs ( ship . position . x - transform . position . x ) >= xBound || Math . Abs ( ship . position . y - transform . position . y ) >= yBound ; <EOF>
SamplerState somethingLikeThis { Filter = MIN_MAG_MIP_LINEAR ; AddressU = Clamp ; AddressV = Clamp ; } ; <EOF>
[ DynamicTestFactory ] public IEnumerable < Test > LoginAndOut ( ) { string method ; while ( Model . graphWalker . HasNextStep ( ) ) { method = Model . graphWalker . GetNextStep ( ) . ToString ( ) ; if ( method == string . Empty ) break ; yield return new TestCase ( method , ( ) = > { object obj = this . GetType ( ) . InvokeMember ( method , BindingFlags . InvokeMethod | BindingFlags . Instance | BindingFlags . Public , null , this , null ) ; } ) ; } } <EOF>
namespace BH_Server { [ ServiceContract ] public interface BHInterface { [ OperationContract ] string GetName ( string name ) ; [ OperationContract ] Device GetDevice ( ) ; } [ DataContract ( Name = CODE_STRING , Namespace = CODE_STRING ) ] public class Device { [ DataMember ( Name = CODE_STRING , Order = CODE_INTEGER ) ] public string SN { get ; set ; } } } <EOF>
Regex r = new Regex ( CODE_STRING ) ; var newStr = r . Replace ( FileContents , CODE_STRING ) ; <EOF>
ExportFile ( ) <EOF>
buttons . Where ( b = > buttonGroups . ContainsKey ( ( int ) b . Tag ) ) <EOF>
foreach ( var edge in distinctEdge ) { edge . value = EdgeList . Count ( e = > e . target == edge . target && e . source == edge . source ) ; } <EOF>
public static void WriteBeginComment ( this HtmlTextWriter writer ) { writer . Write ( HtmlTextWriter . TagLeftChar ) ; writer . Write ( CODE_STRING ) ; } public static void WriteEndComment ( this HtmlTextWriter writer ) { writer . Write ( CODE_STRING ) ; writer . Write ( HtmlTextWriter . TagRightChar ) ; } public static void WriteComment ( this HtmlTextWriter writer , string comment ) { if ( comment . StartsWith ( CODE_STRING ) || comment . StartsWith ( CODE_STRING ) || comment . Contains ( CODE_STRING ) || comment . EndsWith ( CODE_STRING ) ) { throw new ArgumentException ( CODE_STRING , CODE_STRING ) ; } writer . WriteBeginComment ( ) ; writer . Write ( comment ) ; writer . WriteEndComment ( ) ; } <EOF>
public MainPage ( ) { Windows . Phone . UI . Input . HardwareButtons . BackPressed += HardwareButtons_BackPressed ; } private void HardwareButtons_BackPressed ( object sender , Windows . Phone . UI . Input . BackPressedEventArgs e ) { /* When you don't know the namespace you can use this code instead of the lower string[] Namespace = Frame.CurrentSourcePageType.FullName.Split('.'); if (!e.Handled && Frame.CurrentSourcePageType.FullName == Namespace[0] + ".MainPage") Application.Current.Exit(); */ if ( ! e . Handled && Frame . CurrentSourcePageType . FullName == CODE_STRING ) Application . Current . Exit ( ) ; } <EOF>
Transaction_Id , Value_Date , Transmit_Date , Transmit_Time , Contract_Id , Contract_Amount , Contract_RageTestAmount , Employer_Code , Test_Acceptor , Institution_Id CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER : CODE_INTEGER : CODE_INTEGER , CODE_INTEGER , CODE_REAL , CODE_INTEGER , CODE_REAL , CODE_INTEGER , CODE_INTEGER <EOF>
protected void Button1_Click ( object sender , EventArgs e ) { DateTime dateToday = DateTime . Now ; DateTime dateInFiveDays = dateToday . AddDays ( CODE_INTEGER ) ; lblDateToday = dateToday . ToString ( CODE_STRING ) ; lblValiDate = dateInFiveDays . ToString ( CODE_STRING ) ; } <EOF>
property == null <EOF>
Code Editing -> C # -> Localization <EOF>
rmtool . exe - p [ PID ] - S <EOF>
let uploadFile ( uri : Uri ) fileName = async { use stream = File . OpenRead fileName use client = new HttpClient ( ) return ! client . PostAsync ( uri , new StreamContent ( stream ) ) | > Async . AwaitTask } <EOF>
CRAXDDRT . SubreportObject subReport = null ; foreach ( CRAXDDRT . Section section in crystalReport . Sections ) { foreach ( object item in section . ReportObjects ) { subReport = item as CRAXDDRT . SubreportObject ; if ( subReport != null ) { } } } <EOF>
image . Save ( Server . MapPath ( FileName ) ) ; MemoryStream stream1 = new MemoryStream ( System . IO . File . ReadAllBytes ( Server . MapPath ( Filename ) ) ) ; System . IO . File . Delete ( Server . MapPath ( Filename ) ) ; <EOF>
File . Delete ( CODE_STRING ) ; <EOF>
public class MyMongoRepository < T > : MongoRepository < T > { public MyMongoRepository ( ) : base ( CODE_STRING , CODE_STRING ) { } } container . RegisterType ( typeof ( IRepository < > ) , typeof ( MyMongoRepository < > ) ) ; <EOF>
int numOfEvents = eventsForAllMonths . SelectMany ( m = > m . AllDays ) . Select ( d = > d . CalEvents . Count ) . Sum ( ) ; <EOF>
result = kpiReportClient . Render ( format , devInfo , out extension , out encoding , out mimeType , out warnings , out streamIDs ) ; Console . WriteLine ( result ) ; result = kpiReportClient . Render ( format , devInfo , out extension , out encoding , out mimeType , out warnings , out streamIDs ) ; Stream resStream = new MemoryStream ( result ) ; var nonRepSickReportForNM = XElement . Load ( resStream ) ; return nonRepSickReportForNM <EOF>
Table Leave emp_id , leave_id , leave_Type , days_applied , from_date , to_date , date_applied Table Leave Type leave_Type_id , leave_Type <EOF>
Encoding iso = Encoding . GetEncoding ( CODE_STRING ) ; Encoding utf8 = Encoding . UTF8 ; byte [ ] utfBytes = utf8 . GetBytes ( Message ) ; byte [ ] isoBytes = Encoding . Convert ( utf8 , iso , utfBytes ) ; string msg = iso . GetString ( isoBytes ) ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { treeView1 . Focus ( ) ; SendKeys . SendWait ( CODE_STRING ) ; } <EOF>
WPFUC userControl = ( WPFUC ) elementHost1 . Child ; userControl . Parameter = CODE_STRING ; or userControl . Parameter = CODE_STRING ; <EOF>
MediaFoundationEncoder . EncodeToMp3 <EOF>
private void xrLabel_BeforePrint ( object sender , System . Drawing . Printing . PrintEventArgs e ) { XRLabel label = ( XRLabel ) sender ; XtraReportBase parentReport = label . Report ; object currentData = parentReport . GetCurrentRow ( ) ; label . Tag = currentData ; } <EOF>
private void DataGridView_CellValueChanged ( object sender , DataGridViewCellEventArgs e ) { this . bindingList [ e . RowIndex ] = ( myEnumeration ) DataGridView [ e . ColumnIndex , e . RowIndex ] . Value ; } <EOF>
using System . Net ; using System . Net . Mail ; var fromAddress = new MailAddress ( CODE_STRING , CODE_STRING ) ; var toAddress = new MailAddress ( CODE_STRING , CODE_STRING ) ; string fromPassword = CODE_STRING ; string subject = CODE_STRING ; string body = CODE_STRING ; var smtp = new SmtpClient { Host = CODE_STRING , Port = CODE_INTEGER , EnableSsl = true , DeliveryMethod = SmtpDeliveryMethod . Network , UseDefaultCredentials = false , Credentials = new NetworkCredential ( fromAddress . Address , fromPassword ) } ; using ( var message = new MailMessage ( fromAddress , toAddress ) { Subject = subject , Body = body } ) { smtp . Send ( message ) ; } <EOF>
public ActionResult ByAlias ( [ Bind ( Prefix = CODE_STRING ) ] string alias ) { } <EOF>
private void backgroundWorker1_DoWork ( object sender , DoWorkEventArgs e ) { string path = ( string ) e . Argument ; processFile ( path ) ; } private void processToolStripMenuItem_Click ( object sender , EventArgs e ) { backgroundWorker1 . RunWorkerAsync ( openSingleFile . FileName ) ; processToolStripMenuItem . Enabled = false ; } private void backgroundWorker1_RunWorkerCompleted ( object sender , RunWorkerCompletedEventArgs e ) { processToolStripMenuItem . Enabled = true ; } <EOF>
int numberOfElements = CODE_INTEGER ; var mock = Mock . Of < ICalendar > ( x = > x . GetSchedules ( ) == Enumerable . Repeat ( Mock . Of < ISchedule > ( ) , numberOfElements ) . ToList ( ) ) ; <EOF>
private static object _lock = new object ( ) ; private static int _queuedCount = CODE_INTEGER ; public Map ( ) { InitializeComponent ( ) ; _worker = new BackgroundWorker ( ) ; _worker . DoWork += _worker_DoWork ; _worker . ProgressChanged += _worker_ProgressChanged ; _worker . WorkerReportsProgress = true ; } private void _worker_DoWork ( object sender , DoWorkEventArgs e ) { _frameCount = _frames . FrameCount ( ) ; for ( var i = CODE_INTEGER ; i < _frameCount ; i ++ ) { var f = _frames . Frame ( i + CODE_INTEGER ) ; lock ( _lock ) { _queuedCount ++ ; } _worker . ReportProgress ( i , f ) ; Thread . Sleep ( _tickCount ) ; _suspend . WaitOne ( ) ; } } void _worker_ProgressChanged ( object sender , ProgressChangedEventArgs e ) { if ( _queuedCount > CODE_INTEGER ) this . Refresh ( ) ; lock ( _lock ) { _queuedCount -- ; } } <EOF>
metadataStore . setEntityTypeForResourceName ( CODE_STRING , CODE_STRING ) ; metadataStore . setEntityTypeForResourceName ( CODE_STRING , CODE_STRING ) ; <EOF>
BitmapImage bi = new BitmapImage ( ) ; bi . BeginInit ( ) ; bi . CacheOption = BitmapCacheOption . OnLoad ; bi . CreateOptions = BitmapCreateOptions . None ; bi . StreamSource = decryptedImageStream ; bi . EndInit ( ) ; <EOF>
Connection . Query ( ) <EOF>
Console . ReadKey ( ) ; <EOF>
var elem = ( HtmlTableCell ) FindControl ( CODE_STRING + i . ToString ( ) ) ; elem . InnerText = CODE_STRING ; <EOF>
var sel = eval ( Selector ) ; <EOF>
Text = CODE_STRING <EOF>
public class Forwarded { [ XmlElement ( ElementName = CODE_STRING , Namespace = CODE_STRING ) ] public Delay Delay { get ; set ; } [ XmlElement ( ElementName = CODE_STRING ) ] public XmppMessage Message { get ; set ; } [ XmlAttribute ( AttributeName = CODE_STRING ) ] public string Xmlns { get ; set ; } } public class Result { [ XmlElement ( ElementName = CODE_STRING , Namespace = CODE_STRING ) ] public Forwarded Forwarded { get ; set ; } [ XmlAttribute ( AttributeName = CODE_STRING ) ] public string Xmlns { get ; set ; } [ XmlAttribute ( AttributeName = CODE_STRING ) ] public string Id { get ; set ; } } [ XmlRoot ( ElementName = CODE_STRING ) ] public class MessageHistory { [ XmlElement ( ElementName = CODE_STRING , Namespace = CODE_STRING ) ] public Result Result { get ; set ; } [ XmlAttribute ( AttributeName = CODE_STRING ) ] public string From { get ; set ; } [ XmlAttribute ( AttributeName = CODE_STRING ) ] public string To { get ; set ; } } <EOF>
somevalue = typeof ( MyTable ) . GetProperty ( fieldName ) . GetValue ( table , null ) ; <EOF>
Byte [ ] SeatL1 = new UTF8Encoding ( true ) . GetBytes ( CODE_STRING + r2 . BackColor . R . ToString ( CODE_STRING ) + CODE_STRING + r2 . BackColor . G . ToString ( CODE_STRING ) + CODE_STRING + r2 . BackColor . B . ToString ( CODE_STRING ) ) ; fsNew . Write ( SeatL1 , CODE_INTEGER , SeatL1 . Length ) ; <EOF>
FileInfo finfo = new FileInfo ( fileName ) ; string fileName = finfo . Extension <EOF>
List < List < KeyValuePair < string , double > > > dblWordFreqByCluster = new List < List < KeyValuePair < string , double > > > ( ) ; int count = dblWordFreqByCluster . count ; <EOF>
string str = DateTime . Now . ToString ( CODE_STRING ) ; <EOF>
( ( BoundField ) GridView1 . Columns [ ColumnIndex ] ) . DataFormatString = myFormatString ; <EOF>
var nuds = new [ ] { numericUpDown1 , numericUpDown2 , numericUpDown3 , numericUpDown4 , numericUpDown5 , numericUpDown6 , } ; for ( int i = CODE_INTEGER ; i < readBuf . Length ; i ++ ) { nuds [ i ] . Value = Convert . ToDecimal ( BitConverter . ToSingle ( readBuf [ i ] , startIndex : CODE_INTEGER ) ) ; } <EOF>
FederatedAuthentication . SessionAuthenticationModule . SessionSecurityTokenReceived += SessionAuthenticationModule_SessionSecurityTokenReceived ; <EOF>
Thread newThread = new Thread ( delegate ( ) { stream ( string ) ; } ) ; this . list . Add ( newThread ) ; newThread . isBackground = true ; newThread . Start ( ) ; <EOF>
void GridView1_RowDataBound ( object sender , GridViewRowEventArgs e ) { if ( e . Row . RowType == DataControlRowType . DataRow ) { var firstCell = e . Row . Cells [ CODE_INTEGER ] ; firstCell . Controls . Clear ( ) ; firstCell . Controls . Add ( new HyperLink { NavigateUrl = firstCell . Text , Text = firstCell . Text } ) ; } } <EOF>
new BitmapImage ( new Uri ( CODE_STRING , UriKind . RelativeOrAbsolute ) ) ; <EOF>
public class BusinessModel : INotifyPropertyChanged { public event PropertyChangedEventHandler PropertyChanged ; private int _quantity ; public int Quantity { get { return _quantity ; } set { _quantity = value ; this . OnPropertyChanged ( CODE_STRING ) ; } } void OnPropertyChanged ( string PropertyName ) { if ( this . PropertyChanged != null ) { this . PropertyChanged ( this , new PropertyChangedEventArgs ( PropertyName ) ) ; } } } <EOF>
[ HttpPost ] public ActionResult Create ( Names name ) { var names = name . Split ( new [ ] { ' ' , CODE_CHAR } , StringSplitOptions . RemoveEmptyEntries ) foreach ( var n in names ) { unitofwork . Names . Insert ( n ) ; } unitofwork . save ( ) ; return RedirectToAction ( CODE_STRING ) ; } <EOF>
var tommorowMidnight = DateTime . Today . AddDays ( CODE_INTEGER ) ; var timeTilMidnight = tommorowMidnight - DateTime . Now ; var minutesTilMidnight = ( uint ) timeTilMidnight . TotalMinutes ; builder . SetTrigger ( new TimeTrigger ( minutesTilMidnight , true ) ) ; <EOF>
public async Task < string > MakeWebRequest ( string url ) { HttpClient http = new System . Net . Http . HttpClient ( ) ; HttpResponseMessage response = await http . GetAsync ( url ) ; return await response . Content . ReadAsStringAsync ( ) ; } <EOF>
var input = " SMS \ r \ t ? Map - locations of " ; var regexPattern = CODE_STRING ; var cleanedInput = Regex . Replace ( input , regexPattern , String . Empty ) ; <EOF>
var src = CODE_STRING ; src = src . replace ( / [ ^ CODE_INTEGER - CODE_INTEGER + ] / g , ' ' ) ; var myDate = new Date ( parseInt ( src ) ) ; <EOF>
( ? < ! src = [ ' " ] ? ) ( http | ftp | https ) : . . . <EOF>
% windir % \ system32 \ DpiScaling . exe <EOF>
string [ ] addetailsID = new string [ CODE_INTEGER ] ; Random random = new Random ( ) ; List < int > indices = new List < int > ( ) ; while ( indices . Count < CODE_INTEGER ) { int index = random . Next ( CODE_INTEGER , addetailsID . Length ) ; if ( indices . Count == CODE_INTEGER || ! indices . Contains ( index ) ) { indices . Add ( index ) ; } } string [ ] strAdDetailsID = new string [ CODE_INTEGER ] ; for ( int i = CODE_INTEGER ; i < indices . Count ; i ++ ) { int randomIndex = indices [ i ] ; strAdDetailsID [ i ] = addetailsID [ randomIndex ] ; } <EOF>
public string GetDate ( FileInfo f ) { FileStream fs = new FileStream ( f . FullName , FileMode . Open , FileAccess . Read , FileShare . Read ) ; BitmapSource img = BitmapFrame . Create ( fs ) ; BitmapMetadata md = ( BitmapMetadata ) img . Metadata ; string date = md . DateTaken ; Console . WriteLine ( date ) ; return date ; } <EOF>
Console . Writeline ( RandomMessage ( ) ) ; <EOF>
gts . push ( [ ' google_base_offer_id ' , document . getElementById ( ' < %= hidden . ClientID % > ' ) . value ] ) ; <EOF>
using ( SqlCommand cmd = new SqlCommand ( query , conn ) ) { int CODE_INTEGER ; cmd . Parameters . Add ( new SqlParameter ( CODE_STRING , SqlDbType . int ) ) . Value = CODE_INTEGER ; cmd . Parameters . Add ( new SqlParameter ( CODE_STRING , SqlDbType . DateTime ) ) . Value = mydate ; cmd . Parameters . Add ( new SqlParameter ( CODE_STRING , SqlDbType . decimal ) ) . Value = value ; cmd . ExecuteNonQuery ( ) ; } <EOF>
public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; } private string ab ( ) { return textBox1 . Text ; } private void button1_Click ( object sender , EventArgs e ) { MessageBox . Show ( ab ( ) ) ; } private void button2_Click ( object sender , EventArgs e ) { MessageBox . Show ( ab ( ) + CODE_STRING ) ; } } <EOF>
var value = demoWorksheet . get_Range ( CODE_STRING , CODE_STRING ) . Value2 ; <EOF>
public static string [ ] StringToArray ( string str ) { return str . Replace ( CODE_STRING , CODE_STRING ) . Split ( CODE_CHAR ) ; } public static string ArrayToString ( string [ ] array ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = CODE_INTEGER ; i <= array . Length - CODE_INTEGER ; i ++ ) { sb . AppendFormat ( i % CODE_INTEGER != CODE_INTEGER ? CODE_STRING : CODE_STRING , array [ i ] ) ; } return sb . ToString ( ) ; } <EOF>
private void dgvBRT_DoubleClick ( object sender , EventArgs e ) { if ( dgvBRT . SelectedCells . Count > CODE_INTEGER ) { int selectedrowindex = dgvBRT . SelectedCells [ CODE_INTEGER ] . RowIndex ; DataGridViewRow selectedRow = dgvBRT . Rows [ selectedrowindex ] ; string BRTNumber = Convert . ToString ( selectedRow . Cells [ CODE_STRING ] . Value ) ; frmBRTDetail BRTDetail = new frmBRTDetail ( this ) ; BRTDetail . LoadBRTNumberKey ( BRTNumber , null ) ; BRTDetail . Show ( ) ; } } <EOF>
ListItem newItem = null ; foreach ( ListItem item in ListBox1 . Items ) { if ( item . Selected ) { foreach ( ListItem innerItem in ListBox2 . Items ) { if ( innerItem . Selected ) { newItem = new ListItem ( ) ; newItem . Text = item . Text + innerItem . Text ; ListBoxResult . Items . Add ( newItem ) ; } } } } <EOF>
String recordTime = fileName . Split ( CODE_CHAR , CODE_CHAR ) . Last ( ) ; DateTime recordDateTime = DateTime . ParseExact ( recordTime , CODE_STRING , CultureInfo . InvariantCulture ) ; if ( recordDateTime . AddYears ( CODE_INTEGER ) < DateTime . Now ) { Console . WriteLine ( fileName ) ; } <EOF>
public TValue RetryHelper < T , TValue > ( Func < ObjectSet < T > , TValue > func ) where T : class { using ( MyEntities dataModel = new MyEntities ( ) ) { var entitySet = dataModel . CreateObjectSet < T > ( ) ; return FancyRetryLogic ( ( ) = > { return func ( entitySet ) ; } ) ; } } public User GetUser ( String userEmail ) { return RetryHelper < User , User > ( u = > u . FirstOrDefault ( x = > x . UserEmail == userEmail ) ) ; } <EOF>
from c in db . Customer join a in db . Account on a . customerID equals c . customerID select new Model { FirstName = c . firstName , LastName = c . lastName , Address = c . address , AccountRate = a . accountRate } <EOF>
private void label1_MouseHover ( object sender , EventArgs e ) { } private void label1_MouseLeave ( object sender , EventArgs e ) { } <EOF>
Map ( x = > x . TransactionDate ) . Formula ( CODE_STRING ) ; <EOF>
XmlNode root = doc . SelectSingleNode ( CODE_STRING ) ; string attrVal = root . Attributes [ CODE_STRING ] . Value ; <EOF>
double number ; number = CODE_REAL ; Console . WriteLine ( number . ToString ( CODE_STRING , CultureInfo . InvariantCulture ) ) ; number = CODE_INTEGER ; Console . WriteLine ( number . ToString ( CODE_STRING , CultureInfo . InvariantCulture ) ) ; number = Math . PI ; Console . WriteLine ( number . ToString ( CODE_STRING , CultureInfo . InvariantCulture ) ) ; <EOF>
Persist Security Info = True <EOF>
DateTime indianStd = TimeZoneInfo . ConvertTimeBySystemTimeZoneId ( DateTime . UtcNow , CODE_STRING ) ; DateTime MyanmarStd = TimeZoneInfo . ConvertTimeBySystemTimeZoneId ( DateTime . UtcNow , CODE_STRING ) ; DateTime SEAsia = TimeZoneInfo . ConvertTimeBySystemTimeZoneId ( DateTime . UtcNow , CODE_STRING ) ; DateTime ConvertedDt = TimeZoneInfo . ConvertTimeBySystemTimeZoneId ( MyanmarStd , CODE_STRING , CODE_STRING ) ; <EOF>
XElement root = XElement . Parse ( strSerializedoutput ) ; Dictionary < int , Pair > list = root . Descendants ( CODE_STRING ) . ToDictionary ( x = > ( int ) x . Attribute ( CODE_STRING ) , x = > { var pId = x . Parent . Attribute ( CODE_STRING ) ; var depthLevel = x . Attribute ( CODE_STRING ) ; return pId == null ? new Pair { parentID = CODE_INTEGER , level = ( int ) depthLevel } : new Pair { parentID = ( int ) pId , level = ( int ) depthLevel } ; } ) ; public class Pair { public int parentID ; public int level ; } <EOF>
using ( PdfReader reader = new PdfReader ( FilePath ) , PdfReader reader1 = new PdfReader ( MapFilePath ) ) { pass that reader1 object to AddMap method . } <EOF>
var docFolder = Environment . GetFolderPath ( Environment . SpecialFolder . MyDocuments ) ; CSConfig . Logging = true ; CSConfig . LogFileName = Path . Combine ( docFolder , CODE_STRING ) ; <EOF>
private static void Main ( string [ ] args ) { var encodedString = System . IO . File . ReadAllText ( CODE_STRING ) ; var bytes = System . Convert . FromBase64String ( encodedString ) ; System . IO . File . WriteAllBytes ( CODE_STRING , bytes ) ; } <EOF>
foreach ( DataTable table in result . Tables ) { GfoTopBox box1 = StuffData ( table ) ; Grid . SetRow ( box1 , j ) ; Grid . SetColumn ( box1 , i ) ; output . Children . Add ( box1 ) ; i ++ ; if ( i >= output . ColumnDefinitions . Count ) { i = CODE_INTEGER ; j ++ ; } } <EOF>
FeedsPanorama . ItemContainerGenerator . ContainerFromItem ( currentDataObject ) ; <EOF>
int value = int . Parse ( txtByteValue . Text ) ; int len = fi [ i ] . Length ; switch ( cmboCompareType . SelectedText ) { case CODE_STRING : fileOK = len > value ; break ; case CODE_STRING : fileOK = len < value ; break ; case CODE_STRING : fileOK = len == value ; break ; } <EOF>
if ( Membership . ValidateUser ( username , password ) ) { FormsAuthentication . SetAuthCookie ( username , true ) ; } <EOF>
MyMediaPlayer . Source = new Uri ( _videos . Video [ CODE_INTEGER ] . videourl3 ) <EOF>
public string getSalt ( ) { string sql = CODE_STRING ; using ( var connection = new SqlConnection ( CODE_STRING ) ) using ( var command = new SqlCommand ( sql , connection ) ) { command . Parameters . Add ( CODE_STRING , SqlDbType . NVarChar , CODE_INTEGER ) . Value = userNameBox . Text ; connection . Open ( ) ; return ( command . ExecuteScalar ( ) as string ) ?? CODE_STRING ; } } <EOF>
private void Button_Click ( object sender , RoutedEventArgs e ) { ShareNewsArticle ( theMessageStatus ) ; } private void ShareNewsArticle ( string message ) { ShareStatusTask sst = new ShareStatusTask ( ) ; sst . Status = message ; sst . Show ( ) ; } <EOF>
using ( SqlConnection connection = new SqlConnection ( connString ) ) { SqlBulkCopy bulkCopy = new SqlBulkCopy ( connection , SqlBulkCopyOptions . TableLock | SqlBulkCopyOptions . FireTriggers | SqlBulkCopyOptions . UseInternalTransaction , null ) ; bulkCopy . DestinationTableName = this . tableName ; connection . Open ( ) ; bulkCopy . WriteToServer ( dataTable ) ; connection . Close ( ) ; } this . dataTable . Clear ( ) ; <EOF>
DataColumn totalColumn = new DataColumn ( ) ; totalColumn . ColumnName = CODE_STRING ; totalColumn . DataType = typeof ( int ) ; totalColumn . DefaultValue = CODE_INTEGER ; dtSourceTable . Columns . Add ( totalColumn ) ; foreach ( DataRow row in dtSourceTable . Rows ) { row [ CODE_STRING ] = Convert . ToInt32 ( row [ CODE_STRING ] ) - Convert . ToInt32 ( row [ CODE_STRING ] ) ; } <EOF>
ddlType . SelectedValue = ddlType . Items . FindByText ( dr1 [ CODE_INTEGER ] . ToString ( ) ) . Value ; <EOF>
XDocument streamFeed = XDocument . Load ( new StringReader ( response . Content ) ) ; var query = from sticker in streamFeed . Root . Elements ( CODE_STRING ) let imageData = sticker . Element ( CODE_STRING ) select new Stickers { name = ( string ) sticker . Element ( CODE_STRING ) , description = ( string ) sticker . Element ( CODE_STRING ) , image = ( string ) imageData . Element ( CODE_STRING ) + CODE_STRING + ( string ) imageData . Element ( CODE_STRING ) } ; stickersListBox . ItemsSource = query ; <EOF>
libreriaCobol lc = new libreriaCobol ( ) ; lc . property = CODE_STRING ; <EOF>
private void button1_KeyDown ( object sender , KeyEventArgs e ) { if ( e . Modifiers == Keys . Control && e . KeyCode == Keys . R ) { } } <EOF>
var mostCommon = gradeData . GroupBy ( x = > x . TotalPoints ) . OrderByDescending ( g = > g . Count ( ) ) . Select ( g = > g . Key ) . First ( ) ; <EOF>
Random Rnd = new Random ( ) ; var jobItem = haggleList . ElementAt ( Rnd . Next ( CODE_INTEGER , haggleList . Count ( ) ) ) ; var selectedJobId = Convert . ToInt32 ( jobItem . JobId ) ; <EOF>
public static byte [ ] BitmapToBytes ( ColorConvertedBitmap ccb ) { byte [ ] bytes = new byte [ ccb . PixelWidth * ccb . PixelHeight * ccb . Format . BitsPerPixel / CODE_INTEGER ] ; ccb . CopyPixels ( bytes , ccb . PixelWidth * ccb . Format . BitsPerPixel / CODE_INTEGER , CODE_INTEGER ) ; return bytes ; } <EOF>
TimeElapsed = String . Format ( CODE_STRING , total . Hours , total . Minutes , total . Seconds / CODE_INTEGER ) ; <EOF>
xdoc . XPathSelectElement ( CODE_STRING ) . Remove ( ) ; <EOF>
DropDownList ddl = ( DropDownList ) LoginView1 . FindControl ( CODE_STRING ) ; ddl . DataSource = connDr ; ? ddl . DataValueField = DataPara ; ? ddl . DataTextField = DataPara ; ? ddl . DataBind ( ) ; <EOF>
var listOfIds = listOfObjects . Select ( o = > o . Id ) ; var query = from a in DatabaseTable where listOfIds . Contains ( a . Id ) select a ; <EOF>
listBox1 . Items . AddRange ( latesProcessList . Select ( p = > p . ProcessName ) ) ; <EOF>
var eai = EventArgs . InterfaceInsideEventArg [ index ] ; var eaz = EventArgs . InterfaceInsideEventArg [ z ] ; eai . PropertyInsideInterface = eaz . PropertyInsideInterface . Replace ( CODE_STRING , CODE_STRING ) ; eai . { prop2 } = eaz . { prop2 } . Replace ( CODE_STRING , CODE_STRING ) ; <EOF>
private void phonenumber_Tap ( object sender , System . Windows . Input . GestureEventArgs e ) { PhoneCallTask call = new PhoneCallTask ( ) ; call . PhoneNumber = ( ( TextBlock ) sender ) . Text ; call . Show ( ) ; } <EOF>
public partial class MainWindow : Window { private ObservableCollection < TestItem > testItems = new ObservableCollection < TestItem > ( ) ; public ObservableCollection < TestItem > TestItems { get { return testItems ; } public MainWindow ( ) { InitializeComponent ( ) ; this . DataContext = this ; TestItem test = new TestItem ( CODE_STRING , CODE_STRING ) ; this . testItems . Add ( test ) ; } } <EOF>
var query = from _stats in _statsList group _stats by new { Latency = _stats . latency , CpuUsagePercent = _stats . cpuUsagePercent , MemoryUsagePercent = _stats . memoryUsagePercent , DiskUsage = _stats . diskUsage , DiskRead = _stats . diskRead , DiskWrite = _stats . diskWrite } into myGroup select new { AverageVal = myGroup . Average ( x = > x . Value ) , CpuUsagePercent = myGroup . Key . CpuUsagePercent , . . . } ; <EOF>
dropdownlist . ClearSelection ( ) ; dropdownlist . Items . FindByValue ( value ) . Selected = true ; <EOF>
NamespaceManager . AddNamespace ( CODE_STRING , formXml . DocumentElement . NamespaceURI <EOF>
CODE_STRING CODE_STRING <EOF>
private bool draging = false ; private Point pointClicked ; private void pictureBox1_MouseMove ( object sender , MouseEventArgs e ) { if ( draging ) { Point pointMoveTo ; pointMoveTo = this . PointToScreen ( new Point ( e . X , e . Y ) ) ; pointMoveTo . Offset ( - pointClicked . X , - pointClicked . Y ) ; this . Location = pointMoveTo ; } } private void pictureBox1_MouseDown ( object sender , MouseEventArgs e ) { if ( e . Button == MouseButtons . Left ) { draging = true ; pointClicked = new Point ( e . X , e . Y ) ; } else { draging = false ; } } private void pictureBox1_MouseUp ( object sender , MouseEventArgs e ) { draging = false ; } <EOF>
RenderTarget2D target = new RenderTarger2D ( . . . ) ; GraphicsDevice . SetRenderTarget ( target ) ; GraphicsDevice . Clear ( Color . Black ) ; using ( SpriteBatch b = new SpriteBatch ( GraphicsDevice ) ) { b . Begin ( ) ; for ( int y = CODE_INTEGER ; y < CODE_INTEGER ; i ++ ) for ( int y = CODE_INTEGER ; y < CODE_INTEGER ; i ++ ) batch . Draw ( Texture , new Rectangle ( xPos , yPos , width , height ) , Color . White ) ) ; b . End ( ) ; } GraphicsDevice . SetRenderTarget ( null ) ; Texture newTexture = target ; <EOF>
public CustomComboBox ( ) { InitializeComponent ( ) ; SetStyle ( ControlStyles . UserPaint , true ) ; } <EOF>
private static void OnMyNamePropertyChanged ( DependencyObject d , DependencyPropertyChangedEventArgs e ) { } <EOF>
public static class SessionHelper { private static HttpSession sess = HttpContext . Current . Session ; public static int Age { get { return ( int ) sess [ CODE_STRING ] ; } set { sess [ CODE_STRING ] = value ; } } } <EOF>
public void CaptureApplication ( string procName ) { var proc = Process . GetProcessesByName ( procName ) [ CODE_INTEGER ] ; var rect = new User32 . Rect ( ) ; User32 . GetWindowRect ( proc . MainWindowHandle , ref rect ) ; int width = rect . right - rect . left ; int height = rect . bottom - rect . top ; var bmp = new Bitmap ( width , height , PixelFormat . Format32bppArgb ) ; Graphics graphics = Graphics . FromImage ( bmp ) ; graphics . CopyFromScreen ( rect . left , rect . top , CODE_INTEGER , CODE_INTEGER , new Size ( width , height ) , CopyPixelOperation . SourceCopy ) ; bmp . Save ( CODE_STRING , ImageFormat . Png ) ; } private class User32 { [ StructLayout ( LayoutKind . Sequential ) ] public struct Rect { public int left ; public int top ; public int right ; public int bottom ; } [ DllImport ( CODE_STRING ) ] public static extern IntPtr GetWindowRect ( IntPtr hWnd , ref Rect rect ) ; } <EOF>
ListViewItem selectedListView = ( ListViewItem ) listView1 . ItemContainerGenerator . GetContainerForItem ( listView1 . Items [ index ] ) ; <EOF>
XmlDocument doc = new XmlDocument ( ) ; doc . LoadXml ( xml ) ; string jsonText = JsonConvert . SerializeXmlNode ( doc ) ; XmlDocument doc = JsonConvert . DeserializeXmlNode ( json ) ; <EOF>
var results = Table . Where ( row = > row . result != null ) . Select ( row = > row . result ) . ToArray ( ) ; <EOF>
protected void WindowsAuthentication_OnAuthenticate ( object sender , WindowsAuthenticationEventArgs e ) { if ( ! Roles . IsUserInRole ( e . Identity . Name , CODE_STRING ) ) { Roles . AddUsersToRole ( new string [ ] { e . Identity . Name } , CODE_STRING ) ; } } <EOF>
string username = CODE_STRING ; DirectoryEntry de = new DirectoryEntry ( CODE_STRING + ConfigurationManager . AppSettings [ CODE_STRING ] , ConfigurationManager . AppSettings [ CODE_STRING ] , ConfigurationManager . AppSettings [ CODE_STRING ] ) ; DirectorySearcher ds = new DirectorySearcher ( de ) ; ds . Filter = string . Format ( CODE_STRING , ( username . Split ( CODE_CHAR ) . Length > CODE_INTEGER ) ? username . Split ( CODE_CHAR ) [ CODE_INTEGER ] : username ) ; SearchResult result = ds . FindOne ( ) ; if ( result == null ) throw new ArgumentException ( string . Format ( CODE_STRING , username ) , CODE_STRING ) ; <EOF>
do { Application . Doevents ( ) } while ( step == false ) <EOF>
var nodes = list . GroupBy ( c1 = > c1 . Cat1 . Name ) . Select ( c1 = > new Node { Name = c1 . Key , Weight = c1 . Sum ( x = > x . Weight ) , Children = c1 . GroupBy ( c2 = > c2 . Cat2 . Name ) . Select ( c2 = > new Node { Name = c2 . Key , Weight = c2 . Sum ( x = > x . Weight ) , Children = c2 . Select ( c3 = > new Node { Name = c3 . Cat3 . Name , Weight = c3 . Weight , Children = new List < Node > ( ) } ) . ToList ( ) } ) . ToList ( ) } ) . ToList ( ) ; <EOF>
using ( new Impersonator ( CODE_STRING , CODE_STRING , CODE_STRING ) ) { using ( RunspaceInvoke invoker = new RunspaceInvoke ( ) ) { invoker . Invoke ( CODE_STRING ) ; } } <EOF>
CODE_STRING CODE_STRING <EOF>
public static Dictionary < int , int > map = new Dictionary < int , int > ( ) { { CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER } } ; WeekDays [ ] dw = new WeekDays [ ] { WeekDays . Saturday , WeekDays . Tuesday , WeekDays . Wednesday } ; int [ ] systemDayOfWeekList = new int [ daysOfWeek . Length ] ; for ( int i = CODE_INTEGER ; i < daysOfWeek . Length ; i ++ ) { systemDayOfWeekList [ i ] = map . FirstOrDefault ( e = > e . Value == ( int ) daysOfWeek [ i ] ) . Key ; } query = query . Where ( f = > dayOfWeekList . Contains ( ( ( int ) SqlFunctions . DatePart ( CODE_STRING , f . FromDateTime ) ) ) ) ; <EOF>
Class2 class2 = new Class2 ( ) ; <EOF>
private void MethodThatWillCallComObject ( ) { System . Threading . Tasks . Task . Factory . StartNew ( ( ) = > { return this . MethodThatTakesTimeToReturn ( ) ; } ) . ContinueWith ( t = > { MessageBox . Show ( t . Result ) ; } , System . Threading . Tasks . TaskScheduler . FromCurrentSynchronizationContext ( ) ) ; } private string MethodThatTakesTimeToReturn ( ) { System . Threading . Thread . Sleep ( CODE_INTEGER ) ; return CODE_STRING ; } <EOF>
Monitor . Enter <EOF>
public void dvgCombo_SelectedIndexedChanged ( ) { if ( < condition1 > ) ExecuteConditionOneLogic ( ) ; if ( < condition2 > ) ExecuteConditionTwoLogic ( ) ; } <EOF>
string connectionString = CODE_STRING ; SqlConnection con = new SqlConnection ( connectionString ) ; try { con . Open ( ) ; string query = CODE_STRING ; using ( SqlCommand cmd = new SqlCommand ( query , con ) ) { cmd . Parameters . AddWithValue ( CODE_STRING , CODE_STRING ) ; cmd . ExecuteNonQuery ( ) ; } } catch ( Exception ) { throw ; } <EOF>
void Delete ( bool recursive = false ) { if ( recursive ) RecursiveDelete ( ) ; if ( this . Parent != null ) this . Parent . Children . Remove ( this ) ; using ( var db = new MyContext ( ) ) { db . SaveChanges ( ) ; } } void RecursiveDelete ( ) { foreach ( var child in Children . ToArray ( ) ) { child . RecursiveDelete ( ) ; Children . Remove ( child ) ; } using ( var db = new MyContext ( ) ) { db . Nodes . Attach ( this ) ; db . Entry ( this ) . State = EntityState . Deleted ( ) ; } } <EOF>
string input = CODE_STRING ; DateTime time ; if ( ! DateTime . TryParse ( input , out time ) ) { return ; } TimeSpan timeSpan = new TimeSpan ( time . Hour , time . Minute , time . Second ) ; <EOF>
DataSet . WriteXml <EOF>
public class Rootobject { public string xmlns { get ; set ; } public string text { get ; set ; } } public static void Main ( string [ ] args ) { Rootobject details = new Rootobject ( ) ; details . xmlns = CODE_STRING ; details . text = CODE_STRING ; Serialize ( details ) ; } static public void Serialize ( Rootobject details ) { XmlSerializer serializer = new XmlSerializer ( typeof ( Rootobject ) ) ; using ( TextWriter writer = new StreamWriter ( CODE_STRING ) ) { serializer . Serialize ( writer , details ) ; } } <EOF>
void backgroundWorker_DoWork ( object sender , DoWorkEventArgs e ) { long ticks1 = CODE_INTEGER ; long ticks2 = CODE_INTEGER ; double interval = ( double ) Stopwatch . Frequency / CODE_INTEGER ; while ( true ) { ticks2 = Stopwatch . GetTimestamp ( ) ; if ( ticks2 >= ticks1 + interval ) { ticks1 = Stopwatch . GetTimestamp ( ) ; if ( _fadeIn ) { _fadeAlpha += CODE_REAL ; if ( _fadeAlpha > CODE_REAL ) { _fadeAlpha = CODE_REAL ; break ; } } else { _fadeAlpha -= CODE_REAL ; if ( _fadeAlpha < CODE_REAL ) { _fadeAlpha = CODE_REAL ; break ; } } backgroundWorker . ReportProgress ( CODE_INTEGER ) ; } Thread . Sleep ( CODE_INTEGER ) ; } backgroundWorker . ReportProgress ( CODE_INTEGER ) ; } <EOF>
listbox1 . GetSelectedIndices ( ) . Count ( ) ; <EOF>
Mapper . CreateMap < ModelChild , DayViewModel > ( ) . ConstructUsing ( context = > { var key = ( ( ModelChild ) context . SourceValue ) . Started ; var daysCollection = ( SortedSet < DayViewModel > ) context . Parent . DestinationValue ; var dayViewModel = daysCollection . FirstOrDefault ( d = > d . Date == key ) ; if ( dayViewModel == null ) { dayViewModel = new DayViewModel { Date = key } ; daysCollection . Add ( dayViewModel ) ; } dayViewModel . Children . Add ( Mapper . Map < ChildViewModel > ( context . SourceValue ) ) ; return dayViewModel ; } ) . ForAllMembers ( d = > d . Ignore ( ) ) ; <EOF>
public class ProductService { public void Create < T > ( T obj ) { if ( typeof ( Supplier ) == typeof ( T ) ) Supplier ( obj ) ; else if ( typeof ( Product ) == typeof ( Product ) ) Product ( ) ; else throw new ArgumentOutOfRangeException ( CODE_STRING , CODE_STRING ) ; } private void Supplier < T > ( T s ) { Console . WriteLine ( CODE_STRING ) ; } private void Product ( ) { Console . WriteLine ( CODE_STRING ) ; } } <EOF>
var xd = XDocument . Parse ( CODE_STRING ) ; xd . Element ( CODE_STRING ) . Attribute ( CODE_STRING ) . Value = CODE_STRING ; string result = xd . ToString ( ) ; <EOF>
string id = CODE_STRING XDocument doc = XDocument . Load ( CODE_STRING ) ; var accounts = from elements in doc . Elements ( CODE_STRING ) . Elements ( CODE_STRING ) where elements . Attribute ( CODE_STRING ) . Value = id select elements . FirstOrDefault ( ) ; <EOF>
XmlDocument doc = new XmlDocument ( ) ; doc . Load ( CODE_STRING ) ; XmlNodeList nodes = doc . SelectNodes ( CODE_STRING ) ; foreach ( XmlNode xn in nodes ) { Console . WriteLine ( xn . Value . ToString ( ) ) ; } <EOF>
using ( StreamReader r = new StreamReader ( guid . ToString ( ) ) ) { string line ; int linesCount ; ArrayList result = new ArrayList ( ) ; while ( ( line = r . ReadLine ( ) ) != null && linesCount ++ <= CODE_INTEGER ) { result . AddRange ( line . Split ( CODE_CHAR ) ) ; } } <EOF>
public static T DeepClone < T > ( T obj ) { using ( var ms = new MemoryStream ( ) ) { var formatter = new BinaryFormatter ( ) ; formatter . Serialize ( ms , obj ) ; ms . Position = CODE_INTEGER ; return ( T ) formatter . Deserialize ( ms ) ; } } <EOF>
var query = from a in db . LUT_Employees where a . position == CODE_STRING && a . department == CODE_STRING select new { a , Names = a . lastName + CODE_STRING + a . firstName } ; cboProductionSupervisor . DataSource = query ; cboProductionSupervisor . DisplayMember = CODE_STRING ; <EOF>
protected override void WndProc ( ref System . Windows . Forms . Message m ) { const int TTM_RELAYEVENT = CODE_INTEGER ; if ( m . Msg == TTM_RELAYEVENT ) { Message relayed = ( Message ) Marshal . PtrToStructure ( m . LParam , typeof ( Message ) ) ; if ( related . Msg == WM_LBUTTONDOWN ) { } } base . WndProc ( ref m ) ; } <EOF>
string strConnection = ConfigurationSettings . AppSettings [ CODE_STRING ] ; MySqlConnection connection = new MySqlConnection ( strConnection ) ; List < string > array = new List < string > ( ) ; using ( MySqlCommand cmd = new MySqlCommand ( CODE_STRING + applicationTiers , connection ) ) { try { using ( MySqlDataReader Reader = cmd . ExecuteReader ( ) ) { while ( Reader . Read ( ) ) { array . Add ( Reader [ CODE_STRING ] . ToString ( ) ) ; } } } catch ( Exception ex ) { throw ; } } string [ ] ret = array . ToArray ( ) ; <EOF>
String dna = CODE_STRING ; String dnaComplement = CODE_STRING ; foreach ( char c in dna ) { if ( c == CODE_CHAR ) dnaComplement += CODE_CHAR ; else if ( c == CODE_CHAR ) dnaComplement += CODE_CHAR ; } <EOF>
else if . . . . . <EOF>
[ Serializable ] public class LogAttribute : OnMethodBoundaryAspect { public override void OnEntry ( MethodExecutionArgs args ) { if ( ! application . running ) throw new Exception ( String . Format ( CODE_STRING , args . Method . Name ) ) ; } } <EOF>
private readonly XNamespace a = CODE_STRING ; private readonly XNamespace d = CODE_STRING ; private readonly XNamespace m = CODE_STRING ; List < KLList > lists = doc . Descendants ( a + CODE_STRING ) . Where ( element = > element . Attribute ( m + CODE_STRING ) != null ) . Select ( list = > new KLList ( ) { Id = list . Descendants ( d + CODE_STRING ) . FirstOrDefault ( ) . Value , Title = list . Descendants ( d + CODE_STRING ) . FirstOrDefault ( ) . Value , ListItemEntityTypeFullName = list . Descendants ( d + CODE_STRING ) . FirstOrDefault ( ) . Value , BaseType = ( BaseType ) Convert . ToInt32 ( list . Descendants ( d + CODE_STRING ) . FirstOrDefault ( ) . Value ) , ListTemplateType = ( ListTemplateType ) Convert . ToInt32 ( list . Descendants ( d + CODE_STRING ) . FirstOrDefault ( ) . Value ) , RelativeUrl = list . Descendants ( d + CODE_STRING ) . FirstOrDefault ( ) . Value } ) . ToList ( ) ; <EOF>
IPAddress . Any <EOF>
e . Effect <EOF>
private CalculationEngine engine = new CalculationEngine ( ) ; private void ExecuteButton_Click ( object sender , RoutedEventArgs e ) { double result = engine . Calculate ( ExpressionTextBox . Text ) ; ExpressionTextBox . Text = result . ToString ( ) ; } <EOF>
this . _chart . ChartAreas [ CODE_INTEGER ] . AxisX . CustomLabels . Add ( new CustomLabel ( position - CODE_INTEGER , position + CODE_INTEGER , point . AxisLabel , CODE_INTEGER , LabelMarkStyle . None ) ) ; this . _chart . ChartAreas [ CODE_INTEGER ] . AxisX . CustomLabels [ position - CODE_INTEGER ] . ForeColor = GetColor ( point . AxisLabel ) ; <EOF>
DependencyPropertyDescriptor dpd = DependencyPropertyDescriptor . FromProperty ( Canvas . TopProperty , typeof ( Canvas ) ) ; dpd . AddValueChanged ( canvas1 , new EventHandler ( topChangedCallback ) ) ; <EOF>
public void ReplaceBookmarkTextWithHtml ( Bookmark bookmark , string html ) { if ( html != null ) { Clipboard . SetData ( DataFormats . Html , ClipboardFormatter . Html ( html ) ) ; bookmark . Range . PasteSpecial ( DataType : WdPasteDataType . wdPasteHTML ) ; } } <EOF>
DateTime startDate = new DateTime ( DateTime . Today . Year , CODE_INTEGER , CODE_INTEGER ) ; DateTime endDate = new DateTime ( DateTime . Today . Year + CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) . AddDays ( - CODE_INTEGER ) ; <EOF>
private void pictureBox_Paint ( object sender , PaintEventArgs e ) { Graphics graphics = e . Graphics ; Brush brush = new SolidBrush ( Color . Red ) ; graphics . FillRectangle ( brush , new Rectangle ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; Pen pen = new Pen ( Color . Green ) ; graphics . DrawRectangle ( pen , new Rectangle ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; } <EOF>
DateTime Dob ; Console . WriteLine ( CODE_STRING ) ; Dob = DateTime . Parse ( Console . ReadLine ( ) ) ; <EOF>
private void YourFormName_Load ( object sender , EventArgs e ) { ContextMenu mnu = new ContextMenu ( ) ; MenuItem mnuCopy = new MenuItem ( CODE_STRING ) ; mnuCopy . Click += ( sen , ev ) = > { System . Windows . Forms . Clipboard . SetText ( YourTextBoxName . Text ) ; } ; mnu . MenuItems . AddRange ( new MenuItem [ ] { mnuCopy } ) ; YourTextBoxName . ContextMenu = mnu ; } private void YourFormName_MouseUp ( object sender , MouseEventArgs e ) { Control ctl = this . GetChildAtPoint ( e . Location ) ; if ( ctl != null && ! ctl . Enabled && ctl . ContextMenu != null ) ctl . ContextMenu . Show ( this , e . Location ) ; } <EOF>
node . BaseType . IsGeneric && node . BaseType . Template == FrameworkAssemblies . Mscorlib . Types . SingleOrDefault ( t = > t . FullName == CODE_STRING ) <EOF>
XLWorkbook wb = new XLWorkbook ( ) ; DataTable dt = GetDataTableOrWhatever ( ) ; wb . Worksheets . Add ( dt , CODE_STRING ) ; <EOF>
public class OraclePrimaryKeySequenceConvention : IIdConvention { public void Apply ( IIdentityInstance instance ) { instance . GeneratedBy . Sequence ( string . Format ( CODE_STRING , instance . EntityType . Name ) ) ; } } <EOF>
picker . SelectedIndexChanged += ( sender , args ) = > { if ( picker . SelectedIndex == - CODE_INTEGER ) { boxView . Color = Color . Default ; } else { string colorName = picker . Items [ picker . SelectedIndex ] ; boxView . Color = nameToColor [ colorName ] ; } } ; <EOF>
{ await messageDisplayer1 . ShowMessage ( CODE_STRING , true ) ; } <EOF>
while ( true ) { if ( DateTime . Now . Hour == CODE_INTEGER && DateTime . Now . Minute == CODE_INTEGER ) Processmethod ( ) ; else Thread . Sleep ( CODE_INTEGER ) } <EOF>
onclientclick = CODE_STRING <EOF>
public IEnumerable < Table1 > Method1 ( ) { string StrSql = CODE_STRING ; List < string > par = fav . Split ( CODE_CHAR ) . ToList ( ) ; foreach ( string _par in par ) { StrSql += CODE_STRING + _par + CODE_STRING ; if ( _par != par . Last ( ) ) { StrSql += CODE_CHAR ; } else { StrSql += CODE_STRING ; } } return conn . Query < Table1 > ( StrSql ) ; } <EOF>
myFormInstance . ActiveControl <EOF>
var map = new Dictionary < char , string > { { CODE_CHAR , CODE_STRING } , { CODE_CHAR , CODE_STRING } , { CODE_CHAR , CODE_STRING } , { CODE_CHAR , CODE_STRING } , . . . } var result = string . Concat ( CODE_STRING . Select ( c = > map [ c ] ) ) ; <EOF>
Partial EntityClassA : InterfaceA { IEnumerable < InterfaceB > CollectionEntityClassBs { get { return ( some cast or somthin ) EntityClassBs ; } } } InterfaceA { IEnumerable < InterfaceB > CollectionEntityClassBs ; } <EOF>
var r = new Regex ( CODE_STRING ) ; var actual = r . Replace ( xml , CODE_STRING ) ; <EOF>
private void calculateButton_Click ( object sender , EventArgs e ) { if ( tabControl . SelectedTab == tab1 ) { MessageBox . Show ( CODE_STRING ) ; } else { MessageBox . Show ( CODE_STRING ) ; } } <EOF>
public partial class Window1 : System . Windows . Window { public Window1 ( ) { try { InitializeComponent ( ) ; } catch ( Exception ex ) { MessageDialog dialog = new MessageDialog ( ex . InnerException ) ; dialog . ShowAsync ( ) ; } } } <EOF>
android . os . NetworkOnMainThreadException <EOF>
Bitmap imga = . . . ; pictureBox0 . Image = imga ; pictureBox1 . Image = imga ; pictureBox2 . Image = imga ; pictureBox3 . Image = imga ; imga = . . . ; pictureBox4 . Image = imga ; pictureBox5 . Image = imga ; pictureBox6 . Image = imga ; pictureBox7 . Image = imga ; . . . <EOF>
var custom = Context . Current as MyCustomPrinciple ; if ( custom == null ) { } <EOF>
var countByOtherId = db . EntityToOrder . GroupBy ( e = > e . OtherId ) . Select ( g = > new { ID = g . Key , Count = g . Count ( ) } ) . ToDictionary ( e = > e . ID , e = > e . Count ) ; var other = new Dictionary < long , string > ( ) ; int skipCount = startIndex , useCount = CODE_INTEGER ; foreach ( var e in db . OtherEntity . OrderBy ( e = > e . Name ) ) { int count ; if ( ! countByOtherId . TryGetValue ( e . ID , out count ) ) continue ; if ( skipCount > CODE_INTEGER && other . Count == CODE_INTEGER ) { if ( skipCount >= count ) { skipCount -= count ; continue ; } count -= skipCount ; } other . Add ( e . ID , e . Name ) ; if ( ( useCount += count ) >= pageSize ) break ; } var entities = db . EntityToOrder . Where ( e = > other . Keys . Contains ( e . OtherId ) ) . AsEnumerable ( ) . Select ( e = > new EntityToOrder { ID = e . ID , Name = e . Name , OtherId = e . OtherId , OtherName = other [ e . OtherId ] } ) . OrderBy ( e = > e . OtherName ) . ThenBy ( e = > e . Name ) . Skip ( skipCount ) . Take ( pageSize ) . ToList ( ) ; <EOF>
string FindPattern ( string text ) { if ( text == null ) { return null ; } return Enumerable . Range ( CODE_INTEGER , text . Length / CODE_INTEGER ) . Where ( n = > text . Length % n == CODE_INTEGER ) . Select ( n = > text . Substring ( CODE_INTEGER , n ) ) . Where ( pattern = > Enumerable . Range ( CODE_INTEGER , text . Length / pattern . Length ) . SelectMany ( i = > pattern ) . SequenceEqual ( text ) ) . FirstOrDefault ( ) ; } <EOF>
MethodInfo methodInfo = typeof ( MyClass ) . GetMethod ( task . Command ) ; if ( methodInfo != null ) Task . Factory . StartNew ( ( ) = > methodInfo . Invoke ( this , new [ ] { task } ) ) ; <EOF>
DateTime time = DateTime . Now ; string format = CODE_STRING ; var mytime = time . ToString ( format ) ; <EOF>
var policyNames = Container . Model . AllInstances . Where ( x = > x . PluginType == typeof ( IPolicy ) ) . Select ( x = > x . Name ) ; <EOF>
var streamGeometry = StreamGeometry . Parse ( CODE_STRING ) ; sortButton . IconData = streamGeometry ; <EOF>
img . RenderTransformOrigin = new Point ( CODE_REAL , CODE_REAL ) ; <EOF>
public static void GoogleGeoCode ( string address ) { string url = CODE_STRING ; dynamic googleResults = new Uri ( url + address ) . GetDynamicJsonObject ( ) ; foreach ( var result in googleResults . results ) { Console . WriteLine ( CODE_STRING + result . geometry . location . lat + CODE_STRING + result . geometry . location . lng + CODE_STRING + result . formatted_address ) ; } } <EOF>
lblSaleData . Text = CODE_STRING + CODE_STRING + CODE_STRING + eml + CODE_STRING + CODE_STRING + CODE_STRING ; <EOF>
itemUrl = obj . SelectSingleNode ( CODE_STRING ) . Attributes [ CODE_STRING ] . Value , itemId = obj . SelectSingleNode ( CODE_STRING ) . Attributes [ CODE_STRING ] . Value <EOF>
using ( var context = new PrincipalContext ( ContextType . Domain ) ) { using ( var user = UserPrincipal . FindByIdentity ( context , IdentityType . SamAccountName , userName ) ) { user . SetPassword ( CODE_STRING ) ; user . ExpirePasswordNow ( ( ) ; } } <EOF>
var testData = " { \ r \ t \ " status \ " : \ " Success \ " \ r } " ; dynamic testObject = JsonConvert . DeserializeObject ( testData ) ; Console . WriteLine ( testObject . status ) ; Console . ReadKey ( ) ; <EOF>
BULK INSERT <EOF>
KmlTreeViewNode node = kmlTreeView1 . GetNodeById ( CODE_STRING ) ; node . ApiObject . getFeatures ( ) . appendChild ( placemark ) ; ge1 . getFeatures ( ) . appendChild ( node . ApiObject ) ; kmlTreeView1 . Nodes . RemoveByKey ( CODE_STRING ) ; kmlTreeView1 . ParseKmlObject ( node . ApiObject ) ; <EOF>
protected void Page_Load ( object sender , EventArgs e ) { string planType = Request . QueryString [ CODE_STRING ] ; if ( planType == CODE_STRING ) { rdodomiantype . Items . Remove ( rdodomiantype . Items . FindByValue ( CODE_STRING ) ) ; } } <EOF>
[ DataContract ] public class Message { [ DataMember ] public string Info { get ; set ; } } <EOF>
return string . Format ( CODE_STRING , this . FindDefinition ( m . Value ) , m . Value ) ; <EOF>
i . ReadAsByteArrayAsync ( ) <EOF>
private string name ; public string Name { get { return name ; } set { CheckName ( value ) ; name = value ; PropertyChanged ( CODE_STRING ) ; } } <EOF>
Mapper . CreateMap < Order , OrderDetailsModel > ( ) ; OrderDetailsModel dto = Mapper . Map < Order , OrderDetailsModel > ( order ) ; <EOF>
public string ConnectionString { get ; set ; } public string ProviderName { get ; set ; } public EntityClusterRefreshServiceDatabaseWorker ( ) { ConnectionString = . . . ; ProviderName = . . . ; } <EOF>
public class UblConverter < TParser , TDto , TUbl > where TParser : UblParser < TDto , TUbl > where TUbl : UblBaseDocumentType where TDto : DtoB { } <EOF>
create table user3 ( uname varchar ( CODE_INTEGER ) primary key , email varchar ( CODE_INTEGER ) , doj datetime ) ; <EOF>
public static UInt64 CountLeadingZeros ( UInt64 input ) { if ( input == CODE_INTEGER ) return CODE_INTEGER ; UInt64 n = CODE_INTEGER ; if ( ( input > > CODE_INTEGER ) == CODE_INTEGER ) { n = n + CODE_INTEGER ; input = input << CODE_INTEGER ; } if ( ( input > > CODE_INTEGER ) == CODE_INTEGER ) { n = n + CODE_INTEGER ; input = input << CODE_INTEGER ; } if ( ( input > > CODE_INTEGER ) == CODE_INTEGER ) { n = n + CODE_INTEGER ; input = input << CODE_INTEGER ; } if ( ( input > > CODE_INTEGER ) == CODE_INTEGER ) { n = n + CODE_INTEGER ; input = input << CODE_INTEGER ; } if ( ( input > > CODE_INTEGER ) == CODE_INTEGER ) { n = n + CODE_INTEGER ; input = input << CODE_INTEGER ; } n = n - ( input > > CODE_INTEGER ) ; return n ; } <EOF>
public class CalendarCell : DataGridViewTextBoxCell { . . . public class CalendarEditingControl : DateTimePicker , IDataGridViewEditingControl { . . . <EOF>
swOutput . BaseStream . Position <EOF>
for ( char ch : word . toCharArray ( ) ) { if ( ch >= CODE_CHAR && ch <= CODE_CHAR && soundexString . length ( ) < CODE_INTEGER ) { . . . . . . . . . } } <EOF>
routes . MapRoute ( CODE_STRING , CODE_STRING , new { controller = . . . , action = . . . } ) ; ActionResult MyAction ( string params ) { foreach ( string param in params . Split ( CODE_STRING ) ) { . . . } } <EOF>
public string Test { get { System . ComponentModel . PropertyDescriptorCollection pdc = System . ComponentModel . TypeDescriptor . GetProperties ( this ) ; System . ComponentModel . PropertyDescriptor pd = pdc [ System . Reflection . MethodBase . GetCurrentMethod ( ) . Name ] ; } } <EOF>
protected void Open_Click ( object sender , System . Web . UI . ImageClickEventArgs e ) { try { Response . Redirect ( CODE_STRING ) ; } catch { } } <EOF>
var closest = data . Select ( ) . OrderBy ( dr = > Math . Abs ( ( int ) dr [ CODE_STRING ] - CODE_INTEGER ) ) . FirstOrDefault ( ) ; <EOF>
PrincipalContext pc = new PrincipalContext ( ContextType . Domain ) ; bool isCredentialValid = pc . ValidateCredentials ( username , password ) ; <EOF>
this . WindowState = FormWindowState . Maximized ; this . WindowState = FormWindowState . Normal ; <EOF>
var myCollection = from de in myDictionary select new { de . Value . property1 , de . Value . property2 , de . Key } . ToList ( ) ; <EOF>
public class Estimate { public string Name { get ; set ; } public List < Option > Options { get ; set ; } public Estimate ( ) { Options = new List < Option > ( ) ; } } public class Option { public int Id { get ; set ; } public string Description { get ; set ; } public Estimate Estimate { get ; set ; } } <EOF>
if ( Socket . OSSupportsIPv6 && _hostIpAddress . AddressFamily == AddressFamily . InterNetworkV6 ) { _socketConnection = new Socket ( AddressFamily . InterNetworkV6 , SocketType . Stream , ProtocolType . Tcp ) ; _socketConnection . SetSocketOption ( SocketOptionLevel . IPv6 , SocketOptionName . IPv6Only , CODE_INTEGER ) ; } else { _socketConnection = new Socket ( AddressFamily . InterNetwork , SocketType . Stream , ProtocolType . Tcp ) ; } <EOF>
Color red1 = Color . FromName ( CODE_STRING ) ; TypeConverter tc1 = TypeDescriptor . GetConverter ( typeof ( Color ) ) ; TypeConverter tc2 = new ColorConverter ( ) ; Color red2 = ( Color ) tc . ConvertFromString ( CODE_STRING ) ; Color red3 = ( Color ) typeof ( Color ) . GetProperty ( CODE_STRING ) . GetValue ( null , null ) ; SolidColorBrush redBrush = ( SolidColorBrush ) new BrushConverter ( ) . ConvertFromString ( CODE_STRING ) ; <EOF>
byte [ ] unicodeBytes = Encoding . Unicode . GetBytes ( ackMessage ) ; var asciiBytes = new List < byte > ( ackMessage . Length + CODE_INTEGER ) ; asciiBytes . Add ( CODE_INTEGER ) ; asciiBytes . AddRange ( Encoding . Convert ( Encoding . Unicode , Encoding . ASCII , unicodeBytes ) ) ; asciiBytes . AddRange ( new byte [ ] { CODE_INTEGER , CODE_INTEGER } ) ; <EOF>
" C : \ Program Files ( x86 ) \ Microsoft SDKs \ Windows \ v7 CODE_REAL A \ Bin \ NETFX CODE_REAL Tools \ gacutil . exe CODE_STRING ( TargetDir ) ( TargetFileName ) " " C : \ Windows \ Microsoft . NET \ Framework \ v4 CODE_REAL CODE_REAL \ RegAsm . exe CODE_STRING ( TargetDir ) ( TargetFileName ) " " C : \ Windows \ Microsoft . NET \ Framework \ v4 CODE_REAL CODE_REAL \ RegAsm . exe CODE_STRING ( TargetDir ) ( TargetFileName ) " <EOF>
public static class AssemblyResolverFix { public static Assembly HandleAssemblyResolve ( object sender , ResolveEventArgs args ) { foreach ( var ass in AppDomain . CurrentDomain . GetAssemblies ( ) ) if ( ass . FullName == args . Name ) return ass ; return null ; } } AppDomain . CurrentDomain . AssemblyResolve += AssemblyResolverFix . HandleAssemblyResolve ; <EOF>
dgv . Columns [ i ] . ValueType = typeof ( uint ) ; <EOF>
int [ ] numbers = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int [ ] words = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var result = numbers . Zip ( words , ( first , second ) = > { if ( first != second ) { return first + CODE_STRING + second ; } else return second . ToString ( ) ; } ) ; <EOF>
int maxDotNumber = kok . Max ( k = > k . Title . Count ( c = > c == CODE_CHAR ) ) ; <EOF>
var query = from c in document . Root . Elements ( CODE_STRING ) where c . Attribute ( CODE_STRING ) . Value == customerID . ToString ( ) from a in c . Element ( CODE_STRING ) . Elements ( CODE_STRING ) where a . Attribute ( CODE_STRING ) . Value == this . id . ToString ( ) select a ; query . First ( ) . Attribute ( CODE_STRING ) . SetValue ( money . ToString ( ) ) ; <EOF>
using System ; using System . Collections . Generic ; using System . Linq ; class Program { static void Main ( string [ ] args ) { var letters = args [ CODE_INTEGER ] ; var wordList = new List < string > { CODE_STRING , CODE_STRING , CODE_STRING } ; var results = from string word in wordList where IsValidAnswer ( word , letters ) orderby word . Length descending select word ; foreach ( var result in results ) { Console . WriteLine ( result ) ; } } private static bool IsValidAnswer ( string word , string letters ) { foreach ( var letter in word ) { if ( letters . IndexOf ( letter ) == - CODE_INTEGER ) { return false ; } letters = letters . Remove ( letters . IndexOf ( letter ) , CODE_INTEGER ) ; } return true ; } } <EOF>
DateTime enteredDate ; DateTime . TryParse ( workerDateAcquired , out enteredDate ) ; skill . DateAcquired = enteredDate . Equals ( DateTime . MinValue ) ? DateTime . Now : enteredDate ; <EOF>
Path . GetFullPath ( Path . Combine ( abs , rel ) ) <EOF>
public class ReadWriteDictionary < K , V > { private readonly Dictionary < K , V > dict = new Dictionary < K , V > ( ) ; private readonly ReaderWriterLockSlim rwLock = new ReaderWriterLockSlim ( ) ; public V Get ( K key ) { return ReadLock ( ( ) = > dict [ key ] ) ; } public void Set ( K key , V value ) { WriteLock ( ( ) = > dict . Add ( key , value ) ) ; } public IEnumerable < KeyValuePair < K , V > > GetPairs ( ) { return ReadLock ( ( ) = > dict . ToList ( ) ) ; } private V2 ReadLock < V2 > ( Func < V2 > func ) { rwLock . EnterReadLock ( ) ; try { return func ( ) ; } finally { rwLock . ExitReadLock ( ) ; } } private void WriteLock ( Action action ) { rwLock . EnterWriteLock ( ) ; try { action ( ) ; } finally { rwLock . ExitWriteLock ( ) ; } } } Cache [ CODE_STRING ] = new ReadWriteDictionary < string , int > ( ) ; <EOF>
myControlState . Visible = myFoo . IsValid ?? false ; <EOF>
Encoding . ASCII . GetString ( Encoding . ASCII . GetBytes ( strData ) ) == strData ; <EOF>
CODE_STRING + Environment . TickCount <EOF>
Properties . Settings . Default . Save ( ) ; <EOF>
if ( File . Exists ( Application . StartupPath + CODE_STRING ) ) { } <EOF>
TreeNode node = CreateATreeNode ( ) ; node . Tag = myStateObject ; <EOF>
public List < double > Average ( List < double > number , int nElement ) { var currentElement = CODE_INTEGER ; var currentSum = CODE_REAL ; var newList = new List < double > ( ) ; foreach ( var item in number ) { currentSum += item ; currentElement ++ ; if ( currentElement == nElement ) { newList . Add ( currentSum / nElement ) ; currentElement = CODE_INTEGER ; currentSum = CODE_REAL ; } } if ( currentElement > CODE_INTEGER ) { newList . Add ( currentSum / currentElement ) ; } return newList ; } <EOF>
DbCommand . CommandText = CODE_STRING ; DbCommand . Parameters . AddWithValue ( CODE_STRING , cycle ) ; DbCommand . Parameters . AddWithValue ( CODE_STRING , district ) ; <EOF>
[ DllImport ( CODE_STRING , CharSet = CharSet . Auto ) ] static extern IntPtr SendMessage ( IntPtr hWnd , UInt32 Msg , IntPtr wParam , IntPtr lParam ) ; private void button1_Click ( object sender , EventArgs e ) { SendMessage ( this . Handle , COMMAND_HERE , PARAM_HERE , CODE_INTEGER ) ; } <EOF>
da . UpdateCommand = new OleDbCommand ( string . Format ( CODE_STRING , myColumn ) , cs ) ; <EOF>
CREATE PROC pSomething ( @params ) AS BEGIN . . < code here > . . END <EOF>
Encoding . UTF8 . GetBytes ( CODE_STRING ) ; <EOF>
var dt1 = new DataTable ( CODE_STRING ) ; dt1 . Columns . Add ( CODE_STRING , typeof ( int ) ) ; dt1 . Columns . Add ( CODE_STRING , typeof ( string ) ) ; var dt2 = new DataTable ( CODE_STRING ) ; dt2 . Columns . Add ( CODE_STRING , typeof ( int ) ) ; dt2 . Columns . Add ( CODE_STRING , typeof ( string ) ) ; dt1 . Rows . Add ( CODE_INTEGER , CODE_STRING ) ; dt1 . Rows . Add ( CODE_INTEGER , CODE_STRING ) ; dt1 . Rows . Add ( CODE_INTEGER , CODE_STRING ) ; dt1 . AcceptChanges ( ) ; dt1 . Rows [ CODE_INTEGER ] . Delete ( ) ; dt2 . Merge ( dt1 ) ; dt2 . AcceptChanges ( ) ; dt1 . RejectChanges ( ) ; <EOF>
public void SetIdToHiddenField ( string id ) { Page . ClientScript . RegisterHiddenField ( CODE_STRING , id ) ; } <EOF>
Optimize code <EOF>
string [ ] nameArray = new string [ CODE_INTEGER ] ; void CopyTextBoxesToArray ( ) { nameArray [ CODE_INTEGER ] = textBoxName1 . Text ; nameArray [ CODE_INTEGER ] = textBoxName2 . Text ; nameArray [ CODE_INTEGER ] = textBoxName3 . Text ; nameArray [ CODE_INTEGER ] = textBoxName4 . Text ; nameArray [ CODE_INTEGER ] = textBoxName5 . Text ; } private void button9_Click ( object sender , EventArgs e ) { CopyTextBoxesToArray ( ) ; Array . Sort ( nameArray ) ; foreach ( string s in nameArray ) { richTextBox1 . Text += s + CODE_STRING ; } } <EOF>
foreach ( KeyValuePair < string , int > total in totalOrders ) { } foreach ( KeyValuePair < string , int > error in errorOrders ) { } <EOF>
return rbReturning . SelectedItem == null ? null : rbReturning . SelectedItem . Text ; <EOF>
[ DllImport ( CODE_STRING ) ] static extern IntPtr GetForegroundWindow ( ) ; [ DllImport ( CODE_STRING ) ] static extern int GetWindowText ( IntPtr hWnd , StringBuilder text , int count ) ; private string GetActiveWindowTitle ( ) { const int nChars = CODE_INTEGER ; StringBuilder Buff = new StringBuilder ( nChars ) ; IntPtr handle = GetForegroundWindow ( ) ; if ( GetWindowText ( handle , Buff , nChars ) > CODE_INTEGER ) { return Buff . ToString ( ) ; } return null ; } <EOF>
IPAddress . Address <EOF>
var dialogForm = new MyNewForm ( ) ; if ( dialogForm . ShowDialog ( ) != DialogResult . OK ) { Application . Exit ( ) } else { var pw = dialogForm . GetText ( ) ; if ( PasswordIsCorrect ( ) ) { } } <EOF>
public List < User > GetUsers ( Expression < Func < User , bool > > where ) { return _entity . Where ( where ) . ToList ( ) ; } var users = _acc . GetUsers ( x = > x . Id == CODE_INTEGER ) ; <EOF>
public class Notifier { public static void Say ( string message ) { var context = GlobalHost . ConnectionManager . GetHubContext < MyHub > ( ) ; context . Clients . say ( message ) ; } } } <EOF>
[ TemplateInstance ( TemplateInstance . Single ) ] <EOF>
MembersWebPart membersWebPart = new MembersWebPart ( ) ; membersWebPart . DisplayType = MembersWebPartDisplayType . WebUserGroups ; membersWebPart . Title = CODE_STRING ; wpManager . AddWebPart ( membersWebPart , CODE_STRING , CODE_INTEGER ) ; <EOF>
var listing = xDoc . Elements ( CODE_STRING ) . Elements ( CODE_STRING ) . GroupBy ( x = > new { ID = x . Element ( XName . Get ( CODE_STRING ) ) . Value , Description = x . Element ( XName . Get ( CODE_STRING ) ) . Value } ) . Select ( x = > new Category { ID = x . Key . ID , Description = x . Key . Description , Items = x . Select ( i = > new Item { ID = i . Element ( CODE_STRING ) . Value , Description = i . Element ( CODE_STRING ) . Value , TotalPrice = decimal . Parse ( i . Element ( CODE_STRING ) . Value ) } ) . ToList ( ) } ) . OrderBy ( x = > x . ID ) ; <EOF>
var filesnames = text . Split ( new char [ ] { } ) . Where ( word = > word . EndsWith ( CODE_STRING ) ) ; <EOF>
var dataAccess = Assembly . GetExecutingAssembly ( ) ; builder . RegisterAssemblyTypes ( dataAccess ) . Where ( t = > t . Name . EndsWith ( CODE_STRING ) ) . AsImplementedInterfaces ( ) ; <EOF>
radAjaxManager1 . RequestQueueSize = CODE_INTEGER ; <EOF>
string assemblyName = this . GetType ( ) . Assembly . FullName ; <EOF>
if ( SpeedboostTimeRemaining > CODE_INTEGER ) { SpeedboostTimeRemaining -= Time . deltaTime if ( SpeedboostTimeRemaining < CODE_INTEGER ) { SpeedboostTimeRemaining = CODE_INTEGER ; Player0 . speed = CODE_REAL ; } } <EOF>
foreach ( Criteria . SegmentCriteria x in myCriteria ) { Criteria . SegmentCriteria item = x ; if ( myMatchMethod == Common . MultipleCriteriaMatchMethod . MatchOnAll ) { predicate = predicate . Expand ( ) . And < Segment > ( CreateCriteriaExpression ( item ) . Expand ( ) ) ; customPropertiesPredicate = customPropertiesPredicate . Expand ( ) . And < Segment > ( CreateCriteriaExpressionForCustomProperties ( item ) . Expand ( ) ) ; } else if ( myMatchMethod == Common . MultipleCriteriaMatchMethod . MatchOnAny ) { predicate = predicate . Expand ( ) . Or < Segment > ( CreateCriteriaExpression ( item ) . Expand ( ) ) ; customPropertiesPredicate = customPropertiesPredicate . Expand ( ) . Or < Segment > ( CreateCriteriaExpressionForCustomProperties ( item ) . Expand ( ) ) ; } } <EOF>
insert into tbl_date ( date_value ) values ( # CODE_INTEGER / CODE_INTEGER / CODE_INTEGER # ) <EOF>
interface ISomething { void DoSomething ( ) ; } class NormalType : ISomething { public void DoSomething ( ) { /* nothing to do */ } } class SpecialType : ISomething { public void DoSomething ( ) { this . SpecialString = CODE_STRING } } class MyGenericClass : ICloneable { private ISomething m_storedClass ; private DoStuff ( ) { m_storedClass . DoSomething ( ) ; } } <EOF>
var prm = Sys . WebForms . PageRequestManager . getInstance ( ) ; prm . add_initializeRequest ( InitializeRequest ) ; prm . add_endRequest ( EndRequest ) ; function InitializeRequest ( sender , args ) { } function EndRequest ( sender , args ) { } <EOF>
var obj = lvUsers . SelectedItems [ CODE_INTEGER ] as User ; if ( obj != null ) { var age = obj . Age ; } <EOF>
string macro = string . Format ( CODE_STRING , workbook . Name , macroName ) ; Application . Run ( macro ) ; <EOF>
bool isValid = Regex . IsMatch ( value , CODE_STRING ) ; <EOF>
case CODE_STRING : if ( textBox_output . Text . IndexOf ( CODE_STRING ) > CODE_INTEGER ) { textBox_output . Text += CODE_STRING ; } else { if ( textBox_output . Text . ToString ( ) == CODE_STRING ) { textBox_output . Text += CODE_STRING ; } else if ( ! textBox_output . Text . StartWith ( CODE_STRING ) ) { textBox_output . Text += CODE_STRING ; } else { } } <EOF>
radDock1 . SplitPanelElement . Fill . BackColor = Color . Red ; radDock1 . SplitPanelElement . Fill . GradientStyle = GradientStyles . Solid ; radDock1 . MainDocumentContainer . SplitPanelElement . Fill . BackColor = Color . Yellow ; radDock1 . MainDocumentContainer . SplitPanelElement . Fill . GradientStyle = GradientStyles . Solid ; <EOF>
var searchForIds = searchFor . Select ( x = > x . ID ) . ToList ( ) ; var query = context . Products . Where ( product = > product . Categories . Any ( cat = > searchForIds . Contains ( cat . ID ) ) ) ; <EOF>
string [ ] strArray = Regex . Split ( content , " ( \ r ) * " ) ; <EOF>
[ ComVisible ( true ) ] [ Guid ( CODE_STRING ) ] public interface IDialogFactory { void Create ( ) ; } <EOF>
DemoService ctx = new DemoService ( new Uri ( CODE_STRING ) ) ; DataServiceQuery < Product > products = ctx . Products ; DataServiceQuery < Product > q = ( DataServiceQuery < Product > ) products . Where ( p = > p . Name == CODE_STRING ) . Skip ( CODE_INTEGER ) ; MethodCallExpression skipCall = ( MethodCallExpression ) q . Expression ; q = ( DataServiceQuery < Product > ) q . Provider . CreateQuery < Product > ( skipCall . Arguments [ CODE_INTEGER ] ) ; Console . WriteLine ( q ) ; <EOF>
static void Main ( string [ ] args ) { string str = CODE_STRING ; System . Text . RegularExpressions . MatchCollection MC = System . Text . RegularExpressions . Regex . Matches ( str , CODE_STRING ) ; foreach ( Match Foundmatch in MC ) { string [ ] s = Foundmatch . Groups [ CODE_INTEGER ] . Value . Split ( CODE_CHAR ) ; Console . WriteLine ( CODE_STRING , s [ CODE_INTEGER ] , s [ CODE_INTEGER ] ) ; } } <EOF>
var query = from p in data . GetMember where ( p . Client == client && p . Person_id == pid ) select new MemberCommunicationType { person_id = p . person_id , comm_id = p . comm_id } ; var output = new GetMemberColl { memberCommunication = query . ToArray ( ) } ; <EOF>
var total = Double . Parse ( string . Concat ( left , CODE_STRING , right ) ) ; <EOF>
IList < int > list = new List < int > ( new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ) ; Console . WriteLine ( string . Join ( CODE_STRING , list . Select ( i = > i . ToString ( ) ) . ToArray ( ) ) ) ; <EOF>
FtpWebRequest ftpClient = ( FtpWebRequest ) FtpWebRequest . Create ( new Uri ( ftpurl + ftpusername + CODE_STRING + filename ) ) ; <EOF>
Expression < Action < string > > <EOF>
public Task CreateAnimationFileAsync ( IEnumerable < Bitmap > frames ) { var frameProcessor = new TransformBlock < Bitmap , Bitmap > ( frame = > ProcessFrame ( frame ) , new ExecutionDataflowBlockOptions { MaxDegreeOfParallelism = DataflowBlockOptions . Unbounded } ) ; var animationWriter = new ActionBlock < Bitmap > ( frame = > WriteFrame ( frame ) ) ; frameProcessor . LinkTo ( animationWriter , new DataflowLinkOptions { PropagateCompletion = true } ) ; foreach ( var frame in frames ) { frameProcessor . Post ( frame ) ; } frameProcessor . Complete ( ) ; return frameProcessor . Completion ; } private Bitmap ProcessFrame ( Bitmap frame ) { ?? ? } private async Task WriteFrame ( Bitmap frame ) { ?? ? } <EOF>
TextBox . KeyDown += ( s , a ) = > { if ( a . Key == VirtualKey . Enter ) { TextBox . IsEnabled = false ; TextBox . IsEnabled = true ; } <EOF>
using System . Web . Mvc ; namespace WebApplication1 . Areas . Admin { public class AdminAreaRegistration : AreaRegistration { public override string AreaName { get { return CODE_STRING ; } } public override void RegisterArea ( AreaRegistrationContext context ) { context . MapRoute ( CODE_STRING , CODE_STRING , new { action = CODE_STRING , controller = CODE_STRING , id = UrlParameter . Optional } ) ; context . MapRoute ( CODE_STRING , CODE_STRING , new { action = CODE_STRING , id = UrlParameter . Optional } ) ; } } } <EOF>
var myBytes [ ] = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var myDouble = BitConverter . ToDouble ( myBytes , CODE_INTEGER ) ; <EOF>
[ DataMember ] public virtual List < Account > TargetAccounts { get ; set ; } <EOF>
var query2 = db . Users . GroupJoin ( db . Defects , u = > u . userId , d = > d . userID , ( u , defectsGroup ) = > new { u , defectsGroup } ) . SelectMany ( z = > z . defectsGroup . DefaultIfEmpty ( ) , ( z , d ) = > new { z . u , d } ) ; <EOF>
public bool IsValidSSN ( object ssn ) { . . . IsValidSSN ( Convert . ToInt32 ( ssn ) ) ; . . . } public bool IsValidSSN ( int ssn ) { . . . } <EOF>
PropertyInfo propertyInfo = typeof ( MyClass ) . GetProperty ( CODE_STRING ) ; string something = ( string ) propertyInfo . GetValue ( null , null ) ; <EOF>
private void btn_Clicked ( object sender , RoutedEventArgs e ) { Button cmd = ( Button ) sender ; string name = cmd . name ; switch ( name ) } <EOF>
# include CODE_STRING # include CODE_STRING # include < iostream > int main ( int , char * * ) { cv :: VideoCapture vcap ; cv :: Mat image ; const std :: string videoStreamAddress = CODE_STRING ; /* it may be an address of an mjpeg stream, e.g. "http://user:pass@cam_address:8081/cgi/mjpg/mjpg.cgi?.mjpg" */ if ( ! vcap . open ( videoStreamAddress ) ) { std :: cout << CODE_STRING << std :: endl ; return - CODE_INTEGER ; } int counter = CODE_INTEGER ; for ( ; ; ) { counter ++ ; if ( ! vcap . read ( image ) ) { std :: cout << CODE_STRING << std :: endl ; cv :: waitKey ( ) ; } if ( counter % CODE_INTEGER != CODE_INTEGER ) continue ; cv :: imshow ( CODE_STRING , image ) ; if ( cv :: waitKey ( CODE_INTEGER ) >= CODE_INTEGER ) break ; } } <EOF>
DataTable dtCloned = dt . Clone ( ) ; dtCloned . Columns [ CODE_INTEGER ] . DataType = typeof ( Int32 ) ; foreach ( DataRow row in dt . Rows ) { dtCloned . ImportRow ( row ) ; } <EOF>
Process . Start ( CODE_STRING , CODE_STRING ) ; <EOF>
public abstract class Base { public abstract override string ToString ( ) ; } <EOF>
list . push_end ( new_data ) while list . head . age >= age_limit : list . pop_head ( ) <EOF>
LocalResource localResource = RoleEnvironment . GetLocalResource ( CODE_STRING ) ; <EOF>
import requests from requests_ntlm import HttpNtlmAuth requests . get ( CODE_STRING , auth = HttpNtlmAuth ( ' domain \\ username CODE_CHAR password ' ) ) <EOF>
Console . WriteLine ( cities . Distinct ( ) . Count ( ) ) ; Console . WriteLine ( String . Join ( CODE_STRING , cities . Where ( city = > city . IsOpenOnFriday ) . ToList ( ) ) ) ; <EOF>
private void AddNewUserControlAndAutoRemoveOldUserControl ( UserControl control ) { if ( control != null ) { Panel parent = control . Parent as Panel ; if ( parent != null ) { if ( parent . Children . Count > CODE_INTEGER ) parent . Children . RemoveAt ( CODE_INTEGER ) ; parent . Children . Insert ( CODE_INTEGER , control ) ; } } } } <EOF>
this . Controls . Add <EOF>
var result = Regex . Replace ( input , CODE_STRING , CODE_STRING ) ; <EOF>
private void Save ( object sender , EventArgs args ) { } <EOF>
. hgignore <EOF>
Storyboard . SetTargetProperty ( keyFrameDa , new PropertyPath ( PlaneProjection . RotationXProperty ) ) ; Storyboard . SetTarget ( keyFrameDa , cardBack . Projection ) ; <EOF>
async private void loadData_Click_1 ( object sender , EventArgs e ) { await Task . WhenAll ( Task . Run ( ( ) = > loadData ( ) ) , Task . Run ( ( ) = > loadOtherData ( ) ) ) ; updateGrids ( myDictionary ) ; } <EOF>
var bitmap = new BitmapImage ( new Uri ( CODE_STRING ) ) ; <EOF>
private static readonly long NegativeZeroBits = BitConverter . DoubleToInt64Bits ( - CODE_REAL ) ; public static bool IsNegativeZero ( double x ) { return BitConverter . DoubleToInt64Bits ( x ) == NegativeZeroBits ; } <EOF>
private void DrawModel ( Model m ) { Matrix [ ] transforms = new Matrix [ m . Bones . Count ] ; float aspectRatio = graphics . GraphicsDevice . Viewport . Width / graphics . GraphicsDevice . Viewport . Height ; m . CopyAbsoluteBoneTransformsTo ( transforms ) ; Matrix projection = Matrix . CreatePerspectiveFieldOfView ( MathHelper . ToRadians ( CODE_REAL ) , aspectRatio , CODE_REAL , CODE_REAL ) ; Matrix view = Matrix . CreateLookAt ( new Vector3 ( CODE_REAL , CODE_REAL , Zoom ) , Vector3 . Zero , Vector3 . Up ) ; foreach ( ModelMesh mesh in m . Meshes ) { foreach ( BasicEffect effect in mesh . Effects ) { effect . EnableDefaultLighting ( ) ; effect . View = view ; effect . Projection = projection ; effect . World = gameWorldRotation * transforms [ mesh . ParentBone . Index ] * Matrix . CreateTranslation ( Position ) ; } mesh . Draw ( ) ; } } <EOF>
string baseUrl = Request . Url . Scheme + CODE_STRING + Request . Url . Authority + Request . ApplicationPath . TrimEnd ( CODE_CHAR ) + CODE_STRING ; <EOF>
var dt = DateTime . ParseExact ( CODE_STRING , CODE_STRING , CultureInfo . InvariantCulture ) ; <EOF>
[ DataContract ] public class Person { [ DataMember ] public int id { get ; set ; } [ DataMember ] public string Name { get ; set ; } } <EOF>
public class Items { [ XmlAttribute ( CODE_STRING ) ] public string ID { get ; set ; } [ XmlAttribute ( CODE_STRING ) ] public string Title { get ; set ; } [ XmlElement ( CODE_STRING ) ] public List < string > Words { get ; set ; } } [ XmlRoot ( CODE_STRING ) ] public class Lists { [ XmlElement ( CODE_STRING ) ] public List < Items > Get { get ; set ; } } <EOF>
DataTable dt = new DataTable ( ) ; foreach ( DataGridViewColumn col in dgv . Columns ) { dt . Columns . Add ( col . HeaderText ) ; } foreach ( DataGridViewRow row in dgv . Rows ) { DataRow dRow = dt . NewRow ( ) ; foreach ( DataGridViewCell cell in row . Cells ) { dRow [ cell . ColumnIndex ] = cell . Value ; } dt . Rows . Add ( dRow ) ; } <EOF>
icon . UriSource = new Uri ( string . Format ( CODE_STRING , Path . GetFileNameWithoutExtension ( Application . ResourceAssembly . Location ) ) ) ; <EOF>
_kernel . Bind < DefaultModelValidatorProviders > ( ) . ToConstant ( new DefaultModelValidatorProviders ( config . Services . GetServices ( typeof ( ModelValidatorProvider ) ) . Cast < ModelValidatorProvider > ( ) ) ) ; <EOF>
for ( int i = dsData . Tables [ CODE_STRING ] . Rows ; i > CODE_INTEGER ; i -- ) { if ( item . SubItems [ CODE_INTEGER ] . Text == dsData . Tables [ CODE_STRING ] . Rows [ i - CODE_INTEGER ] [ CODE_STRING ] . ToString ( ) ) dsData . Tables [ CODE_STRING ] . Rows . Remove ( i - CODE_INTEGER ) } <EOF>
List < Developer > developers = employees . Where ( x = > x . Department == CODE_STRING ) . Select ( x = > new Developer { Name = x . Name , Department = x . Department , JobTitle = x . Function , Division = String . Concat ( x . Function , CODE_STRING , x . Department ) } ) . ToList ( ) ; return developers ; <EOF>
for ( int i = CODE_INTEGER ; i < c . Count ; i ++ ) { System . Xml . Serialization . XmlSerializer x = new System . Xml . Serialization . XmlSerializer ( c [ i ] . GetType ( ) ) ; using ( StringWriter writer = new StringWriter ( ) ) { x . Serialize ( writer , c [ i ] ) ; String details = writer . ToString ( ) ; } } <EOF>
[ HttpPost ] public ActionResult DATACRUD ( ) { Stream req = Request . InputStream ; req . Seek ( CODE_INTEGER , System . IO . SeekOrigin . Begin ) ; string json = new StreamReader ( req ) . ReadToEnd ( ) ; return Json ( new { fromMVC = json } ) ; } <EOF>
annotation . Items . Add ( doc ) ; doc . Markup = TextToNodeArray ( CODE_STRING ) ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { var button = ( Button ) sender ; button . Text = CODE_STRING ; } <EOF>
public partial class Form1 : Form { protected override CreateParams CreateParams { get { CreateParams par = base . CreateParams ; par . Style = par . Style | CODE_INTEGER ; return par ; } } } <EOF>
if not locked then open and update file <EOF>
for ( int i = CODE_INTEGER ; i < customer . Count ; i ++ ) <EOF>
string s = DateTime . Now . ToString ( CODE_STRING ) ; <EOF>
( CODE_INTEGER | ( [ CODE_INTEGER - CODE_INTEGER ] [ CODE_INTEGER - CODE_INTEGER ] ) | [ CODE_INTEGER - CODE_INTEGER ] <EOF>
Control ctrl = Page . LoadControl ( CODE_STRING ) ; divControls . Controls . Clear ( ) ; divControls . Controls . Add ( ctrl ) ; <EOF>
one . SetAttributeValue ( CODE_STRING , CODE_STRING ) ; <EOF>
var group_key = ( from g in this . Context . Groups where g . ID == groupID && g . TaxId == groupTaxId select g . Group_K ) ; var query = ( from a in this . Context . Addresses join ga in this . Context . GroupAddress on a . Address_K equals ga . Address_K where ( group_key . Contains ( ga . Group_K ) && a . ZipCode == CODE_STRING && ga . Address_Type == CODE_STRING ) select a ) ; <EOF>
string formatedDate = CODE_STRING ; EventQuery query = new EventQuery ( ) ; DateTime ? time ; if ( ! string . IsNullOrEmpty ( startDate ) ) { time = Convert . ToDateTime ( startDate ) ; formatedDate = string . Format ( CODE_STRING , time ) ; query . Uri = new Uri ( CODE_STRING + service . Credentials . Username + CODE_STRING + formatedDate ) ; } else { query . Uri = new Uri ( CODE_STRING + service . Credentials . Username + CODE_STRING ) ; } EventFeed calFeed = service . Query ( query ) ; return calFeed . Entries . Cast < EventEntry > ( ) ; <EOF>
protected dynamic getNewObject ( String name , String phone , String email ) { dynamic ex = new ExpandoObject ( ) ; ex . Name = name ; ex . Phone = phone ; ex . Email = email ; return ex ; } private void button1_Click_2 ( object sender , EventArgs e ) { var ye = getNewObject ( CODE_STRING , CODE_STRING , CODE_STRING ) ; Console . WriteLine ( string . Format ( CODE_STRING , ye . Name , ye . Phone , ye . Email ) ) ; } <EOF>
allShapes = cubes . Cast < Shape > ( ) . ToList ( ) ; <EOF>
decimal x = CODE_REAL ; double pi = ( double ) x ; <EOF>
Uri combined = new Uri ( new Uri ( CODE_STRING , UriKind . Absolute ) , CODE_STRING ) ; <EOF>
Bitmap b = SystemIcons . Error . ToBitmap ( ) ; <EOF>
Book Name : @Html . DisplayFor ( model = > model . Book . Name ) <EOF>
Conductor < T > . Collection . AllActive <EOF>
int minPrice = closingsBook . Min ( book = > book . LimitPrice ) ; var indexes = closingsBook . Select ( ( book , index ) = > new { book , index } ) . Where ( x = > x . book . LimitPrice == minPrice ) . Select ( x = > x . index ) ; <EOF>
string PropertyName < T > ( Expression < Func < T > > expression ) { var body = expression . Body as MemberExpression ; if ( body == null ) { body = ( ( UnaryExpression ) expression . Body ) . Operand as MemberExpression ; } return string . Join ( CODE_STRING , GetPropertyNames ( body ) . Reverse ( ) ) ; } private IEnumerable < string > GetPropertyNames ( MemberExpression body ) { while ( body != null ) { yield return body . Member . Name ; var inner = body . Expression ; switch ( inner . NodeType ) { case ExpressionType . MemberAccess : body = inner as MemberExpression ; break ; default : body = null ; break ; } } } <EOF>
protected override void Render ( HtmlTextWriter writer ) { foreach ( GridViewRow row in this . Rows ) if ( row . RowType == DataControlRowType . DataRow ) foreach ( DataControlFieldCell cell in row . Cells ) if ( ( cell . ContainingField ) . HeaderText != CODE_STRING ) cell . Attributes [ CODE_STRING ] = this . Page . ClientScript . GetPostBackClientHyperlink ( this , string . Format ( CODE_STRING , row . RowIndex ) , true ) ; base . Render ( writer ) ; } <EOF>
using ( new UseDialogOnce ( ie . DialogWatcher , approveConfirmDialog ) ) { ie . Button ( Find . ByName ( CODE_STRING ) ) . ClickNoWait ( ) ; approveConfirmDialog . WaitUntilExists ( ) ; approveConfirmDialog . OKButton . Click ( ) ; ie . WaitForComplete ( ) ; } <EOF>
public Task Foo ( ) { var tcs = new TaskCompletionSource < bool > ( ) ; storyboard . Begin ( ) ; storyboard . Completed += ( s , e ) = > tcs . SetResult ( true ) ; return tcs . Task ; } <EOF>
public Form1 ( ) { InitializeComponent ( ) ; InitializeChart ( ) ; } private Bitmap chartBmp ; private void InitializeChart ( ) { tChart1 . Series . Add ( new Steema . TeeChart . Styles . Bar ( ) ) . FillSampleValues ( ) ; chartBmp = tChart1 . Bitmap ; tChart1 . GetLegendRect += tChart1_GetLegendRect ; } void tChart1_GetLegendRect ( object sender , Steema . TeeChart . GetLegendRectEventArgs e ) { Rectangle cropRect = e . Rectangle ; Bitmap legendImg = new Bitmap ( cropRect . Width , cropRect . Height ) ; using ( Graphics g = Graphics . FromImage ( legendImg ) ) { g . DrawImage ( chartBmp , new Rectangle ( CODE_INTEGER , CODE_INTEGER , legendImg . Width , legendImg . Height ) , cropRect , GraphicsUnit . Pixel ) ; } legendImg . Save ( CODE_STRING ) ; } <EOF>
using ( WebClient wc = new WebClient ( ) ) { string json = wc . DownloadString ( CODE_STRING ) ; var jObj = JObject . Parse ( json ) ; var items = jObj . Children ( ) . Cast < JProperty > ( ) . Select ( c = > new { Title = ( string ) c . Value [ CODE_STRING ] , Body = ( string ) c . Value [ CODE_STRING ] , Caption = ( string ) c . Value [ CODE_STRING ] , Datestamp = ( string ) c . Value [ CODE_STRING ] , } ) . ToList ( ) ; } <EOF>
Process . Start ( ) <EOF>
protected void GridView2_DataBound ( object sender , EventArgs e ) { if ( e . Row . RowType != DataControlRowType . Header ) return ; ddColumnSearch . Items . Clear ( ) ; foreach ( TableCell cell in e . Row . Cells ) { ddColumnSearch . Items . Add ( new ListItem ( cell . Text ) ) ; } } <EOF>
private void driverNo_TextChanged ( object sender , EventArgs e ) { if ( string . IsNullOrEmpty ( driverNo . Text ) ) { ( ( DataTable ) dataGridView1 . DataSource ) . DefaultView . RowFilter = string . Empty ; return ; } int _driverNo ; if ( int . TryParse ( driverNo . Text , out _driverNo ) ) ( ( DataTable ) DataGridViews . DataSource ) . DefaultView . RowFilter = CODE_STRING + _driverNo ; else MessageBox . Show ( CODE_STRING ) ; } <EOF>
public class Item { private readonly LimitedString _reality = new LimitedString ( CODE_STRING , CODE_STRING , CODE_STRING ) ; public string Reality { get { return _reality . Value ; } set { _reality . Value = value ; } } private readonly LimitedString _colour = new LimitedString ( CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING ) ; public string Colour { get { return _colour . Value ; } set { _colour . Value = value ; } } } <EOF>
NewEventStart = NewEventStart . ToUniversalTime ( ) ; <EOF>
var foundExcelRows = from excelRow in this . ExcelDataTable . AsEnumerable ( ) join file in this . FilesToImport . AsEnumerable ( ) on excelRow . Field < Guid > ( CODE_STRING ) equals file . SourceFileIdentifier select excelRow ; for ( int i = CODE_INTEGER ; i < foundExcelRows . Count ( ) ; i ++ ) { DataRow row = foundExcelRows . ElementAt ( i ) ; } <EOF>
PList = PList . GroupBy ( x = > x . Name ) . SelectMany ( x = > x . OrderBy ( y = > y . Date ) . Take ( CODE_INTEGER ) ) <EOF>
this . Manager . CheckName ( dossierId , id ) <EOF>
var result = partNumbers . Where ( x = > Regex . Match ( x , CODE_STRING ) . Success ) ; <EOF>
public static Color GetColor ( String ColorName ) { Type colors = typeof ( System . Windows . Media . Colors ) ; foreach ( var prop in colors . GetProperties ( ) ) { if ( prop . Name == ColorName ) return ( ( System . Windows . Media . Color ) prop . GetValue ( null , null ) ) ; } throw new Exception ( CODE_STRING ) ; } <EOF>
printDocument1 . PrintPage += this . printDocument1_PrintPage ; <EOF>
protected void rpt_ItemDataBound ( object sender , RepeaterItemEventArgs e ) if ( e . Item . ItemType == ListItemType . Item || e . Item . ItemType == ListItemType . AlternatingItem ) { DropDownList cbo = ( DropDownList ) e . Item . FindControl ( CODE_STRING ) ; Behaviour b = ( Behaviour ) e . Item . DataItem ; for ( int i = CODE_INTEGER ; i < cbo . Items . Count ; i ++ ) { if ( b . Type_of_Behaviour == cbo . Items [ i ] . Value ) cbo . Items [ i ] . Selected = true ; else cbo . Items [ i ] . Selected = false ; } } } <EOF>
( ? <= from | join ) ( \ s + \ w + \ b ) <EOF>
using Microsoft . Win32 ; RegistryKey key ; key = Registry . LocalMachine . OpenSubKey ( CODE_STRING ) ; key . SetValue ( CODE_STRING , CODE_INTEGER , RegistryValueKind . DWord ) ; key . SetValue ( CODE_STRING , CODE_INTEGER , RegistryValueKind . DWord ) ; <EOF>
private IEnumerable < TreeViewModel > GetCheckedItems ( TreeViewModel node ) { var checkedItems = new List < TreeViewModel > ( ) ; ProcessNode ( node , checkedItems ) ; return checkedItems ; } private void ProcessNode ( TreeViewModel node , IEnumerable < TreeViewModel > checkedItems ) { foreach ( var child in node . Children ) { if ( child . IsChecked ) checkedItems . Add ( child ) ; ProcessNode ( child , checkedItems ) ; } } <EOF>
private static byte [ ] Encrypt ( byte [ ] value , byte [ ] key ) { DESCryptoServiceProvider cryptoProvider = new DESCryptoServiceProvider { Mode = CipherMode . ECB , Padding = PaddingMode . None } ; MemoryStream memoryStream = new MemoryStream ( ) ; CryptoStream cryptoStream = new CryptoStream ( memoryStream , cryptoProvider . CreateEncryptor ( key , key ) , CryptoStreamMode . Write ) ; cryptoStream . Write ( value , CODE_INTEGER , value . Length ) ; cryptoStream . Close ( ) ; return memoryStream . ToArray ( ) ; } <EOF>
public class MyProjectionExpressions { public static Expression < Func < Log , dynamic > > LogSelector ( ) { return log = > new { logId = log . LogId , message = log . Message , } ; } private static Func < Log , dynamic > impl = LogSelector ( ) . Compile ( ) ; public static dynamic LogSelector ( Log log ) { return impl ( log ) ; } } <EOF>
grades . DataBind ( ) ; <EOF>
Datetime myDate = ( DateTime ) ( ( DataRowView ) dv . DataItem ) [ CODE_STRING ] ; <EOF>
public void RegisterFakeData < T > ( Context ctx , IEnumerable < T > list ) { var name = typeof ( T ) . Name ; var mi = ctx . GetType ( ) . GetProperty ( name ) . GetGetMethod ( ) ; var args = new object [ CODE_INTEGER ] ; Isolate . WhenCalled ( ( ) = > ( IEnumerable < T > ) mi . Invoke ( ctx , args ) ) . WillReturnCollectionValuesOf ( list ) ; } <EOF>
List < Products > products = ( from x in everythingList group x by new { x . Product , x . ProductName } into xg select new Products { Product = xg . Key . Product , ProductName = xg . Key . ProductName } ) . ToList ( ) ; <EOF>
[ ServiceContract ] public interface IServiceClient { [ OperationContract ] void InsertMaster ( Service ServiceObj ) ; } [ DataContract ] public class Service { [ DataMember ] public string Id ; [ DataMember ] public string Submitter ; [ DataMember ] public string Comments ; [ DataMember ] public DateTime TimeSubmitted ; } public void InsertMaster ( Service ServiceObj ) { string query = CODE_STRING ; connection . Open ( ) ; MySqlCommand cmd = new MySqlCommand ( query , connection ) ; cmd . ExecuteNonQuery ( ) ; connection . Close ( ) ; } <EOF>
string currClass = hc . Attributes [ CODE_STRING ] . ToString ( ) ; string count = e . Item . Controls . Count . ToString ( ) ; if ( e . Item . ItemIndex == CODE_INTEGER ) { currClass += CODE_STRING ; } else if ( e . Item . ItemIndex . ToString ( ) == count ) { currClass += CODE_STRING ; } <EOF>
chartArea . AxisY . LineWidth = CODE_INTEGER ; chartArea . AxisX . LineWidth = CODE_INTEGER ; chartArea . AxisX . LabelStyle . Enabled = false ; chartArea . AxisY . LabelStyle . Enabled = false ; chartArea . AxisX . MajorTickMark . Enabled = false ; chartArea . AxisY . MajorTickMark . Enabled = false ; <EOF>
long _n ; int _i ; long _mod ; long FindModulusParallel ( long n , int i ) { _mod = _n = n ; _i = i ; var actions = Enumerable . Range ( CODE_INTEGER , Environment . ProcessorCount ) . Select < int , Action > ( j = > Subtract ) . ToArray ( ) ; Parallel . Invoke ( actions ) ; return _mod ; } void Subtract ( ) { while ( Interlocked . Add ( ref _n , - _i ) >= CODE_INTEGER ) Interlocked . Add ( ref _mod , - _i ) ; } <EOF>
public IEnumerable < BufferWrapper > getBytes ( Stream stream ) { List < int > bufferSizes = new List < int > ( ) { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; int count = CODE_INTEGER ; int bufferSizePostion = CODE_INTEGER ; byte [ ] buffer = new byte [ bufferSizes [ CODE_INTEGER ] ] ; bool done = false ; while ( ! done ) { BufferWrapper nextResult = new BufferWrapper ( ) ; nextResult . bytesRead = stream . Read ( buffer , CODE_INTEGER , buffer . Length ) ; nextResult . buffer = buffer ; done = nextResult . bytesRead == CODE_INTEGER ; if ( ! done ) { yield return nextResult ; count ++ ; if ( count > CODE_INTEGER && bufferSizePostion < bufferSizes . Count ) { count = CODE_INTEGER ; bufferSizePostion ++ ; buffer = new byte [ bufferSizes [ bufferSizePostion ] ] ; } } } } public class BufferWrapper { public byte [ ] buffer { get ; set ; } public int bytesRead { get ; set ; } } <EOF>
string pcName = System . Environment . MachineName ; <EOF>
if ( ! IsPostBack ) { dg . DataSource = GetData ( ) ; dg . DataBind ( ) ; } <EOF>
Match m = Regex . Match ( address , CODE_STRING ) ; string numStr = m . Groups [ CODE_INTEGER ] . Value ; string streetName = address . Replace ( numStr , CODE_STRING ) . Trim ( ) ; if ( numStr . Length > CODE_INTEGER ) { string streetName = address . Replace ( numStr , CODE_STRING ) . Trim ( ) ; if ( numStr . Contains ( CODE_CHAR ) ) { int num1 = Convert . ToInt32 ( m . Groups [ CODE_INTEGER ] . Value ) ; int num2 = Convert . ToInt32 ( m . Groups [ CODE_INTEGER ] . Value ) ; } else { int number = Convert . ToInt32 ( numStr ) ; } } <EOF>
-- - loop -- - Button abc = new Button ( ) ; abc . Name = loopCounter . ToString ( ) ; -- - loop -- - <EOF>
var a = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var b = new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; a . Zip ( b , ( x , y ) = > x + y ) <EOF>
public class RightButton : MonoBehaviour { public Texture bgTexture ; public Texture airBarTexture ; public int iconWidth = CODE_INTEGER ; public Vector2 airOffset = new Vector2 ( CODE_INTEGER , CODE_INTEGER ) ; void start ( ) { } void OnGUI ( ) { int percent = CODE_INTEGER ; DrawMeter ( airOffset . x , airOffset . y , airBarTexture , bgTexture , percent ) ; } void DrawMeter ( float x , float y , Texture texture , Texture background , float percent ) { var bgW = background . width ; var bgH = background . height ; if ( GUI . Button ( new Rect ( x , y , bgW , bgH ) , background ) ) { } var nW = ( ( bgW - iconWidth ) * percent ) + iconWidth ; GUI . BeginGroup ( new Rect ( x , y , nW , bgH ) ) ; GUI . DrawTexture ( new Rect ( CODE_INTEGER , CODE_INTEGER , bgW , bgH ) , texture ) ; GUI . EndGroup ( ) ; } } <EOF>
public string UserName { get { return ( from u in context . Users where u . UserID == session [ CODE_STRING ] select u . UserName ) . SingleOrDefault ( ) ; } } <EOF>
var dates = messageList . Select ( m = > m . MessageDate ) . ToList ( ) ; var dayFlags = db . DayFlags . GroupBy ( flag = > flag . FlagDate ) . Where ( group = > dates . Contains ( group . Key ) ) . Select ( group = > group . First ( ) ) ; <EOF>
this . buttonOk . BackColor = System . Drawing . SystemColors . MenuHighlight ; this . buttonOk . BackgroundImage = ( ( System . Drawing . Image ) ( resources . GetObject ( CODE_STRING ) ) ) ; this . buttonOk . BackgroundImageLayout = System . Windows . Forms . ImageLayout . Stretch ; this . buttonOk . DialogResult = System . Windows . Forms . DialogResult . Cancel ; this . buttonOk . Location = new System . Drawing . Point ( CODE_INTEGER , CODE_INTEGER ) ; this . buttonOk . Name = CODE_STRING ; this . buttonOk . Size = new System . Drawing . Size ( CODE_INTEGER , CODE_INTEGER ) ; this . buttonOk . TabIndex = CODE_INTEGER ; this . buttonOk . UseVisualStyleBackColor = false ; this . buttonOk . Click += new System . EventHandler ( this . buttonOk_Click ) ; <EOF>
using ( var writer = new StreamWriter ( CODE_STRING ) ) { string header = CODE_STRING ; writer . WriteLine ( header ) ; foreach ( var log in logs ) { string line = CODE_STRING + log . DateModified . ToShortDateString ( ) + CODE_STRING + log . ModifiedBy + CODE_STRING + log . ChangedData . Element ( CODE_STRING ) . Value + CODE_STRING + log . ChangedData . Element ( CODE_STRING ) . Value + CODE_STRING + log . ChangedData . Element ( CODE_STRING ) . Value + CODE_STRING ; writer . WriteLine ( line ) ; } } <EOF>
string rawData = CODE_STRING ; var words = Regex . Split ( rawData , CODE_STRING ) . Select ( x = > x . Trim ( ) ) . Where ( x = > x . Length > CODE_INTEGER ) . ToList ( ) ; var car = words [ CODE_INTEGER ] ; var wheels = words [ CODE_INTEGER ] ; var doors = words [ CODE_INTEGER ] ; <EOF>
class Program { static void Main ( string [ ] args ) { var holder = new Holder < IObject > ( ) ; holder . MyItem = new Object { List = new List < IObject > ( ) } ; holder . ChangeItemList ( new Object { List = new List < IObject > ( ) } ) ; } } public class Object : IObject { public List < IObject > List { get ; set ; } } public interface IObject { List < IObject > List { get ; set ; } } public class Holder < T > where T : IObject { public T MyItem { get ; set ; } public void ChangeItemList ( T item ) { MyItem . List = item . List ; } } <EOF>
[ DllImport ( CODE_STRING ) ] static extern IntPtr SetWindowsHookEx ( int idHook , keyboardHookProc callback , IntPtr hInstance , uint threadId ) ; <EOF>
protected void cbPop_CheckedChanged ( object sender , EventArgs e ) { Response . Cookies [ CODE_STRING ] . Value = Request . Cookies [ CODE_STRING ] . Value + CODE_STRING ; Label1 . Text = Response . Cookies [ CODE_STRING ] . Value . Length . ToString ( ) ; } protected void cbDown_CheckedChanged ( object sender , EventArgs e ) { Response . Cookies [ CODE_STRING ] . Value = Request . Cookies [ CODE_STRING ] . Value + CODE_STRING ; Label1 . Text = Response . Cookies [ CODE_STRING ] . Value . Length . ToString ( ) ; } <EOF>
public static class CryptoExtensions { public static void ChangePasswordEx ( this AsaMembershipProvider mp , string username , string oldPassword , string newPassword ) { if ( true /*validation code*/ ) { throw new Exception ( CODE_STRING ) ; } mp . ChangePassword ( username , oldPassword , newPassword ) ; } } <EOF>
OpenMethod = Registry . CurrentUser . OpenSubKey ( CODE_STRING , true ) ; OpenMethod . CreateSubKey ( KeyName + CODE_STRING ) . SetValue ( CODE_STRING , CODE_CHAR + OpenWith + CODE_CHAR + CODE_STRING + CODE_CHAR + CODE_STRING + CODE_CHAR ) ; FileExts = Registry . CurrentUser . OpenSubKey ( CODE_STRING , true ) ; foreach ( string child in FileExts . OpenSubKey ( Extension ) . GetSubKeyNames ( ) ) { FileExts . OpenSubKey ( Extension , true ) . DeleteSubKey ( child ) ; } FileExts . CreateSubKey ( Extension + CODE_STRING ) . SetValue ( CODE_STRING , CODE_STRING + KeyName + CODE_STRING ) ; } <EOF>
public class Material { [ XmlIgnore ] public string MaterialText { get ; set ; } [ XmlElement ( ElementName = CODE_STRING ) ] public XmlElement MatText { get { var doc = new XmlDocument ( ) ; doc . LoadXml ( MaterialText ) ; return doc . DocumentElement ; } set { /* implement in a similar way */ } } <EOF>
string columnFourName = CODE_STRING ; string columnFourName = CODE_STRING ; List < object > columnFourItems = new List < object > ( ) List < object > columnFiveItems = new List < object > ( ) SqlConnection oConn = new SqlConnection ( " SomeConnstring ) ; oConn . Open ( ) ; SqlCommand oComm = new SqlCommand ( CODE_STRING , oConn ) ; SqlDataAdapter sda = new SqlDataAdapter ( oComm ) ; DataTable dt = new DataTable ( ) ; sda . Fill ( dt ) ; dt . Columns . Add ( columnFourName , typeof ( object ) ) ; dt . Columns . Add ( columnFiveName , typeof ( object ) ) ; for ( int row = CODE_INTEGER ; row < dt . Rows . Count ; row ++ ) { dt . Rows [ row ] [ CODE_INTEGER ] = columnFourItems [ row ] ; dt . Rows [ row ] [ CODE_INTEGER ] = columnFiveItems [ row ] ; } <EOF>
using UnityEngine ; using System . Collections ; public class Test : MonoBehaviour { bool loadingStarted = false ; float secondsLeft = CODE_INTEGER ; void Start ( ) { StartCoroutine ( DelayLoadLevel ( CODE_INTEGER ) ) ; } IEnumerator DelayLoadLevel ( float seconds ) { secondsLeft = seconds ; loadingStarted = true ; do { yield return new WaitForSeconds ( CODE_INTEGER ) ; } while ( -- secondsLeft > CODE_INTEGER ) ; Application . LoadLevel ( CODE_STRING ) ; } void OnGUI ( ) { if ( loadingStarted ) GUI . Label ( new Rect ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) , secondsLeft . ToString ( ) ) ; } } <EOF>
private Point _Offset = Point . Empty ; private void ctrlToMove_MouseDown ( object sender , MouseEventArgs e ) { if ( e . Button == MouseButtons . Left ) { _Offset = new Point ( e . X , e . Y ) ; } } private void ctrlToMove_MouseUp ( object sender , MouseEventArgs e ) { _Offset = Point . Empty ; } private void ctrlToMove_MouseMove ( object sender , MouseEventArgs e ) { if ( _Offset != Point . Empty ) { Point newlocation = ctrlToMove . Location ; newlocation . X += e . X - _Offset . X ; newlocation . Y += e . Y - _Offset . Y ; ctrlToMove . Location = newlocation ; } } <EOF>
var onlineUsers = Membership . GetAllUsers ( ) . Cast < MembershipUser > ( ) . Where ( u = > u . IsOnline ) ; <EOF>
if ( properties . ListTitle == CODE_STRING ) { if ( properties . AfterProperties [ CODE_STRING ] . ToString ( ) != properties . ListItem [ CODE_STRING ] . ToString ( ) ) } <EOF>
IList < MaterialType > materialTypes = ( from tom in context . MaterialTypes where tom . IsActive == true select tom ) . ToList ( ) ; materialTypes . Insert ( CODE_INTEGER , new MaterialType { Name = CODE_STRING } ) ; combobox . ValueMember = CODE_STRING ; combobox . DisplayMember = CODE_STRING ; combobox . DataSource = materialTypes ; <EOF>
DataTable dtbind1 = objvehicleBAL . GetTaxdetails ( ) ; DataTable dtbind2 = new DataTable ( ) ; foreach ( DataRow row in dtbind1 . Rows ) { DateTime dt1 = DateTime . ParseExact ( row [ CODE_STRING ] . ToString ( ) , CODE_STRING , null ) ; if ( dt1 < ( ( DateTime . Now . AddDays ( CODE_INTEGER ) ) ) ) dtbind2 . Rows . Add ( row ) ; } } GVTax . DataSource = dtbind2 ; GVTax . DataBind ( ) ; <EOF>
string ref = CODE_STRING ; var regex = new Regex ( CODE_STRING , RegexOptions . IgnoreCase ) ; var urls = regex . Matches ( ref ) . OfType < Match > ( ) . Select ( m = > m . Groups [ CODE_STRING ] . Value ) . SingleOrDefault ( ) ; <EOF>
FormsAuthentication . SetAuthCookie ( Guid . NewGuid ( ) , true ) <EOF>
var result = CODE_INTEGER ; result . Should ( ) . BeOneOf ( new [ ] { CODE_INTEGER , CODE_INTEGER } ) ; <EOF>
Match ( ) <EOF>
XDocument feedXML = XDocument . Load ( CODE_STRING ) ; XNamespace media = XNamespace . Get ( CODE_STRING ) ; var feeds = from feed in feedXML . Descendants ( CODE_STRING ) select new { Title = feed . Element ( CODE_STRING ) . Value , Link = feed . Element ( CODE_STRING ) . Value , Description = feed . Element ( CODE_STRING ) . Value , pubDate = feed . Element ( CODE_STRING ) . Value , guid = feed . Element ( CODE_STRING ) . Value , thumbnail = feed . Element ( media + CODE_STRING ) != null ? feed . Element ( media + CODE_STRING ) . Attribute ( CODE_STRING ) . Value : CODE_STRING } ; <EOF>
public class FieldReference { public GameObject gObject ; public string component ; public string fieldName ; public string value { get { return gObject . GetComponent ( component ) . GetType ( ) . GetField ( fieldName ) . GetValue ( gObject . GetComponent ( component ) ) . ToString ( ) ; } } } <EOF>
public int LargeMethod ( ) { int result = CODE_INTEGER ; Task < int > t1 = new Task < int > ( SmallMethodA ) ; Task < int > t2 = new Task < int > ( SmallMethodB ) ; t1 . Start ( ) ; t2 . Start ( ) ; result += t1 . Result ; result += t2 . Result ; return result ; } <EOF>
int count = ( int ) cmd . ExecuteScalar ( ) ; <EOF>
. . . connection . Open ( ) ; var name = command . ExecuteScaclar ( ) . ToString ( ) ; connection . Close ( ) ; if ( name != null ) { MessageBox . Show ( CODE_STRING ) ; return ; } <EOF>
SPUtility . SendEmail ( SPContext . Current . Web , false , false , CODE_STRING , CODE_STRING , CODE_STRING ) ; <EOF>
Dictionary < string , string > <EOF>
[ assembly : InternalsVisibleTo ( CODE_STRING ) ] <EOF>
System . IO . Path . GetFileNameWithoutExtension ( CODE_STRING ) ; <EOF>
private CustomerOrderItem _HighestValueOrderItem = null ; public CustomerOrderItem HighestValueOrderItem { get { if ( this . CustomerOrderItems . Any ( ) && _HighestValueOrderItem != null ) { _HighestValueOrderItem = this . CustomerOrderItems . OrderByDescending ( i = > i . SalesPrice ) . FirstOrDefault ( ) ; return _HighestValueOrderItem ; } else { return new CustomerOrderItem ( ) ; } } } <EOF>
public class MyClientSOAPExtension : SoapExtension { Stream oldStream ; Stream newStream ; public override Stream ChainStream ( Stream stream ) { oldStream = stream ; newStream = new MemoryStream ( ) ; return newStream ; } public override void ProcessMessage ( SoapMessage message ) { switch ( message . Stage ) { case SoapMessageStage . BeforeDeserialize : break ; case SoapMessageStage . AfterDeserialize : break ; case SoapMessageStage . BeforeSerialize : break ; case SoapMessageStage . AfterSerialize : break ; default : throw new Exception ( CODE_STRING ) ; } } } <EOF>
public ViewModel ViewModel { get { return DataContext as ViewModel ; } } public void OnLoaded ( ) { ViewModel . DoThatThing ( ) ; } <EOF>
. . . < dx : TreeListCommandColumn > < CellStyle Font - Size = CODE_STRING > < / CellStyle > < / dx : TreeListCommandColumn > . . . <EOF>
Enumerable . Range ( CODE_INTEGER , CODE_INTEGER ) . Select ( x = > new FirstCircleControl ( ) ) . ToList ( ) . ForEach ( x = > Circles . Add ( x ) ) ; <EOF>
var userId = CODE_STRING ; using ( UsersContext db = new UsersContext ( ) ) { UserProfile userProfile = db . UserProfiles . FirstOrDefault ( u = > u . UserId == userId ) ; FormsAuthentication . SetAuthCookie ( userProfile . UserName , false ) ; } <EOF>
protected override void OnHandleCreated ( EventArgs e ) { base . OnHandleCreated ( e ) ; SetWpfInteropParentHandle ( this . Handle ) ; } <EOF>
zip . CompressionLevel = Ionic . Zlib . CompressionLevel . BestCompression ; <EOF>
SET @SQLScript = ' SELECT b . name FROM tblBrand b JOIN tblStore s ON b . PK_BrandID = s . FK_BrandID JOIN tblCustomReportTemp CT on b . PK_BrandID = CT . BrandID WHERE b . Active = CODE_INTEGER ' if ( @reportname is not null ) set @SQLScript = @SQLScript + ' AND CT . ReportName = ' ' ' + @reportname + ' ' ' ' if ( @username is not null ) set @SQLScript = @SQLScript + ' AND CT . UserName = ' ' ' + @username + ' ' ' ' <EOF>
new SolidColorBrush ( Color . FromArgb ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; <EOF>
List < ReportParameter > myParams = new List < ReportParameter > ( ) ; ReportParameter p = new ReportParameter ( CODE_STRING ) ; p . Values . Add ( null ) ; myParams . Add ( p ) ; myParams . Add ( new ReportParameter ( CODE_STRING , EndDate ) ) ; ReportViewer1 . ServerReport . SetParameters ( myParams ) ; <EOF>
context . Response . Clear ( ) ; context . Response . ContentType = varMimeType ; context . Response . TransmitFile ( filePath ) ; context . Response . AddHeader ( CODE_STRING , CODE_STRING + varFileName ) ; context . Response . AddHeader ( CODE_STRING , filePathFileInfo . Length ) ; context . Response . Flush ( ) ; context . Response . End ( ) ; <EOF>
string path = C : \ . . . \ text1 . text List < string > lines = File . ReadAllLines ( path ) ; int i = CODE_INTEGER ; foreach ( var line in lines ) { Console . WriteLine ( CODE_STRING , i , line ) ; i ++ ; } Console . Write ( CODE_STRING ) ; int n = int . Parse ( Console . ReadLine ( ) ) ; n -- ; Console . Write ( CODE_STRING , n + CODE_INTEGER ) ; lines . Insert ( n , Console . ReadLine ( ) ) ; File . WriteAllLines ( path , lines . ToArray ( ) ) ; <EOF>
adapter . GetIPProperties ( ) . UnicastAddresses . Single ( a = > a . Address . AddressFamily == AddressFamily . InterNetwork ) . Address <EOF>
for ( ; ; ) ; <EOF>
IEnumerable < XElement > linq ; linq = ( IEnumerable < XElement > ) XElement . Parse ( RawXmlData . ToString ( ) ) . Elements ( ) ; <EOF>
string modified = string . Format ( CODE_STRING , tokens ) ; <EOF>
private void methodName ( ) { for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { updateTextBox ( i . ToString ( ) ) ; this . canvas . UpdateLayout ( ) ; PrintDialog dialog = new PrintDialog ( ) ; dialog . PrintVisual ( this . canvas , CODE_STRING ) ; dialog . PrintQueue . Refresh ( ) ; while ( dialog . PrintQueue . NumberOfJobs != CODE_INTEGER ) { bool isQueued = false ; foreach ( var job in dialog . PrintQueue . GetPrintJobInfoCollection ( ) ) { if ( job . Name == CODE_STRING ) isQueued = true ; } if ( ! isQueued ) break ; Thread . Sleep ( CODE_INTEGER ) ; dialog . PrintQueue . Refresh ( ) ; } } } private void updateTextBox ( string text ) { txtTextBox . Text = text ; } <EOF>
public string tags ( ) { string url = CODE_STRING ; string html = Story ( ) ; DataTable tags = LoadAllTags ( ) ; if ( tags . Rows . Count > CODE_INTEGER ) { foreach ( var row in tags . Rows ) { foreach ( var column in tags . Columns ) { var tag = column . ToString ( ) ; var path = string . Format ( CODE_STRING , url , HttpUtility . UrlEncode ( tag ) ; var link = string . Format ( CODE_STRING , path , tag ) ; html = html . Replace ( tag , link ) ; } } } return html ; } <EOF>
var result = new MyModel { Total = < yourDataSource > . Count ( x . TheDate >= StartDate && x . TheDate <= EndDate ) } ; <EOF>
private void Form56_Load ( object sender , EventArgs e ) { try { MySqlConnection cnn = new MySqlConnection ( CODE_STRING ) ; cnn . Open ( ) ; MySqlDataAdapter MyDA = new MySqlDataAdapter ( ) ; MyDA . SelectCommand = new MySqlCommand ( CODE_STRING , cnn ) ; DataTable table = new DataTable ( ) ; MyDA . Fill ( table ) ; BindingSource bSource = new BindingSource ( ) ; bSource . DataSource = table ; dataGridView1 . DataSource = bSource ; } catch ( MySql . Data . MySqlClient . MySqlException ex ) { MessageBox . Show ( ex . Message ) ; Close ( ) ; } } <EOF>
using System ; using System . Security . Cryptography . X509Certificates ; public class X509 { public static void Main ( ) { string Certificate = CODE_STRING ; X509Certificate cert = new X509Certificate ( Certificate ) ; string resultsTrue = cert . ToString ( true ) ; Console . WriteLine ( resultsTrue ) ; string resultsFalse = cert . ToString ( false ) ; Console . WriteLine ( resultsFalse ) ; } } <EOF>
Form2 test = new Form2 ( this ) ; public Form2 ( Form1 FormToAccess ) FormToAccess . listBox1 . . . . = . . . ; <EOF>
int [ ] [ ] stores = { new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , new int [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , new int [ ] { CODE_INTEGER , CODE_INTEGER } } ; Console . WriteLine ( CODE_STRING , stores [ CODE_INTEGER ] . Average ( ) ) ; Console . WriteLine ( CODE_STRING , stores [ CODE_INTEGER ] . Average ( ) ) ; Console . WriteLine ( CODE_STRING , stores [ CODE_INTEGER ] . Average ( ) ) ; <EOF>
class BlDb : DbManager { public BlDb ( ) : base ( new BLToolkit . Data . DataProvider . MySqlDataProvider ( ) , CODE_STRING ) { } public Table < Car > Car { get { return GetTable < Car > ( ) ; } } public Table < Make > Make { get { return GetTable < Make > ( ) ; } } } <EOF>
void Appointments_SearchCompleted ( object sender , AppointmentsSearchEventArgs e ) { try { AppointmentResultsData . DataContext = e . Results ; MessageBox . Show ( e . Results . ElementAt < Appointment > ( CODE_INTEGER ) . Subject . ToString ( ) ) ; } catch ( System . Exception ) { } } <EOF>
foreach ( DataRow dr in ds . Tables [ CODE_STRING ] . Rows ) { item = new ListViewItem ( new string [ ] { dr [ CODE_STRING ] . ToString ( ) , dr [ CODE_STRING ] . ToString ( ) , dr [ CODE_STRING ] . ToString ( ) , string . Join ( CODE_STRING , dr . GetChildRows ( CODE_STRING ) . Select ( a = > a [ CODE_INTEGER ] ) ) , dr [ CODE_STRING ] . ToString ( ) , string . Join ( CODE_STRING , dr . GetChildRows ( CODE_STRING ) . Select ( a = > a [ CODE_INTEGER ] ) ) , dr [ CODE_STRING ] . ToString ( ) , } ) ; listView1 . Items . Add ( item ) ; } <EOF>
hex . Split ( " , \ r " . ToCharArray ( ) , StringSplitOptions . RemoveEmptyEntries ) ; <EOF>
XmlDocument xmlDoc = new XmlDocument ( ) ; xmlDoc . Load ( filepath ) ; XmlElement root = xmlDoc . DocumentElement ; XmlNode node = root . SelectSingleNode ( CODE_STRING ) ; if ( node != null && node . Attributes . Count > CODE_INTEGER && node . Attributes [ CODE_STRING ] != null && ! string . IsNullOrEmpty ( node . Attributes [ CODE_STRING ] . Value ) ) { RadiobuttonSurverysetting . SelectedValue = node . Attributes [ CODE_STRING ] . Value ; } <EOF>
public static IQueryable GetActiveEmployees_Grid ( string Period ) { DataContext Data = new DataContext ( ) ; var Employees = ( from c in DataSystem_Records where c . Period == Period orderby c . DataSystem_Employees . LName select c ) . GroupBy ( g = > g . DataSystem_Employees . AccID ) . Select ( x = > x . FirstOrDefault ( ) ) ; return Employees ; } <EOF>
public static string Serialise ( YourObject data ) { StringBuilder sb = new StringBuilder ( ) ; StringWriter sw = new StringWriter ( sb ) ; using ( JsonWriter writer = new JsonTextWriter ( sw ) ) { writer . WriteStartObject ( ) ; writer . WritePropertyName ( CODE_STRING ) ; if ( data . Property1 == null ) { writer . WriteNull ( ) ; } else { writer . WriteValue ( data . Property1 ) ; } writer . WritePropertyName ( CODE_STRING ) ; writer . WriteStartArray ( ) ; foreach ( var something in data . CollectionProperty ) { writer . WriteStartObject ( ) ; writer . WritePropertyName ( CODE_STRING ) ; writer . WriteValue ( something . prop1 ) ; writer . WritePropertyName ( CODE_STRING ) ; writer . WriteValue ( something . prop2 ) ; writer . WritePropertyName ( CODE_STRING ) ; writer . WriteValue ( something . prop3 ) ; writer . WriteEndObject ( ) ; } writer . WriteEndArray ( ) ; writer . WriteEndObject ( ) ; } return sb . ToString ( ) ; } <EOF>
public void ProcessCompleteCallback ( ) { MessageBox . Show ( CODE_STRING ) ; Application . Current . Dispatcher . Invoke ( ( ) = > { GenerateOutputButton . IsEnabled = true ; LoadingGifImage . Visibility = Visibility . Hidden ; CommandManager . InvalidateRequerySuggested ( ) ; } ) ; } <EOF>
Dictionary < string , List < int > > data = new Dictionary < string , List < int > > ( ) ; foreach ( DataGridViewRow row in dataGridView1 . Rows ) { string name = row . Cells [ CODE_INTEGER ] . ToString ( ) ; int ID = Convert . ToInt32 ( row . Cells [ CODE_INTEGER ] ) ; if ( data . ContainsKey ( name ) ) data [ name ] . Add ( ID ) ; else data . Add ( name , new List < int > ( new int [ ] { ID } ) ) ; } foreach ( string name in data . Keys ) if ( data [ name ] . Count > CODE_INTEGER ) { Console . Write ( name ) ; foreach ( int ID in data [ name ] ) Console . Write ( ID . ToString ( CODE_STRING ) ) ; Console . WriteLine ( ) ; } <EOF>
nslookup - type = mx < domain . name > <EOF>
AddAccessRule ( ) <EOF>
public static void Main ( string [ ] args ) { var urls = new List < string > ( ) ; Parallel . ForEach ( urls , new ParallelOptions { MaxDegreeOfParallelism = CODE_INTEGER } , DownloadFile ) ; } public static void DownloadFile ( string url ) { using ( var sr = new StreamReader ( HttpWebRequest . Create ( url ) . GetResponse ( ) . GetResponseStream ( ) ) ) using ( var sw = new StreamWriter ( url . Substring ( url . LastIndexOf ( CODE_CHAR ) ) ) ) { sw . Write ( sr . ReadToEnd ( ) ) ; } } <EOF>
Process proc = new Process ( ) ; proc . StartInfo . FileName = CODE_STRING ; proc . StartInfo . Arguments = CODE_STRING ; proc . StartInfo . RedirectStandardOutput = true ; proc . StartInfo . RedirectStandardError = true ; proc . StartInfo . UseShellExecute = false ; proc . Start ( ) ; proc . WaitForExit ( CODE_INTEGER ) ; string output = proc . StandardOutput . ReadToEnd ( ) ; string error = proc . StandardError . ReadToEnd ( ) ; <EOF>
Storyboard . SetTargetProperty ( animation , new PropertyPath ( FrameworkElement . HeightProperty ) ) ; <EOF>
ScrollViewer Grid . Row = CODE_STRING . . <EOF>
WriteableBitmap wBitmap = new WriteableBitmap ( yourBitmapImage ) ; MemoryStream ms = new MemoryStream ( ) ; wBitmap . SaveJpeg ( ms , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; <EOF>
private List < UserInformationProxy > GetContactsFromGuidList ( List < Guid > contactList ) { var qe = new QueryExpression ( Contact . EntityLogicalName ) ; qe . ColumnSet = new ColumnSet ( CODE_STRING , CODE_STRING ) qe . Criteria . AddCondition ( CODE_STRING , ConditionOperator . In , list . Cast < Object > ( ) . ToArray ( ) ) ; qe . Distinct = true ; var results = service . RetrieveMultiple ( qe ) . Entities . Select ( e = > e . ToEntity < Contact > ( ) ) . Select ( x = > new UserInformationProxy ( ) { FullName = x . FullName , Id = x . ContactId } ) ; return results ; } <EOF>
if ( openFileDialog1 . ShowDialog ( ) == System . Windows . Forms . DialogResult . OK ) { string selectedFile = openFileDialog1 . FileName ; } <EOF>
namespace WindowsFormsApplication1 { public partial class Form1 : Form { public Form1 ( ) { InitializeComponent ( ) ; this . SetLastColumnWidth ( ) ; this . theListView . Layout += delegate { this . SetLastColumnWidth ( ) ; } ; } private void SetLastColumnWidth ( ) { this . theListView . Columns [ this . theListView . Columns . Count - CODE_INTEGER ] . Width = - CODE_INTEGER ; } private void listView1_DrawColumnHeader ( object sender , DrawListViewColumnHeaderEventArgs e ) { e . Graphics . FillRectangle ( Brushes . Yellow , e . Bounds ) ; e . DrawText ( ) ; } } } <EOF>
CODE_STRING <EOF>
var store = System . IO . IsolatedStorage . IsolatedStorageFile . GetUserStoreForApplication ( ) ; var newPath = CODE_STRING ; if ( store . FileExists ( newPath ) ) store . DeleteFile ( newPath ) ; var stream = store . CreateFile ( newPath ) ; BitmapImage i = new BitmapImage ( ) ; i . SetSource ( photoResult . ChosenPhoto ) ; WriteableBitmap imageToSave = new WriteableBitmap ( i ) ; imageToSave . SaveJpeg ( stream , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; stream . Flush ( ) ; stream . Close ( ) ; <EOF>
ProcessSelection ( lstbDataFields . SelectedItems . Cast < ClassDataField > ( ) ) <EOF>
System . Xml . Serialization . XmlSchemaExporter <EOF>
protected override void OnStartup ( StartupEventArgs e ) { base . OnStartup ( e ) ; MainWindow window = new MainWindow ( ) ; Window1 test = new Window1 ( ) ; test . ShowDialog ( ) ; if ( test . InvalidLicense ) { Shutdown ( ) ; return ; } window . Show ( ) ; } <EOF>
value = ( T ) ( object ) ( value . ToString ( ) . Substring ( CODE_INTEGER , length ) ) ; <EOF>
string contents = File . ReadAllText ( CODE_STRING ) ; <EOF>
HttpWebRequest request = ( HttpWebRequest ) WebRequest . Create ( CODE_STRING ) ; request . Method = CODE_STRING ; request . ContentType = CODE_STRING ; string content = CODE_STRING ; byte [ ] contentBytes = System . Text . UTF8Encoding . UTF8 . GetBytes ( content ) ; request . ContentLength = contentBytes . Length ; using ( Stream stream = request . GetRequestStream ( ) ) { stream . Write ( contentBytes , CODE_INTEGER , contentBytes . Length ) ; } WebResponse response = request . GetResponse ( ) ; XmlDocument xmlDoc = new XmlDocument ( ) ; using ( Stream responseStream = response . GetResponseStream ( ) ) { xmlDoc . Load ( responseStream ) ; Console . WriteLine ( xmlDoc . OuterXml ) ; } <EOF>
internal interface IServiceAInternal { ServiceResponse ProcessFromServiceB ( ServiceRequest request ) ; } public class ServiceA : IServiceA , IServiceAInternal { public ServiceResponse Process ( ServiceRequest request ) { return ProcessCore ( request , false ) ; } ServiceResponse IServiceAInternal . ProcessFromServiceB ( ServiceRequest request ) { return ProcessCore ( request , true ) ; } private ServiceResponse ProcessCore ( ServiceRequest request , bool calledFromServiceB ) { . . . } } public class ServiceB : IServiceB { private readonly IServiceAInternal _serviceA ; public ServiceB ( ) { _serviceA = Container . Get < IServiceAInternal > ( ) ; } public ServiceResponse ReProcess ( ServiceRequest request ) { return _serviceA . ProcessFromServiceB ( request ) ; } } <EOF>
HtmlDocument doc = new HtmlDocument ( ) ; doc . Load ( CODE_STRING ) ; foreach ( HtmlNode link in doc . DocumentElement . SelectNodes ( CODE_STRING ] ) { HtmlAttribute att = link [ CODE_STRING ] ; att . Value = FixLink ( att ) ; } doc . Save ( CODE_STRING ) ; <EOF>
_NO_DEBUG_HEAP = CODE_INTEGER <EOF>
ArrayList array = new ArrayList ( ) ; String [ ] arrayB = new String [ array . Count ] ; for ( int i = CODE_INTEGER ; i < array . Count ; i ++ ) { arrayB [ i ] = array [ i ] . ToString ( ) ; } valuesdata . Rows . Add ( arrayB ) ; <EOF>
using Microsoft . VisualBasic . FileIO ; input = input . Remove ( CODE_INTEGER , CODE_INTEGER ) ; input = input . Remove ( input . Length - CODE_INTEGER ) ; input = input . Replace ( CODE_STRING , CODE_STRING ) ; string [ ] result ; using ( var csvParser = new TextFieldParser ( new StringReader ( input ) ) ) { csvParser . Delimiters = new string [ ] { CODE_STRING } ; result = csvParser . ReadFields ( ) ; } <EOF>
class FooRepository { public async Task < List < FooDTO > > FindAsync ( ) { using ( var context = new DbContext ( ) ) { return await context . Foos . Select ( m = > new FooDTO { Id = m . Id , . . . } ) . ToListAsync ( ) ; } } } <EOF>
foreach ( var noxRecord in CurrentPermit . PermitDetails . Where ( a = > a . PermitConstituentTypeId == CODE_INTEGER ) { var ppmAt15PercentOxygen = noxRecord . PpmAt15PercentOxygen ; } <EOF>
public enum Color { Black , Yellow , Blue , Green } ; class Circle { public const double PI = CODE_REAL ; private Color _color ; int radius ; public Circle ( int radius , Color color ) { this . radius = radius ; this . _color = color ; } } <EOF>
protected void Page_Load ( object sender , EventArgs e ) { if ( ! Page . IsPostBack ) { lblQuestion1 . Text = CODE_STRING ; lstAns1 . Items . Add ( new ListItem ( CODE_STRING , CODE_STRING ) ) ; lstAns1 . Items . Add ( new ListItem ( CODE_STRING , CODE_STRING ) ) ; lstAns1 . Items . Add ( new ListItem ( CODE_STRING , CODE_STRING ) ) ; lstAns1 . Items . Add ( new ListItem ( CODE_STRING , CODE_STRING ) ) ; } } <EOF>
r . Cells ( CODE_INTEGER ) . Style . BackColor = Drawing . Color . Red <EOF>
books . All ( book = > { book . TitleTarget = book . TitleSource ; return true ; } ) ; <EOF>
var singleString = someStrings . Aggregate ( ( current , next ) = > current + Environment . NewLine + next ) ; <EOF>
var str = CODE_STRING ; var result = Regex . Split ( str , CODE_STRING ) . Where ( x = > x != CODE_STRING ) . ToArray ( ) ; <EOF>
foreach ( FileInfo fi in new DirectoryInfo ( CODE_STRING ) . GetFiles ( ) . Where ( x = > x . Extension . ToLower ( ) == CODE_STRING ) ) { Console . WriteLine ( fi . Name ) ; } <EOF>
protected override async void OnStart ( string [ ] args ) { eventLog1 . WriteEntry ( CODE_STRING ) ; try { var hubConnection = new HubConnection ( CODE_STRING , useDefaultUrl : false ) ; IHubProxy alphaProxy = hubConnection . CreateHubProxy ( CODE_STRING ) ; await hubConnection . Start ( ) ; await alphaProxy . Invoke ( CODE_STRING , CODE_STRING ) ; } catch ( Exception ex ) { eventLog1 . WriteEntry ( ex . Message ) ; } } <EOF>
Directory . CreateDirectory ( Path . Combine ( Environment . GetFolderPath ( Environment . SpecialFolder . MyDocuments ) , CODE_STRING ) ) ; <EOF>
var myStack = new Stack < MyObjectType > ( myList ) ; <EOF>
Model . Entities entities = new Model . Entities ( ) ; public ServicePeople ( ) { entities . ContextOptions . ProxyCreationEnabled = false ; entities . ContextOptions . LazyLoadingEnabled = false ; } <EOF>
this . comboBox1 . ItemSource = names . Select ( o = > o . SaveName ) <EOF>
private static Color getcolor ( int grayScale ) { return Color . FromArgb ( grayScale , grayScale , grayScale ) ; } <EOF>
string Userfolder = Session [ CODE_STRING ] . ToString ( ) ; UserFilesPath = CODE_STRING + Userfolder ; <EOF>
public class PersonModel { string firstName ; string Surname ; DateTime DateOfBirth } public class PersonDisplayViewModel { PersonModel Model ; string FullName { get { return Model . firstname + CODE_STRING + Model . Surname ; } } int Age { get { return ( DateTime . Today ( ) - Model . DateOfBirth ) . TotalYears ; } } } public class PersonEditViewModel { PersonModel Model ; string FirstName { get { return Model . FirstName ; } set { Model . FirstName = value ; } } string Surname { get { return Model . Surname ; } set { Model . Surname = value ; } } DateTime DateOfBirth { get { return Model . DateOfBirth ; } set { Model . Surname = DateOfBirth ; } } } <EOF>
public static readonly DependencyProperty IsInReadModeProperty = DependencyProperty . Register ( CODE_STRING , typeof ( bool ) , typeof ( RegCardSearchForm ) , new UIPropertyMetadata ( false , ReadModeChanged ) ) ; private static void ReadModeChanged ( DependencyObject dObj , DependencyPropertyChangedEventArgs e ) { RegCardSearchForm form = dObj as RegCardSearchForm ; if ( form != null ) form . ReadModeChanged ( ( bool ) e . OldValue , ( bool ) e . NewValue ) ; } protected virtual void ReadModeChanged ( bool oldValue , bool newValue ) { } <EOF>
private void MyImage_ManipulationCompleted ( object sender , ManipulationCompletedEventArgs e ) { if ( isSoundPlaying ) stopSound ( ) ; } <EOF>
public Form1 ( ) { InitializeComponent ( ) ; DataGridViewComboBoxColumn cmbcolumn = new DataGridViewComboBoxColumn ( ) ; dataGridView2 . EditingControlShowing += new DataGridViewEditingControlShowingEventHandler ( dataGridView2_EditingControlShowing ) ; } private void dataGridView2_EditingControlShowing ( object sender , DataGridViewEditingControlShowingEventArgs e ) { ComboBox combo = e . Control as ComboBox ; if ( combo != null ) { combo . SelectedIndexChanged -= new EventHandler ( ComboBox_SelectedIndexChanged ) ; combo . SelectedIndexChanged += new EventHandler ( ComboBox_SelectedIndexChanged ) ; } } private void ComboBox_SelectedIndexChanged ( object sender , EventArgs e ) { ComboBox cb = ( ComboBox ) sender ; string item = cb . Text ; if ( item == CODE_STRING ) { Categorie cat = new Categorie ( ) ; cat . Show ( ) ; } } <EOF>
public hinoDetail ( ) { this . InitializeComponent ( ) ; } protected override void OnNavigatedTo ( NavigationEventArgs e ) { hinos result = ( e . Parameter as List < hinos > ) . FirstOrDefault ( ) ; textBlock . Text = result . nameHino } public async void mostraHino ( ) { } <EOF>
Expression < Func < T , object > > <EOF>
private HttpContext context ; public MyItemEventReceiver ( ) { context = HttpContext . Current ; } public override void ItemAdding ( SPItemEventProperties properties ) { HttpFileCollection collection = context . Request . Files ; foreach ( String name in collection . Keys ) { if ( collection [ name ] . ContentLength > CODE_INTEGER ) { } } } <EOF>
var headers = Request . Headers . GetValues ( CODE_STRING ) ; var ajaxHeader = headers . FirstOrDefault ( ) ; <EOF>
Tools -> Options -> Text Editor -> C # -> Formatting -> Spacing <EOF>
var result = Regex . Replace ( CODE_STRING , CODE_STRING , CODE_STRING ) ; <EOF>
from c in context where c . Attribute ( CODE_STRING ) == CODE_STRING select new { Description = c . Attribute ( CODE_STRING ) , Category = c . Attribute ( CODE_STRING ) } <EOF>
public static MvcHtmlString Image ( this HtmlHelper _helper , string _url , string _altText , object _htmlAttributes ) { TagBuilder builder = new TagBuilder ( CODE_STRING ) ; TagBuilder anchorabBuilder = new TagBuilder ( CODE_STRING ) ; var path = _url . Split ( CODE_CHAR ) ; string pathExtra = CODE_STRING ; if ( path . Length > CODE_INTEGER ) { pathExtra += CODE_STRING + path [ CODE_INTEGER ] ; } builder . Attributes . Add ( CODE_STRING , VirtualPathUtility . ToAbsolute ( path [ CODE_INTEGER ] ) + pathExtra ) ; builder . Attributes . Add ( CODE_STRING , _altText ) ; builder . MergeAttributes ( new RouteValueDictionary ( _htmlAttributes ) ) ; anchorabBuilder . InnerHtml = builder . ToString ( TagRenderMode . SelfClosing ) ; return MvcHtmlString . Create ( anchorabBuilder . ToString ( TagRenderMode . Normal ) ) ; } <EOF>
Process [ ] apps = Process . GetProcesses ( ) ; foreach ( Process p in apps ) { if ( p . MainWindowHandle . ToInt32 ( ) > CODE_INTEGER ) { NativeWin32 . SetForegroundWindow ( p . MainWindowHandle . ToInt32 ( ) ) ; System . Windows . Forms . SendKeys . SendWait ( CODE_STRING ) ; p . Dispose ( ) ; } } <EOF>
label1 . Location = p2 ; <EOF>
void SetThread ( ) { for ( int i = CODE_INTEGER ; i < _intArrayLength ; i ++ ) { int currentValue = i ; Console . Write ( string . Format ( " SetThread -> i : { CODE_INTEGER } \ r " , i ) ) ; _th [ i ] = new Thread ( ( ) = > RunThread ( currentValue ) ) ; _th [ i ] . Start ( ) ; } } <EOF>
setup . exe TARGETDIR = " C : \ App " <EOF>
string s = CODE_STRING ; ; string pattern = CODE_STRING ; Regex r = new Regex ( CODE_STRING + pattern + CODE_STRING + pattern . Substring ( CODE_INTEGER , pattern . Length / CODE_INTEGER ) + CODE_STRING ) ; r . Replace ( s , CODE_STRING ) ; <EOF>
public MyClass ( ) { YourDateTimePickerId . Value = DateTime . Now . AddDays ( CODE_INTEGER ) ; MessageBox . Show ( dateTimePicker1 . Value . ToString ( ) ) ; } <EOF>
[ XmlElement ( ElementName = CODE_STRING , Namespace = CODE_STRING ) ] public Employee [ ] Employees ; <EOF>
^ ( [ \ p { Lu } \ p { Lt } ] \ p { L } + \ s * ) { CODE_INTEGER , CODE_INTEGER } <EOF>
public static bool SameDate ( DateTimeOffset first , DateTimeOffset second ) { bool returnValue = false ; DateTime firstAdjusted = first . ToUniversalTime ( ) . Date ; DateTime secondAdjusted = second . ToUniversalTime ( ) . Date ; int diff = first . Date . CompareTo ( firstAdjusted ) - second . Date . CompareTo ( secondAdjusted ) ; firstAdjusted = firstAdjusted . AddDays ( diff ) ; if ( DateTime . Compare ( firstAdjusted , secondAdjusted ) == CODE_INTEGER ) returnValue = true ; return returnValue ; } <EOF>
string result = Regex . Replace ( input , CODE_STRING , CODE_STRING ) ; <EOF>
( ( AreaSeries ) CHART_Overview . Series [ CODE_INTEGER ] ) . ItemsSource = null ; ( ( AreaSeries ) CHART_Overview . Series [ CODE_INTEGER ] ) . ItemsSource = _lstLogOvw ; <EOF>
public class Holder { public Action OnPropChange ; int _prop ; public int Prop { get { return _prop ; } set { _prop = value ; OnPropChange ( ) ; } } } public class SortedListThing : List < Holder > { public void Add ( Holder h ) { BinarySortedInsert ( h ) ; h . OnPropChange = ( ) = > { this . Remove ( h ) ; base . Add ( h ) ; } ; } private void BinarySortedInsert ( Holder h ) { } public void Remove ( Holder h ) { h . OnPropChange = null ; base . Remove ( h ) ; } } <EOF>
public ActionResult DetailsChanged ( DetailsRepository detailsRepository , Details detailsModel ) { if ( ! ModelState . Valid ) { ViewData [ CODE_STRING ] = CODE_STRING ; return View ( ) ; } Details newDetails = detailsRepository . FirstOrDefault ( x = > x . ID == detailsModel . Id ) ; if ( newDetails != null ) { if ( newDetails . Id == CODE_INTEGER ) { newDetails . Id = CODE_INTEGER ; } else { newDetails . Id = CODE_INTEGER ; } detailsRepository . SaveChanges ( ) ; return View ( ) ; } } <EOF>
using ( var conn = new SqlConnection ( connectionString ) ) { using ( var comm = conn . CreateCommand ( ) ) { conn . Open ( ) ; comm . CommandText = CODE_STRING ; comm . ExecuteNonQuery ( ) ; int value = ( int ) comm . ExecuteScalar ( ) ; SqlDataReader reader = comm . ExecuteReader ( ) ; } } <EOF>
description = Regex . Replace ( description , CODE_STRING , String . Empty ) ; description = WebUtility . HtmlDecode ( description ) ; <EOF>
DataContractSerializer . Instance = new DataContractSerializer ( new XmlDictionaryReaderQuotas { MaxStringContentLength = /* new value */ ; } ; <EOF>
private void addMainBookInfos ( ) { using ( SqlConnection con = new SqlConnection ( Conn . Activated ) ) using ( SqlCommand com = new SqlCommand ( CODE_STRING , con ) ) { com . CommandType = CommandType . StoredProcedure ; com . Parameters . AddWithValue ( CODE_STRING , txtISBN . Text ) ; com . ExecuteNonQuery ( ) con . Close ( ) ; } } <EOF>
const string NAME = CODE_STRING ; <EOF>
foreach ( ListViewItem row in ListView2 . Items ) { CheckBox cb = ( CheckBox ) row . FindControl ( CODE_STRING ) ; if ( cb != null ) { if ( cb . Checked == true ) { } } } <EOF>
[ HttpPost ] public ActionResult Comment ( int id , Comment comment ) { if ( ModelState . IsValid ) { db . Comments . AddObject ( comment ) ; comment . PostReference . EntityKey = new EntityKey ( CODE_STRING , CODE_STRING , id ) ; db . SaveChanges ( ) ; return RedirectToAction ( CODE_STRING ) ; } return View ( ) ; } <EOF>
HtmlDocument doc = new HtmlDocument ( ) ; doc . Load ( CODE_STRING ) ; string phone_number = doc . DocumentElement . SelectNodes ( CODE_STRING ] ) . InnerText <EOF>
List < int > used = new List < int > ( ) ; Random random = new Random ( ) ; foreach ( thing you want to do ) { int current = random . Next ( CODE_INTEGER , CODE_INTEGER ) ; while ( used . Contains ( current ) ) current = random . Next ( CODE_INTEGER , CODE_INTEGER ) ; used . Add ( current ) ; } <EOF>
static void Main ( string [ ] args ) { using ( var p = PresentationDocument . Open ( CODE_STRING , true ) ) { foreach ( var slide in p . PresentationPart . GetPartsOfType < SlidePart > ( ) . Where ( sp = > IsVisible ( sp ) ) ) { foreach ( var diagramPart in slide . DiagramDataParts ) { foreach ( var text in diagramPart . RootElement . Descendants < Run > ( ) . Select ( d = > d . Text . Text ) ) { Console . WriteLine ( text ) ; } } } } Console . ReadLine ( ) ; } private static bool IsVisible ( SlidePart s ) { return ( s . Slide != null ) && ( ( s . Slide . Show == null ) || ( s . Slide . Show . HasValue && s . Slide . Show . Value ) ) ; } <EOF>
LinkedList < T > <EOF>
var singleView = regionManager . Regions [ CODE_STRING ] . ActiveViews . FirstOrDefault ( ) ; <EOF>
private void DetailButton_Click_1 ( object sender , RoutedEventArgs e ) { var clickedUIElement = sender as Button ; if ( null == clickedUIElement ) { Return ; } Display selectedItemData = clickedUIElement . DataContext as Display ; if ( null != selectedItemData ) { NavigationService . Navigate ( CODE_STRING , selectedItemData ) ; } } <EOF>
using ( var context = GetContext ( ) ) { var userEntity = new UserEntity ( ) { ID = userUpdate . ID } ; context . Users . Attach ( userEntity ) ; context . Entry ( userEntity ) . CurrentValues . SetValues ( userUpdate ) ; context . Configuration . ValidateOnSaveEnabled = false ; context . SaveChanges ( ) ; } <EOF>
WebRequest request = WebRequest . Create ( url ) ; NetworkCredential credential = new NetworkCredential ( username , password ) ; request . Credentials = credential ; request . PreAuthenticate = true ; WebResponse response = request . GetResponse ( ) ; Stream Answer = response . GetResponseStream ( ) ; StreamReader _Answer = new StreamReader ( Answer ) ; string content = _Answer . ReadToEnd ( ) ; response . Close ( ) ; <EOF>
static void Main ( string [ ] args ) { String Readfiles = File . ReadAllText ( CODE_STRING ) ; Int32 myInt = Int32 . Parse ( Readfiles ) ; String [ ] start = new String [ myInt ] ; for ( int i = CODE_INTEGER ; i < myInt ; ++ i ) { start [ i ] = ( i + CODE_INTEGER ) . ToString ( ) ; Console . WriteLine ( i ) ; Console . ReadLine ( ) ; } File . WriteAllLines ( CODE_STRING , start ) ; } <EOF>
var resultObjectList = _context . Parents . Where ( p = > p . DeletedDate == null ) . OrderBy ( p = > p . Name ) . Select ( p = > new { ParentItem = p , ChildItems = p . Children . Where ( c = > c . Name == CODE_STRING ) } ) . ToList ( ) ; <EOF>
[ DefaultValue ( CODE_STRING ) ] public string Prop { get ; set ; } <EOF>
from od in db . OrderDetails join o in db . Orders on od . OrderID equals o . OrderID join p in db . Products on od . ProductID equals p . ProductID where o . CustomerID == CODE_STRING group od by new { p . ProductID , p . ProductName } into g1 select new { ProductName = g1 . Key . ProductName , Total = g1 . Sum ( od = > od . Quantity ) } <EOF>
CREATE PROCEDURE dbo . StoredProcedure2 @columnName varchar ( CODE_INTEGER ) , @batchmId int AS DECLARE @SQL1 AS VARCHAR ( MAX ) DECLARE @SQL2 AS VARCHAR ( MAX ) SET @SQL1 = ' select ' + @columnName + ' from Batch_Master ' SET @SQL1 = ' select ' + @columnName + ' from GTIN_Master inner join Batch_Master on GTIN_Master . GTIN = Batch_Master . GTIN where Batch_M_id = ' + CONVERT ( VARCHAR , @batchmId ) IF EXISTS ( SELECT * FROM sys . columns WHERE Name = @columnName and Object_ID = Object_ID ( N ' Batch_Master ' ) ) BEGIN EXEC ( @SQL1 ) END ELSE BEGIN EXEC ( @SQL2 ) END <EOF>
[ OperationContract ] SuccessUpload uploadDoc2 ( Stream data ) ; <EOF>
[ SuppressMessage ( CODE_STRING , CODE_STRING ) ] <EOF>
Tabla . Rows [ CODE_INTEGER ] [ CODE_STRING ] <EOF>
private void MainPage_Load ( object sender , EventArgs e ) { checkBox1 . CheckedChanged += checkBox1_CheckedChanged ; } private void checkBox1_CheckedChanged ( object sender , EventArgs e ) { if ( checkBox1 . Checked ) { } } <EOF>
class BookmarkObj { /* similar to steven's */ } class BookmarkStore { Dictionary < int , BookmarkObj > byId ; Dictionary < DateTime , BookmarkObj > byStartDate ; Dictionary < DateTime , BookmarkObj > byEndDate ; /* Boring init code */ public void Insert ( BookmarkObj obj ) { byId [ obj . Id ] = obj ; byStartDate [ obj . Start ] = obj ; byEndDate [ obj . End ] = obj ; } public BookmarkObj GetById ( int id ) { return byId [ obj . Id ] ; } /* And so on */ <EOF>
MemberInfo property = typeof ( YourClass ) . GetProperty ( CODE_STRING ) ; var attribute = property . GetCustomAttributes ( typeof ( MyCustomAttribute ) , true ) . Cast < MyCustomAttribute > . Single ( ) ; string displayName = attribute . DisplayName ; <EOF>
[ TestFixture ] public class DynamicJson { [ Test ] public void Test ( ) { dynamic flexible = new ExpandoObject ( ) ; flexible . Int = CODE_INTEGER ; flexible . String = CODE_STRING ; var dictionary = ( IDictionary < string , object > ) flexible ; dictionary . Add ( CODE_STRING , false ) ; var serialized = JsonConvert . SerializeObject ( dictionary ) ; } } <EOF>
private void dataGridView2_CellClick ( object sender , DataGridViewCellEventArgs e ) { /* Place indexes here, there is no need to initialize * * so many integers inside loop if they're not changing */ int indexOfYourColumn = CODE_INTEGER , index2 = CODE_INTEGER ; var restaurantList = new List < Restaurant > ( ) ; foreach ( DataGridViewCell cell in dataGridView2 . SelectedCells ) { foreach ( DataGridViewRow row in dataGridView1 . Rows ) { if ( cell . Value . ToString ( ) == row . Cells [ indexOfYourColumn ] . Value . ToString ( ) ) { restaurantList . Add ( new Restaurant ( ) { Data = row . Cells [ indexOfYourColumn ] . Value . ToString ( ) , Data2 = row . Cells [ index2 ] . Value . ToString ( ) } ) ; } } } dataGridView3 . DataSource = restaurantList ; } <EOF>
string json_string = " { \ " CODE_INTEGER \ " : { \ " oid \ " : \ " CODE_INTEGER \ " , \ " order \ " : \ " SD1427999310502 \ " } , \ CODE_STRING ; JObject outer_object = JObject . Parse ( json_string ) ; JObject inner_object = ( JObject ) outer_object [ CODE_STRING ] ; string oid_value = inner_object [ CODE_STRING ] . ToString ( ) ; string order_value = inner_object [ CODE_STRING ] . ToString ( ) ; <EOF>
[ WebMethod ( EnableSession = true ) ] <EOF>
private void button1_Click ( object sender , EventArgs e ) { tabControl1 . SelectedIndex = CODE_INTEGER ; tabControl1 . TabPages [ CODE_INTEGER ] . Text = CODE_STRING ; } private void button2_Click ( object sender , EventArgs e ) { tabControl1 . SelectedIndex = CODE_INTEGER ; } private void button3_Click ( object sender , EventArgs e ) { tabControl1 . SelectedIndex = CODE_INTEGER ; } <EOF>
using ( WebClient webClient = new WebClient ( ) ) { string url = CODE_STRING ; dynamic json = JsonConvert . DeserializeObject ( webClient . DownloadString ( url ) ) ; foreach ( var item in json ) { Console . WriteLine ( CODE_STRING , item . user . id , item . user . screen_name ) ; } } <EOF>
using ( HumanResourcesDB db = newHumanResourcesDB ( ConfigurationManager . ConnectionStrings [ CODE_STRING ] . ConnectionString ) ) { List < Employee > record = ( from tab in db . Employees where tab . Birthday >= DateTime . Today && tab . Birthday < DateTime . Today . AddDays ( CODE_INTEGER ) select tab ) . ToList ( ) ; this . grdBirthdays . DataSource = record ; this . grdBirthdays . DataBind ( ) ; } <EOF>
lbxXunit . DataSource = units ; lbxYunit . DataSource = units . ToList ( ) ; <EOF>
DatagGridView . Columns [ * Column No / Name * ] . Visible = false ; <EOF>
ComboBox . SelectedIndexChanged Event <EOF>
var eventLoop = new EventLoopScheduler ( ) ; IObservable < Unit > QueueAnItem ( string input ) { return Observable . Start ( ( ) = > CallGhostScriptAndWaitForItToFinish ( input ) , eventLoop ) ; } QueueAnItem ( CODE_STRING ) . Subscribe ( x = > Console . WriteLine ( CODE_STRING ) , ex = > Console . WriteLine ( CODE_STRING , ex . ToString ( ) ) ; <EOF>
SetText ( serialPort1 . ReadExisting ( ) ) ; <EOF>
var joins = querySpecification . FromClause . TableReferences . OfType < QualifiedJoin > ( ) ; <EOF>
var list = _dictImportantInformation . GetList ( ) . ToList ( ) . Select ( x = > new DictionaryNewInfoListModel { Id = x . Id , Description = x . Description , IsActiveYN = x . IsActive , DeestynationName = x . DictImportantInformationXDestination . Select ( n = > new DictionaryNewInfoSupportList { Id = n . Destination . Id , Name = n . Destination . Description } ) . ToList ( ) } ) . ToList ( ) ; <EOF>
string queryUrl = CODE_STRING ; AmazonCloudSearchDomainClient searchClient = new AmazonCloudSearchDomainClient ( queryUrl ) ; SearchRequest searchRequest = new SearchRequest ( ) ; searchRequest . Query = CODE_STRING ; SearchResponse searchResponse = searchClient . Search ( searchRequest ) ; <EOF>
Color slateBlue = Color . FromName ( CODE_STRING ) ; <EOF>
XElement apps = new XElement ( CODE_STRING , new XElement ( CODE_STRING , new XAttribute ( CODE_STRING , name ) , new XAttribute ( CODE_STRING , bundle ) , ( from icon in icons select new XElement ( CODE_STRING , icon , new XAttribute ( CODE_STRING , iconsize ) ) ) ) ) ; <EOF>
restore filelistonly from disk = ' path_to_your_backup ' <EOF>
struct Test { public int test1 ; public int test2 ; } [ DllImport ( CODE_STRING , CallingConvention = Cdecl ) ] public static extern void FillStruct ( Test [ ] stTest , int size ) ; [ . . . ] var test = new Test [ n ] ; FillStruct ( test , test . Length ) ; <EOF>
Thread . Abort <EOF>
try { dataGridView . ScrollBars = ScrollBars . Both ; dConn . Open ( ) ; dAdapter4 . Fill ( ds4 , CODE_STRING ) ; dConn . Close ( ) ; dataGridView . DataSource = ds4 . Tables [ CODE_INTEGER ] . DefaultView ; } <EOF>
using System ; using System . Xml . Linq ; public class Test { static void Main ( ) { XDocument doc = XDocument . Load ( CODE_STRING ) ; var proc = new XProcessingInstruction ( CODE_STRING , CODE_STRING ) ; doc . Root . AddBeforeSelf ( proc ) ; doc . Save ( CODE_STRING ) ; } } <EOF>
JpegBitmapEncoder encoder = new JpegBitmapEncoder ( ) ; encoder . Frames . Add ( BitmapFrame . Create ( bitmapSource ) ) ; encoder . QualityLevel = CODE_INTEGER ; byte [ ] bit = new byte [ CODE_INTEGER ] ; using ( MemoryStream stream = new MemoryStream ( ) ) { encoder . Frames . Add ( BitmapFrame . Create ( bitmapSource ) ) ; encoder . Save ( stream ) ; bit = stream . ToArray ( ) ; stream . Close ( ) ; } <EOF>
dates . GroupBy ( d = > d ) . ToDictionary ( g = > g . Key , g = > g . Count ( ) ) ; <EOF>
String . Format ( CultureInfo . InvariantCulture , CODE_STRING , number ) ; <EOF>
WebElement userNameField = driver . findElement ( By . id ( CODE_STRING ) ) ; WebElement passwordField = driver . findElement ( By . id ( CODE_STRING ) ) ; userNameField . sendKeys ( CODE_STRING ) ; passwordField . sendKeys ( CODE_STRING ) ; <EOF>
public void Foo < T > ( T myParam ) where T : IObject , ITreeNode < IObject > { } <EOF>
public List < int > ReadPdfFile ( string fileName , String searthText ) { List < int > pages = new List < int > ( ) ; if ( File . Exists ( fileName ) ) { PdfReader pdfReader = new PdfReader ( fileName ) ; for ( int page = CODE_INTEGER ; page <= pdfReader . NumberOfPages ; page ++ ) { ITextExtractionStrategy strategy = new SimpleTextExtractionStrategy ( ) ; string currentPageText = PdfTextExtractor . GetTextFromPage ( pdfReader , page , strategy ) ; if ( currentPageText . Contains ( searthText ) ) { pages . Add ( page ) ; } } pdfReader . Close ( ) ; } return pages ; } <EOF>
string str = CODE_STRING ; textBox1 . Text = str . Substring ( CODE_INTEGER , str . IndexOf ( CODE_STRING ) + CODE_INTEGER ) ; <EOF>
[ ServiceContract ( Namespace = CODE_STRING ) ] public interface ITfsNotificationService { [ OperationContract ( Action = CODE_STRING , Name = CODE_STRING , ReplyAction = CODE_STRING ) ] [ XmlSerializerFormat ( Style = OperationFormatStyle . Document ) ] void Notify ( string eventXml , string tfsIdentityXml , SubscriptionInfo SubscriptionInfo ) ; } [ ServiceBehavior ( Namespace = CODE_STRING ) ] public class Service1 : ITfsNotificationService { public void Notify ( string eventXml , string tfsIdentityXml , SubscriptionInfo SubscriptionInfo ) { throw new NotImplementedException ( ) ; } } <EOF>
HtmlDocument htmlDoc = new HtmlDocument ( ) ; htmlDoc . Load ( CODE_STRING ) ; HtmlCommentNode hcn = htmlDoc . CreateComment ( CODE_STRING ) ; HtmlNode htmlNode = htmlDoc . DocumentNode . SelectSingleNode ( CODE_STRING ) ; htmlDoc . DocumentNode . InsertBefore ( hcn , htmlNode ) ; htmlDoc . Save ( CODE_STRING ) ; <EOF>
from i in Invoices select new { InvoiceID = i . InvoiceId , CustomerName = i . CustomerName , SubPrice = InvoiceItems . Where ( it = > it . InvoiceID = i . InvoiceID ) . Select ( it = > it . Quantity * it . UnitPrice ) . Sum ( ) , SumPayments = PaymentInvoice . Where ( pi = > pi . InvoiceId = i . InvoiceId ) . Select ( pi = > pi . AmountAllocated ) . Sum ( ) } <EOF>
static System :: Drawing :: Point FindImage ( IntPtr source , IntPtr target ) { POINT retval = ImgFuncs :: MyImgFuncs :: FindImage ( ( HBITMAP ) ( void * ) source , ( HBITMAP ) ( void * ) target ) ; return System :: Drawing :: Point ( retval . X , retval . Y ) ; } <EOF>
public decimal this [ int index ] { get { return data [ index ] ; } set { data [ index ] = value ; } } <EOF>
int count = mynew . Columns . Count ; var lastColumn = mynew . Columns [ count - CODE_INTEGER ] ; string columnname = lastColumn . ColumnName ; <EOF>
var data = from s in abc from i in s . Items select new { objType = i . GetType ( ) == typeof ( OR ) ? ( ( OR ) i ) . name : i . GetType ( ) == typeof ( DT ) ? ( ( DT ) i ) . name : string . Empty , objAbc = s } ; IEnumerable < abc > data = journey . Where ( x = > x . objType . Contains ( CODE_STRING ) ) . Select ( y = > y . objAbc ) . ToList ( ) ; <EOF>
DataTable dt = new DataTable ( ) ; BindingSource bs = new BindingSource ( ) ; bs . DataSource = dt ; dataGridView1 . DataSource = bs ; <EOF>
Page page = new Page ( this ) ; Framme . Content = page ; <EOF>
List < string [ ] > users = new List < string [ ] > ( ) ; <EOF>
double [ ] X = { . . . } ; double [ ] Y = { . . . } ; string [ ] Risk = { . . . } ; for ( int i = CODE_INTEGER ; i > X . Length ; i ++ ) { TrainigSet tr = new TrainigSet ( ) ; . . . listtraining . Add ( tr ) ; } <EOF>
var Result = AList . Select ( p = > new { BList = p . BList , indexes = p . BList . Select ( ( q , i ) = > new { index = i , isMatch = q . Word == CODE_STRING } ) . Where ( q = > q . isMatch ) . Select ( q = > q . index ) } ) ; <EOF>
if ( File . Exists ( CODE_STRING ) ) <EOF>
public void ToggleButtonOnAction ( IRibbonControl control , bool pressed ) { MessageBox . Show ( CODE_STRING + pressed ? CODE_STRING : CODE_STRING ) ; } <EOF>
string textTransDate = DateTime . Now . ToString ( CODE_STRING ) ; <EOF>
if ( startDate != ' ' && EndDate != ' ' ) { var stdate = Date . parse ( startDate ) ; var enddate = Date . parse ( EndDate ) ; if ( stdate > enddate ) { alert ( ' Start date cannot be greater than end date ' ) ; return false ; } else { return true ; } } <EOF>
smtpServerInstance . Credentials = new NetworkCredential ( CODE_STRING , CODE_STRING ) ; smtpServerInstance . Send ( mail ) ; <EOF>
foreach ( var cc in qry . Distinct ( ) . ToList ( ) ) <EOF>
var result = dbContext . UserRoles . Where ( ur = > ur . Customer . CustomerId == customer . CustomerId ) . Select ( ur = > ur . UserProfile ) ; <EOF>
protected override void OnPaint ( PaintEventArgs e ) { base . OnPaint ( e ) ; Graphics graphicsObject = e . Graphics ; using ( Brush aGradientBrush = new LinearGradientBrush ( new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) , Color . Blue , Color . Red ) ) { using ( Pen aGradientPen = new Pen ( aGradientBrush ) ) { graphicsObject . DrawLine ( aGradientPen , new Point ( CODE_INTEGER , CODE_INTEGER ) , new Point ( CODE_INTEGER , CODE_INTEGER ) ) ; } } } <EOF>
private bool VisitExpression ( Expression expression , Expression parentExpression , Statement parentStatement , CsElement parentElement , object context ) { if ( expression . ExpressionType == ExpressionType . VariableDeclarator ) { VariableDeclaratorExpression declaratorExpression = ( VariableDeclaratorExpression ) expression ; if ( declaratorExpression . Initializer == null ) { this . AddViolation ( parentElement , expression . LineNumber , CODE_STRING , declaratorExpression . Identifier . Text ) ; } } return true ; } <EOF>
Bitmap bmp = new Bitmap ( CODE_STRING ) ; Rectangle rect = new Rectangle ( CODE_INTEGER , CODE_INTEGER , bmp . Width , bmp . Height ) ; BitmapData bmpData = bmp . LockBits ( rect , ImageLockMode . ReadWrite , bmp . PixelFormat ) ; int bytes = Math . Abs ( bmpData . Stride ) * bmp . Height ; byte [ ] rgbValues = new byte [ bytes ] ; Marshal . Copy ( bmpData . Scan0 , rgbValues , CODE_INTEGER , bytes ) ; <EOF>
var washingtonCustomers = customers . Where ( c = > c . Field < string > ( CODE_STRING ) == CODE_STRING ) ; var recentOrders = orders . Where ( o = > ( DateTime ) o [ CODE_STRING ] >= cutoffDate ) ; var query = washingtonCustomers . Join ( recentOrders , c = > c . Field < string > ( CODE_STRING ) , o = > o . Field < string > ( CODE_STRING ) , ( c , o ) = > new { CustomerID = c . Field < string > ( CODE_STRING ) , OrderID = o . Field < int > ( CODE_STRING ) } ) ; <EOF>
Range headers = mySheet . UsedRange . Rows ( CODE_INTEGER ) ; <EOF>
static void Main ( ) { Settings s = Settings . Default ; Process . Start ( s . URL1 ) ; Thread . Sleep ( s . Delay1 ) ; SendKeys . SendWait ( CODE_STRING ) ; Thread . Sleep ( CODE_INTEGER ) ; SendKeys . SendWait ( EncodeForSendKey ( s . URL2 ) ) ; SendKeys . SendWait ( CODE_STRING ) ; } public static string EncodeForSendKey ( string value ) { StringBuilder sb = new StringBuilder ( value ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; sb . Replace ( CODE_STRING , CODE_STRING ) ; return sb . ToString ( ) ; } <EOF>
var link = File . ReadLines ( path + CODE_STRING ) . ToArray ( ) ; var sb = new StringBuilder ( ) ; foreach ( var txt in link ) { if ( txt . Contains ( CODE_STRING ) ) { var outputPath = txt . Split ( CODE_CHAR ) [ CODE_INTEGER ] ; sb . AppendLine ( string . Format ( CODE_STRING , outputPath ) ) ; } else if ( txt . Contains ( CODE_STRING ) ) { var LicFilePath = txt . Split ( CODE_CHAR ) [ CODE_INTEGER ] ; sb . AppendLine ( string . Format ( CODE_STRING , LicFilePath ) ) ; } } File . WriteAllText ( path + CODE_STRING , sb . ToString ( ) ) ; <EOF>
private void Button_PreviewMouseRightButtonUp ( object sender , MouseButtonEventArgs e ) { DockPanel dockPanel = ( DockPanel ) ( ( Button ) sender ) . Content ; TextBlock text = ( TextBlock ) LogicalTreeHelper . FindLogicalNode ( dockPanel , CODE_STRING ) ; if ( text != null ) { text . Visibility = Visibility . Visible ; } } <EOF>
ThreadStart threadEntryPoint = . . . ; var thread = new Thread ( threadEntryPoint ) ; thread . ApartmentState = ApartmentState . MTA ; thread . Start ( ) ; <EOF>
var types = scope . ComponentRegistry . Registrations . SelectMany ( r = > r . Services . OfType < IServiceWithType > ( ) , ( r , s ) = > new { r , s } ) . Where ( rs = > rs . s . ServiceType . Implements < T > ( ) ) . Select ( rs = > rs . r . Activator . LimitType ) ; <EOF>
var originalPersons = m_originalList . ToList ( ) ; m_originalList . Clear ( ) ; foreach ( var modifiedPerson in m_modifiedList ) { var originalPerson = originalPersons . FirstOrDefault ( c = > c . ID == modifiedPerson . ID ) ; if ( originalPerson == null ) m_originalList . Add ( modifiedPerson ) ; else { m_originalList . Add ( originalPerson ) ; originalPerson . Document = modifiedPerson . Document ; originalPerson . Name = modifiedPerson . Name ; . . . } } <EOF>
Quantities = numbers . Select ( ( s , index ) = > new SelectListItem { Value = index . ToString ( ) , Text = s . ToString ( ) ) ; <EOF>
Path . GetFullPath ( fileName ) ; <EOF>
ReceiptTemplates / templates . xml <EOF>
bool isDelegateCalled = false ; var a = new A ( a = > { isDelegateCalled = true } ) ; Assert . True ( isDelegateCalled ) ; <EOF>
string myString = CODE_STRING ; int [ ] arrayInt = Regex . Split ( myString , CODE_STRING ) . Where ( s = > ! String . IsNullOrWhiteSpace ( s ) ) . Select ( Int32 . Parse ) . ToArray ( ) ; <EOF>
using System ; using Microsoft . SqlServer . Dts . Runtime ; namespace RunFromClientAppCS { class Program { static void Main ( string [ ] args ) { string pkgLocation ; Package pkg ; Application app ; DTSExecResult pkgResults ; pkgLocation = CODE_STRING + CODE_STRING ; app = new Application ( ) ; pkg = app . LoadPackage ( pkgLocation , null ) ; pkgResults = pkg . Execute ( ) ; Console . WriteLine ( pkgResults . ToString ( ) ) ; Console . ReadKey ( ) ; } } } <EOF>
ImageSurface OutputImage = new ImageSurface ( Format . Rgb24 , ( int ) RectangleToCropTo . Width , ( int ) RectangleToCropTo . Height ) ; using ( Cairo . Context cr = new Cairo . Context ( OutputImage ) ) { cr . SetSource ( originalImage , - RectangleToCropTo . X , - RectangleToCropTo . Y ) ; cr . Paint ( ) ; } <EOF>
using System ; using System . Linq ; using System . IO ; namespace FileToHex { class Program { static void Main ( string [ ] args ) { const int HEADER_SIZE = CODE_INTEGER ; byte [ ] bytesFile = new byte [ HEADER_SIZE ] ; using ( FileStream fs = File . OpenRead ( CODE_STRING ) ) { fs . Read ( bytesFile , CODE_INTEGER , HEADER_SIZE ) ; fs . Close ( ) ; } string hex = BitConverter . ToString ( bytesFile ) ; string [ ] header = hex . Split ( new Char [ ] { CODE_CHAR } ) . ToArray ( ) ; Console . WriteLine ( System . String . Join ( CODE_STRING , header ) ) ; Console . ReadLine ( ) ; } } } <EOF>
public Expression < Func < TEntity , bool > > And ( Expression < Func < TEntity , bool > > ex1 , Expression < Func < TEntity , bool > > ex2 ) { var x = Expression . Parameter ( typeof ( TEntity ) ) ; return Expression . Lambda < Func < TEntity , bool > > ( Expression . And ( Expression . Invoke ( ex1 , x ) , Expression . Invoke ( ex2 , x ) ) , x ) ; } <EOF>
bool ignoreEvents = false ; public Form1 ( ) { InitializeComponent ( ) ; } private void checkBox1_CheckedChanged ( object sender , EventArgs e ) { ignoreEvents = true ; checkBox2 . Checked = checkBox1 . Checked ; checkBox3 . Checked = checkBox1 . Checked ; ignoreEvents = false ; } private void checkBox2_CheckedChanged ( object sender , EventArgs e ) { if ( ignoreEvents ) return ; MessageBox . Show ( CODE_STRING ) ; } private void checkBox3_CheckedChanged ( object sender , EventArgs e ) { if ( ignoreEvents ) return ; MessageBox . Show ( CODE_STRING ) ; } <EOF>
[ DataMember ( Name = CODE_STRING ) ] public string Email { get ; set ; } <EOF>
void AddQuestion ( Question question ) ; Question [ ] NewQuestions ( DateTime fromDate ) ; <EOF>
public class Test { private int ColValue { get ; set ; } button_click ( ) { ColValue = Convert . ToInt ( dataset . tables [ CODE_STRING ] . rows [ CODE_INTEGER ] [ CODE_STRING ] . ToString ( ) ) ; } button_click2 ( ) { int y = ColValue ; } } <EOF>
public void BuildGrid ( ) { LayoutRoot . ShowGridLines = true ; int rowIndex = CODE_INTEGER ; foreach ( string s in _names ) { LayoutRoot . RowDefinitions . Add ( new RowDefinition ( ) ) ; var btn = new Button ( ) LayoutRoot . Children . Add ( btn ) ; Grid . SetRow ( btn , rowIndex ) ; rowIndex += CODE_INTEGER ; } } <EOF>
System . Diagnostics . Debugger . Break ( ) ; <EOF>
public interface IYourList < T > { T this [ int index ] { get ; set ; } } <EOF>
void OnApplicationStart ( ) { StaticKernelContainer . Kernel = new StandardKernel ( new YourInjectionModule ( ) ) ; } void AfterMEFHasDoneWhatItNeedsToDo ( ) { StaticKernelContainer . Kernel . Bind < ICarLogger > ( ) . To ( importer . CarType ) ; } <EOF>
System . Int32 x , y ; System . Int64 z ; System . Random rand = new System . Random ( DateTime . Now . Millisecond ) ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { x = rand . Next ( int . MinValue , int . MaxValue ) ; y = rand . Next ( int . MinValue , int . MaxValue ) ; z = ( ( Int64 ) x * y ) ; Console . WriteLine ( CODE_STRING , x , y , z ) ; } <EOF>
public const string YearOneByIndexPropertyName = CODE_STRING ; public int YearOneByIndex { get { return _yearOneByIndex ; } set { if ( _yearOneByIndex == value ) { return ; } _yearOneByIndex = value ; _yearOneByPercentage = CODE_INTEGER RaisePropertyChanged ( YearOneByIndexPropertyName ) ; RaisePropertyChanged ( YearOneByPercentagePropertyName ) ; } } public const string YearOneByPercentagePropertyName = CODE_STRING ; public int YearOneByPercentage { get { return _yearOneByPercentage ; } set { if ( _yearOneByPercentage == value ) { return ; } _yearOneByPercentage = value ; _yearOneByIndex = CODE_INTEGER ; RaisePropertyChanged ( YearOneByIndexPropertyName ) ; RaisePropertyChanged ( YearOneByPercentagePropertyName ) ; } } <EOF>
private void loginbutton_Click ( object sender , RoutedEventArgs e ) { usr = textBox1 . Text ; String pass = textBox2 . Password ; } <EOF>
var vals = Enum . GetValues ( Type . GetType ( CODE_STRING ) ) ; <EOF>
private void timer1_Tick ( object sender , EventArgs e ) { labelWarningMessage . Text = CODE_STRING ; labelWARNING . Visible = false ; } <EOF>
return Resoults . Where ( p = > p . CurrentID == ProperID . CurrentID ) . ToList ( ) ; <EOF>
int x = index % width ; int y = index / width ; <EOF>
MyReportViewer . Reset ( ) ; <EOF>
catch ( SqlException ex ) { for ( int i = CODE_INTEGER ; i < ex . Errors . Count ; i ++ ) { errorMessages . Append ( CODE_STRING + i + " " + CODE_STRING + ex . Errors [ i ] . Message + " " + CODE_STRING + ex . Errors [ i ] . LineNumber + " " + CODE_STRING + ex . Errors [ i ] . Source + " " + CODE_STRING + ex . Errors [ i ] . Procedure + " " ) ; } Console . WriteLine ( errorMessages . ToString ( ) ) ; } <EOF>
return ProductTerms . OrderBy ( t = > t . MinTermDuration ) . FirstOrDefault ( ) ; <EOF>
using ( var memoryStream = new MemoryStream ( ) ) using ( var writer = new StreamWriter ( memoryStream ) ) { writer . Write ( . . . ) ; } <EOF>
var filter = Builders < GridFSFileInfo > . Filter . Eq ( CODE_STRING , gridfsObjectID ) ; <EOF>
bool listUpdated = false ; private void listView1_SelectedIndexChanged ( object sender , EventArgs e ) { if ( ! listUpdated ) { this . BeginInvoke ( new MethodInvoker ( updateList ) ) ; listUpdated = true ; } } private void updateList ( ) { listUpdated = false ; } <EOF>
string path = CODE_STRING ; FileInfo fi = new FileInfo ( path ) ; string outFile = fi . DirectoryName + CODE_STRING ; <EOF>
foreach ( DataRow row in ds . Tables [ CODE_INTEGER ] . Rows ) { samplelist . Add ( row [ CODE_STRING ] . ToString ( ) ) ; } listbox1 . DataSource = samplelist ; listbox1 . DataBind ( ) ; <EOF>
ORDER BY CASE Category WHEN ' Pettycash ' THEN CODE_CHAR WHEN ' DailyExpense ' THEN CODE_CHAR WHEN ' Home Expense ' THEN CODE_CHAR WHEN ' Fair Expense ' THEN CODE_CHAR WHEN ' Cash Expense ' THEN CODE_CHAR ELSE CODE_CHAR END <EOF>
for ( int i = CODE_INTEGER ; i <= ( _eam . No_of_Vehicles - CODE_INTEGER ) ; i ++ ) { _parkingVehicle = new VehicleViewModel ( ) ; _parkingVehicle . DriverName = _eam . DriverNameList [ i ] . DriverName ; <EOF>
string protectionOptionsString = CODE_STRING ; myObj . Protection |= ( ProtectionOptions ) Enum . Parse ( typeof ( ProtectionOptions ) , protectionOptionsString ) ; <EOF>
IEnumerable < Entity > entities ; int rangeStartIndex = CODE_INTEGER ; int rangeLength = CODE_INTEGER ; do { entities = dataContext . Entities . Skip ( rangeStartIndex ) . Take ( rangeLength ) ; Parallel . ForEach ( entities , item = > { } ) ; using ( var tran = new TransactionScope ( ) ) { tran . Complete ( ) ; } rangeStartIndex += rangeLength ; } while ( entities . Any ( ) ) ; <EOF>
IF CODE_STRING == CODE_STRING ( copy command here ) <EOF>
using ( var proc = new Process ( ) ) { proc . StartInfo . FileName = Server . MapPath ( CODE_STRING ) ; proc . StartInfo . Arguments = String . Format ( CODE_STRING , commandFile ) ; proc . StartInfo . WorkingDirectory = savePath ; proc . Start ( ) ; proc . WaitForExit ( ) ; } <EOF>
for ( int i = CODE_INTEGER ; i < methodParameters . Length ; i ++ ) { var key = unMappedList . ElementAt ( i ) . Key ; var value = values [ key ] ; values . Remove ( key ) ; values . Add ( methodParameters . ElementAt ( i ) . Name , value ) ; } return true ; <EOF>
public static void emas ( string text ) { const string MatchEmailPattern = CODE_STRING + CODE_STRING + CODE_STRING + CODE_STRING ; Regex rx = new Regex ( MatchEmailPattern , RegexOptions . Compiled | RegexOptions . IgnoreCase ) ; MatchCollection matches = rx . Matches ( text ) ; int noOfMatches = matches . Count ; foreach ( Match match in matches ) { Console . WriteLine ( match . Value . ToString ( ) ) ; } } <EOF>
log4net . GlobalContext . Properties [ CODE_STRING ] = DBNull . Value ; <EOF>
Command Name | Short - Cut Key | Description -- -- -- -- -- -- -- -- -- -- -- - | -- -- -- -- -- -- -- | -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- - Window . CloseToolWindow | SHIFT + ESC | Closes the current tool window <EOF>
while ( true ) { try { FileInfo [ ] files = dir . GetFiles ( m_fileTypes ) ; Partitioner < FileInfo > partitioner = Partitioner . Create ( files , true ) ; Parallel . ForEach ( partitioner , f = > { try { XmlMsg msg = factory . getMessage ( messageType ) ; try { msg . loadFile ( f . FullName ) ; MsgQueue . Enqueue ( new Tuple < XmlMsg , FileInfo > ( msg , f ) ) ; } catch ( Exception e ) { handleMessageFailed ( f , e . ToString ( ) ) ; } } } ) ; while ( MsgQueue . Count > CODE_INTEGER ) { System . Threading . Thread . Sleep ( CODE_INTEGER ) ; } } } <EOF>
XmlSerializer ser = new XmlSerializer ( typeof ( Users ) ) ; var u = ( Users ) ser . Deserialize ( stream ) ; [ XmlRoot ( CODE_STRING ) ] public class Users { [ XmlElement ( CODE_STRING ) ] public User [ ] UserList { get ; set ; } } public class User { [ XmlElement ( CODE_STRING ) ] public string Name { get ; set ; } [ XmlArray ( CODE_STRING ) , XmlArrayItem ( CODE_STRING ) ] public Order [ ] OrderList { get ; set ; } } [ XmlRoot ( CODE_STRING ) ] public class Order { [ XmlElement ( CODE_STRING ) ] public string Number { get ; set ; } } <EOF>
Thread . CurrentThread . Priority = ThreadPriority . Lowest ; <EOF>
var variablename = CODE_STRING + i ; MethodInfo method = product . GetType ( ) . GetMethod ( variablename ) ; object result = method . Invoke ( product , new object [ ] { } ) ; <EOF>
Response . Redirect ( ) <EOF>
public class SomeTests : MarshalByRefObject { [ PartialTrustFact ] public void Partial_trust_test1 ( ) { } } [ PartialTrustFixture ] public class MoreTests : MarshalByRefObject { [ Fact ] public void Another_partial_trust_test ( ) { } } <EOF>
string t = CODE_STRING ; List < titles > tData = db . titles_data . Where ( o = > o . title . Contains ( CODE_STRING + t + CODE_STRING ) || o . title . StartsWith ( t + CODE_STRING ) || o . title . EndsWith ( CODE_STRING + t ) ) . ToList ( ) ; <EOF>
string ComputeFourDigitStringHash ( string filepath ) { string filename = System . IO . Path . GetFileNameWithoutExtension ( filepath ) ; int hash = filename . GetHashCode ( ) % CODE_INTEGER ; return hash . ToString ( CODE_STRING ) ; } <EOF>
var convertedURI = new Uri ( CODE_STRING + Application . StartupPath + CODE_STRING ) . AbsoluteUri ; axVLCPlugin21 . playlist . add ( convertedURI ) ; axVLCPlugin21 . playlist . play ( ) ; <EOF>
for ( int i = CODE_INTEGER ; i < itmnme . Length ; i ++ ) { var name = itmnme [ i ] ; var quantity = qntity [ i ] ; var price = price [ i ] ; } <EOF>
TextReader reader = new StringReader ( richTextBox1 . Text ) ; string [ ] strItems = null ; while ( reader . Peek ( ) != - CODE_INTEGER ) { string nextRow = reader . ReadLine ( ) ; if ( ! listView1 . Items . ContainsKey ( nextRow . GetHashCode ( ) . ToString ( ) ) ) { ListViewItem item = new ListViewItem ( ) ; item . Name = nextRow . GetHashCode ( ) . ToString ( ) ; strItems = nextRow . Split ( CODE_STRING . ToCharArray ( ) ) ; item . Text = strItems [ CODE_INTEGER ] . ToString ( ) ; item . SubItems . Add ( strItems [ CODE_INTEGER ] . ToString ( ) ) ; item . SubItems . Add ( strItems [ CODE_INTEGER ] . ToString ( ) ) ; item . SubItems . Add ( strItems [ CODE_INTEGER ] . ToString ( ) ) ; item . SubItems . Add ( strItems [ CODE_INTEGER ] . ToString ( ) ) ; listView1 . Items . Add ( item ) ; } } <EOF>
public static IEnumerable < Tuple < T , U > > CombineWith < T , U > ( this IEnumerable < T > first , IEnumerable < U > second ) { using ( var firstEnumerator = first . GetEnumerator ( ) ) using ( var secondEnumerator = second . GetEnumerator ( ) ) { bool hasFirst = true ; bool hasSecond = true ; while ( ( hasFirst && ( hasFirst = firstEnumerator . MoveNext ( ) ) ) | ( hasSecond && ( hasSecond = secondEnumerator . MoveNext ( ) ) ) ) { yield return Tuple . Create ( hasFirst ? firstEnumerator . Current : default ( T ) , hasSecond ? secondEnumerator . Current : default ( U ) ) ; } } } <EOF>
List < string > earnings = new List < string > ( ) { CODE_STRING , CODE_STRING , CODE_STRING } ; List < string > deductions = new List < string > ( ) { CODE_STRING , CODE_STRING , CODE_STRING } ; treeView1 . Nodes . Add ( CODE_STRING ) ; treeView1 . Nodes [ CODE_INTEGER ] . Nodes . Add ( CODE_STRING ) ; treeView1 . Nodes [ CODE_INTEGER ] . Nodes . Add ( CODE_STRING ) ; foreach ( string earning in earnings ) { treeView1 . Nodes [ CODE_INTEGER ] . Nodes [ CODE_INTEGER ] . Nodes . Add ( earning ) ; } foreach ( string deduction in deductions ) { treeView1 . Nodes [ CODE_INTEGER ] . Nodes [ CODE_INTEGER ] . Nodes . Add ( deduction ) ; } <EOF>
var uIdToRemove = mandatoryusers . GroupBy ( m = > m . Uid ) . Where ( g = > mandatory . Except ( g . Select ( s = > s . CertificateValue ) ) . Any ( ) ) . Select ( g = > g . Key ) . ToList ( ) ; mandatoryusers . RemoveAll ( x = > uidToRemove . Contains ( x . Uid ) ) ; <EOF>
ExeConfigurationFileMap map = new ExeConfigurationFileMap ( ) ; map . ExeConfigFilename = CODE_STRING ; Configuration config = ConfigurationManager . OpenMappedExeConfiguration ( map , ConfigurationUserLevel . None ) ; AppSettingsSection section = ( AppSettingsSection ) config . GetSection ( CODE_STRING ) ; <EOF>
var where = new List < Expression < Func < Person , bool > > > ( ) ; if ( ! string . IsNullOrWhitespace ( lastName ) ) where . Add ( p = > p . LastName == lastName ) ; if ( ! string . IsNullOrWhitespace ( firstName ) ) where . Add ( p = > p . FirstName == firstName ) ; var query = session . Query < Person > ( ) ; foreach ( var clause in where ) query = query . Where ( clause ) ; var results = query . ToList ( ) ; <EOF>
String . Format <EOF>
public void SetOperationDropDown ( ) { if ( CmbOperations . Items . Count == CODE_INTEGER ) { cmbOperations . SelectedItem = CODE_STRING ; cmbOperations . Items . Insert ( CODE_INTEGER , CODE_STRING ) ; cmbOperations . Items . Insert ( CODE_INTEGER , CODE_STRING ) ; cmbOperations . Items . Insert ( CODE_INTEGER , CODE_STRING ) ; cmbOperations . Items . Insert ( CODE_INTEGER , CODE_STRING ) ; cmbOperations . Items . Insert ( CODE_INTEGER , CODE_STRING ) ; cmbOperations . Items . Insert ( CODE_INTEGER , CODE_STRING ) ; } else { int ? cbSelectedValue = null ; if ( ! string . IsNullOrEmpty ( cmbOperations . SelectedValue ) ) cbSelectedValue = convert . toInt32 ( cmbOperations . SelectedValue ) ; } if ( cbSelectedValue != null ) cmbOperations . SelectedValue = cbSelectedValue . ToString ( ) ; } <EOF>
SelectQuery q = new SelectQuery ( CODE_STRING ) ; using ( ManagementObjectSearcher mos = new ManagementObjectSearcher ( q ) ) { foreach ( ManagementObject mo in mos . Get ( ) ) { Console . WriteLine ( CODE_STRING , mo . Properties [ CODE_STRING ] . Value . ToString ( ) , mo . Properties [ CODE_STRING ] . Value . ToString ( ) , mo . Properties [ CODE_STRING ] . Value . ToString ( ) ) ; } } <EOF>
this . BackColor = Color . Red ; this . Size = new Size ( CODE_INTEGER , CODE_INTEGER ) ; <EOF>
App . config <EOF>
item . GetValue ( obj , null ) ; <EOF>
private void SetText ( Control control , String text ) { control . Text = text ; } <EOF>
Vector2 Position ; Vector2 Speed ; Vector2 ThrustForce ; float Coefficient = CODE_REAL ; float PreviousDrag = CODE_REAL ; Vector2 AccelerationToApply = ThrustForce * DeltaTime + PreviousDrag * DeltaTime ; Vector2 NewSpeed = Speed + AccelerationToApply ; PreviousDrag = Coefficient * NewSpeed * NewSpeed ; Speed = NewSpeed ; <EOF>
e . Item . Visible = false <EOF>
public ActionResult SomeActionMethod ( FormCollection formCollection ) { foreach ( var key in formCollection . AllKeys ) { var value = formCollection [ key ] ; } var color = formCollection [ CODE_STRING ] ; } <EOF>
[ RegularExpression ( CODE_STRING , . . . . <EOF>
int dayNumber = ( ( int ) Calendar1 . SelectedDate . DayOfWeek + CODE_INTEGER ) % CODE_INTEGER ; DateTime monday = Calendar1 . SelectedDate . AddDays ( - dayNumber ) ; DateTime sunday = Calendar1 . SelectedDate . AddDays ( CODE_INTEGER - dayNumber ) ; Label3 . Text = string . Format ( CODE_STRING , monday . ToShortDateString ( ) , sunday . ToShortDateString ( ) ) ; <EOF>
Process proc = new Process ( ) ; proc . StartInfo . FileName = programPath ; proc . StartInfo . WorkingDirectory = Path . GetDirectoryName ( programPath ) ; proc . Start ( ) ; <EOF>
while ( true ) { Socket client = listener . AcceptSocket ( ) ; Console . WriteLine ( CODE_STRING ) ; var childSocketThread = new Thread ( ( ) = > { byte [ ] data = new byte [ CODE_INTEGER ] ; int size = client . Receive ( data ) ; Console . WriteLine ( CODE_STRING ) ; for ( int i = CODE_INTEGER ; i < size ; i ++ ) Console . Write ( Convert . ToChar ( data [ i ] ) ) ; Console . WriteLine ( ) ; client . Close ( ) ; } ) ; childSocketThread . Start ( ) ; } <EOF>
var pattern = CODE_STRING + String . Join ( CODE_STRING , words . Select ( w = > Regex . Escape ( w ) ) ) + CODE_STRING ; value = Regex . Replace ( value , pattern , CODE_STRING , RegexOptions . IgnoreCase ) ; <EOF>
list . Where ( o = > o . Id == CODE_INTEGER ) ; <EOF>
Stack < Matrix > matrixStack = new Stack < Matrix > ( ) ; . . . matrixStack . Push ( armMatrix ) ; . . . basicEffect . World = matrixStack . Peek ( ) ; foreach ( EffectPass pass in basicEffect . CurrentTechnique . Passes ) { pass . Apply ( ) ; graphics . GraphicsDevice . DrawPrimitives ( . . . ) ; } basicEffect . End ( ) ; . . . matrixStack . Pop ( ) ; <EOF>
var q = xml . XPathSelectElements ( CODE_STRING ) ; <EOF>
static void Main ( string [ ] args ) { var items = new [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; var list = items . Select ( i = > Foo ( i ) ) . ToList ( ) ; } static int Foo ( int i ) { return i ; } <EOF>
menuItems = dates . GroupBy ( x = > new DateTime ( x . Year , x . Month , CODE_INTEGER ) ) . Select ( x = > new { Date = x . Key , Count = x . Count ( ) } ) . OrderByDescending ( x = > x . Date ) . Select ( x = > new ArchiveMenuItem ( streamUrl , x . Date . Month , x . Date . Year , x . Count ) ) . ToList ( ) ; <EOF>
public string ToHtml ( string pView , ControllerContext context = null ) { if ( context == null ) context = ControllerContext ; using ( var sw = new StringWriter ( ) ) { var viewResult = ViewEngines . Engines . FindPartialView ( context , pView ) ; var viewContext = new ViewContext ( context , viewResult . View , ViewData , TempData , sw ) ; viewResult . View . Render ( viewContext , sw ) ; viewResult . ViewEngine . ReleaseView ( context , viewResult . View ) ; return sw . GetStringBuilder ( ) . ToString ( ) ; } } <EOF>
dgLatestPositions . DataSource = items ; DataGridTableStyle tableStyle = new DataGridTableStyle ( ) ; tableStyle . MappingName = items . GetType ( ) . Name ; DataGridTextBoxColumn tbcCoding = new DataGridTextBoxColumn ( ) ; tbcCoding . Width = CODE_INTEGER ; tbcCoding . MappingName = CODE_STRING ; tbcCoding . HeaderText = CODE_STRING ; tableStyle . GridColumnStyles . Add ( tbcCoding ) ; DataGridTextBoxColumn tbcAmount = new DataGridTextBoxColumn ( ) ; tbcAmount . Width = CODE_INTEGER ; tbcAmount . MappingName = CODE_STRING ; tbcAmount . HeaderText = CODE_STRING ; tableStyle . GridColumnStyles . Add ( tbcAmount ) ; dgLatestPositions . TableStyles . Clear ( ) ; dgLatestPositions . TableStyles . Add ( tableStyle ) ; <EOF>
DispatcherTimer timer = new DispatcherTimer ( ) ; timer . Tick += delegate ( object s , EventArgs args ) { TimeSpan time = ( DateTime . Now - App . StartTime ) ; this . timenow . Text = string . Format ( CODE_STRING , time . Hours , time . Minutes , time . Seconds ) ; } ; timer . Interval = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; timer . Start ( ) ; <EOF>
IRandomAccessStreamReference thumbnail = RandomAccessStreamReference . CreateFromUri ( new Uri ( remoteUri ) ) ; IAsyncOperation < StorageFile > file1 = StorageFile . CreateStreamedFileFromUriAsync ( CODE_STRING , new Uri ( remoteUri ) , thumbnail ) ; <EOF>
[ { ' Name ' : ' Alice ' , ' Rank ' : CODE_INTEGER , ' RankName ' : ' < span class = CODE_STRING > CODE_INTEGER < / span > Alice ' , . . . ( other fields ) } , { ' Name ' : ' Bob ' , ' Rank ' : CODE_INTEGER , ' RankName ' : ' < span class = CODE_STRING > CODE_INTEGER < / span > Bob ' , . . . ( other fields ) } , { ' Name ' : ' Eve ' , ' Rank ' : CODE_INTEGER , ' RankName ' : ' < span class = CODE_STRING > CODE_INTEGER < / span > Eve ' , . . . ( other fields ) } . . . ( Multiple Alice / Bob / Eve records ) ] <EOF>
private void CompanyCheckboxClicked ( object sender , RoutedEventArgs e ) { CheckBox checkBox = sender as CheckBox ; Row row = checkBox . DataContext as Row ; . . . } <EOF>
Attachment attachment = new Attachment ( attachmentPath ) ; msg . Attachments . Add ( attachment ) ; <EOF>
private void LLST_Hold ( object sender , System . Windows . Input . GestureEventArgs e ) { if ( LLST . SelectedItem != null ) { ItemType item = LLST . SelectedItem as ItemType ; } } <EOF>
using ( Transaction tr = db . TransactionManager . StartTransaction ( ) ) { DBDictionary layoutDic = tr . GetObject ( db . LayoutDictionaryId , OpenMode . ForRead , false ) as DBDictionary ; foreach ( DBDictionaryEntry entry in layoutDic ) { ObjectId layoutId = entry . Value ; Layout layout = tr . GetObject ( layoutId , OpenMode . ForRead ) as Layout ; ed . WriteMessage ( String . Format ( CODE_STRING , Environment . NewLine , layout . LayoutName ) ) ; } tr . Commit ( ) ; } <EOF>
windows explorer tree view C # <EOF>
originalXml . Save ( Server . MapPath ( CODE_STRING ) ) ; <EOF>
string bstr = CODE_STRING ; long v = CODE_INTEGER ; for ( int i = bstr . Length - CODE_INTEGER ; i >= CODE_INTEGER ; i -- ) v = ( v << CODE_INTEGER ) + ( bstr [ i ] - CODE_CHAR ) ; double d = BitConverter . ToDouble ( BitConverter . GetBytes ( v ) , CODE_INTEGER ) ; <EOF>
if ( Session [ CODE_STRING ] == null ) { counter ++ ; Session [ CODE_STRING ] = true ; } <EOF>
var reportViewer = New ReportViewer ( ) ; var reportDataSource = New ReportDataSource ( CODE_STRING , MyDogs ) ; reportViewer . LocalReport . DataSources . Add ( reportDataSource ) ; <EOF>
var content = File . ReadAllBytes ( " c : \ yourpath " ) ; var base64Content = Convert . ToBase64String ( content ) ; var base64Array = System . Text . Encoding . ASCII . GetBytes ( base64Content ) ; <EOF>
[ DllImport ( CODE_STRING ) ] public static extern int GetKeyboardState ( byte [ ] keystate ) ; private void Form1_KeyDown ( object sender , KeyEventArgs e ) { byte [ ] keys = new byte [ CODE_INTEGER ] ; GetKeyboardState ( keys ) ; if ( ( keys [ ( int ) Keys . Up ] & keys [ ( int ) Keys . Right ] & CODE_INTEGER ) == CODE_INTEGER ) { Console . WriteLine ( CODE_STRING ) ; } } <EOF>
dynamic sender ; dynamic recipient ; var messages = db . Messages . All ( db . Messages . To_Id == currentUser . Id || db . Messages . From_Id == currentUser . Id ) . Join ( db . Users . As ( CODE_STRING ) , out sender ) . On ( sender . Id == db . Messages . From_Id ) . Join ( db . Users . As ( CODE_STRING ) , out recipient ) . On ( recipient . Id == db . Messages . To_Id ) . With ( sender ) . With ( recipient ) ; return messages ; <EOF>
ListViewItem :: BeginEdit ( ) ; <EOF>
[ System . ComponentModel . DefaultValue ( CODE_INTEGER ) ] public int EmpId { get ; set ; } <EOF>
# IF DEBUG . . . # ENDIF <EOF>
string serverName = CODE_STRING ; string port = CODE_STRING ; var key = Registry . CurrentUser . OpenSubKey ( CODE_STRING , true ) ; key . SetValue ( CODE_STRING , serverName + CODE_STRING + port ) ; key . SetValue ( CODE_STRING , CODE_INTEGER ) ; <EOF>
var jsonResponse = JObject . Parse ( await response . Content . ReadAsStringAsync ( ) ) ; return Json ( jsonResponse ) ; <EOF>
- ( UITableViewCell * ) tableView : ( UITableView * ) tableView cellForRowAtIndexPath : ( NSIndexPath * ) indexPath { UITableViewCell * cell = [ super tableView : tableView cellForRowAtIndexPath : indexPath ] ; if ( indexPath . row == CODE_INTEGER || indexPath . row == CODE_INTEGER ) { cell . clipsToBounds = YES ; } return cell ; } <EOF>
string SubString = MyString . Substring ( MyString . Length - CODE_INTEGER ) ; <EOF>
System . Diagnostics . Process . Start ( completeFilename ) ; <EOF>
rs . RunspaceConfiguration . Cmdlets . Append ( New CmdletConfigurationEntry ( CODE_STRING , GetType ( TestFuncitonCmdlet ) , Nothing ) ) <EOF>
XDocument xml = XDocument . Load ( CODE_STRING ) ; var firstElement = xml . Descendants ( ) . Where ( x = > x . Name == CODE_STRING && x . Attribute ( CODE_STRING ) . Value == CODE_STRING ) . FirstOrDefault ( ) ; var lastElement = xml . Descendants ( ) . Where ( x = > x . Name == CODE_STRING && x . Attribute ( CODE_STRING ) . Value == CODE_STRING ) . FirstOrDefault ( ) ; var response = firstElement . NodesAfterSelf ( ) . Where ( x = > lastElement . NodesBeforeSelf ( ) . Contains ( x ) ) ; <EOF>
Process . Exited <EOF>
Table < TEntity > . InsertOnSubmit <EOF>
Stream responseStream = null ; try { WebRequest request = WebRequest . Create ( CODE_STRING ) ; WebResponse webResponse = request . GetResponse ( ) ; responseStream = webResponse . GetResponseStream ( ) ; } catch ( Exception e ) { return null ; } if ( responseStream != null ) { return new XPathDocument ( responseStream ) ; } <EOF>
codeSheet . Cells [ CODE_STRING ] . Style . Numberformat . Format = CODE_STRING ; <EOF>
var format = CODE_STRING ; string data = . . . ; foreach ( va s in data ) { { string [ ] words = data [ i ] . Split ( CODE_CHAR ) ; Console . WriteLine ( format , words [ CODE_INTEGER ] , words [ CODE_INTEGER ] , words [ CODE_INTEGER ] ) ; } <EOF>
ShareStatusTask sst = new ShareStatusTask ( ) ; sst . Status = CODE_STRING ; sst . Show ( ) ; <EOF>
int i ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { } i = CODE_INTEGER ; <EOF>
protected void GridView1_RowDataBound ( object sender , GridViewRowEventArgs e ) { if ( e . Row . RowType == DataControlRowType . DataRow ) { e . Row . Cells [ CODE_INTEGER ] . Width = CODE_INTEGER ; e . Row . Cells [ CODE_INTEGER ] . Width = CODE_INTEGER ; } } <EOF>
bool mSeenCtrlM ; protected override bool ProcessCmdKey ( ref Message msg , Keys keyData ) { if ( keyData == ( Keys . Control | Keys . M ) ) { mSeenCtrlM = ! mSeenCtrlM ; if ( ! mSeenCtrlM ) { MessageBox . Show ( CODE_STRING ) ; } return true ; } mSeenCtrlM = false ; return base . ProcessCmdKey ( ref msg , keyData ) ; } <EOF>
Dictionary < TypeOfKey , SomeObject > <EOF>
DateTime . Now . ToString ( CODE_STRING ) . ToLower ( ) ; <EOF>
public interface ISomeStaticInterface { int IntProperty { get ; } string StringProperty { get ; } } . . . var myVar = new SomeDynamicObjectImplementer ( ) . ActLike < ISomeStaticInterface > ( ) ; method ( myVar . IntProperty , myVar . StringProperty ) ; <EOF>
using StackExchange . Profiling . Helpers . Dapper ; <EOF>
public abstract class Entity { private static Dictionary < Type , Action > Subscribers = new Dictionary < Type , Action > ( ) ; internal virtual void OnSaved ( ) { OnSaved ( GetType ( ) ) ; } private OnSaved ( Type type ) { Action subscribed ; Subscribers . TryGetValue ( type , out subscribed ) ; if ( subscribed != null ) subscribed ( ) ; } public Subscribe ( Type type , Action action ) { Action subscribed ; Subscribers . TryGetValue ( type , out subscribed ) ; Subscribers [ type ] = subscribed + action ; } public Unsubscribe ( Type type , Action action ) { Action subscribed ; Subscribers . TryGetValue ( type , out subscribed ) ; Subscribers [ type ] = subscribed - action ; } } <EOF>
for ( int throw = CODE_INTEGER ; throw <= CODE_INTEGER ; throw ++ ) { if ( x . Next ( CODE_INTEGER , CODE_INTEGER ) == CODE_INTEGER ) Dice1 [ x . Next ( CODE_INTEGER , CODE_INTEGER ) ] ++ ; else Dice2 [ x . Next ( CODE_INTEGER , CODE_INTEGER ) ] ++ ; } <EOF>
cmsSigner . SignedAttributes . Add ( new Pkcs9SigningTime ( ) ) ; <EOF>
var jsData = @Html . Raw ( Json . Encode ( Model . MyCollection ) ) ; <EOF>
String strName = txtName . Text . Trim ( ) ; String strEmail = txtEmail . Text ; Boolean blnErrors = false ; if ( string . IsNullOrWhiteSpace ( sstrName ) ) { string script = CODE_STRING ; ScriptManager . RegisterStartupScript ( this , GetType ( ) , CODE_STRING , script , true ) ; txtName . Focus ( ) ; return ; } <EOF>
String Input = CODE_STRING ; String Output = Server . HtmlDecode ( Input ) ; <EOF>
Task t1 = null , t2 = null ; while ( ! StartServer . HasExited ) { if ( t1 == null || t1 . IsCompleted ) t1 = Task . Run ( ( ) = > Console . WriteLine ( StartServer . StandardOutput . ReadLine ( ) ) ) ; if ( t2 == null || t2 . IsCompleted ) t2 = Task . Run ( ( ) = > StartServer . StandardInput . WriteLine ( Console . ReadLine ( ) ) ) ; Task . WaitAny ( new [ ] { t1 , t2 } ) ; } <EOF>
int result = Int32 . Parse ( str . Replace ( CODE_STRING , String . Empty ) ) ; <EOF>
protected void readfile_Click ( object sender , EventArgs e ) { DataTable table = new DataTable ( ) ; table . Columns . Add ( CODE_STRING ) ; table . Columns . Add ( CODE_STRING ) ; table . Columns . Add ( CODE_STRING ) ; table . Columns . Add ( CODE_STRING ) ; table . Columns . Add ( CODE_STRING ) ; table . Columns . Add ( CODE_STRING ) ; using ( StreamReader sr = new StreamReader ( CODE_STRING ) ) { while ( ! sr . EndOfStream ) { string [ ] parts = sr . ReadLine ( ) . Split ( CODE_CHAR ) ; table . Rows . Add ( parts [ CODE_INTEGER ] , parts [ CODE_INTEGER ] , parts [ CODE_INTEGER ] , parts [ CODE_INTEGER ] , parts [ CODE_INTEGER ] , parts [ CODE_INTEGER ] ) ; } } MyGridView . DataSource = table ; MyGridView . DataBind ( ) ; } <EOF>
var a = ( from b in xCryptoDB . GetTable < AccountsTable > ( ) select b . Extra ) . OrderBy ( e = > e ) var a = ( from b in xCryptoDB . GetTable < AccountsTable > ( ) select b . Extra ) . OrderByDescending ( e = > e ) <EOF>
string str = CODE_STRING ; string remove = Regex . Replace ( str , CODE_STRING , CODE_STRING ) ; string result = Regex . Replace ( remove , CODE_STRING , CODE_STRING ) ; Console . WriteLine ( result ) ; Console . ReadLine ( ) ; <EOF>
ID Date / Time UTC Date / Time Local ( would be computed ) A CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T23 : CODE_INTEGER Z CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T00 : CODE_INTEGER ( BST ) B CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T00 : CODE_INTEGER Z CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T01 : CODE_INTEGER ( BST ) C CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T00 : CODE_INTEGER Z CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T01 : CODE_INTEGER ( BST ) D CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T01 : CODE_INTEGER Z CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T01 : CODE_INTEGER ( GMT ) E CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T01 : CODE_INTEGER Z CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T01 : CODE_INTEGER ( GMT ) F CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T02 : CODE_INTEGER Z CODE_INTEGER - CODE_INTEGER - CODE_INTEGER T02 : CODE_INTEGER ( GMT ) <EOF>
this . Dispatcher . BeginInvoke ( new Action ( ( ) = > ProgressDialog . ShowDialog ( ) ) ) ; <EOF>
Process . Start ( CODE_STRING , " / c echo \ " bla bla \ " iperf - c CODE_INTEGER . . . . . . . . " ) ; <EOF>
var s = CODE_STRING ; var result = new List < byte > ( ) ; result . Add ( CODE_INTEGER ) ; foreach ( char c in s ) { int val = ( int ) ( c - CODE_CHAR ) ; for ( int i = CODE_INTEGER ; i < result . Count ; i ++ ) { int digit = result [ i ] * CODE_INTEGER + val ; result [ i ] = ( byte ) ( digit & CODE_INTEGER ) ; val = digit > > CODE_INTEGER ; } if ( val != CODE_INTEGER ) result . Add ( ( byte ) val ) ; } var hex = CODE_STRING ; foreach ( byte b in result ) hex = CODE_STRING [ b ] + hex ; <EOF>
for ( int i = CODE_INTEGER ; i < dataTable . Rows . Count ; i ++ ) { DataRow dr = dataTable . Rows [ i ] ; string a = dr [ CODE_INTEGER ] . ToString ( ) ; } <EOF>
void dataGridView1_EditingControlShowing ( object sender , DataGridViewEditingControlShowingEventArgs e ) { if ( e . Control is ComboBox ) { ComboBox cmb = e . Control as ComboBox ; } } <EOF>
Assert . AreEqual ( user1 . UserName , user2 . UserName , true , CultureInfo . CurrentCulture ) ; <EOF>
MyDatabaseService . AspnetDB . SynchronousReturn ( context = > new FSharpMap < string , FSharpMap < string , string > > ( context . aspnet_UsersValues . GroupBy ( databaseValue = > databaseValue . UserName ) . Select ( group = > new Tuple < string , FSharpMap < string , string > > ( group . Key , new FSharpMap < string , string > ( group . Select ( keyValuePair = > new Tuple < string , string > ( keyValuePair . Key , keyValuePair . Value ) ) ) ) ) ) ) <EOF>
public class XmlSerializerWrapper : IXmlSerializerWrapper { private XmlSerializer _serializer ; } <EOF>
int id = CODE_INTEGER ; XDocument xdoc = XDocument . Load ( filepath ) ; var student = xdoc . Descendants ( CODE_STRING ) . Where ( s = > ( int ) s . Element ( CODE_STRING ) == id ) . SingleOrDefault ( ) ; if ( student != null ) { student . Element ( CODE_STRING ) . Value = TextBox_firstname . Text ; student . Element ( CODE_STRING ) . Value = TextBox_lastname . Text ; student . Element ( CODE_STRING ) . Value = TextBox_dob . Text ; student . Element ( CODE_STRING ) . Value = TextBox_class . Text ; } xdoc . Save ( filepath ) ; <EOF>
command . CommandType = CommandType . StoredProcedure ; <EOF>
System . Web . HttpUtility . JavaScriptStringEncode ( CODE_STRING , true ) ; == CODE_STRING <EOF>
new BitmapImage ( new Uri ( CODE_STRING + i . ToString ( ) + CODE_STRING , UriKind . Absolute ) ) ) ; <EOF>
^ ( https ? : <EOF>
var logFile = ( string ) null ; using ( var fileStream = new FileStream ( logPath , FileMode . Open , FileAccess . Read , FileShare . ReadWrite ) ) { using ( var reader = new StreamReader ( fileStream ) ) { logFile = reader . ReadToEnd ( ) ; } } <EOF>
while ( findIndex == - CODE_INTEGER ) { userpass = sr . ReadLine ( ) ; if ( userpass == null ) break ; findIndex = userpass . IndexOf ( txtUserName . Text + CODE_STRING + txtPassword . Password ) ; } <EOF>
XmlNode n = xdoc . SelectSingleNode ( CODE_STRING ) ; Console . WriteLine ( n . OuterXml ) ; <EOF>
#region add workbook from template file Excel . Application f ; f = ( Excel . Application ) Marshal . GetActiveObject ( CODE_STRING ) ; f . visible = true ; f . Workbooks . Add ( CODE_STRING ) ; \ if there are any questions please comment , I will do my best to explain my own answer #endregion <EOF>
if ( iconButton != null && icons . Count > CODE_INTEGER ) { int randomNumber = random . Next ( CODE_INTEGER , icons . Count - CODE_INTEGER ) ; iconButton . Text = icons [ randomNumber ] ; icons . RemoveAt ( randomNumber ) } <EOF>
public class MyComponent { private AsyncOperation _asyncOperation ; /// Constructor of my component: MyComponent ( ) { _asyncOperation = AsyncOperationManager . CreateOperation ( null ) ; } /// <summary> /// Raises an event, ensuring the correct context /// </summary> /// <param name="eventDelegate"></param> /// <param name="args"></param> protected void RaiseEvent ( Delegate eventDelegate , object [ ] args ) { if ( eventDelegate != null ) { _asyncOperation . Post ( new System . Threading . SendOrPostCallback ( delegate ( object argobj ) { eventDelegate . DynamicInvoke ( argobj as object [ ] ) ; } ) , args ) ; } } } <EOF>
protected void SubmitBtn_Click ( object sender , EventArgs e ) { foreach ( ListItem li in CheckBoxList1 . items ) { if ( li . Selected ) { } } } <EOF>
protected override System . Net . WebRequest GetWebRequest ( Uri uri ) { System . Net . HttpWebRequest webRequest = ( System . Net . HttpWebRequest ) base . GetWebRequest ( uri ) ; webRequest . KeepAlive = false ; return webRequest ; } <EOF>
OdbcCommand com = new OdbcCommand ( CODE_STRING , con ) ; byte [ ] stream = File . ReadAllBytes ( @textBoxBrowse . Text ) ; MessageBox . Show ( stream . ToString ( ) ) ; if ( stream . Length > CODE_INTEGER ) { com . Parameters . AddWithValue ( CODE_STRING , stream ) ; con . Open ( ) ; int result = com . ExecuteNonQuery ( ) ; if ( result > CODE_INTEGER ) MessageBox . Show ( CODE_STRING ) ; con . Close ( ) ; } } <EOF>
this . Form . DefaultButton = Login1 . FindControl ( CODE_STRING ) . UniqueID ; <EOF>
List < Account > MyMethod ( List < int > accounts ) { return dc . Accounts . Where ( x = > accounts . Contains ( x . AccountID ) ) . ToList ( ) ; } <EOF>
var qry = from row in dataNode . Elements ( CODE_STRING ) select row . Elements ( CODE_STRING ) . ElementAt ( CODE_INTEGER ) ; <EOF>
public class ProtonMySQLException : MySQLException { public int protonNumber = CODE_INTEGER ; public string protonSpecialText = string . Empty ; } <EOF>
int received = nws . Read ( . . . ) ; a . Write ( fileBytes , CODE_INTEGER , received ) ; <EOF>
theFile . Seek ( CODE_INTEGER , SeekOrigin . End ) <EOF>
float [ , ] [ ] Tile = new float [ CODE_INTEGER , CODE_INTEGER ] [ ] ; Tile [ CODE_INTEGER , CODE_INTEGER ] = new float [ CODE_INTEGER ] { CODE_INTEGER , CODE_INTEGER } ; <EOF>
string oldString = ds . Tables [ CODE_STRING ] . Rows [ i ] [ j ] . ToString ( ) ; string convertedString = oldString . Replace ( CODE_STRING , CODE_STRING ) ; double convertedDouble = Convert . ToDouble ( convertedString ) ; <EOF>
using System ; using System . Threading ; public static class Program { public static void Main ( ) { Timer t = new Timer ( TimerCallback , null , CODE_INTEGER , CODE_INTEGER ) ; Console . ReadLine ( ) ; } private static void TimerCallback ( Object o ) { Console . WriteLine ( CODE_STRING + DateTime . Now ) ; GC . Collect ( ) ; } } <EOF>
Myclass myVariable ; <EOF>
var rowCompare = String . Format ( CODE_STRING , DateTime . MaxValue . Ticks - DateTime . UtcNow . Ticks ) ; var items = new [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ; var filters = items . Select ( key = > TableQuery . GenerateFilterCondition ( CODE_STRING , QueryComparisons . Equal , key ) ) . ToArray ( ) ; var combine = filters . Length > CODE_INTEGER ? filters [ CODE_INTEGER ] : null ; for ( var k = CODE_INTEGER ; k < filters . Length ; k ++ ) combine = TableQuery . CombineFilters ( combine , TableOperators . Or , filters [ k ] ) ; var final = TableQuery . GenerateFilterCondition ( CODE_STRING , QueryComparisons . GreaterThan , rowCompare ) ; if ( ! string . IsNullOrEmpty ( combine ) ) final = TableQuery . CombineFilters ( final , TableOperators . And , combine ) ; var query = new TableQuery < EntityReport > ( ) . Where ( final ) ; var client = CloudStorageAccount . DevelopmentStorageAccount . CreateCloudTableClient ( ) ; var table = client . GetTableReference ( CODE_STRING ) ; var result = table . ExecuteQuery ( query ) ; <EOF>
var logDatabaseTableAdapter_queryselect = new SQLiteDataAdapter ( ( CODE_STRING ) , CODE_STRING ) ; logDatabaseTableAdapter_queryselect . Fill ( logDatabaseDataSet_query . LogDatabase ) ; <EOF>
if ( fecVuel == fecha && ( ( hora >= rightnow - CODE_INTEGER ) && ( hora <= rightnow + CODE_INTEGER ) ) ) <EOF>
var result = dbContext . Prices . GroupBy ( p = > new { p . ItemName , p . ItemTypeName ) . Select ( g = > new Item { ItemName = g . Key . ItemName , ItemTypeName = g . Key . ItemTypeName , Prices = g . Select ( p = > new Price { Price = p . Price } ) . ToList ( ) } ) . Skip ( x ) . Take ( y ) . ToList ( ) ; <EOF>
var query = from mt in db . MasterTable let detailResult = db . UfnGetDetail ( mt . x , mt . y , z ) . SingleOrDefault ( ) . . . <EOF>
class MyView { public void CreateControl ( string name ) { Control picture = new UserControl1 ( ) ; picture . Visible = true ; picture . Name = name ; picture . Location = new Point ( CODE_INTEGER , CODE_INTEGER ) ; picture . Show ( ) ; flowLayoutPanel1 . Controls . Add ( picture ) ; this . controls . Add ( name , picture ) ; } public void SetMsg ( string name , msg ) { ( ( UserControl1 ) this . controls [ name ] ) . SetMSG ( msg ) ; } private Dictionary < string , Control > controls = new Dictionary < string , Control > ( ) ; } <EOF>
Embedded Resource <EOF>
ConsoleKeyInfo keyInfo = Console . ReadKey ( ) ; if ( keyInfo . Key == ConsoleKey . UpArrow ) { } else if ( keyInfo . Key == ConsoleKey . DownArrow ) { } . . . <EOF>
/ BigView / View1 <EOF>
private void _backgroundWorkerLoadImage_DoWork ( object sender , DoWorkEventArgs e ) { BitmapImage img = new BitmapImage ( ) ; img . BeginInit ( ) ; img . UriSource = imageUri ; img . EndInit ( ) ; img . Freeze ( ) ; e . Result = img ; } void _backgroundWorkerLoadImage_RunWorkerCompleted ( object sender , RunWorkerCompletedEventArgs e ) { var img = e . Result as ImageSource ; imageControl . Source = img ; } <EOF>
void Main ( ) { List < MyObject > TheListOfMyObjects = new List < MyObject > ( ) ; var dt = new DataTable ( ) ; dt . Columns . Add ( CODE_STRING , typeof ( int ) ) ; dt . Columns . Add ( CODE_STRING , typeof ( string ) ) ; foreach ( var TheObject in TheListOfMyObjects ) { dt . Rows . Add ( TheObject . Prop1 , TheObject . Prop2 ) ; } InsertWithBulk ( dt , CODE_STRING , CODE_STRING ) ; } private void InsertWithBulk ( DataTable dt , string connectionString , string tableName ) { using ( SqlConnection destinationConnection = new SqlConnection ( connectionString ) ) { destinationConnection . Open ( ) ; using ( SqlBulkCopy bulkCopy = new SqlBulkCopy ( destinationConnection ) ) { bulkCopy . DestinationTableName = tableName ; try { bulkCopy . WriteToServer ( dt ) ; } catch ( Exception ex ) { } } } } <EOF>
static MyContext ( ) { Database . SetInitializer ( new MigrateDatabaseToLatestVersion < MyContext , Data . Migrations . Configuration > ( ) ) ; } <EOF>
FtpWebResponse response = ( FtpWebResponse ) requestFileUpload . GetResponse ( ) ; Stream myFTPStream = response . GetResponseStream ( ) ; response . Close ( ) ; <EOF>
public void Foo ( ) { var storyBoard = this . Resources [ CODE_STRING ] as Storyboard ; var rotateImageAnimation = ( DoubleAnimation ) storyBoard . Children . FirstOrDefault ( ) ; } <EOF>
var cmd = new SqlCommand ( con ) { CommandType = CommandType . StoredProcedure , CommandText = CODE_STRING } ; cmd . Parameters . Add ( CODE_STRING , SqlDbType . VarChar ) ; . . . textBox1 . Text = CODE_STRING ; for ( var i = CODE_INTEGER ; i < dataGridView1 . Rows . Count ; i ++ ) { cmd . Parameters [ CODE_STRING ] . Value = textBox1 . Text ; cmd . Parameters [ CODE_STRING ] . Value = dataGridView1 . Rows [ i ] . Cells [ CODE_INTEGER ] . Value ; cmd . ExecuteNonQuery ( ) ; } MessageBox . Show ( CODE_STRING ) ; <EOF>
Properties . Settings . Default . MySetting = myArrayList ; <EOF>
yourButton . TouchUpInside += ( object sender , EventArgs e ) = > { YourControllerr yourController = new YourController ( ) ; yourController . ModalPresentationStyle = UIModalPresentationStyle . FormSheet ; this . PresentViewController ( yourController , true , null ) ; } ; <EOF>
grid . Column ( columnName : CODE_STRING , format : ( item ) = > Html . ActionLink ( ( ( string ) item . Date ) , CODE_STRING , new { id = item . id } ) ) , <EOF>
double _avg1 = tmpEMP . Select ( x = > Convert . ToInt32 ( x . ElementAt ( i ) . Rating ) ) . Average ( ) ; <EOF>
var list = stockItems . Select ( item = > item . StockID ) . ToList ( ) ; <EOF>
void BTN_Click ( object sender , EventArgs e ) { Button b = sender as Button ; if ( b != null ) { } } <EOF>
public List < string > GetAllStringsStartingWith ( char startsWith , List < string > allWords ) { List < string > letterSpecificWords = allWords . FindAll ( word = > word . ToLower ( ) [ CODE_INTEGER ] . Equals ( startsWith ) ) ; return letterSpecificWords ; } <EOF>
Server = . ; Initial Catalog = DATABASE_NAME ; Integrated Security = False ; User Id = sa ; Password = ; <EOF>
public PageOf < TEntity > GetPageOfEntity < TEntity > ( int pageNumber , int pageSize ) where TEntity : Entity { Type entityType = typeof ( TEntity ) ; . . . } <EOF>
public static IEnumerable < object [ ] > Numbers { get { List < object [ ] > testCases = new List < object [ ] > ( ) ; Random random = new Random ( ) ; testCases . AddRange ( ( from x in new [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } select new object [ ] { x } ) . OrderBy ( x = > random . Next ( ) ) ) ; return testCases ; } } [ TestCaseSource ( CODE_STRING ) ] public void CreateApplication ( int number ) { string company = DateTime . Now . ToString ( CODE_STRING ) + ( CODE_STRING ) + number . ToString ( ) ; } <EOF>
prog . StartInfo . WorkingDirectory = . . . <EOF>
pin to start <EOF>
var items = new [ ] { new { F1 = CODE_STRING , F2 = CODE_STRING , S = CODE_STRING , V = CODE_INTEGER } , new { F1 = CODE_STRING , F2 = CODE_STRING , S = CODE_STRING , V = CODE_INTEGER } , new { F1 = CODE_STRING , F2 = CODE_STRING , S = CODE_STRING , V = CODE_INTEGER } , new { F1 = CODE_STRING , F2 = CODE_STRING , S = CODE_STRING , V = CODE_INTEGER } , new { F1 = CODE_STRING , F2 = CODE_STRING , S = CODE_STRING , V = CODE_INTEGER } , } ; var f2s = items . Select ( i = > i . F2 ) . Distinct ( ) ; var table = from i in items group i by new { i . F1 , i . S } into g select new { g . Key , V = from f in f2s join x in g on f equals x . F2 into ps from p in ps . DefaultIfEmpty ( ) select new { F = f , V = p != null ? p . V : CODE_INTEGER } into w group w by w . F into h select new { h . Key , V = h . Sum ( c = > c . V ) } } ; <EOF>
Add > New File > Empty Class <EOF>
var smtp = new System . Net . Mail . SmtpClient ( ) ; { MailMessage mail = new MailMessage ( ) ; mail . From = new MailAddress ( sFromEmail ) ; string sFrom = mail . From . ToString ( ) ; mail . Subject = sSubject ; mail . Body = sBody ; mail . IsBodyHtml = true ; Attachment sMailAttachment ; sMailAttachment = new Attachment ( CODE_STRING ) ; mail . Attachments . Add ( sMailAttachment ) ; smtp . Host = CODE_STRING smtp . Port = CODE_STRING smtp . DeliveryMethod = System . Net . Mail . SmtpDeliveryMethod . Network ; smtp . Credentials = new NetworkCredential ( sSMTPUserName , sSMTPPassword ) ; smtp . Timeout = CODE_INTEGER ; smtp . Send ( mail ) ; } <EOF>
& sap - user = * * * * & sap - password = * * * <EOF>
DateTime . Now . ToShortDateString ( ) ; <EOF>
this . textBox1 . Value = CODE_STRING ; <EOF>
public static String GetIP ( ) { String ip = HttpContext . Current . Request . ServerVariables [ CODE_STRING ] ; if ( string . IsNullOrEmpty ( ip ) ) { ip = HttpContext . Current . Request . ServerVariables [ CODE_STRING ] ; } return ip ; } <EOF>
( futureDate - DateTime . Today ) . TotalDays / CODE_INTEGER <EOF>
this . txtInvestor . DataBindings . Add ( CODE_STRING , this , CODE_STRING , false , DataSourceUpdateMode . OnPropertyChanged ) ; <EOF>
var items = listOfTest . SelectMany ( lt = > lt . myInnerObject ) . ToList ( ) ; <EOF>
Image1 . ImageUrl = CODE_STRING + DateTime . Now . Ticks . ToString ( ) ; <EOF>
WebRequest request = WebRequest . Create ( CODE_STRING ) ; var response = request . GetResponse ( ) ; <EOF>
URI : http : <EOF>
using System . Runtime . InteropServices ; . . . [ StructLayout ( LayoutKind . Sequential , CharSet = CharSet . Ansi ) ] public struct Example { [ MarshalAs ( UnmanagedType . ByValTStr , SizeConst = CODE_INTEGER ) ] public string name ; [ MarshalAs ( UnmanagedType . ByValArray , SizeConst = CODE_INTEGER ) ] int [ ] crop ; } <EOF>
public SmartComboBox ( ) { base . IsEditable = true ; base . IsTextSearchEnabled = false ; . . . } public new bool IsEditable { get { return base . IsEditable ; } } public new bool IsTextSearchEnabled { get { return base . IsTextSearchEnabled ; } } <EOF>
byte [ ] rawdata = File . ReadAllBytes ( CODE_STRING ) ; byte [ ] correctedRawdata = rawdata . Skip ( CODE_INTEGER ) . ToArray ( ) ; Encoding encoder = Encoding . GetEncoding ( CODE_STRING ) ; string text = encoder . GetString ( correctedRawdata ) ; <EOF>
public ICommand UpdateScannersCommand { get { return new RelayCommand ( ( ) = > { . . . update code here } } } <EOF>
private void x ( ) { string sTestFile = CODE_STRING ; string [ ] TestFileWords ; FixConcatString ( sTestFile , out TestFileWords ) ; } private void FixConcatString ( string splayfile , * * out * * string [ ] sWordArray ) { char [ ] charSeparators = new char [ ] { CODE_CHAR } ; splayfile = splayfile . ToLower ( ) ; splayfile = splayfile . Replace ( CODE_STRING , CODE_STRING ) ; sWordArray = splayfile . Split ( charSeparators , StringSplitOptions . RemoveEmptyEntries ) ; } <EOF>
using System . Text ; string inputString = GetInput ( ) ; var encoder = ASCIIEncoding . GetEncoder ( ) ; encoder . Fallback = new EncoderReplacementFallback ( string . Empty ) ; byte [ ] bAsciiString = encoder . GetBytes ( inputString ) ; File . WriteAllBytes ( FILE_NAME , bAsciiString ) ; string cleanString = ASCIIEncoding . GetString ( bAsciiString ) ; Assert . AreEqual ( cleanString , Default . GetString ( bAsciiString ) ) ; <EOF>
. ToArray ( ) <EOF>
string Something = string . Join ( CODE_STRING , MyList ) ; <EOF>
public static void WriteBackgroundSetting ( string currentBackground ) { const string fileName = CODE_STRING ; using ( IsolatedStorageFile myIsolatedStorage = IsolatedStorageFile . GetUserStoreForApplication ( ) ) { if ( myIsolatedStorage . FileExists ( fileName ) ) myIsolatedStorage . DeleteFile ( fileName ) ; var stream = myIsolatedStorage . CreateFile ( fileName ) ; using ( StreamWriter isoStream = new StreamWriter ( stream ) ) { isoStream . WriteLine ( currentBackground ) ; } } } <EOF>
private List < X > Method ( string result ) { List < X > ret = new List < X > ( ) ; X temp = new X { Comments = new List < Y > { new Y ( ) { Author = CODE_STRING , Body = CODE_STRING } } , Key = CODE_STRING } ; ret . Add ( temp ) ; return ret ; } <EOF>
var departmentId = booking . Item . DepartmentId ; var users = from s in db . Users where s . DepartmentId == departmentId && s . UserEmail != null select s ; <EOF>
protected override void OnPreInit ( EventArgs e ) { base . OnPreInit ( e ) ; var j = CODE_INTEGER ; foreach ( DropDownList control in form1 . Controls . OfType < DropDownList > ( ) . ToList ( ) ) { var div = new HtmlGenericControl ( ) ; div . ID = CODE_STRING + j ; div . TagName = CODE_STRING ; div . Attributes [ CODE_STRING ] = CODE_STRING ; div . Controls . Add ( control ) ; j ++ ; form1 . Controls . Add ( div ) ; } <EOF>
GetProjectsDataSource . SelectMethod = CODE_STRING ; Parameter p1 = new Parameter ( CODE_STRING , TypeCode . String ) ; Parameter p2 = new Parameter ( CODE_STRING , TypeCode . String ) ; GetProjectsDataSource . SelectParameters . Add ( p1 ) ; GetProjectsDataSource . SelectParameters . Add ( p2 ) ; <EOF>
public IList < T > List < T > ( ) where T : class , IAdminDecimal <EOF>
if ( dayofweektext . Contains ( CODE_STRING ) ) { dayofweektext = DateTime . Today . AddDays ( CODE_INTEGER ) . DayOfWeek . ToString ( ) ; } <EOF>
HyperLink hyp = new HyperLink ( ) ; hyp . ID = CODE_STRING ; hyp . NavigateUrl = CODE_STRING ; Page . Controls . Add ( hyp ) ; <EOF>
host . AddServiceEndpoint ( typeof ( ISMService ) , new NetTcpBinding ( SecurityMode . None ) , CODE_STRING ) ; <EOF>
System . Threading . ThreadPool . QueueUserWorkItem ( ( args ) = > { System . Diagnostics . EventLog . WriteEntry ( CODE_STRING , CODE_STRING ) ; } ) ; <EOF>
interface IWrappedEntity < T > { T GetWrappedEntity ( ) ; } <EOF>
const double bucketSize = CODE_REAL ; var totalItems = ( double ) linjer ; var optimumBuckets = Math . Ceiling ( totalItems / bucketSize ) ; var itemsPerBucket = ( int ) Math . Ceiling ( totalItems / optimumBuckets ) ; var buckets = new int [ ( int ) optimumBuckets ] ; var itemsLeft = ( int ) totalItems for ( var i = CODE_INTEGER ; i < buckets . length ; i ++ ) { if ( itemsLeft < itemsPerBucket ) { buckets [ i ] = itemsLeft ; } else { buckets [ i ] = itemsPerBucket ; } itemsLeft -= itemsPerBucket ; } <EOF>
xmlns : asmv1 = CODE_STRING xmlns : asmv2 = CODE_STRING xmlns : xsi = CODE_STRING > < assemblyIdentity version = CODE_STRING name = CODE_STRING / > < trustInfo xmlns = CODE_STRING > < security > < requestedPrivileges xmlns = CODE_STRING > < requestedExecutionLevel level = CODE_STRING uiAccess = CODE_STRING / > < / requestedPrivileges > < / security > < / trustInfo > < / asmv1 : assembly > <EOF>
var d = [ { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } , { CODE_STRING : CODE_STRING } ] , dLen = d . length , ret = [ ] ; for ( var i = CODE_INTEGER ; i < dLen ; i ++ ) { ret . push ( parseInt ( d [ i ] . x , CODE_INTEGER ) ) ; } <EOF>
sSrcUrl = CODE_STRING sDestFolder = " C : \ " sImageFile = CODE_STRING set oHTTP = WScript . CreateObject ( CODE_STRING ) oHTTP . open CODE_STRING , sSrcUrl , False oHTTP . send CODE_STRING set oStream = createobject ( CODE_STRING ) Const adTypeBinary = CODE_INTEGER Const adSaveCreateOverWrite = CODE_INTEGER oStream . type = adTypeBinary oStream . open oStream . write oHTTP . responseBody oStream . savetofile sDestFolder & sImageFile , adSaveCreateOverWrite set oStream = nothing set oHTTP = nothing WScript . Echo CODE_STRING <EOF>
String PassWord ; PassWord = CODE_STRING ; if ( textBox1 . Text == PassWord ) <EOF>
/// To modify move field declaration from designer file to code-behind file. <EOF>
string a = CODE_STRING ; string b = CODE_STRING ; bool blnEqule = a == b ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { Image tempImage ; using ( var conn = new SqlConnection ( CODE_STRING ) ) { conn . Open ( ) ; using ( var cmd = new SqlCommand ( CODE_STRING , conn ) { CommandType = CommandType . StoredProcedure } ) { using ( var rdr = cmd . ExecuteReader ( ) ) { var buffer = ( byte [ ] ) rdr [ CODE_INTEGER ] ; using ( var ms = new MemoryStream ( buffer ) ) { tempImage = Image . FromStream ( ms ) ; pictureBox1 . Image = tempImage ; pictureBox1 . Refresh ( ) ; } } } } } <EOF>
InstanceDestination . SetComponentProperty ( CODE_STRING , DestinationTableNameInternal ) ; InstanceDestination . SetComponentProperty ( CODE_STRING , CODE_INTEGER ) ; <EOF>
private void OnCellFormatting ( object sender , DataGridViewCellFormattingEventArgs e ) { if ( e . RowIndex < CODE_INTEGER || e . ColumnIndex < CODE_INTEGER ) return ; DataGridView dgView = ( DataGridView ) ( sender ) ; if ( e . ColumnIndex != dgView . Columns [ CODE_STRING ] . Index ) return ; string cellValue = e . Value + CODE_STRING + dgView . CurrentRow . Cells [ dgView . Columns [ CODE_STRING ] . Value ) ; DateTime dtValue ; DateTime . TryParse ( cellValue , out dtValue ) ; DateTime dtValueUTC = TimezoneInfo . ConvertTimeToUtc ( dtValue , CODE_STRING ) ; e . Value = dtValueUTC . Value . ToLocalTime ( ) ; } <EOF>
command . Parameters . Add ( new SqlParameter ( CODE_STRING , SqlDbType . Money ) . Value = importExportOptions . ResidualValue ; <EOF>
DTE dte = ( DTE ) . Package . GetGlobalService ( typeof ( DTE ) ) ; if ( dte . Debugger . CurrentStackFrame != null ) { EnvDTE . Expressions locals = dte . Debugger . CurrentStackFrame . Locals ; foreach ( EnvDTE . Expression local in locals ) { EnvDTE . Expressions members = expression . DataMembers ; } } <EOF>
public static class Constants { public static string SomeConstant { get { return CODE_STRING ; } } } <EOF>
Employee emp = EmployeeRepository . GetById ( CODE_STRING ) ; if ( emp . IsValid ( ) ) { do whatever is required } else { } <EOF>
foreach ( DataGridViewRow row in this . DB . Rows ) { if ( row . IsNewRow ) break ; foreach ( DataGridViewCell cell in row . Cells ) { if ( cell . Value != null ) filewrite . Write ( cell . Value . ToString ( ) + CODE_STRING ) ; } file . WriteLine ( ) ; } <EOF>
string sType = item . Attachments [ i ] . ContentType . ToLower ( ) ; <EOF>
( Windows . UI . Xaml . Window . Current . Content as Frame ) . Navigate ( typeof ( FeedBackMessageBox ) , args ) ; <EOF>
DataGridViewRow dr = selectedRows . Cast < DataGridViewRow > ( ) . FirstOrDefault ( ) ; DataTable dtTemp = new DataTable ( ) ; if ( dr != null ) { var rowToRemove = dtTemp . Rows . Cast < DataRow > ( ) . FirstOrDefault ( row = > row [ CODE_INTEGER ] == dr . Cells [ CODE_INTEGER ] . Value ) ; if ( rowToRemove != null ) dtTemp . Rows . Remove ( rowToRemove ) ; } <EOF>
private async void List_OnItemClick ( object sender , ItemClickEventArgs e ) { var item = ( ItemViewModel ) e . ClickedItem ; var stream = await item . File . OpenAsync ( FileAccessMode . Read ) ; Media . SetSource ( stream , item . File . ContentType ) ; } <EOF>
command . Prepare ( ) <EOF>
SortedDictionary < string , string > Dates = new SortedDictionary < string , string > ( ) ; Dates . Add ( CODE_STRING , CODE_STRING ) ; Dates . Add ( CODE_STRING , CODE_STRING ) ; Dates . Add ( CODE_STRING , CODE_STRING ) ; for ( int i = CODE_INTEGER ; i < Dates . Count ; i ++ ) { string Key = Dates . ElementAt ( i ) . Key ; string CurrentValue = Dates . ElementAt ( i ) . Value . Trim ( ) ; string CurrentValueLastChar = CurrentValue . Substring ( CurrentValue . Length - CODE_INTEGER , CODE_INTEGER ) ; if ( i - CODE_INTEGER != - CODE_INTEGER && i + CODE_INTEGER < Dates . Count ) { string PreviousValue = Dates . ElementAt ( i - CODE_INTEGER ) . Value . Trim ( ) ; string NextValue = Dates . ElementAt ( i + CODE_INTEGER ) . Value . Trim ( ) ; string PreviousValueLastChar = PreviousValue . Substring ( PreviousValue . Length - CODE_INTEGER , CODE_INTEGER ) ; string NextValueLastChar = NextValue . Substring ( NextValue . Length - CODE_INTEGER , CODE_INTEGER ) ; if ( PreviousValueLastChar == NextValueLastChar ) Dates [ Key ] = ( Dates [ Key ] . Remove ( Dates [ Key ] . Length - CODE_INTEGER ) ) + PreviousValueLastChar ; } } <EOF>
Settings1 . Default . Value1 = CODE_STRING ; Settings1 . Default . Save ( ) ; Settings2 . Default . Value1 = CODE_STRING ; Settings2 . Default . Save ( ) ; <EOF>
if ( File . Exists ( yourFilePathHere ) ) <EOF>
[ DataContract ] public class Unicorn { [ DataMember ( EmitDefaultValue = false ) ] public string Id { get ; set ; } [ DataMember ( EmitDefaultValue = false ) ] public string Color { get ; set ; } [ DataMember ( EmitDefaultValue = false ) ] public int ? Size { get ; set ; } [ DataMember ( EmitDefaultValue = false ) ] public DateTime ? BirthDate { get ; set ; } } <EOF>
public static class TimerExtensions { public static MyTimerExtension ( this Timer timer ) { } } timer1 . MyTimerExtension ( ) ; <EOF>
checkBox . DataContext <EOF>
for ( int i = CODE_INTEGER ; i < image . rows ; i ++ ) { for ( int j = CODE_INTEGER ; j < image . cols ; j ++ ) { int b = image . at < cv :: Vec3b > ( i , j ) [ CODE_INTEGER ] ; int g = image . at < cv :: Vec3b > ( i , j ) [ CODE_INTEGER ] ; int r = image . at < cv :: Vec3b > ( i , j ) [ CODE_INTEGER ] ; } } <EOF>
var md = new MessageDialog ( null , DialogFlags . DestroyWithParent , MessageType . Info , ButtonsType . OkCancel , CODE_STRING ) ; md . Response += ( o , args ) = > { if ( args . ResponseId == ResponseType . Ok ) { } } ; md . Run ( ) ; md . Destroy ( ) ; <EOF>
public sealed class PresentOrFutureDateAttribute : ValidationAttribute { protected override ValidationResult IsValid ( object value , ValidationContext validationContext ) { if ( Convert . ToDateTime ( value ) >= DateTime . Today ) { return ValidationResult . Success ; } else { return new ValidationResult ( CODE_STRING ) ; } } } <EOF>
CompanyName . ProductName CompanyName . ProductName . ClassName CompanyName . ClassName . IsUpperCase ( string str ) <EOF>
input . GroupBy ( x = > x ) . OrderByDescending ( x = > x . Count ( ) ) . Select ( x = > x . Key ) . ToArray ( ) ; <EOF>
PropertyInfo piInstance = typeof ( IGWUIElement ) . GetProperty ( CODE_STRING ) ; piInstance . SetValue ( newUIElement , value , null ) ; <EOF>
public class DateConverter : IValueConverter { . . . } <EOF>
string sqlCom = String . Format ( CODE_STRING ) ; SqlConnectionStringBuilder ConnectionString = new SqlConnectionStringBuilder ( ) ; ConnectionString . DataSource = SQL06 ; ConnectionString . InitialCatalog = CODE_STRING ; ConnectionString . IntegratedSecurity = true ; SqlConnection cnn = new SqlConnection ( ConnectionString . ToString ( ) ) ; using ( var version = new SqlCommand ( sqlCom , cnn ) ) { cnn . Open ( ) ; using ( IDataReader dataReader = version . ExecuteReader ( ) ) { while ( dataReader . Read ( ) ) { label7 . Text = dataReader [ CODE_STRING ] . ToString ( ) ; label9 . Text = dataReader [ CODE_STRING ] . ToString ( ) ; } } } ; <EOF>
request . Headers [ CODE_STRING ] = CODE_STRING ; <EOF>
using ( SqlConnection conn = new SqlConnection ( connection ) ) { DataSet dataset = new DataSet ( ) ; SqlDataAdapter adapter = new SqlDataAdapter ( ) ; adapter . SelectCommand = new SqlCommand ( CODE_STRING , conn ) ; adapter . SelectCommand . CommandType = CommandType . StoredProcedure ; adapter . Fill ( dataset ) ; return dataset ; } <EOF>
public static class HWND { public static readonly IntPtr NOTOPMOST = new IntPtr ( - CODE_INTEGER ) , BROADCAST = new IntPtr ( CODE_INTEGER ) , TOPMOST = new IntPtr ( - CODE_INTEGER ) , TOP = new IntPtr ( CODE_INTEGER ) , BOTTOM = new IntPtr ( CODE_INTEGER ) ; } public static class SWP { public static readonly int NOSIZE = CODE_INTEGER , NOMOVE = CODE_INTEGER , NOZORDER = CODE_INTEGER , NOREDRAW = CODE_INTEGER , NOACTIVATE = CODE_INTEGER , DRAWFRAME = CODE_INTEGER , FRAMECHANGED = CODE_INTEGER , SHOWWINDOW = CODE_INTEGER , HIDEWINDOW = CODE_INTEGER , NOCOPYBITS = CODE_INTEGER , NOOWNERZORDER = CODE_INTEGER , NOREPOSITION = CODE_INTEGER , NOSENDCHANGING = CODE_INTEGER , DEFERERASE = CODE_INTEGER , ASYNCWINDOWPOS = CODE_INTEGER ; } [ DllImport ( CODE_STRING ) ] public static extern bool SetWindowPos ( IntPtr hWnd , IntPtr hWndInsertAfter , int X , int Y , int cx , int cy , int uFlags ) ; private void button1_Click ( object sender , EventArgs e ) { RunnerForm frm = new RunnerForm ( ) ; SetWindowPos ( frm . Handle , HWND . BOTTOM , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , SWP . SHOWWINDOW | SWP . NOMOVE | SWP . NOOWNERZORDER | SWP . NOSIZE | SWP . NOACTIVATE ) ; } <EOF>
Cookie : ASPSESSIONIDASDCDQBE = IOMFMDMCOBNECLCLEAIFJPEK ; ASPSESSIONIDASCDBRAD = AAEFMDMCKLOAMDIAJPGNNNDG Cookie : ASPSESSIONIDASDCDQBE = IOMFMDMCOBNECLCLEAIFJPEL ; ASPSESSIONIDASCDBRAD = AAEFMDMCKLOAMDIAJPGNNNDH <EOF>
Templates -> Visual C # -> Windows Phone <EOF>
int x2 = xToUpdate * Program . pixelSize ; int y2 = yToUpdate * Program . pixelSize ; for ( int a = x2 ; a <= x2 + Program . pixelSize - CODE_INTEGER ; a ++ ) { for ( int b = y2 ; b <= y2 + Program . pixelSize - CODE_INTEGER ; b ++ ) { mapBitmapFringe . SetPixel ( a , b , Color . Transparent ) ; } } <EOF>
var passwords = document . XPathSelectElements ( CODE_STRING ) ; foreach ( XNode elem in passwords ) { elem . SetValue ( string . Empty ) ; } <EOF>
using ( var connection = new SqlConnection ( myConnectionString ) ) using ( var adapter = new SqlDataAdapter ( mySelectQuery , connection ) ) { var table = new DataTable ( ) ; adapter . Fill ( table ) ; this . dataGridView . DataSource = table ; } <EOF>
e . Handled = e . SuppressKeyPress = true ; <EOF>
listOfStrings . Where ( s = > s . Contains ( CODE_CHAR ) ) ; <EOF>
public class A { public void MyMethod ( int integer , string str ) { } } void Main ( ) { System . Reflection . MethodInfo method = typeof ( A ) . GetMethod ( CODE_STRING ) ; ParameterInfo [ ] pars = method . GetParameters ( ) ; foreach ( ParameterInfo p in pars ) { Console . WriteLine ( p . Name + CODE_STRING + p . ParameterType ) ; } } <EOF>
static void RunThreads ( int totalThreads , int throttle ) { Observable . Range ( CODE_INTEGER , totalThreads ) . Select ( n = > Observable . FromAsync ( ( ) = > DoSomething ( n ) ) ) . Merge ( throttle ) . Wait ( ) ; } <EOF>
private void Form1_Load ( object sender , EventArgs e ) { webBrowser1 . Navigated += new WebBrowserNavigatedEventHandler ( webBrowser1_Navigated ) ; webBrowser1 . Navigate ( CODE_STRING ) ; } private void webBrowser1_Navigated ( object sender , WebBrowserNavigatedEventArgs e ) { foreach ( HtmlElement ele in webBrowser1 . Document . GetElementsByTagName ( CODE_STRING ) ) { if ( ele . GetAttribute ( CODE_STRING ) == CODE_STRING ) { MessageBox . Show ( ele . Parent . Children [ CODE_INTEGER ] . InnerText + CODE_STRING + ele . InnerHtml ) ; } } } <EOF>
private Byte [ ] CryptoKey { get { return new Byte [ ] { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; } } public Byte [ ] Encrypt ( Byte [ ] bytes ) { using ( var crypto = new DESCryptoServiceProvider ( ) ) { var key = CryptoKey ; using ( var encryptor = crypto . CreateEncryptor ( key , key ) ) { return encryptor . TransformFinalBlock ( bytes , CODE_INTEGER , bytes . Length ) ; } } } public Byte [ ] Decrypt ( Byte [ ] bytes ) { using ( var crypto = new DESCryptoServiceProvider ( ) ) { var key = CryptoKey ; using ( var decryptor = crypto . CreateDecryptor ( key , key ) ) { return decryptor . TransformFinalBlock ( bytes , CODE_INTEGER , bytes . Length ) ; } } } <EOF>
foreach ( DataGridViewRow var in dataGridView1 . Rows ) { var . Cells [ CODE_INTEGER ] . Value = true ; } <EOF>
if ( tired ) Sleep ( ) ; else Party ( ) <EOF>
chart1 . ChartAreas [ CODE_INTEGER ] . AxisX . IsMarginVisible = false ; <EOF>
[ Injection ] <EOF>
DataSet ds = new DataSet ( CODE_STRING ) ; <EOF>
^ ( ? ! . * ? ( https ? : <EOF>
public class SomeClass { public BsonObjectId Id { get ; set ; } [ BsonElement ( CODE_STRING ) ] public DateTime SomeReallyLongDateTimePropertyName { get ; set ; } } <EOF>
StreamReader myReader = null ; <EOF>
GraphicsDevice . Clear ( Color . TransparentBlack ) ; <EOF>
class Reference < T > { public T Value { get ; set ; } } <EOF>
routes . MapRoute ( name : CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING , id = CODE_STRING } routes . MapRoute ( name : CODE_STRING , url : CODE_STRING , defaults : new { controller = CODE_STRING , action = CODE_STRING , id = CODE_STRING } <EOF>
public static string Version { get { Assembly asm = Assembly . GetExecutingAssembly ( ) ; FileVersionInfo fvi = FileVersionInfo . GetVersionInfo ( asm . Location ) ; return String . Format ( CODE_STRING , fvi . ProductMajorPart , fvi . ProductMinorPart ) ; } } <EOF>
else if ( phoneDigits . ToString ( ) . Length > CODE_INTEGER ) { return String . Format ( CODE_STRING , phoneDigits . Substring ( CODE_INTEGER , CODE_INTEGER ) , phoneDigits . Substring ( CODE_INTEGER ) ) ; } <EOF>
private void button1_Click ( object sender , EventArgs e ) { backgroundWorker1 . RunWorkerAsync ( richTextBox1 . Text ) ; } private void backgroundWorker1_DoWork ( object sender , DoWorkEventArgs e ) { string text = ( string ) e . Argument ; MessageBox . Show ( text ) ; } <EOF>
public int Id { get ; set ; } <EOF>
public clas MyClass1 : IClassProcessor <EOF>
var root = new DirectoryEntry ( CODE_STRING ) ; foreach ( var dom in root . Children ) { foreach ( var entry in dom . Children ) { if ( entry . Name != CODE_STRING ) { Console . WriteLine ( entry . Name ) ; } } } <EOF>
GridView1 . Caption = CODE_STRING ; <EOF>
References = ( g . SelectMany ( entry = > entry . References ) . Count ( ) == CODE_INTEGER ) ? g . SelectMany ( entry = > entry . References ) . OrderBy ( t = > t ) . ToList ( ) : null ; <EOF>
mapping . HasMany ( x = > x . PropName ) . Table ( CODE_STRING ) . AsEntityMap ( CODE_STRING ) . Element ( CODE_STRING , e = > e . Type < MyUserType > ( ) ) ; <EOF>
var output = Regex . Replace ( input , CODE_STRING , m = > m . Value . ToLower ( ) ) ; <EOF>
public class TournamentMain { public int ID { get ; set ; } public string name { get ; set ; } public double buy_in { get ; set ; } public double re_buy { get ; set ; } public double add_on { get ; set ; } public int blindindex { get ; set ; } public int placeindex { get ; set ; } public int playerindex { get ; set ; } public ObservableCollection < Blind > blinds { get ; set ; } public ObservableCollection < Player > players { get ; set ; } public ObservableCollection < Place > places { get ; set ; } public ObservableCollection < Paidplace > paidplaces { get ; set ; } public TournamentMain ( ) { ID = CODE_INTEGER ; blindindex = CODE_INTEGER ; placeindex = CODE_INTEGER ; playerindex = CODE_INTEGER ; players = new ObservableCollection < Player > ( ) ; places = new ObservableCollection < Place > ( ) ; blinds = new ObservableCollection < Blind > ( ) ; paidplaces = new ObservableCollection < Paidplace > ( ) ; } <EOF>
foreach ( Control control in this . Controls ) { if ( control . GetType ( ) == typeof ( Combobox ) ) { } else if ( control . GetType ( ) == typeof ( Textbox ) ) { } } <EOF>
public static List < TResult > GetSingleColumn < T , TResult > ( Expression < Func < T , bool > > predicate , Expression < Func < T , TResult > > select ) where T : class { using ( var db = GetData ( ) ) { var q = db . GetTable < T > ( ) . AsQueryable ( ) ; if ( predicate != null ) q = q . Where ( predicate ) . AsQueryable ( ) ; var q2 = q . Select ( select ) ; return q2 . ToList ( ) ; } } <EOF>
SqlCommand command = new SqlCommand ( CODE_STRING , conn ) ; command . ExecuteNonQuery ( ) ; . . . <EOF>
{ bool AFunction ( ref int x , params object [ ] list ) { /* Some Body */ } public delegate bool Proc ( ref int x , params object [ ] list ) ; public Proc my_proc ; my_proc = AFunction ; my_proc ( ref index , a , b , c ) ; } <EOF>
private void MainForm_Resize ( object sender , EventArgs e ) { switch ( this . WindowState ) { case FormWindowState . Maximized : this . ShowInTaskbar = true ; break ; case FormWindowState . Minimized : this . ShowInTaskbar = false ; break ; case FormWindowState . Normal : this . ShowInTaskbar = true ; break ; default : break ; } } <EOF>
objects . Aggregate ( new { MinA = int . MaxValue , MaxB = string . Empty } , ( accumulator , o ) = > new { MinA = Math . Min ( o . A , accumulator . MinA ) , MaxB = o . B > accumulator . MaxB ? o . B : accumulator . MaxB } ) ; <EOF>
string value = . . . byte [ ] key = value . Split ( new [ ] { CODE_CHAR } ) . Select ( s = > Convert . ToByte ( s , CODE_INTEGER ) ) . ToArray ( ) ; <EOF>
public class Project { public string id { get ; set ; } public string wetterdatei { get ; set ; } public string fruchtfolge { get ; set ; } public string bodenprofil { get ; set ; } } public static Project leseProjektDatei ( ) { Project projekt = new Project ( ) ; while ( ( zeile = datei . ReadLine ( ) ) != null ) { projekt . id = zeile . Substring ( CODE_INTEGER , CODE_INTEGER ) ; projekt . wetterdatei = zeile . Substring ( CODE_INTEGER , CODE_INTEGER ) ; projekt . fruchtfolge = zeile . Substring ( CODE_INTEGER , CODE_INTEGER ) ; projekt . bodenprofil = zeile . Substring ( CODE_INTEGER , CODE_INTEGER ) ; } return projekt ; } <EOF>
namespace ClassLibrary { public class Utility { public static string ReadData ( ) { return CODE_STRING ; } } } namespace Win_App { public partial class Form1 : Form { private void button2_Click ( object sender , EventArgs e ) { if ( ClassLibrary . Utility . ReadData ( ) == null ) { MessageBox . Show ( CODE_STRING ) ; button2 . Focus ( ) ; return ; } } } } <EOF>
string oldPath = CODE_STRING ; string newPath = CODE_STRING ; ?? ? <EOF>
Public Sub New ( ) Dim spi As ServiceProcessInstaller = New ServiceProcessInstaller Dim si As ServiceInstaller = new ServiceInstaller spi . Account = ServiceAccount . LocalSystem si . StartType = ServiceStartMode . Manual si . ServiceName = CODE_STRING Installers . Add ( si ) Installers . Add ( spi ) End Sub <EOF>
TextWriter textWriter = new StreamWriter ( CODE_STRING ) ; XmlSerializer serializer = new XmlSerializer ( _pointList [ CODE_INTEGER ] . GetType ( ) ) ; for ( int i = CODE_INTEGER ; i < ListSize ; i ++ ) { serializer . Serialize ( textWriter , _pointList [ i ] ) ; } <EOF>
using ( var connection = new SqlConnection ( connectionString ) ) using ( var command = new SqlCommand ( queryString , connection ) ) { command . Connection . Open ( ) ; command . ExecuteNonQuery ( ) ; } <EOF>
FileInfo f = new FileInfo ( CODE_STRING ) ; string result = Path . Combine ( f . Directory . Name , f . Name ) ; <EOF>
for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { double [ ] newVector = RotateVector2d ( points [ i - CODE_INTEGER , CODE_INTEGER ] , points [ i - CODE_INTEGER , CODE_INTEGER ] , CODE_REAL * Math . PI / CODE_INTEGER ) ; points [ i , CODE_INTEGER ] = newVector [ CODE_INTEGER ] ; points [ i , CODE_INTEGER ] = newVector [ CODE_INTEGER ] ; Debug . WriteLine ( newVector [ CODE_INTEGER ] + CODE_STRING + newVector [ CODE_INTEGER ] ) ; } <EOF>
void Main ( ) { Student student = new Student ( ) ; FillStudentUnformation ( student ) ; Console . WriteLine ( student . Name ) ; FillStudentUnformationRef ( ref student ) ; Console . WriteLine ( student . Name ) ; } vodi FillStudentUnformation ( Student student ) { student = new Student ( ) ; student . Name = CODE_STRING ; } vodi FillStudentUnformationRef ( ref Student student ) { student = new Student ( ) ; student . Name = CODE_STRING ; } <EOF>
const void * data = & myFloat ; size_t size = sizeof myFloat ; <EOF>
foreach ( Form frm in this . MdiChildren ) { if ( frm . GetType ( ) == typeof ( Can_ListCandidate ) ) { frm . Dispose ( ) ; } } <EOF>
var input = CODE_STRING ; var match = Regex . Match ( input , CODE_STRING ) ; if ( match . Success ) var text = match . Groups [ CODE_STRING ] . Value ; <EOF>
parentWindow . grid . Children . Remove ( parentWindow . canvas ) ; parentWindow . canvas = ( Canvas ) System . Windows . Markup . XamlReader . Load ( xmlReader ) ; parentWindow . grid . Children . Add ( parentWindow . canvas ) ; <EOF>
messagelb . Content = CODE_STRING ; <EOF>
toast . SuppressPopup = true ; ToastNotificationManager . CreateToastNotifier ( ) . Show ( toast ) ; <EOF>
DataGridView myGridView = new DataGridView ( ) ; DataView myDataView = myTable . DefaultView ; myGridView . DataSource = myDataView ; myDataView . RowFilter = string . Format ( CODE_STRING , match ) ; <EOF>
public ActionResult getTransactionTotals ( int itemID ) { DBEntities db = new DBEntities ( ) ; var query = ( from trans in db . Transactions into selection select new TransactionAmount { name = selection . Key , amount = selection . Select ( t = > t . TransactionId ) . Distinct ( ) . Count ( ) } ) . ToDictionary ( k = > k . name , v = > v . amount ) ; return Json ( query , JsonRequestBehavior . AllowGet ) ; } <EOF>
public partial class BaseControl : UserControl { private int _defaultWidth ; private int _defaultHeight ; public BaseControl ( ) { InitializeComponent ( ) ; _defaultWidth = this . Width ; _defaultHeight = this . Height ; } protected override void SetBoundsCore ( int x , int y , int width , int height , BoundsSpecified specified ) { if ( this . DesignMode ) { width = _defaultWidth ; height = _defaultHeight ; } base . SetBoundsCore ( x , y , width , height , specified ) ; } } <EOF>
int GetIntFromConfigSetting ( string settingName , int defaultValue ) { int retValue = defaultValue ; if ( this . ContainsKey ( settingName ) ) { int sleepInterval ; if ( Int32 . TryParse ( this [ settingName ] , out sleepInterval ) { retValue = sleepInterval ; } } return retValue ; } <EOF>
var missing = from i in Enumerable . Range ( strs . Min ( ) , strs . Max ( ) ) where ! strs . Contains ( i ) select i ; <EOF>
string text = CODE_STRING ; Regex myRegex = new Regex ( CODE_STRING ) ; var match = myRegex . Match ( text ) ; <EOF>
WebRequest . Method = CODE_STRING <EOF>
private void button1_Click ( object sender , EventArgs e ) { var helpInfo = new StringBuilder ( ) ; helpInfo . AppendLine ( CODE_STRING ) ; helpInfo . AppendLine ( CODE_STRING ) ; var textHelp = new TextBox ( ) { Multiline = true , ReadOnly = true , Text = helpInfo . ToString ( ) , MinimumSize = new Size ( CODE_INTEGER , CODE_INTEGER ) } ; var toolHost = new ToolStripControlHost ( textHelp ) ; toolHost . Margin = new Padding ( CODE_INTEGER ) ; var toolDrop = new ToolStripDropDown ( ) ; toolDrop . Padding = new Padding ( CODE_INTEGER ) ; toolDrop . Items . Add ( toolHost ) ; toolDrop . Show ( button1 , button1 . Width , CODE_INTEGER ) ; } <EOF>
lvSerialCode . Items . Clear ( ) ; <EOF>
IDictionary < String , Ivaluable [ ] > Sub = New Dictionary < String , Ivaluable [ ] > ; Ivaluable [ ] Sub1 = new valueableObject [ CODE_INTEGER ] ; Sub . Add ( CODE_STRING , Sub1 ) ; <EOF>
var scopedLifestyle = new LifetimeScopeLifestyle ( ) ; container . Register < ISomeType , SomeType > ( scopedLifestyle ) ; using ( container . BeginLifetimeScope ( ) ) { var some = container . GetInstance < SomeRootObjectDependingOnSomeType > ( ) ; some . Execute ( ) ; } <EOF>
InputLanguage . CurrentInputLanguage = InputLanguage . FromCulture ( new System . Globalization . CultureInfo ( CODE_STRING ) ) ; <EOF>
Doc doc = new Doc ( ) ; doc . Read ( Server . MapPath ( CODE_STRING ) ) ; using ( ReduceSizeOperation op = new ReduceSizeOperation ( doc ) ) { op . UnembedSimpleFonts = false ; op . UnembedComplexFonts = false ; op . MonochromeImageDpi = CODE_INTEGER ; op . GrayImageDpi = CODE_INTEGER ; op . ColorImageDpi = CODE_INTEGER ; op . Compact ( true ) ; } doc . Save ( Server . MapPath ( CODE_STRING ) ) ; <EOF>
procedure successor ( node ) { if ( parent ( node ) . children [ position ( node ) + CODE_INTEGER ] != null ) { return findLeftmost ( parent ( node ) . children [ position ( node ) + CODE_INTEGER ] ) ; } else { return successor ( parent ( node ) ) ; } } procedure findLeftmost ( node ) { if ( node . children . length == CODE_INTEGER ) { return node ; } else { return findLeftmost ( node . children [ CODE_INTEGER ] ) ; } } <EOF>
Using System . Runtime . InteropServices ; . . . . public class NativeMethods { [ DllImport ( CODE_STRING ) ] public static extern void Sleep ( uint dwMilliseconds ) ; } <EOF>
XDocument . Parse <EOF>
var intersection = dictionary1 . Where ( kvp1 = > dictionary2 . ContainsKey ( kvp1 . Key ) && dictionary2 [ kvp1 . Key ] . classid = kvp1 . Value . classid ) . ToDictionary ( kvp = > kvp . Key , kvp = > kvp . Value ) ; <EOF>
try { pcontext . SaveChanges ( ) ; } catch ( System . Data . Entity . Core . UpdateException e ) { } catch ( System . Data . Entity . Infrastructure . DbUpdateException ex ) { Console . WriteLine ( ex . InnerException ) ; } catch ( Exception ex ) { Console . WriteLine ( ex . InnerException ) ; throw ; } <EOF>
ResourceFileName . ResourceName <EOF>
var ordered = countries . OrderBy ( x = > x . Length ) ; var min = ordered . First ( ) ; var max = ordered . Last ( ) ; Console . WriteLine ( CODE_STRING , min , min . Length ) ; Console . WriteLine ( CODE_STRING , max , max . Length ) ; <EOF>
public abstract class CommonUIControls { public static Button nextButton = null ; } public sealed partial class MainPage : Page { public MainPage ( ) { this . InitializeComponent ( ) ; CommonUIControls . nextButton = nextButton ; } } <EOF>
playBin . VideoSink . SetLockedState ( true ) ; playBin . SetState ( Gst . State . Ready ) ; playBin . Uri = CODE_STRING + newFileName . Replace ( CODE_CHAR , CODE_CHAR ) ; playBin . SetState ( Gst . State . Paused ) ; playBin . VideoSink . SetLockedState ( false ) ; <EOF>
Microsoft . Office . Interop . Excel . Range cell object obj = cell . Formula ; <EOF>
Stream exportData = new MemoryStream ( byte [ ] fileBuffer ) ; <EOF>
PropertyInfo p = typeof ( HttpRuntime ) . GetProperty ( CODE_STRING , BindingFlags . NonPublic | BindingFlags . Public | BindingFlags . Static ) ; object o = p . GetValue ( null , null ) ; FieldInfo f = o . GetType ( ) . GetField ( CODE_STRING , BindingFlags . Instance | BindingFlags . NonPublic | BindingFlags . IgnoreCase ) ; object monitor = f . GetValue ( o ) ; MethodInfo m = monitor . GetType ( ) . GetMethod ( CODE_STRING , BindingFlags . Instance | BindingFlags . NonPublic ) ; m . Invoke ( monitor , new object [ ] { } ) ; <EOF>
ProcessStartInfo info = new ProcessStartInfo ( CODE_STRING ) ; info . Verb = CODE_STRING ; info . Arguments = CODE_STRING ; info . CreateNoWindow = true ; info . WindowStyle = ProcessWindowStyle . Hidden ; Process . Start ( info ) ; <EOF>
Assembly . GetExecutingAssembly ( ) <EOF>
if ( retries < CODE_INTEGER ) { Thread . Sleep ( CODE_INTEGER * retries ) ; return UploadInvoice ( filename ) ; } <EOF>
splitArray = Regex . Split ( subject , CODE_STRING , RegexOptions . IgnorePatternWhitespace ) ; <EOF>
? sort = yourdatefield : desc <EOF>
public class ThreadSafeList { private List < Quiz > list = new List < Quiz > ( ) ; private object locker = new object ( ) ; private static ThreadSafeList instance = new ThreadSafeList ( ) ; private ThreadSafeList ( ) { } public static GetInstance ( ) { return instance ; } public void Add ( Quiz q ) { lock ( locker ) list . Add ( q ) ; } } <EOF>
Public Sub TestCall ( ByVal someAorBorC as A ) Convert . ChangeType ( someAorBorC , someAorBorC . GetType ( ) ) . Method ( ) End Sub <EOF>
var AtoDelete = context . As . Include ( a = > a . Bs ) . First ( ) ; context . As . Remove ( AtoDelete ) ; context . SaveChanges ( ) ; <EOF>
CultureInfo enGB = new CultureInfo ( CODE_STRING ) ; string dateString ; DateTime dateValue ; dateString = CODE_STRING ; DateTime . TryParseExact ( dateString , CODE_STRING , enGB , DateTimeStyles . None , out dateValue ) ; <EOF>
public void RemoveLast ( ) { STACKnode current = head , last ; if ( head == null ) return ; if ( head . next == null ) { head = null ; return ; } while ( current . next != null ) { last = current ; current = current . next ; } last . next = null ; } <EOF>
create a list of numbers output prompt read input line while the input line had a value parse the input value add the parsed value to the list of numbers output prompt read input line calculate the sum of the values divided by the length of the list output the calculated average <EOF>
dt . Columns . Add ( attr . DisplayName , pi . PropertyType ) ; <EOF>
Android . App . ActionBar <EOF>
PROPFIND / yourfolder HTTP / CODE_REAL Content - Type : application / xml < ? xml version = CODE_STRING ? > < propfind xmlns = CODE_STRING > < prop > < resourcetype / > < / prop > < / propfind > <EOF>
private void listBox1_MouseDown ( object sender , MouseEventArgs e ) { if ( e . Button == MouseButtons . Right ) { var idx = listBox1 . IndexFromPoint ( e . Location ) ; if ( idx >= CODE_INTEGER && listBox1 . GetItemRectangle ( idx ) . Contains ( e . Location ) ) { listBox1 . SelectedIndex = idx ; contextMenuStrip1 . Show ( listBox1 , e . Location ) ; } } } <EOF>
public string GetText ( string text , string tag1 , string tag2 ) { return Regex . Match ( text , String . Format ( " : { CODE_INTEGER } [ ^ : ] ? : ( ? < text > ( | . ) * ) : { CODE_INTEGER } [ ^ : ] ? : CODE_STRING text " ] . Value ; } <EOF>
Application . ExitThread ( ) ; <EOF>
string currentUserId = User . Identity . GetUserId ( ) ; ApplicationUser currentUser = db . Users . FirstOrDefault ( x = > x . Id == currentUserId ) ; <EOF>
List < Card > shuffledDeck = new List < Card > ( ) ; while ( myDeck . Count > CODE_INTEGER ) { int c = myDeck . Count ; int n = rNumber . Next ( CODE_INTEGER , c ) ; var value = myDeck [ n ] ; shuffledDeck . Add ( value ) ; myDeck . Remove ( value ) ; } <EOF>
public static string GetCanvasRedirectHtml ( string url ) { var fbApp = new FacebookApp ( ) ; string authUrl = string . Format ( CODE_STRING , fbApp . AppId , url , requiredAppPermissions ) ; if ( string . IsNullOrEmpty ( url ) ) { throw new ArgumentNullException ( CODE_STRING ) ; } return CODE_STRING + " < script type = \ " text / javascript \ " > " + CODE_STRING + authUrl + " \ " ; " + CODE_STRING + CODE_STRING ; } <EOF>
routeTemplate : CODE_STRING , <EOF>
var command = new OracleCommand ( connection ) ; command . CommandText = CODE_STRING ; <EOF>
Data Source = . \ SQLEXPRESS ; AttachDbFilename = | DataDirectory | \ BaseDeDatos . mdf ; Integrated Security = True ; User Instance = True <EOF>
var js = new JavaScriptSerializer ( ) ; dynamic dynObj = js . DeserializeObject ( jsonN ) ; foreach ( var obj in dynObj ) { if ( obj . ContainsKey ( CODE_STRING ) ) Console . WriteLine ( obj [ CODE_STRING ] ) ; else Console . WriteLine ( obj [ CODE_STRING ] ) ; } <EOF>
if ( ! MyTextBox . Dispatcher . CheckAccess ( ) ) { MyTextBox . Dispatcher . Invoke ( ( ) = > { MyTextBox . Text = myReceivedMessage . ToString ( ) ; } ) ; } else { MyTextBox . Text = myReceivedMessage . ToString ( ) ; } <EOF>
CREATE TEMPORARY TABLE TempTable ( OrgName VARCHAR ( CODE_INTEGER ) , Id INT , ParentID INT ) ; INSERT INTO TempTable SELECT OrgName , Id , ParentID FROM org_table ; WHILE EXISTS ( SELECT TOP CODE_INTEGER CODE_INTEGER FROM TempTable WHERE EXISTS ( SELECT TOP CODE_INTEGER CODE_INTEGER FROM TempTable TempTableParent WHERE TempTableParent . ID = TempTable . ParentID AND TempTableParent . ParentID IS NOT NULL ) ) DO UPDATE TempTable SET ParentID = TempTableParent . parentID FROM TempTable INNER JOIN TempTable TempTableParent ON TempTableParent . id = TempTable . ParentID WHERE TempTable . ParentID IS NOT NULL AND TempTableParent . ParentID IS NOT NULL END WHILE ; SELECT * FROM TempTable <EOF>
int decToBin ; Console . WriteLine ( CODE_STRING ) ; decToBin = Int32 . Parse ( Console . ReadLine ( ) ) ; string bin = Convert . ToString ( decToBin , CODE_INTEGER ) ; Console . WriteLine ( bin ) ; <EOF>
var result = tblArea . Where ( x = > ! tblUserMaster . Any ( m = > m . areaid == x ) ) ; <EOF>
class Program { static void Main ( string [ ] args ) { var maxParallelism = Environment . ProcessorCount ; Parallel . ForEach ( files , new ParallelOptions { MaxDegreeOfParallelism = maxParallelism } , ParseAndPersist ) ; } public static void ParseAndPersist ( FileInfo fileInfo ) { } } <EOF>
using ( StreamReader sr = new StreamReader ( CODE_STRING ) ) { String line ; while ( ( line = sr . ReadLine ( ) ) != null ) { string [ ] ipandport = line . split ( CODE_STRING ) ; lstBoxIp . Items . Add ( ipandport [ CODE_INTEGER ] ) ; lstBoxPort . Items . Add ( ipandport [ CODE_INTEGER ] ) ; } } <EOF>
private void textBox1_Validating ( object sender , CancelEventArgs e ) { DateTime date ; if ( ! DateTime . TryParseExact ( textBox1 . Text , CODE_STRING , CultureInfo . CurrentCulture , DateTimeStyles . None , out date ) ) { MessageBox . Show ( textBox1 . Text + CODE_STRING ) ; textBox1 . Focus ( ) ; e . Cancel = true ; return ; } if ( ( date < ( DateTime ) System . Data . SqlTypes . SqlDateTime . MinValue ) || ( date > ( DateTime ) System . Data . SqlTypes . SqlDateTime . MaxValue ) ) { MessageBox . Show ( textBox1 . Text + CODE_STRING ) ; textBox1 . Focus ( ) ; e . Cancel = true ; return ; } } <EOF>
public interface IEditViewModel < TEntity > { public EditResult < TEntity > EditEntity ( TEntity entityToEdit ) ( ) ; } <EOF>
CREATE PROCEDURE GetJobState @jobId int AS SELECT MIN ( UnitStatus ) FROM JobUnit WHERE Job_idJob = @jobId <EOF>
private int counter ; public int Index { get { counter ++ ; return counter ; } } <EOF>
int [ ] intarray = { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } ; string [ ] result = intarray . Select ( x = > x . ToString ( ) ) . ToArray ( ) ; <EOF>
await file . CopyAsync ( storageFolder ) ; <EOF>
str = Regex . Replace ( str , CODE_STRING , CODE_STRING ) ; <EOF>
private void dataGridView1_CellEndEdit ( object sender , DataGridViewCellEventArgs e ) { newvalue = ( int ) dataGridView1 [ e . ColumnIndex , e . RowIndex ] . Value ; } private void dataGridView1_CellBeginEdit ( object sender , DataGridViewCellCancelEventArgs e ) { oldvalue = ( int ) dataGridView1 [ e . ColumnIndex , e . RowIndex ] . Value ; } <EOF>
Assert . That ( array , Is . All . Matches ( ( int x ) = > x % CODE_INTEGER == CODE_INTEGER && x % CODE_INTEGER != CODE_INTEGER || x % CODE_INTEGER == CODE_INTEGER ) ) ; <EOF>
CREATE OR REPLACE FUNCTION get_dbms_output ( maxbytes IN NUMBER , buffer OUT VARCHAR2 ) RETURN NUMBER IS l_line VARCHAR2 ( CODE_INTEGER ) ; l_done NUMBER : = CODE_INTEGER ; BEGIN LOOP EXIT WHEN LENGTH ( buffer ) + CODE_INTEGER > maxbytes OR l_done = CODE_INTEGER ; dbms_output . get_line ( l_line , l_done ) ; buffer : = buffer || l_line || CHR ( CODE_INTEGER ) ; END LOOP ; RETURN l_done ; END get_dbms_output ; / <EOF>
public Form1 ( ) { InitializeComponent ( ) ; grid . Columns [ CODE_INTEGER ] . HeaderText = CODE_STRING ; } <EOF>
CODE_STRING <EOF>
secondTable = firstTable . AsEnumerable ( ) . GroupBy ( row = > new { Key = row . Field < string > ( CODE_STRING ) , Country = row . Field < string > ( CODE_STRING ) , } ) . Select ( group = > group . First ( ) ) . CopyToDataTable ( ) ; <EOF>
Console . ReadKey <EOF>
using System . Runtime . InteropServices ; . . . [ StructLayout ( LayoutKind . Explicit ) ] struct X86Register { [ FieldOffset ( CODE_INTEGER ) ] public byte reg8 ; [ FieldOffset ( CODE_INTEGER ) ] public byte reg8h ; [ FieldOffset ( CODE_INTEGER ) ] public ushort reg16 ; [ FieldOffset ( CODE_INTEGER ) ] public uint reg32 ; [ FieldOffset ( CODE_INTEGER ) ] public ulong reg64 ; } <EOF>
FileStream Constructor ( String , FileMode , FileAccess , FileShare ) <EOF>
int packetyear = year - year % CODE_INTEGER + packet [ CODE_INTEGER ] ; <EOF>
var content = MyLabel . Content ; MyLabel . Content = null ; MyLabel . ContentStringFormat = CODE_STRING ; MyLabel . Content = content ; <EOF>
Task [ ] tasks = new Task [ CODE_INTEGER ] { Task . Factory . StartNew ( ( ) = > MethodA ( ) ) , Task . Factory . StartNew ( ( ) = > MethodB ( ) ) , Task . Factory . StartNew ( ( ) = > MethodC ( ) ) } ; Task . WaitAll ( tasks ) ; <EOF>
TopLevel = false <EOF>
i = row * columnCount + column ; <EOF>
_policyDataGrid . ScrollBars = ScrollBars . None ; _policyDataGrid . ScrollBars = ScrollBars . Vertical ; <EOF>
stOldItems . All ( x = > lstNewItems . Any ( y = > x . sItemPath == y . sItemPath ) ) ; <EOF>
Func < String , String > <EOF>
return Animals . OfType < IHerd > ( ) . Cast < Animals > ( ) . ToList ( ) ; <EOF>
Private Sub SplitStrings ( s As String ) Dim lines ( ) As String = Split ( s , CODE_STRING ) For Each line As String In lines Dim perLineTokens ( ) As String = line . Split ( CODE_STRING ) Next End Sub <EOF>
protected string [ ] strFilePath = new string [ CODE_INTEGER ] ; protected string [ ] strTitle = new string [ CODE_INTEGER ] ; protected string [ ] strCity = new string [ CODE_INTEGER ] ; protected string [ ] strCountry = new string [ CODE_INTEGER ] ; <EOF>
var counter = new Counter ( ) ; var form = new Form ( ) ; form . Controls . Add ( counter ) ; form . Show ( ) ; <EOF>
DataRow r = bucketdt . NewRow ( ) ; r = dosObject . SubCategoryDetails2 ( Convert . ToInt16 ( val ) ) . Rows [ CODE_INTEGER ] ; <EOF>
DECLARE @StartDate DATETIME2 , @EndDate DATETIME2 SET @StartDate = DATEADD ( day , DATEDIFF ( day , CODE_INTEGER , GETDATE ( ) ) , CODE_INTEGER ) SET @EndDate = DATEADD ( day , DATEDIFF ( day , CODE_INTEGER , GETDATE ( ) + CODE_INTEGER ) , CODE_INTEGER ) SELECT CustomerID , Title , FirstName , LastName , AppStatus FROM Customer WHERE DateAdded >= @StartDate AND DateAdded < @EndDate <EOF>
void Timer2_Click ( object sender , EventArgs e ) { #region ListBox Remove And Effect / in Process if ( works . Count > CODE_INTEGER ) { var fade = new DoubleAnimation ( ) { From = CODE_INTEGER , To = CODE_INTEGER , Duration = TimeSpan . FromSeconds ( CODE_INTEGER ) , } ; var item = Storyboard . SetTarget ( fade , item ) ; Storyboard . SetTargetProperty ( fade , new PropertyPath ( ListBoxItem . OpacityProperty ) ) ; var sb = new Storyboard ( ) ; sb . Children . Add ( fade ) ; sb . Completed += sb_Completed ; sb . Begin ( ) ; } } void sb_Completed ( object sender , EventArgs e ) { works . RemoveAt ( CODE_INTEGER ) ; DataContext = this ; } <EOF>
string str = CODE_STRING ; var regex = new Regex ( " ( ? <= \ { ) [ ^ } ] * ( ? = \ } ) " ) ; var matches = regex . Matches ( str ) ; <EOF>
IEnumerable < T > <EOF>
private Timer _timer ; private DateTime _lastRun = DateTime . Now . AddDays ( - CODE_INTEGER ) ; protected override void OnStart ( string [ ] args ) { _timer = new Timer ( CODE_INTEGER * CODE_INTEGER * CODE_INTEGER ) ; _timer . Elapsed += new System . Timers . ElapsedEventHandler ( timer_Elapsed ) ; _timer . Start ( ) ; } private void timer_Elapsed ( object sender , System . Timers . ElapsedEventArgs e ) { if ( _lastRun . Date < DateTime . Now . Date ) { _timer . Stop ( ) ; _lastRun = DateTime . Now ; _timer . Start ( ) ; } } <EOF>
public static IEnumerable < string > SplitByLength ( this string str , int maxLength ) { for ( int index = CODE_INTEGER ; index < str . Length ; index += maxLength ) { yield return str . Substring ( index , Math . Min ( maxLength , str . Length - index ) ) ; } } <EOF>
files . ToObservable ( ) . SelectMany ( f = > { var source = Observable . Defer ( ( ) = > Observable . Start ( ( ) = > { ftpConnection . DownloadFile ( avroPath , f . Name ) ; return Tuple . Create ( true , f . Name ) ; } ) ) ; int attempt = CODE_INTEGER ; return Observable . Defer ( ( ) = > ( ( ++ attempt == CODE_INTEGER ) ? source : source . DelaySubscription ( TimeSpan . FromSeconds ( CODE_INTEGER ) ) ) ) . Retry ( CODE_INTEGER ) . Catch ( Observable . Return ( Tuple . Create ( false , f . Name ) ) ) ; } ) . ForEachAsync ( res = > { if ( res . Item1 ) Process ( res . Item2 ) ; else LogOrQueueOrWhatever ( res . Item2 ) ; } ) . Wait ( ) ; ProcessLogs ( ) ; ScheduleNExtDownloadRoutine ( ) ; <EOF>
private void comboCarbu_Initialized ( object sender , EventArgs e ) { foreach ( var combobox in FindVisualChildren < ComboBox > ( dataVoitures ) ) { if ( combobox . Name == CODE_STRING ) { combobox . Focus ( ) ; } } } <EOF>
Type VB6Long64 LoValue As Long HiValue As Long End Type <EOF>
ManagementScope scope = new ManagementScope ( CODE_STRING ) ; ObjectQuery query = new ObjectQuery ( CODE_STRING ) ; ManagementObjectSearcher searcher = new ManagementObjectSearcher ( scope , query ) ; ManagementObjectCollection queryCol = searcher . Get ( ) ; foreach ( ManagementObject m in queryCol ) { Console . Out . WriteLine ( CODE_STRING , m [ CODE_STRING ] ) ; } <EOF>
# show = fulldates <EOF>
Regex . Replace ( CODE_STRING , CODE_STRING , CODE_STRING ) ; <EOF>
IEnumerable < T > Reverse ( Node head ) { Stack < Node > nodes = new Stack < Node > ( ) ; while ( head != null ) { nodes . Push ( head ) ; head = head . Next ; } while ( nodes . Count > CODE_INTEGER ) { yield return nodes . Pop ( ) . Value ; } } <EOF>
void Grid_KeyDown ( object sender , KeyEventArgs e ) { if ( ( e . KeyCode & Keys . Enter ) == Keys . Enter && e . Modifiers == Keys . Shift ) { grid . CurrentCell . Move ( GridDirectionType . Up , CODE_INTEGER , false ) ; e . Handled = true ; } } <EOF>
string listCount = blistselected . Items . Count ; string [ ] array = new string [ listCount ] ; for ( int i = CODE_INTEGER ; i < blistselected . Items . Count ; i ++ ) { array [ i ] = blistselected . Items [ i ] . Text ; } <EOF>
worksheet . Rows ( ) . AdjustToContents ( ) ; <EOF>
CODE_STRING <EOF>
/// <summary> /// Sets all properties on an object to modified. /// </summary> /// <param name="context">The context.</param> /// <param name="entity">The entity.</param> private static void SetAllPropertiesModified ( ObjectContext context , object entity ) { var stateEntry = context . ObjectStateManager . GetObjectStateEntry ( entity ) ; var propertyNames = stateEntry . CurrentValues . DataRecordInfo . FieldMetadata . Select ( fm = > fm . FieldType . Name ) ; foreach ( var propertyName in propertyNames ) { stateEntry . SetModifiedProperty ( propertyName ) ; } } <EOF>
void ultraGrid1_InitializeLayout ( object sender , Infragistics . Win . UltraWinGrid . InitializeLayoutEventArgs e ) { UltraGridBand band = e . Layout . Bands [ CODE_INTEGER ] ; band . ColHeadersVisible = false ; ColumnsCollection columns = band . Columns ; UltraGridGroup group0 = band . Groups . Add ( CODE_STRING ) ; group0 . Header . Caption = CODE_STRING ; UltraGridGroup group1 = band . Groups . Add ( CODE_STRING ) ; group1 . Header . Caption = CODE_STRING ; UltraGridGroup group2 = band . Groups . Add ( CODE_STRING ) ; group2 . Header . Caption = CODE_STRING ; columns [ CODE_INTEGER ] . Group = group0 ; columns [ CODE_INTEGER ] . Group = group1 ; columns [ CODE_INTEGER ] . Group = group1 ; columns [ CODE_INTEGER ] . Group = group2 ; columns [ CODE_INTEGER ] . Group = group2 ; } <EOF>
. . . var publisher = GetPublisher ( CODE_STRING ) ; . . . public static string GetPublisher ( string application ) { using ( var key = Registry . CurrentUser . OpenSubKey ( CODE_STRING ) ) { var appKey = key . GetSubKeyNames ( ) . FirstOrDefault ( x = > GetValue ( key , x , CODE_STRING ) == application ) ; if ( appKey == null ) { return null ; } return GetValue ( key , appKey , CODE_STRING ) ; } } private static string GetValue ( RegistryKey key , string app , string value ) { using ( var subKey = key . OpenSubKey ( app ) ) { if ( ! subKey . GetValueNames ( ) . Contains ( value ) ) { return null ; } return subKey . GetValue ( value ) . ToString ( ) ; } } <EOF>
( http | ftp | https ) : <EOF>
string [ ] rowCells = cells . Cast < string > ( ) . ToArray ( ) ; <EOF>
List < Filter_IDs > filterids = ef . filterLine . Select ( o = > new { objectType = o . objectType , object_id = o . object_id } ) . GroupBy ( fl = > fl . objectType ) . ToList ( ) . Select ( fl = > new Filter_IDs { type = fl . Key , objects = fl . Select ( x = > x . object_id ) . ToList ( ) } ) . ToList ( ) ; <EOF>
if ( typeof ( S ) == typeof ( int ) ) <EOF>
NewItemRowPosition . Top <EOF>
FileInfo newFile = new FileInfo ( CODE_STRING ) ; using ( ExcelPackage package = new ExcelPackage ( newFile ) ) { var sheet = package . Workbook . Worksheets . Add ( CODE_STRING ) ; var range = sheet . Cells [ CODE_STRING ] . LoadFromDataTable ( dtMain , true ) ; sheet . Tables . Add ( range , CODE_STRING ) ; var tbl = sheet . Tables [ CODE_INTEGER ] ; tbl . ShowTotal = true ; string stylename = CODE_STRING ; var style = package . Workbook . Styles . CreateNamedStyle ( stylename ) ; tbl . Columns [ SomeName ] . TotalsRowFunction = RowFunctions . Sum ; style . Style . Numberformat . Format = CODE_STRING ; sheet . Cells [ sheet . Dimension . End . Row , colcount ] . Style . Numberformat . Format = c . Format ; tbl . Columns [ SomeName ] . DataCellStyleName = stylename ; } range . AutoFitColumns ( ) ; package . Save ( ) ; <EOF>
" Sec \ . [ A - Z \ d ] + \ . ( [ A - Z \ d ] + \ . ) ? " \ s ? <EOF>
IParseTree tree = SpinParser . expr ( ) ; <EOF>
project Entity project Database project Server project UserInterface <EOF>
foreach ( TreeNode tn in treeView1 . Nodes ) { foreach ( TreeNode child in tn . Nodes ) { } } <EOF>
using ( QstWriter = new StreamWriter ( IPCPipe ) ) <EOF>
bool bPresent = ( from DataRow r in dsInternalInformation . Tables [ CODE_INTEGER ] . Rows where ( int ) r [ CODE_STRING ] > CODE_INTEGER select r ) . Any ( ) ; <EOF>
Regex regExfont = new Regex ( CODE_STRING ) ; MatchCollection rows = regExfont . Matches ( string ) ; <EOF>
DataSet ds = GetAllCategory ( ) ; if ( ds . Tables . Count > CODE_INTEGER ) { DropDownList1 . DataTextField = CODE_STRING ; DropDownList1 . DataValueField = CODE_STRING ; DropDownList1 . DataSource = ds . Tables [ CODE_INTEGER ] ; DropDownList1 . DataBind ( ) ; } if ( DropDownList1 . Items . Count > CODE_INTEGER ) { DropDownList1 . SelectedIndex = CODE_INTEGER ; DropDownList1_SelectedIndexChanged ( this , null ) ; } <EOF>
try { var eMailValidator = new System . Net . Mail . MailAddress ( CODE_STRING ) ; } catch ( FormatException ex ) { } <EOF>
protected void yourNiceGridViewControl_RowDataBound ( object sender , GridViewRowEventArgs e ) { if ( e . Row . RowType == DataControlRowType . Footer ) { TextBox myTextBox = e . Row . FindControl ( CODE_STRING ) as TextBox ; if ( myTextBox != null ) { myTextBox . Tex = ds . Tables [ CODE_INTEGER ] . Rows [ CODE_INTEGER ] [ CODE_STRING ] . ToString ( ) ; } } } <EOF>
controller . WaitForStatus ( ServiceControllerStatus . Running ) ; <EOF>
set MONO_LOG_LEVEL = debug <EOF>
Object lockOnMe = new Object ( ) ; . . . in your Add loop ( int i = CODE_INTEGER ; i < dacPoints . Count ; i += CODE_INTEGER ) { TimeSpan span = new TimeSpan ( CODE_INTEGER , CODE_INTEGER , i + CODE_INTEGER ) ; lock ( lockOnMe ) { presenter . addPoint ( span . ToString ( ) , dacPoints [ i ] ) ; } System . Threading . Thread . Sleep ( CODE_INTEGER ) ; } . . . when calling DataBindXY ( ) lock ( lockOnMe ) { chart . Series [ CODE_INTEGER ] . Points . DataBindXY ( xAxis . ToList ( ) , yAxis . ToList ( ) ) ; } <EOF>
var listItems = new string [ ] { CODE_STRING , CODE_STRING , CODE_STRING } ; var writers = new StreamWriter [ listItems . Length ] ; for ( int i = CODE_INTEGER ; i < listItems . Length ; i ++ ) { writers [ i ] = File . CreateText ( listItems [ i ] + CODE_STRING ) ; } var reader = new StreamReader ( File . OpenRead ( bigFatFile ) ) ; string line ; while ( ( line = reader . ReadLine ( ) ) != null ) { for ( int i = CODE_INTEGER ; i < listItems . Length ; i ++ ) { if ( line . StartsWith ( listItems [ i ] ) ) writers [ i ] . WriteLine ( line ) ; } } reader . Close ( ) ; foreach ( var writer in writers ) writer . Close ( ) ; <EOF>
public enum Color { Red , Yellow , Green , Blue } public class ColorSet : HashSet < Color > { } private void setColors ( ColorSet colors = null ) { if ( colors == null ) colors = new ColorSet { Color . Red , Color . Green } ; . . . . } <EOF>
public class BaseClass { public void Method ( ) { this . OnMethod ( ) ; } protected virtual void OnMethod ( ) { } } <EOF>
ArrayList UserList = new ArrayList ( ) ; var SkypeClient = new SKYPE4COMLib . Skype ( ) ; foreach ( User User in skype . Friends ) { if ( User . BuddyStatus == SKYPE4COMLib . TBuddyStatus . budFriend ) { UserList . Add ( User . Handle ) ; } } <EOF>
const string propPrefix = CODE_STRING ; VendorObj o = new VendorObj ( ) ; foreach ( var item in userVars ) { int varNum = CODE_INTEGER ; if ( Int32 . TryParse ( item . VariableName , out varNum ) ) { string name = String . Format ( CODE_STRING , propPrefix , varNum ) ; o . GetType ( ) . GetProperty ( name ) . SetValue ( o , CODE_STRING , null ) ; } } <EOF>
String drpClassString = CODE_STRING If ( drpclass . SelectedIndex != CODE_INTEGER ) { drpString = CODE_STRING + drpclass . SelectedItem . Value + CODE_STRING } String thrNameString = CODE_STRING ; if ( txt_tchrname . Text . Length != CODE_INTEGER ) { thrNameString = CODE_STRING + txt_tchrname . Text . ToString ( ) + CODE_STRING } String dateString = CODE_STRING if ( txtdatesearch . Text . Length != CODE_INTEGER ) { dateString = CODE_STRING + strDTentered1 + CODE_STRING } String sqlsearch = CODE_STRING + CODE_STRING + drpClassString + thrNameString + dateString ; <EOF>
public class Form1 : Form { static void Main ( string [ ] args ) { Application . Run ( new Form1 ( ) ) ; } public Form1 ( ) { this . IsMdiContainer = true ; Panel test = new Panel ( ) ; test . Dock = DockStyle . Top ; test . Height = CODE_INTEGER ; this . Controls . Add ( test ) ; Form child = new Form ( ) ; child . MdiParent = this ; child . Text = CODE_STRING ; child . Show ( ) ; } } <EOF>
private void ListBox_selectionChanged ( object sender , DragEventArgs e ) { e . handled = true ; } <EOF>
private String GetRandomServiceIP ( String roleName , String endPointName ) { var endpoints = RoleEnvironment . Roles [ roleName ] . Instances . Select ( i = > i . InstanceEndpoints [ endPointName ] ) . ToArray ( ) ; var r = new Random ( DateTime . Now . Millisecond ) ; int ipIndex = r . Next ( endpoints . Count ( ) ) ; return endpoints [ ipIndex ] . IPEndpoint . Address . ToString ( ) ; } <EOF>
Create View Pokedata as Select name_ , t1 . type as Type1 , t2 . type as Type2 , ability From Kanto inner Join Abilities on Kanto . abilityId = Abilities . abilityId inner join KantoType as kt1 on Kanto . pok ? monid = kt1 . pok ? monid and kanto . typeid1 = kt1 . typeid inner join on types as t1 on kt1 . typeid = t1 . typeid inner join KantoType as kt2 on Kanto . pok ? monid = kt2 . pok ? monid and kanto . typeid2 = kt2 . typeid inner join on types as t2 on kt2 . typeid = t2 . typeid <EOF>
FileStream xuids = new FileStream ( xuidspath , FileMode . Append ) ; <EOF>
var myService = OperationContext . Current . InstanceContext . GetServiceInstance ( ) ; <EOF>
var errors = XDocument . Parse ( yourxmlstring ) . Descendants ( CODE_STRING ) . Select ( e = > new { code = ( int ) e . Element ( CODE_STRING ) , desc = ( string ) e . Element ( CODE_STRING ) } ) . ToList ( ) ; <EOF>
SqlConnection myconn = new SqlConnection ( connstring ) ; <EOF>
Type realType = Nullable . GetUnderlyingType ( typeof ( T ) ) ; t = ( T ) Activator . CreateInstance ( realType ?? typeof ( T ) ) ; <EOF>
UserControl uc = new UserControl ( ) ; string ID = CODE_STRING ; string userControl = CODE_STRING + ID + CODE_STRING ; uc = LoadControl ( userControl ) as UserControl ; PlaceHolder1 . Controls . Add ( uc ) ; <EOF>
new XElement ( CODE_STRING , CODE_STRING ) ; <EOF>
System . Security . Cryptography . Xml Namespace <EOF>
var configMap = new ExeConfigurationFileMap { ExeConfigFilename = externalConfigurationFile } ; System . Configuration . Configuration externalConfiguration = ConfigurationManager . OpenMappedExeConfiguration ( configMap , ConfigurationUserLevel . None ) ; foreach ( KeyValueConfigurationElement setting in externalConfiguration . AppSettings . Settings ) { . . . } currentConfiguration . Save ( ConfigurationSaveMode . Full ) ; <EOF>
var query = File . ReadLines ( CODE_STRING ) . GroupBy ( x = > x ) . Select ( g = > new { Key = g . Key , Count = g . Count ( ) } ) . OrderByDescending ( i = > i . Count ) . Take ( CODE_INTEGER ) ; foreach ( var item in query ) { Console . WriteLine ( CODE_STRING , item . Count , item . Key ) ; } <EOF>
bool IsProcessRunning ( string processName ) { return ( System . Diagnostics . Process . GetProcessesByName ( processName ) . Length != CODE_INTEGER ) ; } <EOF>
DateTime . ParseExact ( input , CODE_STRING , null ) ; <EOF>
nircmd . exe setdisplay CODE_INTEGER CODE_INTEGER CODE_INTEGER <EOF>
void OnNextBuild ( ) { if ( PrimeBuilders . Count < CODE_INTEGER ) return ; int i = PrimeBuilders . IndexOf ( _building_instance . BuildingID ) ; if ( i != - CODE_INTEGER ) { if ( ++ i == PrimeBuilders . Count ) i = CODE_INTEGER ; _building_instance = _simulation_manager . GetCity ( ) . GetBuildingInstance ( PrimeBuilders [ i ] ) ; _interface_state_manager . SetNextState ( InterfaceState . ShowBuildUnitsPanel ) ; } } <EOF>
panel . BackgroundImage = Image . FromFile ( open . FileName ) ; <EOF>
sampleWS s = new sampleWS ( ) ; s . addExam ( CODE_INTEGER , bla , bla ) ; <EOF>
if ( e . Item . ItemType == ListItemType . Item || e . Item . ItemType == ListItemType . AlternatingItem ) <EOF>
public static IEnumerable < string > ReadLines ( ) { string line ; while ( null != ( line = Console . ReadLine ( ) ) ) yield return line ; } public static void Main ( ) { string input = string . Join ( ReadLines ( ) , Environment . NewLine ) ; } <EOF>
g . TranslateTransform ( pointX , pointY ) ; g . ScaleTransform ( CODE_INTEGER , CODE_INTEGER ) ; g . TranslateTransform ( - pointX , - pointY ) ; g . DrawString ( myText , myFont , myBrush , pointX , pointY ) ; <EOF>
int current = CODE_INTEGER ; var selection = products . TakeWhile ( p = > ( current = current + p . Cost ) <= credit ) ; <EOF>
long l = Marshal . ReadInt64 ( result , CODE_INTEGER ) ; return l ; <EOF>
container . Register ( Component . For < IDbConnection > ( ) . ImplementedBy < SqlConnection > ( ) . LifestyleTransient ( ) . UsingFactoryMethod ( ( ) = > new SqlConnection ( ConfigurationManager . ConnectionStrings [ CODE_STRING ] . ConnectionString ) ) ) ; <EOF>
I would use CSS to do that . I would add a class element on the ASP < asp : LinkButton ID = CODE_STRING runat = CODE_STRING Text = ' < % # Eval ( CODE_STRING ) % > ' CommandName = CODE_STRING CommandArgument = ' < % # Eval ( CODE_STRING ) % > ' Visible = ' < % # Eval ( CODE_STRING ) % > ' Class = ' Visible < % # Eval ( CODE_STRING ) % > ' > < / asp : LinkButton > So in the HTML the class will come out like CODE_STRING or CODE_STRING in the CSS you can create a two classes > . VisibleFlase { } , . VisibleTrue { } <EOF>
line - height <EOF>
RectangleF bounds = new RectangleF ( x , y , width , height ) ; using ( StringFormat format = new StringFormat ( ) ) { format . Alignment = StringAlignment . Center ; format . LineAlignment = StringAlignment . Center ; graphicsObj . DrawText ( CODE_STRING , SystemFonts . Default , Brushes . Black , bounds , format ) ; } <EOF>
System . IO . Directory . SetCurrentDirectory ( System . AppDomain . CurrentDomain . BaseDirectory ) ; <EOF>
if ( open_dialog . ShowDialog ( ) != DialogResult . Cancel ) { if ( uploadpic_pb . BackgroundImage != null ) uploadpic_pb . BackgroundImage . Dispose ( ) ; uploadpic_pb . BackgroundImage = Image . FromFile ( open_dialog . FileName ) ; } <EOF>
protected override void Configure ( ) { ConventionManager . AddElementConvention < ListPicker > ( ListPicker . ItemsSourceProperty , CODE_STRING , CODE_STRING ) . ApplyBinding = ( viewModelType , path , property , element , convention ) = > { if ( ConventionManager . GetElementConvention ( typeof ( ItemsControl ) ) . ApplyBinding ( viewModelType , path , property , element , convention ) ) { ConventionManager . ConfigureSelectedItem ( element , ListPicker . SelectedItemProperty , viewModelType , path ) ; return true ; } return false ; } ; } <EOF>
mshtml . HTMLWindow2Class w2 = webBrowser1 . Document . Window . DomWindow as mshtml . HTMLWindow2Class ; w2 . execScript ( CODE_STRING , CODE_STRING ) ; Image image2 = Clipboard . GetImage ( ) ; pictureBox1 . Image = image2 ; <EOF>
List < Store > stores = new List < Store > ( ) ; var storeTemp = new Store ( ) ; foreach ( string line in File . ReadAllLines ( CODE_STRING ) ) { if ( line . Contains ( CODE_STRING ) ) storeTemp . ID = line . Substring ( CODE_INTEGER ) ; if ( line . Contains ( CODE_STRING ) ) storeTemp . name = line . Substring ( CODE_INTEGER ) ; if ( line . Contains ( CODE_STRING ) ) storeTemp . branchNO = Convert . ToInt32 ( line . Substring ( CODE_INTEGER ) ) ; if ( line . Contains ( CODE_STRING ) ) storeTemp . address = line . Substring ( CODE_INTEGER ) ; if ( line . Contains ( CODE_STRING ) ) { storeTemp . phoneNumber = Convert . ToInt32 ( line . Substring ( CODE_INTEGER ) ) ; stores . Add ( storeTemp ) ; storeTemp = new Store ( ) ; } } <EOF>
smtp . UseDefaultCredentials = false ; <EOF>
public class OperationContextExtension : IExtension < OperationContext > { public void Attach ( OperationContext owner ) { this . Current = new Dictionary < string , string > ( ) ; } public void Detach ( OperationContext owner ) { this . Current = null ; } public Dictionary < string , string > Current { get ; set ; } } <EOF>
CODE_STRING ] * " | \ S + <EOF>
( ( ContextMenuStrip ) ( ( ( ToolStripMenuItem ) sender ) . Owner ) ) . SourceControl <EOF>
( ? < ! \ . [ CODE_INTEGER - CODE_INTEGER a - z ] * ) [ CODE_INTEGER - CODE_INTEGER ] <EOF>
private void grv_RowDataBound ( object sender , GridViewRowEventArgs e ) { if ( e . Row . RowType == DataControlRowType . Header ) { e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; e . Row . Cells [ CODE_INTEGER ] . Width = new Unit ( CODE_STRING ) ; } } <EOF>
var node = db . ExecuteStoreQuery < Node > ( CODE_STRING CODE_STRING , System . Data . Objects . MergeOption . NoTracking , new SqlParameter { ParameterName = CODE_STRING , Value = department . Id } ) ; <EOF>
var htmlDoc = new HtmlDocument ( ) ; htmlDoc . LoadHtml ( CODE_STRING ) ; foreach ( var error in htmlDoc . ParseErrors ) { Console . WriteLine ( error . Code ) ; Console . WriteLine ( error . Reason ) ; } <EOF>
var objectSet = entities . GetType ( ) . GetProperties ( ) . Where ( p = > p . PropertyType . IsGenericType && p . PropertyType . GetGenericArguments ( ) [ CODE_INTEGER ] . Name == typeof ( T ) . Name ) . Select ( p = > p . GetValue ( entities , null ) as ObjectSet < T > ) . First ( ) ; return objectSet . ToList ( ) ; <EOF>
var validemails = emails . Where ( p = > IsValidFormat ( p . Value ) ) . Select ( kv = > kv . Value ) ; <EOF>
var themometerServices = await Windows . Devices . Enumeration . DeviceInformation . FindAllAsync ( GattDeviceService . GetDeviceSelectorFromUuid ( GattServiceUuids . HealthThermometer ) , null ) ; <EOF>
MarkettingNames = string . Join ( CODE_STRING , GroupA . MarkettingEmployees . Select ( e = > e . Name ) ) ; <EOF>
static void Main ( string [ ] args ) { using ( var db = new SchoolEntities ( ) ) { double currentScore = CODE_INTEGER ; int rank = CODE_INTEGER ; int savedRank ; var query = db . ScoreSummaries . OrderByDescending ( x = > x . TotalScore ) . ToList ( ) ; foreach ( var item in query ) { rank += CODE_INTEGER ; if ( item . TotalScore == current score ) { savedRank = savedRank } else { savedrank = rank ; } Console . WriteLine ( CODE_STRING , item . TransactionID , item . TotalScore , savedrank ) ; currentScore = item . totalScore ; } Console . WriteLine ( CODE_STRING ) ; Console . ReadKey ( ) ; } } <EOF>
IEnumerable < Accommodation > temp = ( from x in doc . Descendants ( CODE_STRING ) select new Accommodation ( ) { Categories = new Collection < string > ( x . Descendants ( CODE_STRING ) . SelectMany ( categories = > categories . Elements ( CODE_STRING ) . Select ( category = > category . Attribute ( CODE_STRING ) . Value ?? CODE_STRING ) ) . ToList ( ) ) } ) . ToList ( ) ; <EOF>
protected override void OnDragDrop ( DragEventArgs drgevent ) { this . BeginInvoke ( new Action ( ( ) = > { MessageBox . Show ( this , CODE_STRING ) ; } ) ) ; base . OnDragDrop ( drgevent ) ; } <EOF>
int height2 = ( int ) Math . Round ( width2 * ( height1 / ( float ) width1 ) ) ; <EOF>
public abstract class Post { public void Validate ( ) { ExtraValidate ( ) ; } protected abstract void ExtraValidate ( ) ; } <EOF>
Vector3 offset = new Vector3 ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; transform . position = ball . transform . position - ball . GetComponent < Rigidbody > ( ) . velocity / ball . GetComponent < Rigidbody > ( ) . velocity . magnitude + offset ; transform . LookAt ( ball . transform . position ) ; <EOF>
bundles . Add ( new StyleBundle ( CODE_STRING ) . Include ( CODE_STRING , new CssRewriteUrlTransform ( ) ) ) ; <EOF>
XmlElement horseEl = horseXml . DocumentElement ; var xmlDb = new XmlDocument ( ) ; xmlDb . Load ( xmlDbFilepath ) ; var xe = xmlDb . CreateElement ( CODE_STRING ) ; xe . InnerXml = horseEl . InnerXml ; xmlDb . DocumentElement . AppendChild ( xe ) ; xmlDb . Save ( xmlDbFilepath ) ; <EOF>
foreach ( var word in dict1 . Where ( w = > dict2 . ContainsKey ( w . Key ) && dict2 [ w . Key ] > CODE_INTEGER ) ) { } <EOF>
using System ; using System . Collections . Generic ; using System . Linq ; using System . Text ; namespace ConsoleApplication1 { class Program { struct addition_pairs { public int first ; public int second ; } static void Main ( string [ ] args ) { List < addition_pairs > main_list ; main_list = new List < addition_pairs > ( ) ; } private void populate_list ( int how_many , List < addition_pairs > list ) { for ( int i = CODE_INTEGER ; i < how_many ; i ++ ) { Random random = new Random ( ) ; int randomNumber1 = random . Next ( CODE_INTEGER , CODE_INTEGER ) ; addition_pairs insert = new addition_pairs ( ) ; insert . first = randomNumber1 ; insert . second = random . Next ( CODE_INTEGER , CODE_INTEGER - randomNumber1 ) ; list . Add ( insert ) ; } } } } <EOF>
CODE_INTEGER ] default ( int ? ) will always return ' null ' CODE_INTEGER ] null | < anything > returns ' null ' <EOF>
using ( var browser = new System . Windows . Forms . WebBrowser ( ) ) { browser . DocumentCompleted += delegate { using ( var pic = new Bitmap ( browser . Width , browser . Height ) ) { browser . DrawToBitmap ( pic , new Rectangle ( CODE_INTEGER , CODE_INTEGER , pic . Width , pic . Height ) ) ; pic . Save ( imagePath ) ; } } ; browser . Navigate ( Server . MapPath ( CODE_STRING ) + htmlPath ) ; browser . ScrollBarsEnabled = false ; while ( browser . ReadyState != System . Windows . Forms . WebBrowserReadyState . Complete ) { System . Windows . Forms . Application . DoEvents ( ) ; } } <EOF>
foreach ( PropertyInfo pi in o . GetType ( ) . GetProperties ( ) ) <EOF>
double CanonizeAngle ( double angle ) { if ( angle > Math . PI ) { do { angle -= MathHelper . TwoPi ; } while ( angle > Math . PI ) ; } else if ( angle < - Math . PI ) { do { angle += MathHelper . TwoPi ; } while ( angle < - Math . PI ) ; } return angle ; } double VectorToAngle ( Vector2 vector ) { Vector2 direction = Vector2 . Normalize ( vector ) ; return Math . Atan2 ( direction . Y , direction . X ) ; } bool IsPointWithinCone ( Vector2 point , Vector2 conePosition , double coneAngle , double coneSize ) { double toPoint = VectorToAngle ( point - conePosition ) ; double angleDifference = CanonizeAngle ( coneAngle - toPoint ) ; double halfConeSize = coneSize * CODE_REAL ; return angleDifference >= - halfConeSize && angleDifference <= halfConeSize ; } <EOF>
var projects = CommonMethods . GetProjects ( solution ) . Where ( item = > item . FullName != string . Empty ) . ToList ( ) ; <EOF>
string command = CODE_STRING ; <EOF>
var result = from customer in customers from personalFirst in personal . Where ( pf = > pf . Field == CODE_STRING && pf . C_ID == customer . C_ID ) . DefaultIfEmpty ( ) from personalLast in personal . Where ( pl = > pl . Field == CODE_STRING && pl . C_ID == customer . C_ID ) . DefaultIfEmpty ( ) where customer . C_ID == CODE_INTEGER select new { customer . C_ID , Name = ( personalFirst != null ? personalFirst . Value : CODE_STRING ) + CODE_STRING + ( personalLast != null ? personalLast . Value : CODE_STRING ) } ; <EOF>
DateTime from = new DateTime ( fromYear , fromMonth , fromDay ) ; DateTime to = new DateTime ( toYear , toMonth , toDay ) ; . . . DateTime date = new Date ( year , month , day ) ; if ( date >= from && date <= to ) { listBox1 . Items . Add ( . . . ) ; } <EOF>
public class BindableToolStripStatusLabel : ToolStripStatusLabel , IBindableComponent public class BindableStatusBarLabel : ToolStripLabel , IBindableComponent { private ControlBindingsCollection _bindings ; private BindingContext _context ; public BindingContext BindingContext { get { if ( _context == null ) { _context = new BindingContext ( ) ; } return _context ; } set { _context = value ; } } public ControlBindingsCollection DataBindings { get { if ( _bindings == null ) { _bindings = new ControlBindingsCollection ( this ) ; } return _bindings ; } } } <EOF>
private Dictionary < int , aor . PhysicalObject > merger ; merger = Enumerable . Concat ( from a in log . InitialState . Agents . Agent select a , from o in log . InitialState . Objects . Object select o ) . ToDictionary ( d = > Convert . ToInt32 ( d . id ) , d = > d as aor . PhysicalObject ) ; <EOF>
Html . DropDownList ( CODE_STRING , new SelectListItem [ ] { new SelectListItem { Text = CODE_STRING , Value = CODE_STRING } , } ) ; <EOF>
internal Dictionary < string , string > GetIDsAndXPaths ( ) { var web = new HtmlWeb ( ) ; var webidsAndXPaths = new Dictionary < string , string > ( ) ; var page = driver . PageSource ; const string path = CODE_STRING ; var sw = new StreamWriter ( path , false ) ; sw . Write ( page ) ; sw . Close ( ) ; const string url = path ; var doc = web . Load ( page ) ; var nodes = doc . DocumentNode . SelectNodes ( CODE_STRING ) ; if ( nodes == null ) return webidsAndXPaths ; return webidsAndXPaths ; } <EOF>
Class HTMLWindowEvents2Sink { public HTMLWindowEvents2Sink ( IHTMLWindow2 eventSource ) { this . eventSource = eventSource ; } IHTMLWindow2 eventSource ; void AdviseEvent ( ) { eventSource . load += this . HTMLWindow_onload ; } . . . . } <EOF>
Response . AddFileDependency ( CODE_STRING ) ; <EOF>
if ( HttpContext . Current . Request . Url . Host . CompareTo ( CODE_STRING ) != CODE_INTEGER ) { HttpContext . Current . Response . Redirect ( CODE_STRING + Context . Request . Url . PathAndQuery ) ; } <EOF>
WriteAllText ( ) <EOF>
Div1 . Visible = false ; <EOF>
private void eolGrid_RowPostPaint ( object sender , DataGridViewRowPostPaintEventArgs e ) { int rowNum = e . RowIndex ; DataGridViewCellStyle style = new DataGridViewCellStyle ( ) ; DateTime dateval = Convert . ToDateTime ( eolGrid . Rows [ rowNum ] . Cells [ CODE_INTEGER ] . Value ) ; if ( ( dateval - date ) . TotalDays <= CODE_INTEGER ) style . ForeColor = Color . Red ; else if ( ( dateval - date ) . TotalDays <= CODE_INTEGER ) style . BackColor = Color . Red ; else style . ForeColor = Color . Black ; eolGrid . Rows [ rowNum ] . Cells [ CODE_INTEGER ] . Style = style ; } <EOF>
data = System . Text . Encoding . ASCII . GetString ( bytes , CODE_INTEGER , i ) ; Console . WriteLine ( StripExtended ( data ) ) ; static string StripExtended ( string arg ) { StringBuilder buffer = new StringBuilder ( arg . Length ) ; foreach ( char ch in arg ) { UInt16 num = Convert . ToUInt16 ( ch ) ; if ( ( num >= CODE_INTEGER ) && ( num <= CODE_INTEGER ) ) buffer . Append ( ch ) ; } return buffer . ToString ( ) ; } } } <EOF>
static class ControlAssign { public static void Assign ( Control target , object source , PropertyInfo prop ) { Setters [ prop . PropertyType ] ( prop , source , target ) ; } static ControlAssign ( ) { Setters [ typeof ( string ) ] = ( prop , src , target ) = > { ( ( TextBox ) target ) . Text = ( string ) prop . GetValue ( src , null ) ; } ; Setters [ typeof ( bool ? ) ] = ( prop , src , target ) = > { ( ( CheckBox ) target ) . Checked = ( bool ) prop . GetValue ( src , null ) ; } ; Setters [ typeof ( bool ) ] = ( prop , src , target ) = > { ( ( CheckBox ) target ) . Checked = ( bool ) prop . GetValue ( src , null ) ; } ; } public delegate void Action < T , U , V > ( T t , U u , V v ) ; readonly static Dictionary < Type , Action < PropertyInfo , object , Control > > Setters = new Dictionary < Type , Action < PropertyInfo , object , Control > > ( ) ; } <EOF>
var data = new List < string > { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; int trimPosition ; for ( var i = CODE_INTEGER ; i < data . Count ; i ++ ) if ( ( trimPosition = data [ i ] . LastIndexOf ( CODE_CHAR ) ) > - CODE_INTEGER ) data [ i ] = data [ i ] . Substring ( CODE_INTEGER , trimPosition ) ; <EOF>
public ActionResult Error ( ) { return View ( ) ; } <EOF>
txtblkLabel . VerticalAlignment = System . Windows . VerticalAlignment . Center ; txtblkLabel . HorizontalAlignment = System . Windows . HorizontalAlignment . Center ; txtblkLabel . TextAlignment = System . Windows . TextAlignment . Center ; <EOF>
pipeline = Runspace . DefaultRunspace . CreateNestedPipeline ( ) ; <EOF>
var intersection = list1 . Intersect ( list2 ) . ToList ( ) ; var list1Decomp = list1 . Except ( intersection ) . ToList ( ) ; var list2Decomp = list2 . Except ( intersection ) . ToList ( ) ; <EOF>
var numbers = new List < int > ( ) ; for ( int i = CODE_INTEGER ; i <= CODE_INTEGER ; i += CODE_INTEGER ) { numbers . Add ( i ) ; } <EOF>
ListBoxItem itm = new ListBoxItem ( ) ; itm . Content = CODE_STRING ; listbox . Items . Add ( itm ) ; <EOF>
string response ; try { using ( StreamReader streamIn = new StreamReader ( ( webRequest . GetResponse ( ) ) . GetResponseStream ( ) ) ) { response = streamIn . ReadToEnd ( ) ; streamIn . Close ( ) ; } } finally { webRequest . Abort ( ) ; } XDocument xDoc = XDocument . Parse ( response ) ; <EOF>
long memUsageBefore = GC . GetTotalMemory ( true ) ; long memUsageAftere = GC . GetTotalMemory ( true ) ; GC . KeepAlive ( measuredObject ) ; <EOF>
var worker = new BackgroundWorker ( ) ; worker . DoWork += ( o , ea ) = > { } ; worker . RunWorkerCompleted += ( o , ea ) = > { } ; <EOF>
int . TryParse ( Console . ReadLine ( ) , out temp_int ) ; while ( temp_int < CODE_INTEGER ) { Console . WriteLine ( CODE_STRING ) ; int . TryParse ( Console . ReadLine ( ) , out temp_int ) ; } <EOF>
var sb = new Text . StringBuilder ; foreach ( var item in requestParameters ) { sb . AppendFormat ( CODE_STRING , item . Key , item . Value ) ; } var parameters = sb . ToString ( ) ; <EOF>
Mapper . CreateMap < MyViewModel , MyModel > ( ) . ForMember ( d = > d . ContentLinks , opt = > opt . MapFrom ( s = > s . ContentLink ) ) ; <EOF>
public class PortWrapper { public int ReceivePort { get { return portRecv ; } set { if ( value == portRecv ) return ; if ( value < CODE_INTEGER || value > CODE_INTEGER ) throw new ArgumentOutOfRangeException ( ) ; portRecv = value ; setupReceiver ( ) ; } } private int portRecv = CODE_INTEGER ; } <EOF>
public class ResourceInterceptor : IResourceInterceptor { public bool NoImages { get ; set ; } private static string [ ] _imagesFileTypes = { CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING , CODE_STRING } ; public ResourceResponse OnRequest ( ResourceRequest request ) { string ext = System . IO . Path . GetExtension ( request . Url . ToString ( ) ) . ToLower ( ) ; if ( NoImages && _imagesFileTypes . Contains ( ext ) ) { request . Cancel ( ) ; } return null ; } public bool OnFilterNavigation ( NavigationRequest request ) { return false ; } } . . . ResourceInterceptor ResInt = new ResourceInterceptor ( ) ; WebCore . ResourceInterceptor = ResInt ; <EOF>
xl . XmlMap map ; wb . XmlImport ( path , out map , Type . Missing , ws . Range [ CODE_STRING ] ) ; <EOF>
public async Task AddData ( Data data ) { var id = data . ID ; Group newGroup = new Group ( id ) ; bool checkIfExists = false ; foreach ( Group group in _groups ) { if ( group . ID == newGroup . ID ) { checkIfExists = true ; break ; } } if ( checkIfExists ) { foreach ( Group group in _groups ) { if ( group . ID == id ) { group . DataGroup . Add ( data ) ; } } } else { newGroup . DataGroup . Add ( data ) ; _groups . Add ( newGroup ) ; } await saveDataAsync ( ) ; } <EOF>
fooArray . GroupBy ( x = > x . Id ) . Select ( x = > x . First ( ) ) ; <EOF>
public class LogList < T > : List < T > { public LogList ( ) : base ( ) { Debug . WriteLine ( CODE_STRING ) ; } public new void Add ( T item ) { Debug . WriteLine ( CODE_STRING ) ; base . Add ( item ) ; } public new void Remove ( T item ) { Debug . WriteLine ( CODE_STRING ) ; base . Remove ( item ) ; } public new void RemoveAt ( int index ) { Debug . WriteLine ( CODE_STRING ) ; base . RemoveAt ( index ) ; } public new void Clear ( ) { Debug . WriteLine ( CODE_STRING ) ; base . Clear ( ) ; } } <EOF>
public bool InsertUsername ( string username ) { string SQL = CODE_STRING ; var pars = new List < SQLiteParameter > { new SQLiteParameter ( CODE_STRING , username ) } ; return SQLiteUsernameDatabase . ExecuteNonQuery ( SQL , pars ) ; } <EOF>
List < Account > acctList = dictionaries [ keyString ] ; Acount account = acctList . FirstOrDefault ( a = > a . AccountName = acctName ) ; if ( account == null ) accout . Balance -= CODE_INTEGER ; <EOF>
XNamespace aw = CODE_STRING ; XNamespace fc = CODE_STRING ; XElement root = new XElement ( aw + CODE_STRING , new XAttribute ( CODE_STRING , CODE_STRING ) , /////////// I say, check out this line. new XAttribute ( XNamespace . Xmlns + CODE_STRING , CODE_STRING ) , /////////// new XElement ( fc + CODE_STRING , new XElement ( aw + CODE_STRING , CODE_STRING ) ) , new XElement ( aw + CODE_STRING , CODE_STRING ) , new XElement ( fc + CODE_STRING , CODE_STRING ) ) ; Console . WriteLine ( root ) ; <EOF>
object myObject = null ; if ( myObject != null ) { } <EOF>
public class Source { public int ExtendedDurationInWeeks { get ; set ; } } public class Destination { public DateTime ExpirationDate { get ; set ; } public Destination ( ) { ExpirationDate = DateTime . Now . Date ; } } var source = new Source { ExtendedDurationInWeeks = CODE_INTEGER } ; var destination = new Destination { ExpirationDate = DateTime . Now . Date } ; Mapper . CreateMap < Source , Destination > ( ) . AfterMap ( ( s , d ) = > d . ExpirationDate = d . ExpirationDate . AddDays ( s . ExtendedDurationInWeeks * CODE_INTEGER ) ) ; destination = Mapper . Map ( source , destination ) ; <EOF>
class MyListsOfLists { public ObjectLists AllLists { get ; set ; } } class ObjectLists { public List < Adult > Adults { get ; set ; } public List < Child > Children { get ; set ; } public List < Dog > Dogs { get ; set ; } public List < Car > Cars { get ; set ; } public List < House > Houses { get ; set ; } } class Adult { public int ID { get ; set ; } public string Name { get ; set ; } public DateTime DOB { get ; set ; } } class Child { public int ID { get ; set ; } public string Name { get ; set ; } public DateTime DOB { get ; set ; } } class Dog { public int ID { get ; set ; } public string Name { get ; set ; } public DateTime DOB { get ; set ; } } class Car { public int ID { get ; set ; } public string Name { get ; set ; } public DateTime ModelYear { get ; set ; } } class House { public int ID { get ; set ; } public string Name { get ; set ; } public DateTime Built { get ; set ; } } <EOF>
myBmp = new Bitmap ( myImg , pictureBox1 . Width , pictureBox1 . Height ) ; pictureBox1 . Image = myBmp ; <EOF>
private void RecursiveBuilder ( ref Item i , IEnumerable < Item > li ) { var item = i ; i . SubItems = ( from n in li where n . ParentId == item . Id select n ) . ToList ( ) ; i . SubItems . ForEach ( f = > RecursiveBuilder ( ref f , li ) ) ; } <EOF>
pbIndicator . Image = Resources . indicator_green ; <EOF>
enum MyEnum { foo = CODE_INTEGER , bar = CODE_INTEGER } var noOfEnums = Enum . GetNames ( typeof ( MyEnum ) ) . Length ; <EOF>
XmlSerializer serializer = new XmlSerializer ( typeof ( yourObject ) ) ; TextWriter streamWriter = new StreamWriter ( filename ) ; serializer . Serialize ( streamWriter , yourObject ) ; streamWriter . Close ( ) ; <EOF>
var directoryInfo = new DirectoryInfo ( CODE_STRING ) ; var latestFile = directoryInfo . GetFiles ( ) . Where ( f = > f . Name . StartsWith ( CODE_STRING ) ) . OrderByDescending ( f = > f . CreationTime ) . FirstOrDefault ( ) ; <EOF>
double . TryParse <EOF>
MemoryStream ms = new MemoryStream ( fileContents ) ; FileStream file = new FileStream ( filePath , FileMode . Create , FileAccess . Write ) ; ms . WriteTo ( file ) ; file . Close ( ) ; ms . Close ( ) ; <EOF>
account . ForEach ( s = > listBoxFirstname . Items . Add ( s [ CODE_INTEGER ] ) ) ; <EOF>
private class ErrorTracker { private HashSet < Control > mErrors = new HashSet < Control > ( ) ; private ErrorProvider mProvider ; public ErrorTracker ( ErrorProvider provider ) { mProvider = provider ; } public void SetError ( Control ctl , string text ) { if ( string . IsNullOrEmpty ( text ) ) mErrors . Remove ( ctl ) ; else if ( ! mErrors . Contains ( ctl ) ) mErrors . Add ( ctl ) ; mProvider . SetError ( ctl , text ) ; } public int Count { get { return mErrors . Count ; } } } <EOF>
public static void Main ( ) { uint data = CODE_INTEGER ; uint firstMask = CODE_INTEGER ; uint lastMask = CODE_INTEGER ; int ? first = null ; int ? last = null ; for ( int i = CODE_INTEGER ; i < CODE_INTEGER ; i ++ ) { if ( ( firstMask & data ) > CODE_INTEGER && first == null ) { first = i ; } if ( ( lastMask & data ) != CODE_INTEGER && last == null ) { last = i ; } firstMask = firstMask << CODE_INTEGER ; lastMask = lastMask > > CODE_INTEGER ; } last = CODE_INTEGER - last ; Console . WriteLine ( first ) ; Console . WriteLine ( last ) ; } <EOF>
p1 . InnerHtml += CODE_STRING + Doc . Paragraphs [ i ] . Range . Text + CODE_STRING ; <EOF>
Console . WriteLine ( CODE_STRING ) ; string color = Console . ReadLine ( ) ; ConsoleColor consoleColor = ConsoleColor . White ; try { consoleColor = ( ConsoleColor ) Enum . Parse ( typeof ( ConsoleColor ) , color , true ) ; } catch ( Exception ) { } Console . ForegroundColor = consoleColor ; <EOF>
public static int [ ] GetArray ( int sum , int n ) { if ( sum < n ) throw new ArgumentException ( CODE_STRING ) ; Random rnd = new Random ( ) ; sum -= n ; int [ ] w = new int [ n ] ; int sw = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < n ; i ++ ) { w [ i ] = rnd . Next ( CODE_INTEGER , CODE_INTEGER ) ; sw += w [ i ] ; } int [ ] result = new int [ n ] ; int tsum = CODE_INTEGER ; int psum = CODE_INTEGER ; for ( int i = CODE_INTEGER ; i < n ; i ++ ) { tsum += w [ i ] * sum ; result [ i ] = tsum / sw - psum ; psum += result [ i ] ; } for ( int i = CODE_INTEGER ; i < n ; i ++ ) result [ i ] ++ ; return result ; } <EOF>
import org . openqa . selenium . Keys ; selenium . type ( CODE_STRING , Keys . ENTER ) ; selenium . type ( CODE_STRING , CODE_STRING + Keys . ENTER ) ; <EOF>
this . _data [ CODE_INTEGER ] = ( byte ) ( Distance > > CODE_INTEGER ) ; <EOF>
MySqlScript script = new MySqlScript ( conn , query ) ; script . Delimiter = CODE_STRING ; script . Execute ( ) ; <EOF>
float maxDragX = CODE_INTEGER ; float maxDragY = CODE_INTEGER ; Vector3 mousePosition = new Vector3 ( eventData . position . x , eventData . position . y , distance ) ; transform . position = mousePosition ; if ( transform . parent . gameObject == partsPanel ) { transform . SetParent ( dragLayer . transform ) ; } if ( transform . parent . gameObject == buildBoard ) { if ( transform . position . x >= maxDragX ) transform . position = new Vector3 ( maxDragX , mousePosition . y , distance ) ; if ( transform . position . y >= maxDragY ) transform . position = new Vector3 ( mousePosition . x , maxDragY , distance ) ; } <EOF>
public class ChangeWallpaper { [ DllImport ( CODE_STRING , CharSet = CharSet . Auto ) ] static extern int SystemParametersInfo ( int uAction , int uParam , string lpvParam , int fuWinIni ) ; public static void Main ( ) { Bitmap bm = new Bitmap ( Image . FromFile ( CODE_STRING ) ) ; bm . Save ( CODE_STRING , ImageFormat . Bmp ) ; SystemParametersInfo ( CODE_INTEGER , CODE_INTEGER , CODE_STRING , CODE_INTEGER | CODE_INTEGER ) ; } } <EOF>
public Dictionary < string , string > NewEntryDictionary ( ) { return Enum . GetNames ( typeof ( Suits ) ) . ToDictionary ( name = > name , name = > CODE_STRING ) ; } <EOF>
var db = DatabaseContext . FromContext ( ) ; var result = ( from a in db . TableA join b in db . TableB on a . ID equals b . TableAID select new { AID = a . ID , AName = a . Name , AType = a . Type , BName = b . Name } ) . ToList ( ) ; <EOF>
private void OnKeyPress ( object sender , System . Windows . Forms . KeyPressEventArgs e ) if ( ( ( Control . ModifierKeys & Keys . Control ) == Keys . Control ) && ( e . KeyChar == CODE_CHAR || e . KeyChar == CODE_CHAR ) ) { mf . Show ( ) ; } <EOF>
var filteredList = list . Select ( x = > new firstClass { Id = x . Id , Elements = x . Elements . Where ( y = > y . Is ) . ToList ( ) } ) . Where ( x = > x . Elements . Count > CODE_INTEGER ) ; <EOF>
static public double [ , ] Test ( ) { double [ , ] xy = new double [ , ] { { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } , { CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER } } ; int NPoints = CODE_INTEGER ; int NVars = CODE_INTEGER ; int NClasses = CODE_INTEGER ; int info = CODE_INTEGER ; double [ , ] w = new double [ CODE_INTEGER , CODE_INTEGER ] ; alglib . lda . fisherldan ( xy , NPoints , NVars , NClasses , ref info , ref w ) ; return w ; } <EOF>
using ( MySqlConnection connection = new MySqlConnection ( MyConnectionString ) ) using ( MySqlCommand cmd = connection . CreateCommand ( ) ) { connection . Open ( ) ; cmd . CommandText = CODE_STRING ; MySqlDataAdapter adap = new MySqlDataAdapter ( cmd ) ; DataSet ds = new DataSet ( ) ; adap . Fill ( ds ) ; dataGridView1 . DataSource = ds . Tables [ CODE_INTEGER ] . DefaultView ; } <EOF>
Rectangle rectangle = new Rectangle ( ) { Width = e . EndPoint . X - e . StartPoint . X , Height = e . EndPoint . Y - e . StartPoint . Y , Fill = new SolidColorBrush ( Colors . Purple ) } ; Canvas . SetLeft ( rectangle , e . StartPoint . X ) ; Canvas . SetTop ( rectangle , e . StartPoint . Y ) ; PictureCanvas . Children . Add ( rectangle ) ; <EOF>
web . config <EOF>
var context = new NorthwindEntities ( new Uri ( CODE_STRING ) ) ; var products = context . Alphabetical_list_of_products . Execute ( ) ; foreach ( var product in products ) { Console . WriteLine ( product . ProductName ) ; } <EOF>
memObjects . ForEach ( x = > x . ModifiedAt . AddSeconds ( memObjects . Count ( y = > y . Serial == x . Serial && y . ErrorCode == x . ErrorCode ) ) ) ; <EOF>
[ DllImport ( CODE_STRING , SetLastError = true ) ] static extern int ProcessIdToSessionId ( int pid , ref int session ) ; <EOF>
protected void Page_Load ( . . ) { String strScript = CODE_STRING ; if ( condition ) { Page . ClientScript . RegisterStartupScript ( this . GetType ( ) , CODE_STRING , strScript , true ) ; } } <EOF>
var text = CODE_STRING ; var newText = text . replace ( / ( < ( [ ^ > ] + ) > ) / ig , CODE_STRING ) ; <EOF>
var al = Duplicate1 . ToLookup ( x = > x ) ; var bl = Duplicate2 . ToLookup ( x = > x ) ; var result = al . Join ( bl , agrp = > agrp . Key , bgrp = > bgrp . Key , ( agrp , bgrp ) = > agrp . Count ( ) > bgrp . Count ( ) ? agrp . Take ( agrp . Count ( ) - bgrp . Count ( ) ) : bgrp . Take ( bgrp . Count ( ) - agrp . Count ( ) ) ) . SelectMany ( x = > x ) ; <EOF>
var childControl = this . ListView . Children . OfType < Button > ( ) . Single ( f = > f . Content == CODE_STRING ) ; <EOF>
var picBox = TabControl1 . SelectedTab . Controls . OfType < PictureBox > ( ) . First ( ) ; <EOF>
byte [ ] byt = Encoding . UTF8 . GetBytes ( textbox1 . Text ) ; <EOF>
string [ ] arrstr = str . Reverse ( ) . Take ( CODE_INTEGER ) . Reverse ( ) . ToArray ( ) ; <EOF>
File . Move ( CODE_STRING , CODE_STRING ) ; <EOF>
protected override void OnNavigatedTo ( NavigationEventArgs e ) { if ( e . NavigationMode != NavigationMode . Back ) { } } <EOF>
public HttpResponseMessage Post ( JobRequest request ) { var job = new Job { Name = request . Name , Candidates = new Collection < Candidate > ( ) } ; foreach ( var candidate in request . Candidates ) { var c = new Candidate { Id = candidate . Id } ; context . Candidates . Attach ( c ) ; job . Candidates . Add ( c ) ; } context . Jobs . Add ( job ) ; context . SaveChanges ( ) ; } <EOF>
ddlst1 . Items [ k ] . Attributes . CssStyle . Add ( CODE_STRING ) <EOF>
streambit = arrayint . Select ( i = > ( byte ) i ) . ToArray ( ) ; <EOF>
menuItems = UnitOfWork . CurrentSession . QueryOver < TopMenuItem > ( ) . JoinAlias ( i = > i . Action , ( ) = > ua , JoinType . LeftOuterJoin ) . JoinAlias ( ( ) = > ua . Roles , ( ) = > ro , JoinType . LeftOuterJoin ) . List ( ) ; <EOF>
string input = CODE_STRING ; string pattern = CODE_STRING ; string [ ] substrings = Regex . Split ( input , pattern ) ; foreach ( string match in substrings ) { Console . WriteLine ( CODE_STRING , match ) ; } <EOF>
using ( SqlConnection con = new SqlConnection ( connstring ) ) using ( SqlCommand com = new SqlCommand ( ) ) using ( SqlDataAdapter da = new SqlDataAdapter ( ) ) { com . Connection = con ; } <EOF>
Button btn = new Button ( ) ; btn . Name = btn . Text = string . Format ( CODE_STRING , i + CODE_INTEGER ) ; btn . Margin = new Padding ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; flowLayoutPanel1 . Controls . Add ( btn ) ; <EOF>
public Group this [ int groupnum ] { get ; } <EOF>
commonImageLoader ( ref bkgrSource [ CODE_INTEGER ] , ref bkgrBANK [ CODE_INTEGER ] ) ; private void commonImageLoader ( ref string source , ref Texture2D destination ) { if ( ! string . IsNullOrEmpty ( source ) ) { fileName = source ; using ( fileStream = new FileStream ( @fileName , FileMode . Open ) ) { destination = Texture2D . FromStream ( GraphicsDevice , fileStream ) ; } } } <EOF>
Protected Sub Page_Unload ( ByVal sender As Object , ByVal e As System . EventArgs ) Handles Me . Unload cr . Close ( ) cr . Dispose ( ) End Sub <EOF>
WMI Delphi Code Creator <EOF>
protected void Af_FilterButtonClicked ( object sender , EventArgs args ) { if ( ! string . isNullOrWhiteSpace ( jobFilter . SelectedCountry ) ) { var data = YourDataSource . Where ( c = > c . YourCountryField == jobFiler . SelectedCountry ) . ToList ( ) ; YourGrid . DataSource = data ; YourGrid . DataBind ( ) ; } } <EOF>
[ SetUp ] public void RunBeforeAllFixtures ( ) { ServiceLocator . SetLocatorProvider ( ( ) = > SimpleIoc . Default ) ; _vm = new TestViewModel ( ) ; } <EOF>
list = list . Where ( ( entry , i ) = > i == CODE_INTEGER || entry . Item1 != list [ i - CODE_INTEGER ] . Item1 ) . ToList ( ) ; <EOF>
private static void Main ( string [ ] args ) { using ( Document doc = new Document ( PageSize . A4 , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) { using ( PdfWriter pw = PdfWriter . GetInstance ( doc , new FileStream ( CODE_STRING , FileMode . Create ) ) ) { pw . SetTagged ( ) ; pw . UserProperties = true ; doc . Open ( ) ; pw . PdfVersion = PdfWriter . VERSION_1_7 ; Image img = Image . GetInstance ( CODE_STRING ) ; img . SetAbsolutePosition ( CODE_INTEGER , CODE_INTEGER ) ; img . Alt = CODE_STRING ; doc . Add ( img ) ; doc . Close ( ) ; } } } <EOF>
using System ; using System . Windows ; using System . Windows . Forms ; namespace Foo { public class WindowUtility { public static void MoveToMonitor ( Window window , int monitorId , bool maximize ) { Screen [ ] screens = Screen . AllScreens ; int screenId = monitorId - CODE_INTEGER ; if ( screens . Length > CODE_INTEGER && screenId < screens . Length ) { var screen = screens [ screenId ] ; var area = screen . WorkingArea ; if ( maximize ) { window . Left = area . Left ; window . Top = area . Top ; window . Width = area . Width ; window . Height = area . Height ; } else { window . Left = area . Left ; window . Top = area . Top ; } } } } } <EOF>
Label1 . ToolTip = CODE_STRING ; <EOF>
var doc = XDocument . Parse ( docStr ) ; var commentValue = doc . Nodes ( ) . OfType < XComment > ( ) . First ( ) . Value ; <EOF>
void WriteToXls ( string fromfilePath , string targetFileName ) { if ( ! String . IsNullOrEmpty ( fromfilePath ) ) { HttpResponse response = HttpContext . Current . Response ; response . Clear ( ) ; response . Charset = CODE_STRING ; response . ContentType = CODE_STRING ; response . AddHeader ( CODE_STRING , string . Format ( CODE_STRING , targetFileName ) ) ; response . BinaryWrite ( File . ReadAllBytes ( fromfilePath ) ) ; response . End ( ) ; } } <EOF>
variable . Split ( new char [ ] { CODE_CHAR } , CODE_INTEGER ) <EOF>
private readonly int readOnlyExample ; public YourClassConstructor ( ) { this . readOnlyExample = CODE_INTEGER ; } <EOF>
INSERT INTO tableName ( Col ) VALUES ( CAST ( : p1 as CODE_STRING ) ) <EOF>
{ label name } . FontSize *= ( double ) e . NewSize . Height / ( double ) e . PreviousSize . Height ; <EOF>
Height = CODE_STRING <EOF>
var p = new System . Diagnostics . Process ( ) ; p . StartInfo = new System . Diagnostics . ProcessStartInfo { FileName = CODE_STRING , UseShellExecute = true } ; p . Start ( ) ; <EOF>
PathText . Focus ( ) ; PathText . Select ( PathText . Text . Length , CODE_INTEGER ) ; <EOF>
/// <summary>This method does something funky.</summary> public void Foo ( ) { } <EOF>
BLANK LINE [ [ TO = Fax Number or Email address ] ] [ [ SUBJECT = Whatever you want the subject to be ] ] <EOF>
public static void Update ( ) { if ( _sheduledSounds != null && _sheduledSounds . Count > CODE_INTEGER ) { if ( _sheduledSounds . Peek ( ) . State == SoundState . Stopped ) { _sheduledSounds . Dequeue ( ) ; _sheduledSounds . Peek ( ) . Play ( ) ; } } } <EOF>
string [ ] tags = new [ ] { CODE_STRING , CODE_STRING } ; string queryRange = CODE_STRING + string . Join ( CODE_STRING , tags ) + CODE_STRING ; var res = session . Advanced . LuceneQuery < Question > ( ) . Where ( CODE_STRING + queryRange ) . ToList ( ) ; <EOF>
private void button1_Click ( object sender , EventArgs e ) { webBrowser1 . DocumentText = htmlMessageBody ( yourdataGridView ) . ToString ( ) ; } <EOF>
var storyboard = new Storyboard ( ) ; var totalDuration = TimeSpan . Zero ; for ( . . . ) { var rotation = new AxisAngleRotation3D ( axis , angle ) ; var transform = new RotateTransform3D ( rotation , new Point3D ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ) ; var duration = TimeSpan . FromMilliseconds ( CODE_INTEGER ) ; var animation = new DoubleAnimation ( CODE_INTEGER , angle , duration ) ; animation . BeginTime = totalDuration ; totalDuration += duration ; Storyboard . SetTarget ( animation , rotation ) ; Storyboard . SetTargetProperty ( animation , new PropertyPath ( AxisAngleRotation3D . AngleProperty ) ) ; storyboard . Children . Add ( animation ) ; } storyboard . Begin ( ) ; <EOF>
[ DataMember ] [ XMLText ] public string Identifier { get ; set ; } <EOF>
TableCell cell = new TableCell ( ) ; cell . Controls . Add ( deleteButton ) ; r . Cells . Add ( cell ) ; <EOF>
MyProduct . DataLayer MyProduct . UI MyProduct . Tools MyProduct <EOF>
Assert . IsTrue ( ( ( IList ) expected ) . Contains ( actual ) ) ; <EOF>
var paramId = new SqlParameter { ParameterName = CODE_STRING , SqlDbType = SqlDbType . Xml , Direction = ParameterDirection . Input , Value = CODE_INTEGER } ; var paramXmlResult = new SqlParameter { ParameterName = CODE_STRING , SqlDbType = SqlDbType . Xml , Direction = ParameterDirection . Output } ; db . Database . SqlQuery < XElement > ( CODE_STRING , paramId , paramXmlResult ) . ToList ( ) ; XElement xmlResult = XElement . Parse ( paramXmlResult . Value . ToString ( ) ) ; MyData data = xmlResult . FromXElement < MyData > ( ) ; <EOF>
this . txtField . DataBindings . Add ( new System . Windows . Forms . Binding ( CODE_STRING , global :: ProjectNamespace . Properties . Settings . Default , CODE_STRING , true , System . Windows . Forms . DataSourceUpdateMode . OnPropertyChanged ) ) ; <EOF>
Navigate ( ) <EOF>
public FileStreamResult DownloadPDF ( ) { MemoryStream workStream = new MemoryStream ( ) ; using ( Document document = new Document ( ) ) { PdfWriter . GetInstance ( document , workStream ) . CloseStream = false ; document . Open ( ) ; document . SetPageSize ( PageSize . LETTER ) ; document . SetMargins ( CODE_INTEGER , CODE_INTEGER , CODE_INTEGER , CODE_INTEGER ) ; document . NewPage ( ) ; var welcomeParagraph = new Paragraph ( CODE_STRING ) ; document . Add ( welcomeParagraph ) ; document . Close ( ) ; } workStream . Position = CODE_INTEGER ; FileStreamResult fileResult = new FileStreamResult ( workStream , CODE_STRING ) ; fileResult . FileDownloadName = CODE_STRING ; return fileResult ; } <EOF>
class Node < T , TChild > { . . . } Node < Document , Node < Paragraph , Node < Line , Word > > > <EOF>
var table = document . getElementById ( ' mTable ' ) ; <EOF>
public T Evaluate < T > ( T x , T y ) { switch ( Operation ) { case BinaryOp . Add : return Operator . Add ( x , y ) ; case BinaryOp . Subtract : return Operator . Subtract ( x , y ) ; . . . etc <EOF>
var status = queryParams . FirstOrDefault ( q = > q . Key == CODE_STRING ) . Value ; var entity = queryParams . FirstOrDefault ( q = > q . Key == CODE_STRING ) . Value ; var start = queryParams . FirstOrDefault ( q = > q . Key == CODE_STRING ) . Value ; if ( ! string . IsNullOrEmpty ( status ) ) { query . Where ( r = > r . RowStatus == Convert . ToInt32 ( status ) ) ; } if ( ! string . IsNullOrEmpty ( entity ) ) { query . Where ( r = > r . EntityType == entity ) ; } if ( ! string . IsNullOrEmpty ( start ) ) { query . Skip ( Convert . ToInt32 ( start ) ) ; } var count = query . RowCount ( ) ; var results = query . Take ( apiUser . ApiLimit ) . List ( ) . Select ( c = > _cryptography . Decrypt ( c . Json ) ) . ToList ( ) ; <EOF>
public void Impersonation ( Uri serverUri , string userToImpersonate ) { TeamFoundationIdentity identity = ims . ReadIdentity ( IdentitySearchFactor . AccountName , userToImpersonate , MembershipQuery . None , ReadIdentityOptions . None ) ; tfs_impersonated = new TfsTeamProjectCollection ( serverUri , identity . Descriptor ) ; GetAuthenticatedIdentity ( tfs_impersonated ) ; } <EOF>
private void GetUser ( string userId ) { dbr . SelectString = CODE_STRING + userId + CODE_STRING ; DataTable dt = dbr . GetTable ( ) ; if ( dt . Rows . Count > CODE_INTEGER ) { DataRow row = dt . Rows [ CODE_INTEGER ] ; lbl_name = row [ CODE_STRING ] . ToString ( ) ; lbl_gender = row [ CODE_STRING ] . ToString ( ) ; lbl_contact = row [ CODE_STRING ] . ToString ( ) ; } } <EOF>
using ( FileStream stream = File . OpenRead ( xsdFilepath ) ) { XmlReaderSettings settings = new XmlReaderSettings ( ) ; XmlSchema schema = XmlSchema . Read ( stream , OnXsdSyntaxError ) ; settings . ValidationType = ValidationType . Schema ; settings . Schemas . Add ( schema ) ; settings . ValidationEventHandler += OnXmlSyntaxError ; using ( XmlReader validator = XmlReader . Create ( xmlPath , settings ) ) { while ( validator . Read ( ) ) ; } } <EOF>
. release <EOF>
var TheOutput = ( from x in MyDC . MyTable where . . . . . let id = ( from a in MyDC . MyOtherTable where . . . . select a . ElementID ) . SingleOrDefault ( ) select new MyModel ( ) { MyPropID = id , MyPropData = ( from a in MyDC . MyOtherTable where id != null && a . ElementID == id select a . ElementData ) . SingleOrDefault ( ) } <EOF>
SomePage . aspx ? ListId = GUID <EOF>
routes . MapHttpRoute ( name : CODE_STRING , routeTemplate : CODE_STRING , defaults : new { id = RouteParameter . Optional } ) ; <EOF>
string filepath = Path . Combine ( System . IO . Path . GetDirectoryName ( System . Reflection . Assembly . GetExecutingAssembly ( ) . Location ) , CODE_STRING ) ; <EOF>
private abstract class Base1 { } private class Extend1 : Base1 { } Base1 whatTypeAmI = new Extend1 ( ) ; var t = whatTypeAmI . GetType ( ) ; if ( t == typeof ( Extend1 ) ) { Console . WriteLine ( CODE_STRING ) ; } else { Console . WriteLine ( CODE_STRING ) ; } } <EOF>
foreach ( Telerik . WinControls . UI . GridViewRowInfo row in RadGrid . Rows ) { foreach ( Telerik . WinControls . UI . GridViewCellInfo cell in row . Cells ) { } } <EOF>
protected override void OnInit ( EventArgs e ) { View view1 = new View ( ) ; View view2 = new View ( ) ; View view3 = new View ( ) ; Label l1 = new Label ( ) ; Label l2 = new Label ( ) ; Label l3 = new Label ( ) ; l1 . Text = CODE_STRING ; l2 . Text = CODE_STRING ; l3 . Text = CODE_STRING ; view1 . Controls . Add ( l1 ) ; view2 . Controls . Add ( l2 ) ; view3 . Controls . Add ( l3 ) ; MultiView1 . Views . Add ( view1 ) ; MultiView1 . Views . Add ( view2 ) ; MultiView1 . Views . Add ( view3 ) ; MultiView1 . ActiveViewIndex = CODE_INTEGER ; base . OnInit ( ) ; } protected void Page_Load ( object sender , EventArgs e ) { } protected void Button2_Click ( object sender , EventArgs e ) { MultiView1 . ActiveViewIndex ++ ; } protected void Button1_Click ( object sender , EventArgs e ) { MultiView1 . ActiveViewIndex -- ; } <EOF>
routes . MapRoute ( CODE_STRING , CODE_STRING , new { controller = CODE_STRING , action = CODE_STRING , val = CODE_STRING , id = UrlParameter . Optional , id2 = UrlParameter . Optional } <EOF>
email . Close ( ) ; GC . WaitForPendingFinalizers ( ) ; GC . Collect ( ) ; GC . WaitForPendingFinalizers ( ) ; GC . Collect ( ) ; <EOF>
var dialog = new OpenFileDialog ( ) ; if ( dialog . ShowDialog ( ) == DialogResult . OK ) { var extension = Path . GetExtension ( dialog . FileName ) ; } <EOF>
Answer a = new Answer ( ) ; a . QuestionID = dr [ CODE_STRING ] . ToString ( ) ; a . CorrectAnswer = dr [ CODE_STRING ] . ToString ( ) ; a . UserAnswer = answerDropDownList . SelectedValue . ToString ( ) ; ArrayList al = ( ArrayList ) Session [ CODE_STRING ] ; var oldAnswer = al . ToArray ( ) . Where ( ans = > ( ans as Answer ) . QuestionID == a . QuestionID ) ; if ( oldAnswer . Count ( ) != CODE_INTEGER ) { a = oldAnswer . FirstOrDefault ( ) as Answer ; a . CorrectAnswer = dr [ CODE_STRING ] . ToString ( ) ; a . UserAnswer = answerDropDownList . SelectedValue . ToString ( ) ; } else { al . Add ( a ) ; } <EOF>
var str = CODE_STRING var match = Regex . Match ( str , CODE_STRING ) ; Console . WriteLine ( match . Groups [ CODE_STRING ] ) ; <EOF>
public class InMemoryDatabase { private Dictionary < Type , IEnumerable > _hashSets = new Dictionary < Type , IEnumerable > ( ) ; public HashSet < T > GetCollection < T > ( ) { Type t = typeof ( T ) ; if ( ! _hashSets . ContainsKey ( t ) ) { _hashSets [ t ] = new HashSet < T > ( ) ; } return ( _hashSets [ t ] as HashSet < T > ) ; } } <EOF>
System . dll System . Xml . dll <EOF>
private Lazy < int > lazyGetSum ; public MyClass ( ) { lazyGetSum = new Lazy < int > ( new Func < int > ( ( ) = > X + Y ) ) ; } <EOF>
int numberOdRows = int32 . Parse ( NoRows . Text ) ; int numberOdColumns = int32 . Parse ( NoCols . Text ) ; StackPanel _stack0 = new StackPanel { orientation = Orientation . Vertical } ; for ( int i = CODE_INTEGER ; i < numberOdRows ; i ++ ) { StackPanel _stack1 = new StackPanel { orientation = Orientation . Horizontal } ; for ( int j = CODE_INTEGER ; i < numberOdColumns ; i ++ ) { image ; _stack1 . Children . Add ( image ) image . ToolTip = CODE_STRING + i . ToString ( ) + CODE_STRING + j . ToString ( ) + CODE_STRING ; } _stack0 . Children . Add ( _stack1 ) } <EOF>
teamScoreDict . ToDictionary ( k = > k . Key , v = > v . Value . Sum ( ) ) <EOF>
ObservableCollection < T > <EOF>
Process . Start ( CODE_STRING ) ; <EOF>
textbox . SelectAll ( ) ; <EOF>
members = list ( c . __dict__ ) # or c . __dict__ . keys ( ) <EOF>
reportViewer . LocalReport . ExecuteReportInCurrentAppDomain ( System . Reflection . Assembly . GetExecutingAssembly ( ) . Evidence ) ; <EOF>
