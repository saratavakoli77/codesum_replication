comment_a,comment_b,source_a,source_b
This layer creates a convolution kernel that is convolved with the layer input over a single spatial (or temporal) dimension to produce a tensor of outputs.,Applies a 1D convolution over an input signal composed of several input planes.,https://www.tensorflow.org/api_docs/python/tf/keras/layers/Conv1D,https://pytorch.org/docs/stable/nn.html#conv1d
Applies the sigmoid activation function.,Applies the element-wise function:,https://www.tensorflow.org/api_docs/python/tf/keras/activations/sigmoid,https://pytorch.org/docs/stable/nn.html#sigmoid
Long Short-Term Memory layer - Hochreiter 1997.,Applies a multi-layer long short-term memory (LSTM) RNN to an input sequence.,https://www.tensorflow.org/api_docs/python/tf/compat/v1/keras/layers/LSTM,https://pytorch.org/docs/stable/nn.html#lstm
Global max pooling operation for temporal data.,Applies a 1D max pooling over an input signal composed of several input planes.,https://www.tensorflow.org/api_docs/python/tf/keras/layers/GlobalMaxPool1D,https://pytorch.org/docs/stable/nn.html#maxpool1d
Hyperbolic tangent activation function.,Applies the Tanh function element-wise,https://www.tensorflow.org/api_docs/python/tf/keras/activations/tanh,https://pytorch.org/docs/stable/nn.html#hardtanh
Softmax converts a real vector to a vector of categorical probabilities.,Applies the Softmax function to an n-dimensional input Tensor rescaling them so that the elements of the n-dimensional output Tensor lie in the range [0,1] and sum to 1.,https://www.tensorflow.org/api_docs/python/tf/keras/activations/softmax,https://pytorch.org/docs/stable/nn.html#torch.nn.Softmax
Computes the cross-entropy loss between true labels and predicted labels.,Creates a criterion that measures the Binary Cross Entropy between the target and the output,https://www.tensorflow.org/api_docs/python/tf/keras/losses/BinaryCrossentropy,https://pytorch.org/docs/stable/nn.html#torch.nn.BCELoss
Upsampling layer for 1D inputs.,Upsamples a given multi-channel 1D (temporal), 2D (spatial) or 3D (volumetric) data.,https://www.tensorflow.org/api_docs/python/tf/keras/layers/UpSampling1D,https://pytorch.org/docs/stable/nn.html#torch.nn.Upsample
Batch Normalization layer from http://arxiv.org/abs/1502.03167.,Applies Batch Normalization over a 2D or 3D input (a mini-batch of 1D inputs with optional additional channel dimension) as described in the paper Batch Normalization: Accelerating Deep Network Training by Reducing Internal Covariate Shift .,https://www.tensorflow.org/api_docs/python/tf/compat/v1/layers/BatchNormalization,https://pytorch.org/docs/stable/nn.html#torch.nn.BatchNorm1d
Clips tensor values to a maximum L2-norm.,Clips gradient norm of an iterable of parameters.,https://www.tensorflow.org/api_docs/python/tf/clip_by_norm,https://pytorch.org/docs/stable/nn.html#torch.nn.utils.clip_grad_norm_
Extracts n characters from the stream and stores them in the array pointed to by s.,Reads text from a character-input stream, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.,http://www.cplusplus.com/reference/istream/istream/read/,https://docs.oracle.com/javase/7/docs/api/java/io/BufferedReader.html
Maps are associative containers that store elements formed by a combination of a key value and a mapped value, following a specific order.,An object that maps keys to values. A map cannot contain duplicate keys; each key can map to at most one value.,http://www.cplusplus.com/reference/map/map/,https://docs.oracle.com/javase/7/docs/api/java/util/Map.html
Lists are sequence containers that allow constant time insert and erase operations anywhere within the sequence, and iteration in both directions.,An ordered collection (also known as a sequence). The user of this interface has precise control over where in the list each element is inserted.,http://www.cplusplus.com/reference/list/list/,https://docs.oracle.com/javase/7/docs/api/java/util/List.html
queues are a type of container adaptor, specifically designed to operate in a FIFO context (first-in first-out), where elements are inserted into one end of the container and extracted from the other.,
Sets are containers that store unique elements following a specific order.,A collection that contains no duplicate elements.,http://www.cplusplus.com/reference/set/set/,https://docs.oracle.com/javase/7/docs/api/java/util/Set.html
Stacks are a type of container adaptor, specifically designed to operate in a LIFO context (last-in first-out), where elements are inserted and extracted only from one end of the container.,The Stack class represents a last-in-first-out (LIFO) stack of objects.,http://www.cplusplus.com/reference/stack/stack/,https://docs.oracle.com/javase/7/docs/api/java/util/Stack.html
Vectors are sequence containers representing arrays that can change in size.,The Vector class implements a growable array of objects.,http://www.cplusplus.com/reference/vector/vector/,https://docs.oracle.com/javase/7/docs/api/
Returns the square root of a Double value.,Returns the correctly rounded positive square root of a double value.,https://www.scala-lang.org/api/current/scala/math/index.html#sqrt(x:Double):Double,https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
Returns the square root of the sum of the squares of both given Double values without intermediate underflow or overflow.,Returns sqrt(x2 +y2) without intermediate overflow or underflow.,https://www.scala-lang.org/api/current/scala/math/index.html#hypot(x:Double,y:Double):Double,https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html
Converts rectangular coordinates (x, y) to polar (r, theta).,Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta).,https://www.scala-lang.org/api/current/scala/math/index.html#atan2(y:Double,x:Double):Double,https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html


